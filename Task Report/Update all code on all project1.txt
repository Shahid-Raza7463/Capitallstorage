###########################################



Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php
find text auth()->user()->role_id == 11 || auth()->user()->role_id == 18

elseif (auth()->user()->role_id == 11 || auth()->user()->role_id == 18) {
      $teammember = DB::table('teammembers')->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->select('teammembers.id', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename')->distinct()->get();
      //  dd($teammember);
      $month = DB::table('timesheets')
        ->select('timesheets.month')->distinct()->get();

      $timesheetData = DB::table('timesheets')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheets.created_by')
        ->where('timesheets.created_by', $request->teammember)->where('timesheets.month', $request->month)
        ->whereYear('timesheets.date', '=', $request->year)
        ->select('timesheets.*', 'teammembers.team_member')->get();
    }



Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.ph
replace timesheeteditstore() function 


  public function timesheeteditstore(Request $request)
  {

    if (!is_numeric($request->assignment_id)) {
      $assignment = Assignmentmapping::where('assignmentgenerate_id', $request->assignment_id)
        ->select('assignment_id')
        ->first();
      // ->toArray();
      // $assignment_id = $assignment[0]['assignment_id'];
      $assignment_id = $assignment->assignment_id;
      $assignmentgenerateId = $request->assignment_id;
      $oldtimesheetdata = DB::table('timesheetusers')->where('id', $request->timesheetusersid)->first();
      // update total hour 

      if (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {

        $gettotalteamhour = DB::table('assignmentmappings')
          ->leftJoin(
            'assignmentteammappings',
            'assignmentteammappings.assignmentmapping_id',
            'assignmentmappings.id',
          )
          ->where(
            'assignmentmappings.assignmentgenerate_id',
            $oldtimesheetdata->assignmentgenerate_id
          )
          ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
          ->select('assignmentteammappings.*')
          ->first();



        $gettotalteamhournew = DB::table('assignmentmappings')
          ->leftJoin(
            'assignmentteammappings',
            'assignmentteammappings.assignmentmapping_id',
            'assignmentmappings.id',
          )
          ->where(
            'assignmentmappings.assignmentgenerate_id',
            $request->assignment_id
          )
          ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
          ->select('assignmentteammappings.*')
          ->first();




        if ($gettotalteamhour) {
          if ($gettotalteamhour->teamhour == null) {
            $gettotalteamhour->teamhour = 0;
          }
          $finalresult =  $gettotalteamhour->teamhour - $request->hour;
          $totalteamhourupdate = DB::table('assignmentteammappings')
            ->where('id', $gettotalteamhour->id)
            // ->get();
            ->update(['teamhour' =>  $finalresult]);
        }
        if ($gettotalteamhournew) {
          if ($gettotalteamhournew->teamhour == null) {
            $gettotalteamhournew->teamhour = 0;
          }
          $finalresult =  $gettotalteamhournew->teamhour + $request->hour;
          $totalteamhourupdate = DB::table('assignmentteammappings')
            ->where('id', $gettotalteamhournew->id)
            // ->get();
            ->update(['teamhour' =>  $finalresult]);
        }
      }

      if (auth()->user()->role_id == 13) {
        $assignmentdata = DB::table('assignmentmappings')
          ->where('assignmentgenerate_id', $assignmentgenerateId)
          ->first();
        $assignmentdataold = DB::table('assignmentmappings')
          ->where('assignmentgenerate_id', $oldtimesheetdata->assignmentgenerate_id)
          ->first();

        // old assignment hour subtract 
        if ($assignmentdataold->leadpartner == auth()->user()->teammember_id) {
          if ($assignmentdataold->leadpartnerhour == null) {
            $assignmentdataold->leadpartnerhour = 0;
          }
          $finalresultleadpatner =  $assignmentdataold->leadpartnerhour + $oldtimesheetdata->hour;
          $totalteamhourupdate = DB::table('assignmentmappings')
            ->where('id', $assignmentdataold->id)
            // ->get();
            ->update(['leadpartnerhour' => $finalresultleadpatner]);
        }
        if ($assignmentdataold->otherpartner == auth()->user()->teammember_id) {
          if ($assignmentdataold->otherpartnerhour == null) {
            $assignmentdataold->otherpartnerhour = 0;
          }
          $finalresultotherpatner =  $assignmentdataold->otherpartnerhour - $oldtimesheetdata->hour;
          $totalteamhourupdate = DB::table('assignmentmappings')
            ->where('id', $assignmentdataold->id)
            // ->get();
            ->update(['otherpartnerhour' => $finalresultotherpatner]);
        }

        // new assignment hour add
        if ($assignmentdata->leadpartner == auth()->user()->teammember_id) {
          if ($assignmentdata->leadpartnerhour == null) {
            $assignmentdata->leadpartnerhour = 0;
          }
          $finalresultleadpatner =  $assignmentdata->leadpartnerhour + $request->hour;
          $totalteamhourupdate = DB::table('assignmentmappings')
            ->where('id', $assignmentdata->id)
            // ->get();
            ->update(['leadpartnerhour' => $finalresultleadpatner]);
        }
        if ($assignmentdata->otherpartner == auth()->user()->teammember_id) {
          if ($assignmentdata->otherpartnerhour == null) {
            $assignmentdata->otherpartnerhour = 0;
          }
          $finalresultotherpatner =  $assignmentdata->otherpartnerhour + $request->hour;
          $totalteamhourupdate = DB::table('assignmentmappings')
            ->where('id', $assignmentdata->id)
            // ->get();
            ->update(['otherpartnerhour' => $finalresultotherpatner]);
        }
      }
    }

    if (is_numeric($request->assignment_id)) {
      $assignment_id = $request->assignment_id;
      $getassignmentgenerateId = DB::table('timesheetusers')->where('id', $request->timesheetusersid)->first();
      $assignmentgenerateId = $getassignmentgenerateId->assignmentgenerate_id;

      $oldtimesheetdata = DB::table('timesheetusers')->where('id', $request->timesheetusersid)->first();
      // update total hour 
      if ($oldtimesheetdata->hour != $request->hour) {
        if (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {
          $gettotalteamhour = DB::table('assignmentmappings')
            ->leftJoin(
              'assignmentteammappings',
              'assignmentteammappings.assignmentmapping_id',
              'assignmentmappings.id',
            )
            ->where(
              'assignmentmappings.assignmentgenerate_id',
              $oldtimesheetdata->assignmentgenerate_id
            )
            ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
            ->select('assignmentteammappings.*')
            ->first();
          if ($gettotalteamhour) {
            $totalteamhour = $gettotalteamhour->teamhour;
            $subtractoldhour =  $totalteamhour - $oldtimesheetdata->hour;
            $finalresult =  $subtractoldhour + $request->hour;

            $totalteamhourupdate = DB::table('assignmentteammappings')
              ->where('id', $gettotalteamhour->id)
              // ->get();
              ->update(['teamhour' =>  $finalresult]);
          }
        }
        if (auth()->user()->role_id == 13) {
          $assignmentdata = DB::table('assignmentmappings')
            ->where('assignmentgenerate_id', $oldtimesheetdata->assignmentgenerate_id)
            ->first();

          if ($assignmentdata->leadpartner == auth()->user()->teammember_id) {
            $subtractoldhour =  $assignmentdata->leadpartnerhour - $oldtimesheetdata->hour;
            $finalresultleadpatner =  $subtractoldhour + $request->hour;
            $totalteamhourupdate = DB::table('assignmentmappings')
              ->where('id', $assignmentdata->id)
              // ->get();
              ->update(['leadpartnerhour' => $finalresultleadpatner]);
          }
          if ($assignmentdata->otherpartner == auth()->user()->teammember_id) {
            $subtractoldhour =  $assignmentdata->otherpartnerhour - $oldtimesheetdata->hour;
            $finalresultotherpatner =  $subtractoldhour + $request->hour;

            $totalteamhourupdate = DB::table('assignmentmappings')
              ->where('id', $assignmentdata->id)
              // ->get();
              ->update(['otherpartnerhour' => $finalresultotherpatner]);
          }
        }
      }
    }

    try {
      $timesheetdataupdate = DB::table('timesheetusers')->where('id', $request->timesheetusersid)->first();

      // dd($assignmentgenerateId);
      DB::table('timesheets')->where('id', $timesheetdataupdate->timesheetid)->update([
        'status'   =>   3,
      ]);

      DB::table('timesheetusers')->where('id', $request->timesheetusersid)->update([
        'status'   =>   3,
        'client_id'   =>  $request->client_id,
        'assignmentgenerate_id'   =>  $assignmentgenerateId,
        'assignment_id'   =>   $assignment_id,
        'partner'   =>  $request->partner,
        'workitem'   =>   $request->workitem,
        'createdby'   =>   $request->createdby,
        'location'   =>   $request->location,
        'hour'   =>   $request->hour,
      ]);

      if ($request->status == 2) {
        DB::table('timesheetupdatelogs')->insert([
          'timesheetusers_id'   =>  $request->timesheetusersid,
          'status'   =>   3,
          'created_at' => now(),
          'updated_at' => now(),
        ]);
      }
      $output = array('msg' => 'Updated Successfully');
      // return back()->with('statuss', $output);
      return redirect()->to('rejectedlist')->with('statuss', $output);
    } catch (Exception $e) {
      DB::rollBack();
      Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
      report($e);
      $output = array('msg' => $e->getMessage());
      return back()->withErrors($output)->withInput();
    }
  }




Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\viewassignment.blade.php
find text    @if ($assignmentbudgetingDatas->status != 0)
replace    @if ($assignmentbudgetingDatas->status != 0)

                                                @if ($assignmentbudgetingDatas->status != 0)
                                                    <a id="editCompanys"
                                                        data-id="{{ $assignmentbudgetingDatas->assignmentgenerate_id }}"
                                                        data-toggle="modal" data-target="#exampleModal134">

                                                        @if ($assignmentbudgetingDatas->status == 1)
                                                            <span class="badge badge-primary">OPEN</span>
                                                        @else
                                                            <span class="badge badge-danger">CLOSED</span>
                                                        @endif
                                                    </a>
                                                @else





Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\applyleave\examleaveshow.blade.php

                                        <td><b>Leave Revert Want : </b></td>
                                        <td> {{ date('F d,Y', strtotime($applyleave->date)) }} to
                                            {{ date('F d,Y', strtotime($applyleave->to)) }}</td>







2222222222222222222222
app\Http\Controllers\ApplyleaveController.php
after this if     if ($team->name == 'Sick Leave') comment code 

 // dd($id);
        // $applyleaveteam = DB::table('leaveteams')
        //   ->leftjoin('teammembers', 'teammembers.id', 'leaveteams.teammember_id')
        //   ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        //   ->where('leaveteams.leave_id', $id)
        //   ->select('teammembers.emailid')->get();

        // if ($applyleaveteam != null) {
        //   foreach ($applyleaveteam as $applyleaveteammail) {
        //     $data = array(
        //       'emailid' =>  $applyleaveteammail->emailid,
        //       'team_member' =>  $team->team_member,
        //       'from' =>  $team->from,
        //       'to' =>  $team->to,
        //     );

        //     Mail::send('emails.applyleaveteam', $data, function ($msg) use ($data) {
        //       $msg->to($data['emailid']);
        //       $msg->subject('VSA Leave Approved');
        //     });
        //   }
        // }





22222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\index.blade.php
find text style="width: 957px;"
remove inline style 




222222222222222222222222222222222222
resources\views\backEnd\assignmentfolder\zipcreatedwaiting.blade.php
find text alert('hi');
replace this alert function 

    alert('Error occurred while fetching data');



Done yaha tak vsanew and vsademo ################################################################################################################################
app\Http\Controllers\ApplyleaveController.php
find text  $latesttimesheetsubmittedformate = Carbon::createFromFormat('Y-m-d', $latesttimesheetsubmitted->enddate);


    $latesttimesheetsubmitted = DB::table('timesheetreport')
      ->where('teamid', auth()->user()->teammember_id)
      ->latest()
      ->first();

    $latesttimesheetsubmittedformate = null;
    if ($latesttimesheetsubmitted) {
      $latesttimesheetsubmittedformate = Carbon::createFromFormat('Y-m-d', $latesttimesheetsubmitted->enddate);
    }

    // Check if the from date is in the past
    if ($latesttimesheetsubmittedformate && $latesttimesheetsubmittedformate->greaterThan($from)) {
      // Check if the from date is in the past
      if ($softwarermaked->greaterThan($from)) {
        $output = ['msg' => 'You cannot apply leave before 11-09-2023'];
        return back()->with('statuss', $output);
      }

      $rejectedtimesheet = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 2)
        ->first();


      $rejectedtimesheetformate = null;
      if ($rejectedtimesheet) {
        $rejectedtimesheetformate = Carbon::createFromFormat('Y-m-d', $rejectedtimesheet->date);
      }

      if ($rejectedtimesheetformate && $rejectedtimesheetformate->isSameDay($from)) {

        // Update total hour
        $timesheetdelete = DB::table('timesheetusers')->where('timesheetid', $rejectedtimesheet->timesheetid)->first();
        if (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {

          $gettotalteamhour = DB::table('assignmentmappings')
            ->leftJoin(
              'assignmentteammappings',
              'assignmentteammappings.assignmentmapping_id',
              'assignmentmappings.id',
            )
            ->where(
              'assignmentmappings.assignmentgenerate_id',
              $timesheetdelete->assignmentgenerate_id
            )
            ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
            ->first();

          if ($gettotalteamhour) {
            // dd($gettotalteamhour);
            $gettotalteamhour = $gettotalteamhour->teamhour;
            $finalresult =  $gettotalteamhour - $timesheetdelete->hour;

            $totalteamhourupdate = DB::table('assignmentmappings')
              ->leftJoin(
                'assignmentteammappings',
                'assignmentteammappings.assignmentmapping_id',
                'assignmentmappings.id',
              )
              ->where(
                'assignmentmappings.assignmentgenerate_id',
                $timesheetdelete->assignmentgenerate_id
              )
              ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
              // ->get();
              ->update(['teamhour' =>  $finalresult]);
          }
        }

        if (auth()->user()->role_id == 13) {
          $assignmentdata = DB::table('assignmentmappings')
            ->where('assignmentgenerate_id', $timesheetdelete->assignmentgenerate_id)
            ->first();

          $finalresultleadpatner =  $assignmentdata->leadpartnerhour - $timesheetdelete->hour;
          $finalresultotherpatner =  $assignmentdata->otherpartnerhour - $timesheetdelete->hour;

          if ($assignmentdata->leadpartner == auth()->user()->teammember_id) {
            $update2 = DB::table('assignmentmappings')
              ->where('assignmentgenerate_id', $timesheetdelete->assignmentgenerate_id)
              ->where('leadpartner', auth()->user()->teammember_id)
              ->update(['leadpartnerhour' => $finalresultleadpatner]);
          }
          if ($assignmentdata->otherpartner == auth()->user()->teammember_id) {
            $update2 = DB::table('assignmentmappings')
              ->where('assignmentgenerate_id', $timesheetdelete->assignmentgenerate_id)
              ->where('otherpartner', auth()->user()->teammember_id)
              ->update(['otherpartnerhour' => $finalresultotherpatner]);
          }
        }
        // Update total hour end 

        DB::table('timesheets')->where('id', $rejectedtimesheet->timesheetid)->update([
          'status'   => 3,
        ]);

        if ($request->leavetype == 9) {
          DB::table('timesheetusers')->where('id', $rejectedtimesheet->id)->update([
            'status'   => 3,
            'client_id'     =>    134,
            'workitem'     =>     $request->reasonleave,
            'assignmentgenerate_id' => null,
            'location'     =>     '',
            'hour'     =>     0,
            'totalhour' =>      0,
            'assignment_id'     =>     215,
            'partner'     =>     887,
          ]);
        } else {
          DB::table('timesheetusers')->where('id', $rejectedtimesheet->id)->update([
            'status'   => 3,
            'client_id'     =>    134,
            'assignmentgenerate_id' => null,
            'workitem'     =>     $request->reasonleave,
            'location'     =>     '',
            'hour'     =>     0,
            'totalhour' =>      0,
            'assignment_id'     =>     214,
            'partner'     =>     887,
          ]);
        }

        $id = DB::table('applyleaves')->insertGetId([
          'leavetype'         =>     $request->leavetype,
          'type'         =>     $request->type,
          'examtype'         =>     $request->examtype,
          'otherexam'         =>     $request->otherexam,
          'from'         =>     $request->from,
          'to'         =>     $request->to,
          'reasonleave'         =>     $request->reasonleave,
          'approver'         =>     $request->approver,
          'status'         =>    1,
          'createdby'         =>     auth()->user()->teammember_id,
          'created_at'          =>    date('Y-m-d H:i:s'),
          'updated_at'              =>    date('Y-m-d H:i:s'),
        ]);

        $output = array('msg' => 'Create Successfully');
        return back()->with('success', $output);
      } else {
        $output = ['msg' => 'You cannot apply leave before Submitted timesheet date'];
        return back()->with('statuss', $output);
      }
    }


2222222222222222222222222222222222222222222222222

app\Http\Controllers\AssignmentmappingController.php

    public function store(Request $request)
    {
        $request->validate([
            'client_id' => "required",
            'assignment_id' => "required",
            'teammember_id.*' => "required",
            'assignmentname' => "required",
            'type.*' => "required"
        ]);
        // Assignment budgeting start 
        $client_id = $request->input('client_id', null);
        $assignment_id = $request->input('assignment_id', null);
        $assignmentname = $request->input('assignmentname', null);

        if ($client_id != null && $assignment_id != null  && $assignmentname != null) {

            $data = $request->except(['_token', 'periodstart', 'periodend', 'roleassignment', 'esthours', 'stdcost', 'estcost', 'fees', 'leadpartner', 'otherpartner', 'teammember_id', 'type']);
            $data['created_by'] = auth()->user()->id;
            $clientcode = DB::table('clients')->where('id', $request->client_id)->first();
            $assignmentgenerateid = strtoupper(substr($clientcode->client_name, 0, 3));


            $assign = Assignmentbudgeting::latest()->get();

            if ($assign->isEmpty()) {
                $assignmentnumbers = '100001';
            } else {
                $assignmentgenerateall = DB::table('assignmentmappings')->pluck('assignmentgenerate_id')->toArray();

                function extractDigits($string)
                {
                    preg_match_all('/\d+/', $string, $matches);
                    return implode('', $matches[0]);
                }
                $assignmentNumbersDigits = array_map(function ($assignmentgenerate_id) {
                    return extractDigits($assignmentgenerate_id);
                }, $assignmentgenerateall);

                $minAssignmentNumber = 100001;
                $maxAssignmentNumber = 100529;

                $allPossibleAssignmentNumbers = range($minAssignmentNumber, $maxAssignmentNumber);
                $missingAssignmentNumbers = array_diff($allPossibleAssignmentNumbers, $assignmentNumbersDigits);
                unset($missingAssignmentNumbers[260]);


                // if (!empty($missingAssignmentNumbers)) {
                if (!empty($missingAssignmentNumbers)) {
                    $keys = array_keys($missingAssignmentNumbers);
                    $assignmentnumbers = $missingAssignmentNumbers[$keys[0]];
                } else {
                    // $assignmentnumb = Assignmentbudgeting::latest()->first()->assignmentnumber;
                    // dd($assignmentnumb);

                    $assignmentnumb = Assignmentbudgeting::max('assignmentnumber');

                    if ($assignmentnumb ==  null) {
                        $assignmentnumbers = '100001';
                    } else {
                        $assignmentnumbers = $assignmentnumb + 1;

                        $previouschck = DB::table('assignmentbudgetings')
                            ->where('assignmentnumber', $assignmentnumbers)
                            ->first();

                        if ($previouschck != null) {
                            $output = array('msg' => 'You already created assignment.');
                            return back()->with('success', $output);
                        }
                    }
                }
            }
            // dd($assignmentnumbers);
            $assignmentgenerate = $assignmentgenerateid . $assignmentnumbers;

            if (!empty($missingAssignmentNumbers)) {
                $previouschck = DB::table('assignmentmappings')
                    ->where('assignmentgenerate_id', $assignmentgenerate)
                    ->first();

                if ($previouschck != null) {
                    $output = array('msg' => 'You have already created assignment.');
                    return back()->with('success', $output);
                }
            }

            // Storage::disk('s3')->makeDirectory($assignmentgenerate);
            $data['assignmentgenerate_id'] = $assignmentgenerate;
            $data['assignmentnumber'] = $assignmentnumbers;


            DB::table('assignmentbudgetings')->insert([
                'client_id' => $data['client_id'],
                'assignment_id' => $data['assignment_id'],
                'assignmentname' => $data['assignmentname'],
                'duedate' => $data['duedate'],
                'created_by' => $data['created_by'],
                'assignmentgenerate_id' => $data['assignmentgenerate_id'],
                'assignmentnumber' => $data['assignmentnumber'],
                'created_at' => date('Y-m-d H:i:s'),
                'updated_at' => date('Y-m-d H:i:s')
            ]);

            $id = DB::table('assignmentmappings')->insertGetId([
                'assignmentgenerate_id'         =>     $assignmentgenerate,
                'periodstart'         =>     $request->periodstart,
                'periodend'         =>     $request->periodend,
                'year'         =>     Carbon::parse($request->periodend)->year,
                'roleassignment'                =>      $request->roleassignment,
                'assignment_id'         =>     $request->assignment_id,
                'esthours'            =>       $request->esthours,
                'leadpartner'            =>       $request->leadpartner,
                'otherpartner'            =>       $request->otherpartner,
                'stdcost'            =>       $request->stdcost,
                'estcost'            =>       $request->estcost,
                'filecreationdate'                =>       date('y-m-d'),
                'modifieddate'              =>    date('y-m-d'),
                'auditcompletiondate'                =>       date('y-m-d'),
                'documentationdate'              =>    date('y-m-d'),
                'created_at'                =>       date('y-m-d'),
                'updated_at'              =>    date('y-m-d'),
            ]);
        }
        // Assignment budgeting end


        $assignment_name = Assignment::where('id', $request->assignment_id)->select('assignment_name')->pluck('assignment_name')->first();

        $request->except(['_token']);

        if ($request->teammember_id != '0') {
            $count = count($request->teammember_id);

            // dd($count); die;
            for ($i = 0; $i < $count; $i++) {
                DB::table('assignmentteammappings')->insert([
                    'assignmentmapping_id'       =>     $id,
                    'type'       =>     $request->type[$i],
                    'teammember_id'       =>     $request->teammember_id[$i],
                    'created_at'                =>       date('y-m-d'),
                    'updated_at'              =>    date('y-m-d'),
                ]);
            }

            $clientname = Client::where('id', $request->client_id)->select('client_name', 'client_code')->first();
            $teamemailpartner = DB::table('teammembers')->where('id', $request->leadpartner)->select('emailid', 'team_member', 'staffcode')->first();
            $teamemailotherpartner = DB::table('teammembers')->where('id', $request->otherpartner)->select('emailid', 'team_member', 'staffcode')->first();

            $teamleader =    DB::table('assignmentteammappings')
                ->where('assignmentmapping_id', $id)
                ->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')
                ->select('teammembers.team_member', 'teammembers.staffcode')
                ->get();

            $teamemail = DB::table('teammembers')->wherein('id', $request->teammember_id)->select('emailid')->get();
            // Mail for employee
            foreach ($teamemail as $teammember) {
                $data = array(
                    'assignmentid' =>  $assignmentgenerate,
                    'clientname' =>  $clientname->client_name,
                    'clientcode' =>  $clientname->client_code,
                    'assignmentname' =>  $request->assignmentname,
                    'assignment_name' =>  $assignment_name,
                    'emailid' =>  $teammember->emailid,
                    'otherpatner' =>  $teamemailotherpartner,
                    'assignmentpartner' =>  $teamemailpartner,
                    'teamleader' =>  $teamleader,

                );

                $this->sendAssignmentEmail($data);
            }

            // Mail for leadpartner
            if ($request->leadpartner !=  null) {
                $data = array(
                    'assignmentid' =>  $assignmentgenerate,
                    'clientname' =>  $clientname->client_name,
                    'clientcode' =>  $clientname->client_code,
                    'assignmentname' =>  $request->assignmentname,
                    'assignment_name' =>  $assignment_name,
                    'emailid' =>  $teamemailpartner->emailid,
                    'otherpatner' =>  $teamemailotherpartner,
                    'assignmentpartner' =>  $teamemailpartner,
                    'teamleader' =>  $teamleader,

                );

                $this->sendAssignmentEmail($data);
            }

            // Mail for otherpartner
            if ($request->otherpartner !=  null) {
                $data = array(
                    'assignmentid' =>  $assignmentgenerate,
                    'clientname' =>  $clientname->client_name,
                    'clientcode' =>  $clientname->client_code,
                    'assignmentname' =>  $request->assignmentname,
                    'assignment_name' =>  $assignment_name,
                    'emailid' =>  $teamemailotherpartner->emailid,
                    'otherpatner' =>  $teamemailotherpartner,
                    'assignmentpartner' =>  $teamemailpartner,
                    'teamleader' =>  $teamleader,

                );

                $this->sendAssignmentEmail($data);
            }
        }
        // please match hare in old code me null aa raha hai kiya 
        $actionName = class_basename($request->route()->getActionname());
        $pagename = substr($actionName, 0, strpos($actionName, "Controller"));
        $id = auth()->user()->teammember_id;
        DB::table('activitylogs')->insert([
            'user_id' => $id,
            'ip_address' => $request->ip(),
            'activitytitle' => $pagename,
            'description' => 'New Assignment Mapping Added' . ' ' . '( ' . $assignment_name . ' )',
            'created_at' => date('y-m-d'),
            'updated_at' => date('y-m-d')
        ]);
        // Assignment assignmentmappings end
        $output = array('msg' => "Created Successfully <strong>Client Name:</strong> $clientname->client_name <strong>Assignment:</strong> $assignment_name <strong>Assignment Name:</strong> $request->assignmentname <strong>Assignment Id:</strong> $assignmentgenerate ");
        return redirect('assignmentbudgeting')->with('success', $output);
    }

33333333333333333333333333333333333333333333333333333333
app\Http\Controllers\AssignmentmappingController.php


    public function store(Request $request)
    {
        $request->validate([
            'client_id' => "required",
            'assignment_id' => "required",
            'teammember_id.*' => "required",
            'assignmentname' => "required",
            'type.*' => "required"
        ]);

        $client_id = $request->input('client_id');
        $assignment_id = $request->input('assignment_id');
        $assignmentname = $request->input('assignmentname');

        if ($client_id && $assignment_id && $assignmentname) {

            $data = $request->except(['_token', 'periodstart', 'periodend', 'roleassignment', 'esthours', 'stdcost', 'estcost', 'fees', 'leadpartner', 'otherpartner', 'teammember_id', 'type']);
            $data['created_by'] = auth()->user()->id;

            $clientcode = DB::table('clients')->where('id', $client_id)->value('client_name');
            $assignmentgenerateid = strtoupper(substr($clientcode, 0, 3));

            // Generate unique assignment number
            $assignmentnumbers = DB::table('assignmentbudgetings')->max('assignmentnumber');

            $assignmentnumbers = $assignmentnumbers ? $assignmentnumbers + 1 : 100001;

            $assignmentgenerate = $assignmentgenerateid . $assignmentnumbers;


            if (DB::table('assignmentmappings')->where('assignmentgenerate_id', $assignmentgenerate)->exists()) {
                return back()->with('success', ['msg' => 'You have already created assignment.']);
            }

            // Insert into assignmentbudgetings
            DB::table('assignmentbudgetings')->insert([
                'client_id' => $client_id,
                'assignment_id' => $assignment_id,
                'assignmentname' => $assignmentname,
                'duedate' => $data['duedate'],
                'created_by' => $data['created_by'],
                'assignmentgenerate_id' => $assignmentgenerate,
                'assignmentnumber' => $assignmentnumbers,
                'created_at' => now(),
                'updated_at' => now()
            ]);

            // Insert into assignmentmappings
            $id = DB::table('assignmentmappings')->insertGetId([
                'assignmentgenerate_id' => $assignmentgenerate,
                'periodstart' => $request->periodstart,
                'periodend' => $request->periodend,
                'year' => Carbon::parse($request->periodend)->year,
                'roleassignment' => $request->roleassignment,
                'assignment_id' => $assignment_id,
                'esthours' => $request->esthours,
                'leadpartner' => $request->leadpartner,
                'otherpartner' => $request->otherpartner,
                'stdcost' => $request->stdcost,
                'estcost' => $request->estcost,
                'filecreationdate' => now()->format('Y-m-d'),
                'modifieddate' => now()->format('Y-m-d'),
                'auditcompletiondate' => now()->format('Y-m-d'),
                'documentationdate' => now()->format('Y-m-d'),
                'created_at' => now(),
                'updated_at' => now()
            ]);

            $assignment_name = Assignment::where('id', $request->assignment_id)->select('assignment_name')->pluck('assignment_name')->first();


            // Insert into assignmentteammappings
            if ($request->teammember_id != '0') {
                foreach ($request->teammember_id as $key => $teammember_id) {
                    DB::table('assignmentteammappings')->insert([
                        'assignmentmapping_id' => $id,
                        'type' => $request->type[$key],
                        'teammember_id' => $teammember_id,
                        'created_at' => now(),
                        'updated_at' => now()
                    ]);
                }

                $clientname = DB::table('clients')->where('id', $client_id)->first(['client_name', 'client_code']);
                $teamemailpartner = DB::table('teammembers')->where('id', $request->leadpartner)->first(['emailid', 'team_member', 'staffcode']);
                $teamemailotherpartner = DB::table('teammembers')->where('id', $request->otherpartner)->first(['emailid', 'team_member', 'staffcode']);

                $teamleader = DB::table('assignmentteammappings')
                    ->where('assignmentmapping_id', $id)
                    ->join('teammembers', 'teammembers.id', '=', 'assignmentteammappings.teammember_id')
                    ->select('teammembers.team_member', 'teammembers.staffcode')
                    ->get();

                $teamemails = DB::table('teammembers')->whereIn('id', $request->teammember_id)->pluck('emailid');

                // Mail for employees
                foreach ($teamemails as $emailid) {
                    $this->sendAssignmentEmail([
                        'assignmentid' => $assignmentgenerate,
                        'clientname' => $clientname->client_name,
                        'clientcode' => $clientname->client_code,
                        'assignmentname' => $assignmentname,
                        'assignment_name' => Assignment::where('id', $assignment_id)->value('assignment_name'),
                        'emailid' => $emailid,
                        'otherpatner' => $teamemailotherpartner,
                        'assignmentpartner' => $teamemailpartner,
                        'teamleader' => $teamleader
                    ]);
                }

                // Mail for leadpartner
                if ($request->leadpartner) {
                    $this->sendAssignmentEmail([
                        'assignmentid' => $assignmentgenerate,
                        'clientname' => $clientname->client_name,
                        'clientcode' => $clientname->client_code,
                        'assignmentname' => $assignmentname,
                        'assignment_name' => Assignment::where('id', $assignment_id)->value('assignment_name'),
                        'emailid' => $teamemailpartner->emailid,
                        'otherpatner' => $teamemailotherpartner,
                        'assignmentpartner' => $teamemailpartner,
                        'teamleader' => $teamleader
                    ]);
                }

                // Mail for otherpartner
                if ($request->otherpartner) {
                    $this->sendAssignmentEmail([
                        'assignmentid' => $assignmentgenerate,
                        'clientname' => $clientname->client_name,
                        'clientcode' => $clientname->client_code,
                        'assignmentname' => $assignmentname,
                        'assignment_name' => Assignment::where('id', $assignment_id)->value('assignment_name'),
                        'emailid' => $teamemailotherpartner->emailid,
                        'otherpatner' => $teamemailotherpartner,
                        'assignmentpartner' => $teamemailpartner,
                        'teamleader' => $teamleader
                    ]);
                }
            }

            // Log activity
            $actionName = class_basename($request->route()->getActionName());
            $pagename = substr($actionName, 0, strpos($actionName, "Controller"));
            $id = auth()->user()->teammember_id;

            DB::table('activitylogs')->insert([
                'user_id' => $id,
                'ip_address' => $request->ip(),
                'activitytitle' => $pagename,
                'description' => 'New Assignment Mapping Added ( ' . Assignment::where('id', $assignment_id)->value('assignment_name') . ' )',
                'created_at' => now(),
                'updated_at' => now()
            ]);

            $output = [
                'msg' => "Created Successfully <strong>Client Name:</strong> {$clientname->client_name} <strong>Assignment:</strong> {$assignment_name} <strong>Assignment Name:</strong> {$assignmentname} <strong>Assignment Id:</strong> {$assignmentgenerate}"
            ];
            return redirect('assignmentbudgeting')->with('success', $output);
        }
    }



    function sendAssignmentEmail($data)
    {
        Mail::send('emails.assignmentassign', $data, function ($msg) use ($data) {
            $msg->to($data['emailid']);
            $msg->subject('VSA New Assignment Assigned || ' . $data['assignmentname'] . ' / ' . $data['assignmentid']);
        });
    }

