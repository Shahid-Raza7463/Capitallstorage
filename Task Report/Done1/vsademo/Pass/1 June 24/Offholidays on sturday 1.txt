Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php
replace create() function


  public function create(Request $request)
  {

    $partner = Teammember::where('role_id', '=', 13)->where('status', '=', 1)->with('title')->get();
    $teammember = Teammember::where('role_id', '!=', 11)->with('title', 'role')->get();
    if (auth()->user()->role_id == 11) {
      $client = Client::where('status', 1)->select('id', 'client_name', 'client_code')->orderBy('client_name', 'ASC')->get();
    } elseif (auth()->user()->role_id == 13) {
      $clientss = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->where(function ($query) {
          $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
            ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
        })
        ->where('assignmentbudgetings.status', 1)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()->get();

      // // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
      // $clients = DB::table('clients')
      //   ->whereIn('id', [29, 32, 33, 34])
      //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
      //   ->orderBy('client_name', 'ASC')
      //   ->distinct()->get();
      // $client = $clientss->merge($clients);

      $selectedDate1 = new \DateTime();
      $formattedDate = $selectedDate1->format('Y-m-d');
      $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

      if ($holidaydatecheck) {
        $clientIds = [29, 32, 33, 34];
      } else {
        // if not holidays then go hare
        $dayOfWeek = $selectedDate1->format('w');
        if ($selectedDate1->format('l') == 'Saturday') {
          $dayOfMonth = $selectedDate1->format('j');
          // Calculate which Saturday of the month it is
          $saturdayNumber = ceil($dayOfMonth / 7);
          // offholiday client name will be show on 2nd and 4rth sturday
          if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
            $clientIds = [29, 32, 33, 34];
          } else {
            $clientIds = [29, 32, 34];
          }
        } else {
          $clientIds = [29, 32, 34];
        }
      }


      $clients = DB::table('clients')
        ->whereIn('id', $clientIds)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()
        ->get();

      $client = $clientss->merge($clients);
    } else {

      $clientss = DB::table('assignmentteammappings')
        ->leftjoin('assignmentmappings', 'assignmentmappings.id', 'assignmentteammappings.assignmentmapping_id')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->orwhere('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
        // i have add this line becouse manager contain it but staff not contain it so basically after add this code no contain staff and manager 
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->where('assignmentbudgetings.status', 1)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()->get();

      // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
      // $clients = DB::table('clients')
      //   ->whereIn('id', [29, 32, 33, 34])
      //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
      //   ->orderBy('client_name', 'ASC')
      //   ->distinct()->get();

      // $client = $clientss->merge($clients);

      $selectedDate1 = new \DateTime();
      $formattedDate = $selectedDate1->format('Y-m-d');
      $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

      if ($holidaydatecheck) {
        $clientIds = [29, 32, 33, 34];
      } else {
        // if not holidays then go hare
        $dayOfWeek = $selectedDate1->format('w');
        if ($selectedDate1->format('l') == 'Saturday') {
          $dayOfMonth = $selectedDate1->format('j');
          // Calculate which Saturday of the month it is
          $saturdayNumber = ceil($dayOfMonth / 7);
          // offholiday client name will be show on 2nd and 4rth sturday
          if (auth()->user()->role_id == 14) {
            if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
              $clientIds = [29, 32, 33, 34];
            } else {
              $clientIds = [29, 32, 34];
            }
          } else {
            if ($saturdayNumber == 1.0 || $saturdayNumber == 2.0 || $saturdayNumber == 3.0 || $saturdayNumber == 4.0 || $saturdayNumber == 5.0) {
              $clientIds = [29, 32, 33, 34];
            }
          }
        } else {
          $clientIds = [29, 32, 34];
        }
      }
      $clients = DB::table('clients')
        ->whereIn('id', $clientIds)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()
        ->get();

      $client = $clientss->merge($clients);
    }
    $assignment = Assignment::select('id', 'assignment_name')->get();
    if ($request->ajax()) {

      // dd($request);
      if (isset($request->timesheetdate)) {
        if (auth()->user()->role_id == 13) {
          echo "<option>Select Client</option>";

          $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);
          $selectedDate1 = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);

          $clientss = DB::table('assignmentmappings')
            ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
            ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
            ->where(function ($query) {
              $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
            })
            ->where(function ($query) use ($selectedDate) {
              $query->whereNull('otpverifydate')
                ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
            })
            // ->whereNotNull('clients.client_name')
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()->get();

          // // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
          // $clients = DB::table('clients')
          //   ->whereIn('id', [29, 32, 33, 34])
          //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
          //   ->orderBy('client_name', 'ASC')
          //   ->distinct()->get();

          // if you selected sturday date then offholydays client will be show otherwise not

          $formattedDate = $selectedDate1->format('Y-m-d');
          $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

          if ($holidaydatecheck) {
            $clientIds = [29, 32, 33, 34];
          } else {
            // if not holidays then go hare
            $dayOfWeek = $selectedDate1->format('w');
            if ($selectedDate1->format('l') == 'Saturday') {
              $dayOfMonth = $selectedDate1->format('j');
              // Calculate which Saturday of the month it is
              $saturdayNumber = ceil($dayOfMonth / 7);
              // offholiday client name will be show on 2nd and 4rth sturday
              if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
                $clientIds = [29, 32, 33, 34];
              } else {
                $clientIds = [29, 32, 34];
              }
            } else {
              $clientIds = [29, 32, 34];
            }
          }
          $clients = DB::table('clients')
            ->whereIn('id', $clientIds)
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()
            ->get();

          $client = $clientss->merge($clients);

          foreach ($client as $clients) {
            echo "<option value='" . $clients->id . "'>" . $clients->client_name . '( ' . $clients->client_code . ' )' . "</option>";
          }
        } else {

          echo "<option>Select Client</option>";

          $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);
          $selectedDate1 = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);
          $clientss = DB::table('assignmentteammappings')
            ->leftjoin('assignmentmappings', 'assignmentmappings.id', 'assignmentteammappings.assignmentmapping_id')
            ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
            ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
            ->orwhere('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
            ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
            ->where(function ($query) use ($selectedDate) {
              $query->whereNull('otpverifydate')
                ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
            })
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()->get();
          // ->get();

          // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
          // $clients = DB::table('clients')
          //   ->whereIn('id', [29, 32, 33, 34])
          //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
          //   ->orderBy('client_name', 'ASC')
          //   ->distinct()->get();

          // $client = $clientss->merge($clients);



          $formattedDate = $selectedDate1->format('Y-m-d');
          $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

          if ($holidaydatecheck) {
            $clientIds = [29, 32, 33, 34];
          } else {
            // if not holidays then go hare
            $dayOfWeek = $selectedDate1->format('w');
            if ($selectedDate1->format('l') == 'Saturday') {
              $dayOfMonth = $selectedDate1->format('j');
              // Calculate which Saturday of the month it is
              $saturdayNumber = ceil($dayOfMonth / 7);
              // offholiday client name will be show on 2nd and 4rth sturday
              if (auth()->user()->role_id == 14) {
                if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
                  $clientIds = [29, 32, 33, 34];
                } else {
                  $clientIds = [29, 32, 34];
                }
              } else {
                if ($saturdayNumber == 1.0 || $saturdayNumber == 2.0 || $saturdayNumber == 3.0 || $saturdayNumber == 4.0 || $saturdayNumber == 5.0) {
                  $clientIds = [29, 32, 33, 34];
                }
              }
            } else {
              $clientIds = [29, 32, 34];
            }
          }
          $clients = DB::table('clients')
            ->whereIn('id', $clientIds)
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()
            ->get();

          $client = $clientss->merge($clients);

          foreach ($client as $clients) {
            echo "<option value='" . $clients->id . "'>" . $clients->client_name . '( ' . $clients->client_code . ' )' . "</option>";
          }
        }
      }

      if (isset($request->cid)) {
        if (auth()->user()->role_id == 13) {
          echo "<option>Select Assignment</option>";

          if ($request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34) {
            $clients = DB::table('clients')
              // ->whereIn('id', [29, 32, 33, 34])
              ->where('id', $request->cid)
              ->select('clients.client_name', 'clients.id', 'clients.client_code')
              ->orderBy('client_name', 'ASC')
              ->distinct()->get();
            // dd($clients);
            $id = $clients[0]->id;
            foreach (DB::table('assignmentbudgetings')->where('client_id', $id)
              ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
              ->orderBy('assignment_name')->get() as $sub) {
              echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . '/' . $sub->assignmentgenerate_id . ' )' . "</option>";
            }
          } else {
            // dd('hi 3');

            $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->datepickers);

            foreach (DB::table('assignmentbudgetings')
              ->where('assignmentbudgetings.client_id', $request->cid)
              ->leftJoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
              ->leftJoin('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
              ->where(function ($query) {
                $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                  ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
              })
              ->where(function ($query) use ($selectedDate) {
                $query->whereNull('otpverifydate')
                  ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
              })
              ->orderBy('assignment_name')->get() as $sub) {
              echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . '/' . $sub->assignmentgenerate_id . ' )' . "</option>";
            }
          }
        } else {
          echo "<option>Select Assignment</option>";

          if ($request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34) {
            $clients = DB::table('clients')
              // ->whereIn('id', [29, 32, 33, 34])
              ->where('id', $request->cid)
              ->select('clients.client_name', 'clients.id', 'clients.client_code')
              ->orderBy('client_name', 'ASC')
              ->distinct()->get();
            // dd($clients);
            $id = $clients[0]->id;
            foreach (DB::table('assignmentbudgetings')->where('client_id', $id)
              ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
              ->orderBy('assignment_name')->get() as $sub) {
              echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . '/' . $sub->assignmentgenerate_id . ' )' . "</option>";
            }
          } else {
            //  i have add this code after kartic bindal problem 
            $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->datepickers);

            foreach (DB::table('assignmentbudgetings')
              ->join('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
              ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
              ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
              ->where('assignmentbudgetings.client_id', $request->cid)
              ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
              //  ->where('assignmentteammappings.status', '!=', 0)
              // ->whereNull('assignmentteammappings.status')
              ->where(function ($query) {
                $query->whereNull('assignmentteammappings.status')
                  ->orWhere('assignmentteammappings.status', '=', 1);
              })
              ->where(function ($query) use ($selectedDate) {
                $query->whereNull('otpverifydate')
                  //   ->orWhere('otpverifydate', '>=', $selectedDate);
                  // // ->orWhere('otpverifydate', '>=', $selectedDate);
                  ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
              })
              ->orderBy('assignment_name')->get() as $sub) {
              echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . '/' . $sub->assignmentgenerate_id . ' )' . "</option>";
            }
          }
        }
      }

      if (isset($request->assignment)) {
        // dd($request->assignment);
        if (auth()->user()->role_id == 11) {
          echo "<option value=''>Select Partner</option>";
          foreach (DB::table('assignmentmappings')

            ->leftjoin('teammembers', 'teammembers.id', 'assignmentmappings.leadpartner')
            ->leftjoin('teammembers as team', 'team.id', 'assignmentmappings.otherpartner')
            ->where('assignmentmappings.assignmentgenerate_id', $request->assignment)
            ->select('team.team_member as team_member', 'team.id', 'teammembers.id', 'teammembers.team_member')
            ->get() as $subs) {
            echo "<option value='" . $subs->id . "'>" . $subs->team_member . "</option>";
          }
        } elseif (auth()->user()->role_id == 13) {
          echo "<option value=''>Select Partner</option>";
          foreach (DB::table('teammembers')
            ->where('id', auth()->user()->teammember_id)
            ->select('teammembers.id', 'teammembers.team_member')
            ->get() as $subs) {
            echo "<option value='" . $subs->id . "'>" . $subs->team_member . "</option>";
          }
        } else {
          //die;
          echo "<option value=''>Select Partner</option>";
          foreach (DB::table('assignmentmappings')

            ->leftjoin('teammembers', 'teammembers.id', 'assignmentmappings.leadpartner')
            ->leftjoin('teammembers as team', 'team.id', 'assignmentmappings.otherpartner')
            ->where('assignmentmappings.assignmentgenerate_id', $request->assignment)
            ->select('team.team_member as team_member', 'team.id', 'teammembers.id', 'teammembers.team_member')
            ->get() as $subs) {
            echo "<option value='" . $subs->id . "'>" . $subs->team_member . "</option>";
          }
        }
      }
    } else {
      return view('backEnd.timesheet.create', compact('client', 'teammember', 'assignment', 'partner'));
    }
  }



Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\create.blade.php
find text  function handleClientChange(clientId) {
replace   <script> tag 


  <script>
      $(document).ready(function() {
          // Function to handle change event for client select
          function handleClientChange(clientId) {
              $('#' + clientId).on('change', function() {
                  var cid = $(this).val();
                  var datepickers = $('#datepickers').val();
                  var clientNumber = parseInt(clientId.replace('client', ''));

                  if (cid == 33) {
                      $.ajax({
                          type: "get",
                          url: "{{ url('holidaysselect') }}",
                          data: {
                              cid: cid,
                              datepickers: datepickers
                          },
                          success: function(response) {
                              var location = 'N/A';
                              var time = 0;
                              var holidayName = response.holidayName;
                              var saturday = response.saturday;
                              if (holidayName == 'null') {
                                  var workitem = saturday;
                              } else if (saturday == 'null') {
                                  var workitem = holidayName;
                              } else {
                                  var workitem = holidayName;
                              }

                              if (!isNaN(clientNumber)) {
                                  var assignmentSelect = $('.assignmentvalue' + clientNumber);
                                  assignmentSelect.empty();
                                  assignmentSelect.append($('<option>', {
                                      value: response.assignmentgenerate_id,
                                      text: response.assignment_name + ' (' +
                                          response
                                          .assignmentname + '/' + response
                                          .assignmentgenerate_id + ')'
                                  }));

                                  var assignmentSelect = $('.partnervalue' + clientNumber);
                                  assignmentSelect.empty();
                                  assignmentSelect.append($('<option>', {
                                      value: response.team_memberid,
                                      text: response.team_member
                                  }));

                                  $('.workitemnvalue' + clientNumber).val(workitem).prop(
                                      'readonly', true);
                                  $('.locationvalue' + clientNumber).val(location).prop(
                                      'readonly', true);
                                  $('#totalhours').val(time);
                                  $('#hour' + (clientNumber + 1)).prop('readonly', true);
                              } else {

                                  var assignmentSelect = $('.assignmentvalue');
                                  assignmentSelect.empty();
                                  assignmentSelect.append($('<option>', {
                                      value: response.assignmentgenerate_id,
                                      text: response.assignment_name + ' (' +
                                          response
                                          .assignmentname + '/' + response
                                          .assignmentgenerate_id + ')'
                                  }));

                                  var assignmentSelect = $('.partnervalue');
                                  assignmentSelect.empty();
                                  assignmentSelect.append($('<option>', {
                                      value: response.team_memberid,
                                      text: response.team_member
                                  }));


                                  $('.workitemnvalue').val(workitem).prop('readonly', true);
                                  $('.locationvalue').val(location).prop('readonly', true);
                                  $('#totalhours').val(time);
                                  $("#hour1").prop("readonly", true);
                              }
                          },
                          error: function() {
                              // Handle error if AJAX request fails
                          }
                      });
                  } else {
                      $.ajax({
                          type: "get",
                          url: "{{ url('timesheet/create') }}",
                          data: {
                              cid: cid,
                              datepickers: datepickers
                          },
                          success: function(res) {
                              // clear previous data 
                              if (!isNaN(clientNumber)) {
                                  $('.assignmentvalue' + clientNumber).empty();
                                  $('.partnervalue' + clientNumber).empty();
                                  $('.workitemnvalue' + clientNumber).val('').prop('readonly',
                                      false);
                                  $('.locationvalue' + clientNumber).val('').prop('readonly',
                                      false);
                                  $("#hour" + (clientNumber + 1)).prop("readonly", false);

                              } else {
                                  $('.assignmentvalue').empty();
                                  $('.partnervalue').empty();
                                  $('.workitemnvalue').val('').prop('readonly', false);
                                  $('.locationvalue').val('').prop('readonly', false);
                                  $("#hour1").prop("readonly", false);
                              }

                              $('#' + clientId.replace('client', 'assignment')).html(res);

                          },
                          error: function() {
                              // Handle error if AJAX request fails
                          },
                      });
                  }
              });
          }

          // Function to handle change event for assignment select
          function handleAssignmentChange(assignmentId) {
              $('#' + assignmentId).on('change', function() {
                  var assignment = $(this).val();

                  $.ajax({
                      type: "get",
                      url: "{{ url('timesheet/create') }}",
                      data: "assignment=" + assignment,
                      success: function(res) {
                          $('#' + assignmentId.replace('assignment', 'partner')).html(res);
                      },
                      error: function() {},
                  });
              });
          }

          // Dynamically add client fields
          var maxField = 4;
          var addButton = $('.add_button');
          var wrapper = $('.field_wrapper');
          var x = 1;
          var h = 2;

          $(addButton).click(function() {
              if (x < maxField) {
                  x++;
                  h++;
                  var fieldHTML = `<div class="row row-sm">
            <div class="col-2">
                <div class="form-group">
                    <label class="font-weight-600">Client Name</label>
                    <select class="language form-control refresh" name="client_id[]" id="client${x}">
                        <option value="">Select Client</option>
                        @foreach ($client as $clientData)
                            <option value="{{ $clientData->id }}">
                                {{ $clientData->client_name }} ({{ $clientData->client_code }})
                            </option>
                        @endforeach
                    </select>
                </div>
            </div>
            <div class="col-2">
                <div class="form-group">
                    <label class="font-weight-600">Assignment Name</label>
                    <select class="form-control key refreshoption" name="assignment_id[]" id="assignment${x}">
                    </select>
                </div>
            </div>
            <div class="col-2">
                <div class="form-group">
                    <label class="font-weight-600">Partner</label>
                    <select class="language form-control refreshoption" id="partner${x}" name="partner[]">
                    </select>
                </div>
            </div>
            <div class="col-2">
                <div class="form-group">
                    <label class="font-weight-600" style="width:100px;">Work Item</label>
                    <textarea type="text" name="workitem[]" id="key" value="{{ $timesheet->workitem ?? '' }}" class="form-control key refresh workitemnvalue${x}" rows="2"></textarea>
                </div>
            </div>
            <div class="col-2">
                <div class="form-group">
                    <label class="font-weight-600" style="width:100px;">Location</label>
                    <input type="text" name="location[]" id="key" value="{{ $timesheet->location ?? '' }}" class="form-control key refresh locationvalue${x}">
                </div>
            </div>
            <div class="col-1">
                <div class="form-group">
                    <label class="font-weight-600">Hour</label>
                    <input type="text" class="form-control refresh" id="hour${h}" name="hour[]" min="0" oninput="calculateTotal(this)" onkeypress="return event.charCode >= 48 && event.charCode <= 57" value="0" step="1">
                    <span style="font-size: 10px;margin-left: 10px;"></span>
                </div>
            </div>
            <div class="col-1">
                <div class="form-group" style="margin-top: 36px;">
                    <a style="margin-top: 36px;" href="javascript:void(0);" class="remove_button"><img src="{{ url('backEnd/image/remove-icon.png') }}"/></a>
                </div>
            </div>
        </div>`;

                  $(wrapper).append(fieldHTML);

                  var clientId = 'client' + x;
                  var assignmentId = 'assignment' + x;

                  handleClientChange(clientId);
                  handleAssignmentChange(assignmentId);
              }
          });

          handleClientChange('client');
          handleClientChange('client1');
          handleAssignmentChange('assignment');
          handleAssignmentChange('assignment1');

          //Once remove button is clicked
          $(wrapper).on('click', '.remove_button', function(e) {
              e.preventDefault();
              $(this).closest('.row-sm').remove();
              x--;
          });
      });

      function calculateTotal() {
          var totalSum = 0;
          $('input[name^="hour"]').each(function() {
              totalSum += parseInt($(this).val()) || 0;
          });

          document.getElementById("totalhours").value = totalSum;
      }
  </script>
