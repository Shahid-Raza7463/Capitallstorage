

222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetrequestController.php


    public function open_timesheet($id)
    {

        $permotioncheck = DB::table('teamrolehistory')
            ->where('teammember_id', auth()->user()->teammember_id)->first();

        if (auth()->user()->role_id == 11 || auth()->user()->role_id == 18) {
            $timesheetrequestsDatas = DB::table('timesheetrequests')
                ->leftjoin('clients', 'clients.id', 'timesheetrequests.client_id')
                ->leftjoin('assignments', 'assignments.id', 'timesheetrequests.assignment_id')
                ->leftjoin('teammembers', 'teammembers.id', 'timesheetrequests.partner')
                ->leftjoin('teammembers as createdby', 'createdby.id', 'timesheetrequests.createdby')
                ->where('timesheetrequests.status', 0)
                ->select(
                    'timesheetrequests.*',
                    'clients.client_name',
                    'assignments.assignment_name',
                    'teammembers.team_member',
                    'teammembers.staffcode',
                    'createdby.team_member as createdbyauth',
                    'createdby.staffcode as staffcodeid',
                )->get();
            // dd($timesheetrequestsDatas);
        } elseif ($permotioncheck && auth()->user()->role_id == 13) {
            // Define the common parts of the query
            $commonQuery = DB::table('timesheetrequests')
                ->leftJoin('clients', 'clients.id', '=', 'timesheetrequests.client_id')
                ->leftJoin('assignments', 'assignments.id', '=', 'timesheetrequests.assignment_id')
                ->leftJoin('teammembers', 'teammembers.id', '=', 'timesheetrequests.partner')
                ->leftJoin('teammembers as createdby', 'createdby.id', '=', 'timesheetrequests.createdby')
                ->where('timesheetrequests.status', 0)
                ->where(function ($query) {
                    $query->where('timesheetrequests.partner', auth()->user()->teammember_id)
                        ->orWhere('timesheetrequests.createdby', auth()->user()->teammember_id);
                })
                ->select(
                    'timesheetrequests.*',
                    'clients.client_name',
                    'assignments.assignment_name',
                    'teammembers.team_member',
                    'teammembers.staffcode',
                    'createdby.team_member as createdbyauth'
                );

            // Get the timesheet requests before and after the promotion date
            $timesheetrequestsDatas1 = (clone $commonQuery)
                ->whereDate('timesheetrequests.created_at', '<', $permotioncheck->created_at)
                ->addSelect('createdby.staffcode as staffcodeid')
                ->get();

            $timesheetrequestspermotion = (clone $commonQuery)
                ->leftJoin('teamrolehistory as createdby_history', 'createdby_history.teammember_id', '=', 'createdby.id')
                ->whereDate('timesheetrequests.created_at', '>', $permotioncheck->created_at)
                ->addSelect('createdby_history.newstaff_code')
                ->get();

            $timesheetrequestsDatas = $timesheetrequestsDatas1->merge($timesheetrequestspermotion);
        } else {
            $timesheetrequestsDatas = DB::table('timesheetrequests')
                ->leftjoin('clients', 'clients.id', 'timesheetrequests.client_id')
                ->leftjoin('assignments', 'assignments.id', 'timesheetrequests.assignment_id')
                ->leftjoin('teammembers', 'teammembers.id', 'timesheetrequests.partner')
                ->leftjoin('teammembers as createdby', 'createdby.id', 'timesheetrequests.createdby')
                ->where('timesheetrequests.status', 0)
                ->where(function ($query) {
                    $query->where('timesheetrequests.partner', auth()->user()->teammember_id)
                        ->orWhere('timesheetrequests.createdby', auth()->user()->teammember_id);
                })
                ->select(
                    'timesheetrequests.*',
                    'clients.client_name',
                    'assignments.assignment_name',
                    'teammembers.team_member',
                    'teammembers.staffcode',
                    'createdby.team_member as createdbyauth',
                    'createdby.staffcode as staffcodeid',
                )->get();
        }
        return view('backEnd.timesheetrequest.index', compact('timesheetrequestsDatas'));
    }



222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php



  public function filterDataAdmin(Request $request)
  {
    $urlheader = $request->headers->get('referer');
    $url = parse_url($urlheader);
    $path = $url['path'];

    // Get the input values from the request
    $teamname = $request->input('teamname');
    $start = $request->input('start');
    $end = $request->input('end');
    $totalhours = $request->input('totalhours');
    $partnerId = $request->input('partnersearch');

    $query = DB::table('timesheetreport')
      ->leftjoin('teammembers', 'teammembers.id', 'timesheetreport.teamid')
      ->leftJoin('teamrolehistory', function ($join) {
        $join->on('teamrolehistory.teammember_id', '=', 'teammembers.id')
          ->on('teamrolehistory.created_at', '<', 'timesheetreport.created_at');
      })
      ->leftjoin('teammembers as partners', 'partners.id', 'timesheetreport.partnerid')
      ->select('timesheetreport.*', 'teamrolehistory.newstaff_code', 'teammembers.team_member', 'partners.team_member as partnername', 'teammembers.staffcode');

    if (auth()->user()->role_id == 13 && $path == '/timesheet/partnersubmitted') {
      $query->where('timesheetreport.teamid', auth()->user()->teammember_id);
    } elseif (auth()->user()->role_id == 13 && $path == '/timesheet/teamlist') {
      $query->where('timesheetreport.partnerid', auth()->user()->teammember_id)
        ->orderBy('timesheetreport.startdate', 'desc');
    } elseif (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {
      $query->where('timesheetreport.teamid', auth()->user()->teammember_id)
        ->latest();
    } else {
      $query->orderBy('timesheetreport.startdate', 'desc');
    }

    if ($teamname) {
      $query->where('timesheetreport.teamid', $teamname);
    }

    if ($totalhours) {
      $query->where('timesheetreport.totaltime', $totalhours);
    }

    if ($partnerId) {
      $query->where('timesheetreport.partnerid', $partnerId);
    }

    if ($start && $end) {
      $query->where(function ($query) use ($start, $end) {
        $query->whereBetween('timesheetreport.startdate', [$start, $end])
          ->orWhereBetween('timesheetreport.enddate', [$start, $end])
          ->orWhere(function ($query) use ($start, $end) {
            $query->where('timesheetreport.startdate', '<=', $start)
              ->where('timesheetreport.enddate', '>=', $end);
          });
      });
    }

    $filteredDataaa = $query->get();

    // Map and group the data
    $groupedData = $filteredDataaa->groupBy(function ($item) {
      return $item->team_member . '|' . $item->week;
    })->map(function ($group) {
      $firstItem = $group->first();
      return (object)[
        'id' => $firstItem->id,
        'teamid' => $firstItem->teamid,
        'week' => $firstItem->week,
        'totaldays' => $group->sum('totaldays'),
        'totaltime' => $group->sum('totaltime'),
        'dayscount' => $group->sum('dayscount'),
        'startdate' => $firstItem->startdate,
        'enddate' => $firstItem->enddate,
        'partnername' => $firstItem->partnername,
        'created_at' => $firstItem->created_at,
        'team_member' => $firstItem->team_member,
        'staffcode' => $firstItem->staffcode,
        'partnerid' => $firstItem->partnerid,
        'newstaff_code' => $firstItem->newstaff_code,
      ];
    });

    $filteredData = collect($groupedData->values());
    return response()->json($filteredData);
  }



222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php



  public function create(Request $request)
  {
    $permotioncheck = DB::table('teamrolehistory')
      ->where('teammember_id', auth()->user()->teammember_id)->first();
    $partner = Teammember::where('role_id', '=', 13)->where('status', '=', 1)->with('title')->get();
    $teammember = Teammember::where('role_id', '!=', 11)->with('title', 'role')->get();
    if (auth()->user()->role_id == 11) {
      $client = Client::where('status', 1)->select('id', 'client_name', 'client_code')->orderBy('client_name', 'ASC')->get();
      $timesheetrejectData = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 2)
        ->first();
    } elseif ($permotioncheck && auth()->user()->role_id == 13) {
      $timesheetrejectData = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 2)
        ->first();

      $clientssbefore = DB::table('assignmentteammappings')
        ->leftjoin('assignmentmappings', 'assignmentmappings.id', 'assignmentteammappings.assignmentmapping_id')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->orwhere('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
        // i have add this line becouse manager contain it but staff not contain it so basically after add this code no contain staff and manager 
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->where('assignmentbudgetings.status', 1)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()->get();

      $clientssafter = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->where(function ($query) {
          $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
            ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
        })
        ->where('assignmentbudgetings.status', 1)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()->get();

      // // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
      // $clients = DB::table('clients')
      //   ->whereIn('id', [29, 32, 33, 34])
      //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
      //   ->orderBy('client_name', 'ASC')
      //   ->distinct()->get();
      // $client = $clientss->merge($clients);

      $selectedDate1 = new \DateTime();
      $formattedDate = $selectedDate1->format('Y-m-d');
      $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

      if ($holidaydatecheck) {
        $clientIds = [29, 32, 33, 34];
      } else {
        // if not holidays then go hare
        $dayOfWeek = $selectedDate1->format('w');
        if ($selectedDate1->format('l') == 'Saturday') {
          $dayOfMonth = $selectedDate1->format('j');
          // Calculate which Saturday of the month it is
          $saturdayNumber = ceil($dayOfMonth / 7);
          // offholiday client name will be show on 2nd and 4rth sturday
          if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
            $clientIds = [29, 32, 33, 34];
          } else {
            $clientIds = [29, 32, 34];
          }
        } else {
          $clientIds = [29, 32, 34];
        }
      }

      $clients = DB::table('clients')
        ->whereIn('id', $clientIds)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()
        ->get();

      $client = $clientssafter->merge($clientssbefore)->merge($clients);
    } elseif (auth()->user()->role_id == 13) {
      $timesheetrejectData = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 2)
        ->first();

      $clientss = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->where(function ($query) {
          $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
            ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
        })
        ->where('assignmentbudgetings.status', 1)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()->get();

      // // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
      // $clients = DB::table('clients')
      //   ->whereIn('id', [29, 32, 33, 34])
      //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
      //   ->orderBy('client_name', 'ASC')
      //   ->distinct()->get();
      // $client = $clientss->merge($clients);

      $selectedDate1 = new \DateTime();
      $formattedDate = $selectedDate1->format('Y-m-d');
      $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

      if ($holidaydatecheck) {
        $clientIds = [29, 32, 33, 34];
      } else {
        // if not holidays then go hare
        $dayOfWeek = $selectedDate1->format('w');
        if ($selectedDate1->format('l') == 'Saturday') {
          $dayOfMonth = $selectedDate1->format('j');
          // Calculate which Saturday of the month it is
          $saturdayNumber = ceil($dayOfMonth / 7);
          // offholiday client name will be show on 2nd and 4rth sturday
          if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
            $clientIds = [29, 32, 33, 34];
          } else {
            $clientIds = [29, 32, 34];
          }
        } else {
          $clientIds = [29, 32, 34];
        }
      }


      $clients = DB::table('clients')
        ->whereIn('id', $clientIds)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()
        ->get();

      $client = $clientss->merge($clients);
    } else {
      $timesheetrejectData = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 2)
        ->first();

      $clientss = DB::table('assignmentteammappings')
        ->leftjoin('assignmentmappings', 'assignmentmappings.id', 'assignmentteammappings.assignmentmapping_id')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->orwhere('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
        // i have add this line becouse manager contain it but staff not contain it so basically after add this code no contain staff and manager 
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->where('assignmentbudgetings.status', 1)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()->get();

      // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
      // $clients = DB::table('clients')
      //   ->whereIn('id', [29, 32, 33, 34])
      //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
      //   ->orderBy('client_name', 'ASC')
      //   ->distinct()->get();

      // $client = $clientss->merge($clients);

      $selectedDate1 = new \DateTime();
      $formattedDate = $selectedDate1->format('Y-m-d');
      $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

      if ($holidaydatecheck) {
        $clientIds = [29, 32, 33, 34];
      } else {
        // if not holidays then go hare
        $dayOfWeek = $selectedDate1->format('w');
        if ($selectedDate1->format('l') == 'Saturday') {
          $dayOfMonth = $selectedDate1->format('j');
          // Calculate which Saturday of the month it is
          $saturdayNumber = ceil($dayOfMonth / 7);
          // offholiday client name will be show on 2nd and 4rth sturday
          if (auth()->user()->role_id == 14) {
            if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
              $clientIds = [29, 32, 33, 34];
            } else {
              $clientIds = [29, 32, 34];
            }
          } else {
            if ($saturdayNumber == 1.0 || $saturdayNumber == 2.0 || $saturdayNumber == 3.0 || $saturdayNumber == 4.0 || $saturdayNumber == 5.0) {
              $clientIds = [29, 32, 33, 34];
            }
          }
        } else {
          $clientIds = [29, 32, 34];
        }
      }
      $clients = DB::table('clients')
        ->whereIn('id', $clientIds)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()
        ->get();

      $client = $clientss->merge($clients);
    }
    $assignment = Assignment::select('id', 'assignment_name')->get();
    if ($request->ajax()) {
      // dd($request);
      if (isset($request->timesheetdate)) {
        if ($permotioncheck && auth()->user()->role_id == 13) {
          echo "<option>Select Client</option>";

          $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);
          $selectedDate1 = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);


          $clientssbefore = DB::table('assignmentteammappings')
            ->leftjoin('assignmentmappings', 'assignmentmappings.id', 'assignmentteammappings.assignmentmapping_id')
            ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
            ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
            ->orwhere('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
            ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
            ->where(function ($query) use ($selectedDate) {
              $query->whereNull('otpverifydate')
                ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
            })
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()->get();

          $clientssafter = DB::table('assignmentmappings')
            ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
            ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
            ->where(function ($query) {
              $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
            })
            ->where(function ($query) use ($selectedDate) {
              $query->whereNull('otpverifydate')
                ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
            })
            // ->whereNotNull('clients.client_name')
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()->get();

          // // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
          // $clients = DB::table('clients')
          //   ->whereIn('id', [29, 32, 33, 34])
          //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
          //   ->orderBy('client_name', 'ASC')
          //   ->distinct()->get();

          // if you selected sturday date then offholydays client will be show otherwise not

          $formattedDate = $selectedDate1->format('Y-m-d');
          $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

          if ($holidaydatecheck) {
            $clientIds = [29, 32, 33, 34];
          } else {
            // if not holidays then go hare
            $dayOfWeek = $selectedDate1->format('w');
            if ($selectedDate1->format('l') == 'Saturday') {
              $dayOfMonth = $selectedDate1->format('j');
              // Calculate which Saturday of the month it is
              $saturdayNumber = ceil($dayOfMonth / 7);
              // offholiday client name will be show on 2nd and 4rth sturday
              if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
                $clientIds = [29, 32, 33, 34];
              } else {
                $clientIds = [29, 32, 34];
              }
            } else {
              $clientIds = [29, 32, 34];
            }
          }
          $clients = DB::table('clients')
            ->whereIn('id', $clientIds)
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()
            ->get();

          // $client = $clientss->merge($clients);
          $client = $clientssafter->merge($clientssbefore)->merge($clients);
          foreach ($client as $clients) {
            echo "<option value='" . $clients->id . "'>" . $clients->client_name . '( ' . $clients->client_code . ' )' . "</option>";
          }
        } elseif (auth()->user()->role_id == 13) {
          echo "<option>Select Client</option>";

          $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);
          $selectedDate1 = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);

          $clientss = DB::table('assignmentmappings')
            ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
            ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
            ->where(function ($query) {
              $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
            })
            ->where(function ($query) use ($selectedDate) {
              $query->whereNull('otpverifydate')
                ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
            })
            // ->whereNotNull('clients.client_name')
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()->get();

          // // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
          // $clients = DB::table('clients')
          //   ->whereIn('id', [29, 32, 33, 34])
          //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
          //   ->orderBy('client_name', 'ASC')
          //   ->distinct()->get();

          // if you selected sturday date then offholydays client will be show otherwise not

          $formattedDate = $selectedDate1->format('Y-m-d');
          $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

          if ($holidaydatecheck) {
            $clientIds = [29, 32, 33, 34];
          } else {
            // if not holidays then go hare
            $dayOfWeek = $selectedDate1->format('w');
            if ($selectedDate1->format('l') == 'Saturday') {
              $dayOfMonth = $selectedDate1->format('j');
              // Calculate which Saturday of the month it is
              $saturdayNumber = ceil($dayOfMonth / 7);
              // offholiday client name will be show on 2nd and 4rth sturday
              if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
                $clientIds = [29, 32, 33, 34];
              } else {
                $clientIds = [29, 32, 34];
              }
            } else {
              $clientIds = [29, 32, 34];
            }
          }
          $clients = DB::table('clients')
            ->whereIn('id', $clientIds)
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()
            ->get();

          $client = $clientss->merge($clients);

          foreach ($client as $clients) {
            echo "<option value='" . $clients->id . "'>" . $clients->client_name . '( ' . $clients->client_code . ' )' . "</option>";
          }
        } else {

          echo "<option>Select Client</option>";

          $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);
          $selectedDate1 = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);
          $clientss = DB::table('assignmentteammappings')
            ->leftjoin('assignmentmappings', 'assignmentmappings.id', 'assignmentteammappings.assignmentmapping_id')
            ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
            ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
            ->orwhere('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
            ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
            ->where(function ($query) use ($selectedDate) {
              $query->whereNull('otpverifydate')
                ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
            })
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()->get();
          // ->get();

          // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
          // $clients = DB::table('clients')
          //   ->whereIn('id', [29, 32, 33, 34])
          //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
          //   ->orderBy('client_name', 'ASC')
          //   ->distinct()->get();

          // $client = $clientss->merge($clients);



          $formattedDate = $selectedDate1->format('Y-m-d');
          $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

          if ($holidaydatecheck) {
            $clientIds = [29, 32, 33, 34];
          } else {
            // if not holidays then go hare
            $dayOfWeek = $selectedDate1->format('w');
            if ($selectedDate1->format('l') == 'Saturday') {
              $dayOfMonth = $selectedDate1->format('j');
              // Calculate which Saturday of the month it is
              $saturdayNumber = ceil($dayOfMonth / 7);
              // offholiday client name will be show on 2nd and 4rth sturday
              if (auth()->user()->role_id == 14) {
                if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
                  $clientIds = [29, 32, 33, 34];
                } else {
                  $clientIds = [29, 32, 34];
                }
              } else {
                if ($saturdayNumber == 1.0 || $saturdayNumber == 2.0 || $saturdayNumber == 3.0 || $saturdayNumber == 4.0 || $saturdayNumber == 5.0) {
                  $clientIds = [29, 32, 33, 34];
                }
              }
            } else {
              $clientIds = [29, 32, 34];
            }
          }
          $clients = DB::table('clients')
            ->whereIn('id', $clientIds)
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()
            ->get();

          $client = $clientss->merge($clients);

          foreach ($client as $clients) {
            echo "<option value='" . $clients->id . "'>" . $clients->client_name . '( ' . $clients->client_code . ' )' . "</option>";
          }
        }
      }

      if (isset($request->cid)) {
        if ($permotioncheck && auth()->user()->role_id == 13) {
          echo "<option>Select Assignment</option>";

          if ($request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34) {
            $clients = DB::table('clients')
              ->where('id', $request->cid)
              ->select('clients.client_name', 'clients.id', 'clients.client_code')
              ->orderBy('client_name', 'ASC')
              ->distinct()->get();

            $id = $clients[0]->id;
            $assignments = DB::table('assignmentbudgetings')->where('client_id', $id)
              ->leftJoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
              ->select('assignmentbudgetings.assignmentgenerate_id', 'assignments.assignment_name', 'assignments.assignmentname')
              ->orderBy('assignment_name');
          } else {
            $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->datepickers);

            $assignments = DB::table('assignmentbudgetings')
              ->where('assignmentbudgetings.client_id', $request->cid)
              ->leftJoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
              ->leftJoin('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
              ->where(function ($query) {
                $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                  ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
              })
              ->where(function ($query) use ($selectedDate) {
                $query->whereNull('otpverifydate')
                  ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
              })
              ->select('assignmentbudgetings.assignmentgenerate_id', 'assignments.assignment_name', 'assignmentbudgetings.assignmentname');

            $additionalAssignments = DB::table('assignmentbudgetings')
              ->join('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
              ->leftJoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
              ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
              ->where('assignmentbudgetings.client_id', $request->cid)
              ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
              ->where(function ($query) {
                $query->whereNull('assignmentteammappings.status')
                  ->orWhere('assignmentteammappings.status', '=', 1);
              })
              ->where(function ($query) use ($selectedDate) {
                $query->whereNull('otpverifydate')
                  ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
              })
              ->select('assignmentbudgetings.assignmentgenerate_id', 'assignments.assignment_name', 'assignmentbudgetings.assignmentname');

            $assignments = $assignments->union($additionalAssignments)->orderBy('assignment_name')->get();
            // dd($assignments);
          }

          foreach ($assignments as $sub) {
            echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . '/' . $sub->assignmentgenerate_id . ' )' . "</option>";
          }
        }

        // 22222222
        elseif (auth()->user()->role_id == 13) {

          echo "<option>Select Assignment</option>";
          if ($request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34) {
            $clients = DB::table('clients')
              // ->whereIn('id', [29, 32, 33, 34])
              ->where('id', $request->cid)
              ->select('clients.client_name', 'clients.id', 'clients.client_code')
              ->orderBy('client_name', 'ASC')
              ->distinct()->get();
            // dd($clients);
            $id = $clients[0]->id;
            foreach (DB::table('assignmentbudgetings')->where('client_id', $id)
              ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
              ->orderBy('assignment_name')->get() as $sub) {
              echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . '/' . $sub->assignmentgenerate_id . ' )' . "</option>";
            }
          } else {
            // dd('hi 3');

            $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->datepickers);

            foreach (DB::table('assignmentbudgetings')
              ->where('assignmentbudgetings.client_id', $request->cid)
              ->leftJoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
              ->leftJoin('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
              ->where(function ($query) {
                $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                  ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
              })
              ->where(function ($query) use ($selectedDate) {
                $query->whereNull('otpverifydate')
                  ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
              })
              ->orderBy('assignment_name')->get() as $sub) {
              echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . '/' . $sub->assignmentgenerate_id . ' )' . "</option>";
            }
          }
        } else {

          echo "<option>Select Assignment</option>";

          if ($request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34) {
            $clients = DB::table('clients')
              // ->whereIn('id', [29, 32, 33, 34])
              ->where('id', $request->cid)
              ->select('clients.client_name', 'clients.id', 'clients.client_code')
              ->orderBy('client_name', 'ASC')
              ->distinct()->get();
            // dd($clients);
            $id = $clients[0]->id;
            foreach (DB::table('assignmentbudgetings')->where('client_id', $id)
              ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
              ->orderBy('assignment_name')->get() as $sub) {
              echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . '/' . $sub->assignmentgenerate_id . ' )' . "</option>";
            }
          } else {
            //  i have add this code after kartic bindal problem 
            $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->datepickers);

            foreach (DB::table('assignmentbudgetings')
              ->join('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
              ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
              ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
              ->where('assignmentbudgetings.client_id', $request->cid)
              ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
              //  ->where('assignmentteammappings.status', '!=', 0)
              // ->whereNull('assignmentteammappings.status')
              ->where(function ($query) {
                $query->whereNull('assignmentteammappings.status')
                  ->orWhere('assignmentteammappings.status', '=', 1);
              })
              ->where(function ($query) use ($selectedDate) {
                $query->whereNull('otpverifydate')
                  //   ->orWhere('otpverifydate', '>=', $selectedDate);
                  // // ->orWhere('otpverifydate', '>=', $selectedDate);
                  ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
              })
              ->orderBy('assignment_name')->get() as $sub) {
              echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . '/' . $sub->assignmentgenerate_id . ' )' . "</option>";
            }
          }
        }
      }

      if (isset($request->assignment)) {
        // dd($request->assignment);
        if (auth()->user()->role_id == 11) {
          echo "<option value=''>Select Partner</option>";
          foreach (DB::table('assignmentmappings')

            ->leftjoin('teammembers', 'teammembers.id', 'assignmentmappings.leadpartner')
            ->leftjoin('teammembers as team', 'team.id', 'assignmentmappings.otherpartner')
            ->where('assignmentmappings.assignmentgenerate_id', $request->assignment)
            ->select('team.team_member as team_member', 'team.id', 'teammembers.id', 'teammembers.team_member')
            ->get() as $subs) {
            echo "<option value='" . $subs->id . "'>" . $subs->team_member . "</option>";
          }
        } elseif ($permotioncheck && auth()->user()->role_id == 13) {
          echo "<option value=''>Select Partner</option>";
          // dd($request->assignment);
          $partnerafter = DB::table('assignmentmappings')
            ->leftJoin('teammembers', 'teammembers.id', 'assignmentmappings.leadpartner')
            ->where('assignmentmappings.assignmentgenerate_id', $request->assignment)
            ->select('teammembers.id', 'teammembers.team_member');

          $partnerbefore = DB::table('assignmentmappings')
            ->leftJoin('teammembers', 'teammembers.id', 'assignmentmappings.leadpartner')
            ->leftJoin('teammembers as team', 'team.id', 'assignmentmappings.otherpartner')
            ->where('assignmentmappings.assignmentgenerate_id', $request->assignment)
            ->select('teammembers.id', 'teammembers.team_member');

          $partnerresult = $partnerafter->union($partnerbefore)->get();
          foreach ($partnerresult as $subs) {
            echo "<option value='" . $subs->id . "'>" . $subs->team_member . "</option>";
          }
        } elseif (auth()->user()->role_id == 13) {
          echo "<option value=''>Select Partner</option>";
          foreach (DB::table('teammembers')
            ->where('id', auth()->user()->teammember_id)
            ->select('teammembers.id', 'teammembers.team_member')
            ->get() as $subs) {
            echo "<option value='" . $subs->id . "'>" . $subs->team_member . "</option>";
          }
        } else {

          echo "<option value=''>Select Partner</option>";
          foreach (DB::table('assignmentmappings')

            ->leftjoin('teammembers', 'teammembers.id', 'assignmentmappings.leadpartner')
            ->leftjoin('teammembers as team', 'team.id', 'assignmentmappings.otherpartner')
            ->where('assignmentmappings.assignmentgenerate_id', $request->assignment)
            ->select('team.team_member as team_member', 'team.id', 'teammembers.id', 'teammembers.team_member')
            ->get() as $subs) {
            echo "<option value='" . $subs->id . "'>" . $subs->team_member . "</option>";
          }
        }
      }
    } else {
      return view('backEnd.timesheet.create', compact('client', 'teammember', 'assignment', 'partner', 'timesheetrejectData'));
    }
  }




222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php


  public function assignmentHourShowfilter(Request $request)
  {

    // Extract filter inputs
    $employee = $request->input('employee');
    $assignmentgenerateid = $request->input('assignmentgenerateid');
    $teamname = null;
    $role_id = null;

    if ($employee) {
      [$teamname, $role_id] = explode('/', $employee);
    }

    // Common query base
    $query = DB::table('assignmentmappings')
      ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
      ->leftJoin('teammembers', function ($join) {
        $join->on('teammembers.id', '=', 'assignmentmappings.otherpartner')
          ->orOn('teammembers.id', '=', 'assignmentmappings.leadpartner');
      })
      ->leftJoin('teamrolehistory', function ($join) {
        $join->on('teamrolehistory.teammember_id', '=', 'teammembers.id')
          ->on('teamrolehistory.created_at', '<', 'assignmentbudgetings.created_at');
      })
      ->leftJoin('titles', 'titles.id', 'teammembers.title_id')
      ->leftJoin('roles', 'roles.id', 'teammembers.role_id')
      ->whereNotIn('teammembers.team_member', ['NA', 'test staff'])
      ->select(
        'assignmentmappings.id',
        'teammembers.id as teamid',
        'teammembers.team_member',
        'teammembers.staffcode',
        'teammembers.role_id',
        'titles.title',
        'assignmentmappings.assignmentgenerate_id',
        'assignmentbudgetings.assignmentname',
        'assignmentbudgetings.created_at',
        'teamrolehistory.newstaff_code',
        'assignmentmappings.otherpartner',
        'assignmentmappings.leadpartner',
        'assignmentmappings.leadpartnerhour',
        'assignmentmappings.otherpartnerhour'
      );

    // Filter by assignmentgenerateid if provided
    if ($assignmentgenerateid) {
      $query->where('assignmentmappings.assignmentgenerate_id', $assignmentgenerateid);
    }

    // Filter based on role_id and teamname
    if ($role_id) {
      if ($role_id != 13) {
        $query->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
          ->where('assignmentteammappings.teammember_id', $teamname);
      } else {
        $query->where(function ($q) use ($teamname) {
          $q->where('assignmentmappings.leadpartner', $teamname)
            ->orWhere('assignmentmappings.otherpartner', $teamname);
        });
      }
    } else {
      // Specific condition for role_id 13
      if ($role_id == 13) {
        $query->where(function ($q) use ($teamname) {
          $q->where('assignmentmappings.leadpartner', $teamname)
            ->orWhere('assignmentmappings.otherpartner', $teamname);
        });
      }
    }

    // Execute query and get results
    $teammemberDatas = $query->get();

    // Flash request data and return view
    $request->flash();
    return view('backEnd.timesheet.assignmentlistwithhour', compact('teammemberDatas'));
  }


222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php


  public function assignmentHourShow()
  {
    // First query with teamrolehistory join
    $teammemberDatass = DB::table('assignmentteammappings')
      ->leftjoin('assignmentmappings', 'assignmentmappings.id', 'assignmentteammappings.assignmentmapping_id')
      ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
      ->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')
      ->leftJoin('teamrolehistory', function ($join) {
        $join->on('teamrolehistory.teammember_id', '=', 'teammembers.id')
          ->on('teamrolehistory.created_at', '<', 'assignmentbudgetings.created_at');
      })

      ->leftjoin('titles', 'titles.id', 'teammembers.title_id')
      ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
      ->whereNotIn('teammembers.team_member', ['NA', 'null', 'test staff'])
      ->select(
        'assignmentmappings.id',
        'teamrolehistory.newstaff_code',
        'teammembers.id as teamid',
        'teammembers.team_member',
        'teammembers.role_id',
        'teammembers.staffcode',
        'titles.title',
        'assignmentmappings.assignmentgenerate_id',
        'assignmentbudgetings.assignmentname',
        'assignmentbudgetings.created_at',
        'assignmentteammappings.teamhour'
      )
      ->get();

    // Second query with teamrolehistory join
    $patnerdata = DB::table('assignmentmappings')
      ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
      ->leftjoin('teammembers', function ($join) {
        $join->on('teammembers.id', 'assignmentmappings.otherpartner')
          ->orOn('teammembers.id', 'assignmentmappings.leadpartner');
      })
      ->leftJoin('teamrolehistory', function ($join) {
        $join->on('teamrolehistory.teammember_id', '=', 'teammembers.id')
          ->on('teamrolehistory.created_at', '<', 'assignmentbudgetings.created_at');
      })
      ->leftjoin('titles', 'titles.id', 'teammembers.title_id')
      ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
      ->whereNotIn('teammembers.team_member', ['NA', 'test staff'])
      ->select(
        'assignmentmappings.id',
        'teammembers.id as teamid',
        'teammembers.team_member',
        'teammembers.staffcode',
        'teammembers.role_id',
        'titles.title',
        'assignmentmappings.assignmentgenerate_id',
        'assignmentbudgetings.assignmentname',
        'assignmentbudgetings.created_at',
        'assignmentmappings.otherpartner',
        'assignmentmappings.leadpartner',
        'assignmentmappings.leadpartnerhour',
        'assignmentmappings.otherpartnerhour',
        'teamrolehistory.newstaff_code'
      )
      ->get();


    $teammemberDatas = $teammemberDatass->merge($patnerdata);
    return view('backEnd.timesheet.assignmentlistwithhour', compact('teammemberDatas'));
  }




222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php
replace partnersubmitted() function 


  public function partnersubmitted()
  {
    // Fetch timesheet data with necessary joins
    $get_datess = DB::table('timesheetreport')
      ->leftjoin('teammembers', 'teammembers.id', 'timesheetreport.teamid')
      ->leftJoin('teamrolehistory', function ($join) {
        $join->on('teamrolehistory.teammember_id', '=', 'teammembers.id')
          ->on('teamrolehistory.created_at', '<', 'timesheetreport.created_at');
      })
      ->leftjoin('teammembers as partners', 'partners.id', 'timesheetreport.partnerid')
      ->where('timesheetreport.teamid', auth()->user()->teammember_id)
      ->select('timesheetreport.*', 'teamrolehistory.newstaff_code', 'teammembers.team_member', 'partners.team_member as partnername', 'teammembers.staffcode')
      ->latest()
      ->get();

    // Fetch the first permission timesheet record for the authenticated user
    $permissiontimesheet = DB::table('timesheetreport')
      ->where('timesheetreport.teamid', auth()->user()->teammember_id)
      ->first();

    // Group data by week and map the necessary attributes
    $groupedData = $get_datess->groupBy('week')->map(function ($group) {
      $firstItem = $group->first();

      return (object)[
        'id' => $firstItem->id,
        'teamid' => $firstItem->teamid,
        'week' => $firstItem->week,
        'totaldays' => $group->sum('totaldays'),
        'totaltime' => $group->sum('totaltime'),
        'startdate' => $firstItem->startdate,
        'enddate' => $firstItem->enddate,
        'partnername' => $firstItem->partnername,
        'created_at' => $firstItem->created_at,
        'team_member' => $firstItem->team_member,
        'partnerid' => $firstItem->partnerid,
        'staffcode' => $firstItem->newstaff_code ?? $firstItem->staffcode,
      ];
    });

    // Convert the grouped data to a collection
    $get_date = collect($groupedData->values());

    // Return the view with the grouped data and permission timesheet
    return view('backEnd.timesheet.myteamindex', compact('get_date', 'permissiontimesheet'));
  }





222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php
replace partnersubmitted() function 


  public function partnersubmitted()
  {
    // Fetch timesheet data with necessary joins
    $get_datess = DB::table('timesheetreport')
      ->leftjoin('teammembers', 'teammembers.id', 'timesheetreport.teamid')
      ->leftJoin('teamrolehistory', function ($join) {
        $join->on('teamrolehistory.teammember_id', '=', 'teammembers.id')
          ->on('teamrolehistory.created_at', '<', 'timesheetreport.created_at');
      })
      ->leftjoin('teammembers as partners', 'partners.id', 'timesheetreport.partnerid')
      ->where('timesheetreport.teamid', auth()->user()->teammember_id)
      ->select('timesheetreport.*', 'teamrolehistory.newstaff_code', 'teammembers.team_member', 'partners.team_member as partnername', 'teammembers.staffcode')
      ->latest()
      ->get();

    // Fetch the first permission timesheet record for the authenticated user
    $permissiontimesheet = DB::table('timesheetreport')
      ->where('timesheetreport.teamid', auth()->user()->teammember_id)
      ->first();

    // Group data by week and map the necessary attributes
    $groupedData = $get_datess->groupBy('week')->map(function ($group) {
      $firstItem = $group->first();

      return (object)[
        'id' => $firstItem->id,
        'teamid' => $firstItem->teamid,
        'week' => $firstItem->week,
        'totaldays' => $group->sum('totaldays'),
        'totaltime' => $group->sum('totaltime'),
        'startdate' => $firstItem->startdate,
        'enddate' => $firstItem->enddate,
        'partnername' => $firstItem->partnername,
        'created_at' => $firstItem->created_at,
        'team_member' => $firstItem->team_member,
        'partnerid' => $firstItem->partnerid,
        'staffcode' => $firstItem->newstaff_code ?? $firstItem->staffcode,
      ];
    });

    // Convert the grouped data to a collection
    $get_date = collect($groupedData->values());

    // Return the view with the grouped data and permission timesheet
    return view('backEnd.timesheet.myteamindex', compact('get_date', 'permissiontimesheet'));
  }



Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php
replace allteamsubmitted() function 


  public function allteamsubmitted()
  {
    // Fetch all necessary data in a single query
    $get_datess = DB::table('timesheetreport')
      ->leftjoin('teammembers', 'teammembers.id', 'timesheetreport.teamid')
      ->leftJoin('teamrolehistory', function ($join) {
        $join->on('teamrolehistory.teammember_id', '=', 'teammembers.id')
          ->on('teamrolehistory.created_at', '<', 'timesheetreport.created_at');
      })
      ->leftjoin('teammembers as partners', 'partners.id', 'timesheetreport.partnerid')
      ->select(
        'timesheetreport.*',
        'teamrolehistory.newstaff_code',
        'teammembers.team_member',
        'teammembers.staffcode',
        'partners.team_member as partnername',
        'teammembers.emailid'
      )
      ->latest()
      ->get();

    $permissiontimesheet = DB::table('timesheetreport')->first();

    // Map and group data
    $groupedData = $get_datess->groupBy(function ($item) {
      return $item->team_member . '|' . $item->week;
    })->map(function ($group) {
      $firstItem = $group->first();

      return (object)[
        'id' => $firstItem->id,
        'teamid' => $firstItem->teamid,
        'week' => $firstItem->week,
        'totaldays' => $group->sum('totaldays'),
        'totaltime' => $group->sum('totaltime'),
        'dayscount' => $group->sum('dayscount'),
        'startdate' => $firstItem->startdate,
        'enddate' => $firstItem->enddate,
        'partnername' => $firstItem->partnername,
        'created_at' => $firstItem->created_at,
        'team_member' => $firstItem->team_member,
        // Use newstaff_code if available, otherwise staffcode
        'staffcode' => $firstItem->newstaff_code ?? $firstItem->staffcode,
        'partnerid' => $firstItem->partnerid,
      ];
    });

    $get_date = collect($groupedData->values());

    return view('backEnd.timesheet.myteamindex', compact('get_date', 'permissiontimesheet'));
  }



Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TeammemberController.php
app\Http\Controllers\TimesheetController.php
replace full_list() function 

  public function full_list()
  {

    $teammember = DB::table('teammembers')
      ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
      ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
      ->select('teammembers.id', 'teammembers.team_member', 'teammembers.emailid', 'roles.rolename', 'teammembers.staffcode', 'teamrolehistory.newstaff_code')
      ->where('teammembers.status', '1')->distinct()->get();

    $month = DB::table('timesheets')
      ->select('timesheets.month')->distinct()->get();
    $result = DB::table('timesheetusers')->select(DB::raw('YEAR(date) as year'))
      ->distinct()->orderBy('year', 'DESC')->limit(5)->get();
    $years = $result->pluck('year');

    //dd($month);
    $timesheetData = DB::table('timesheets')
      ->leftjoin('teammembers', 'teammembers.id', 'timesheets.created_by')
      ->select('timesheets.*', 'teammembers.team_member', 'teammembers.staffcode')->orderBy('id', 'DESC')->paginate(30);
    // dd($timesheetData);
    return view('backEnd.timesheet.hrindex', compact('timesheetData', 'teammember', 'month', 'years'));
  }

Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php

replace adminsearchtimesheet() function 

  public function adminsearchtimesheet(Request $request)
  {

    if ($request->ajax()) {
      echo "<option value='null'>Select Assignment</option>";
      foreach (DB::table('assignmentbudgetings')
        ->where('assignmentbudgetings.client_id', $request->cid)
        ->leftJoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftJoin('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
        ->orderBy('assignment_name')->get() as $sub) {
        echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . ' )' . '( ' . $sub->assignmentgenerate_id . ' )' . "</option>";
      }
    } else {
      // Get all input from form
      $startDate = $request->input('startdate', null);
      $endDate = $request->input('enddate', null);
      $teamId = $request->input('teamid', null);
      $teammemberId = $request->input('teammemberId', null);
      // $year = $request->input('year', null);
      $clientId = $request->input('clientId', null);
      $assignmentIddummy = $request->input('assignmentId', null);

      if ($assignmentIddummy == 'null') {
        $assignmentId = null;
      } else {
        $assignmentId =  $assignmentIddummy;
      }
      // dd($assignmentId);
      $teammembers = DB::table('teammembers')
        ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
        ->where('teammembers.status', 1)
        ->whereIn('teammembers.role_id', [14, 15, 13, 11])
        ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
        ->orderBy('team_member', 'ASC')
        ->get();

      $clientsname = DB::table('clients')
        ->whereIn('status', [0, 1])
        ->select('id', 'client_name', 'client_code')
        ->orderBy('client_name', 'ASC')
        ->get();

      $assignmentsname = DB::table('timesheetusers')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->whereNotNull('assignmentbudgetings.assignmentname')
        ->select('timesheetusers.*', 'assignmentbudgetings.assignmentname')
        ->orderBy('assignmentname', 'Asc')
        ->distinct('assignmentname')
        ->get();

      if (auth()->user()->role_id == 11 || auth()->user()->role_id == 13) {
        $timesheetData = DB::table('timesheetusers')
          ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
          // When startDate and endDate exist then run 'when' clause
          ->when($startDate && $endDate && $teammemberId, function ($query) use ($startDate, $endDate, $teammemberId) {
            // dd('teammemberId');
            return $query->where('timesheetusers.createdby', $teammemberId)
              ->where('timesheetusers.date', '>=', $startDate)
              ->where('timesheetusers.date', '<=', $endDate);
          })
          ->when($startDate && $endDate && $clientId, function ($query) use ($startDate, $endDate, $clientId) {
            // dd($clientId);
            return $query->where('timesheetusers.client_id', $clientId)
              ->where('timesheetusers.date', '>=', $startDate)
              ->where('timesheetusers.date', '<=', $endDate);
          })
          ->when($startDate && $endDate && $assignmentId, function ($query) use ($startDate, $endDate, $assignmentId) {
            // dd('assignmentId');
            return $query->where('timesheetusers.assignmentgenerate_id', $assignmentId)
              ->where('timesheetusers.date', '>=', $startDate)
              ->where('timesheetusers.date', '<=', $endDate);
          })
          ->when($startDate && $endDate && $teammemberId == null && $clientId == null && $assignmentId == null, function ($query) use ($startDate, $endDate) {
            // dd('year');
            return $query->where('timesheetusers.date', '>=', $startDate)
              ->where('timesheetusers.date', '<=', $endDate);
          })
          ->whereIn('timesheetusers.status', [1, 2, 3])
          ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
          ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
          ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
          ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
          ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'clients.client_code', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername', 'patnerid.staffcode as patnerstaffcode', 'assignmentbudgetings.assignmentname')
          ->orderBy('date', 'DESC')
          ->get();
        $request->flash();
        return view('backEnd.timesheet.timesheetdownload', compact('timesheetData', 'teammembers', 'clientsname', 'assignmentsname', 'assignmentId'));
      }
    }
  }
  

Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php
replace searchingtimesheet() function 

  public function searchingtimesheet(Request $request)
  {
    // dd($request);
    // Get all input from form
    $startDate = $request->input('startdate', null);
    $endDate = $request->input('enddate', null);
    $teamId = $request->input('teamid', null);
    $teammemberId = $request->input('teammemberId', null);
    // $year = $request->input('year', null);

    $teammembers = DB::table('teammembers')
      ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
      ->where('teammembers.status', 1)
      ->whereIn('teammembers.role_id', [14, 15, 13, 11])
      ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
      ->orderBy('team_member', 'ASC')
      ->get();

    // For patner
    if (auth()->user()->role_id == 13) {
      $query = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        // ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'teammembers.team_member', 'patnerid.team_member as patnername', 'assignmentbudgetings.assignmentname')
        ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'clients.client_code', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername', 'patnerid.staffcode as patnerstaffcode', 'assignmentbudgetings.assignmentname')
        ->orderBy('date', 'DESC');



      if ($startDate && $endDate && $teamId) {
        $query->where(function ($q) use ($startDate, $endDate, $teamId) {
          $q->where('timesheetusers.createdby', $teamId)
            ->where('timesheetusers.date', '>=', $startDate)
            ->where('timesheetusers.date', '<=', $endDate);
        });
      }

      $timesheetData = $query->get();
      // dd($timesheetData);
      $request->flash();
      return view('backEnd.timesheet.timesheetdownload', compact('timesheetData'));
    }
    // For staff and manager
    else {

      $query = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        // ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'teammembers.team_member', 'patnerid.team_member as patnername', 'assignmentbudgetings.assignmentname')
        ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'clients.client_code', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername', 'patnerid.staffcode as patnerstaffcode', 'assignmentbudgetings.assignmentname')
        ->orderBy('date', 'DESC');

      if ($startDate && $endDate && $teamId) {
        $query->where(function ($q) use ($startDate, $endDate, $teamId) {
          $q->where('timesheetusers.createdby', $teamId)
            ->where('timesheetusers.date', '>=', $startDate)
            ->where('timesheetusers.date', '<=', $endDate);
        });
      }
      $timesheetData = $query->get();
      // dd($timesheetData);

      $request->flash();
      return view('backEnd.timesheet.timesheetdownload', compact('timesheetData'));
    }
  }



Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php
replace admintimesheetlist() function 


  public function admintimesheetlist(Request $request)
  {


    $teammembers = DB::table('teammembers')
      ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
      ->where('teammembers.status', 1)
      ->whereIn('teammembers.role_id', [14, 15, 13, 11])
      ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
      ->orderBy('team_member', 'ASC')
      ->get();

    $clientsname = DB::table('clients')
      ->whereIn('status', [0, 1])
      ->select('id', 'client_name', 'client_code')
      ->orderBy('client_name', 'ASC')
      ->get();

    $assignmentsname = DB::table('timesheetusers')
      ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
      ->whereIn('timesheetusers.status', [1, 2, 3])
      ->whereNotNull('assignmentbudgetings.assignmentname')
      ->select('timesheetusers.*', 'assignmentbudgetings.assignmentname')
      ->orderBy('assignmentname', 'Asc')
      ->distinct('assignmentname')
      ->get();

    if (auth()->user()->role_id == 11) {

      $timesheetData = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        // ->where('timesheetusers.createdby', $teamid)
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername')
        ->orderBy('date', 'DESC')
        ->take(7)
        ->get();
    }
    // for patner team 
    else {
      // die;
      $timesheetData = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->where('timesheetusers.partner', auth()->user()->teammember_id)
        ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername')
        ->orderBy('date', 'DESC')
        ->take(7)
        ->get();

      // dd($teammembers);
    }
    return view('backEnd.timesheet.timesheetdownload', compact('timesheetData', 'teammembers', 'clientsname', 'assignmentsname'));
  }


Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TeammemberController.php
replace adminteammembers() function 

    public function adminteammembers()
    {
        if (auth()->user()->role_id == 11) {

            $teammemberDatas = Teammember::with(['title', 'role'])
                ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
                ->where('teammembers.role_id', '!=', 11)
                ->where('teammembers.status', 1)
                ->select('teammembers.*', 'teamrolehistory.newstaff_code')
                ->get();
           
            return view('backEnd.teammember.allindex', compact('teammemberDatas'));
        }
    }
	

Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TeammemberController.php
replace index() function 

    public function index()
    {

        if (auth()->user()->role_id == 11) {

            // $teammemberDatas = Teammember::with('title', 'role')
            //     ->whereNotIn('id', [793, 878])
            //     //   ->where('role_id','>',auth()->user()->role_id)
            //     ->get();

            $teammemberDatas = Teammember::with(['title', 'role'])
                ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
                ->whereNotIn('teammembers.id', [793, 878])
                ->select('teammembers.*', 'teamrolehistory.newstaff_code')
                ->get();

            return view('backEnd.teammember.index', compact('teammemberDatas'));
        } elseif (auth()->user()->role_id == 18 || auth()->user()->role_id == 16) {
            $teammemberactiveDatas = Teammember::with('title', 'role')
                ->where('role_id', '!=', 11)->where('status', 1)->orderBy('joining_date', 'desc')->get();
            $teammemberinactiveDatas = Teammember::with('title', 'role')
                ->where('role_id', '!=', 11)->where('status', 0)->orderBy('joining_date', 'desc')->get();
            //dd($teammemberDatas);
            return view('backEnd.teammember.hrindex', compact('teammemberactiveDatas', 'teammemberinactiveDatas'));
        } else {
            $teammemberDatas = Teammember::with(['title', 'role'])
                ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
                ->where('teammembers.role_id', '!=', 11)
                ->where('teammembers.status', 1)
                ->select('teammembers.*', 'teamrolehistory.newstaff_code')
                ->get();

            return view('backEnd.teammember.allindex', compact('teammemberDatas'));
        }
    }
	

Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ReportController.php
replace assignment_report() function 



  public function assignment_report()
  {


    $permotioncheck = DB::table('teamrolehistory')
      ->where('teammember_id', auth()->user()->teammember_id)->first();

    if (auth()->user()->role_id == 11) {
      $assignmentmappingData =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentbudgetings.status', '1')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code'
        )
        ->get();
      $assignmentmappingcloseData =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentbudgetings.status', '0')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code'
        )
        ->get();
      return view('backEnd.report.assignmentreport', compact('assignmentmappingData', 'assignmentmappingcloseData'));
    } elseif ($permotioncheck && auth()->user()->role_id == 13) {
      $assignmentmappingDatabefore =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        ->where('assignmentbudgetings.status', '1')
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentteammappings.teamhour',
        )->get();



      $assignmentmappingOpenleadpartner =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '1')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentmappings.leadpartner',
        )
        ->get();

      $assignmentmappingOpenotherpartner =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentmappings.otherpartner', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '1')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentmappings.otherpartner',

        )
        ->get();
      $assignmentmappingData = $assignmentmappingOpenotherpartner->merge($assignmentmappingOpenleadpartner)->merge($assignmentmappingDatabefore);

      $assignmentmappingcloseDatabefore =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '0')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentteammappings.teamhour',
        )->get();

      // dd($assignmentmappingData);
      $assignmentmappingClosedleadpartner =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '0')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentmappings.leadpartner',
        )->get();

      $assignmentmappingClosedotherpartner =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentmappings.otherpartner', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '0')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentmappings.otherpartner',
        )->get();

      $assignmentmappingcloseData =       $assignmentmappingClosedotherpartner->merge($assignmentmappingClosedleadpartner)->merge($assignmentmappingcloseDatabefore);

      // dd($assignmentmappingData);
      return view('backEnd.report.assignmentreport', compact('assignmentmappingData', 'assignmentmappingcloseData'));
    } elseif (auth()->user()->role_id == 13) {

      $assignmentmappingOpenleadpartner =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '1')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentmappings.leadpartner',
        )
        ->get();

      $assignmentmappingOpenotherpartner =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentmappings.otherpartner', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '1')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentmappings.otherpartner',

        )
        ->get();

      $assignmentmappingData = $assignmentmappingOpenotherpartner->merge($assignmentmappingOpenleadpartner);

      // dd($assignmentmappingData);
      $assignmentmappingClosedleadpartner =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '0')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentmappings.leadpartner',
        )->get();

      $assignmentmappingClosedotherpartner =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentmappings.otherpartner', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '0')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentmappings.otherpartner',
        )->get();

      $assignmentmappingcloseData = $assignmentmappingClosedotherpartner->merge($assignmentmappingClosedleadpartner);
      // dd($assignmentmappingcloseData);
      return view('backEnd.report.assignmentreport', compact('assignmentmappingData', 'assignmentmappingcloseData'));
    } else {
      $assignmentmappingData =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        ->where('assignmentbudgetings.status', '1')
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentteammappings.teamhour',
        )->get();



      $assignmentmappingcloseData =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '0')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentteammappings.teamhour',
        )->get();
      // dd($assignmentmappingcloseData);

      // dd($assignmentmappingData);
      return view('backEnd.report.assignmentreport', compact('assignmentmappingData', 'assignmentmappingcloseData'));
    }
  }
  

Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\BackEndController.php
replace index() function 



  public function index()
  {

    $permotioncheck = DB::table('teamrolehistory')
      ->where('teammember_id', auth()->user()->teammember_id)->first();

    $mentor_id = DB::table('teammembers')
      ->join('users', 'users.teammember_id', 'teammembers.id')
      ->where('users.teammember_id', auth()->user()->teammember_id)
      ->pluck('mentor_id')
      ->first();

    $mentee_id = DB::table('teammembers')
      ->join('users', 'users.teammember_id', 'teammembers.id')
      ->where('teammembers.mentor_id', auth()->user()->teammember_id)
      //->pluck('teammembers.id')
      ->get();

    //dd($mentee_id);
    $mentor = null;
    $mentees = null;

    if ($mentor_id != null) {
      $mentor = DB::table('teammembers')->where('id', $mentor_id)->first();
    }

    if (count($mentee_id) != 0) {
      $mentees = $mentee_id;
    }

    // Set $mentees to null (if needed)
    if ($mentees == null) {
      $mentees = null;
    }

    $todayBirthdays = Teammember::whereNotNull('dateofbirth')
      ->where('status', '1')
      ->get()
      ->filter(function ($birthday) {
        $dateofbirth = Carbon::parse($birthday->dateofbirth);
        $currentDate = Carbon::now();

        // Compare the month and day without considering the current year
        return $dateofbirth->month == $currentDate->month && $dateofbirth->day == $currentDate->day;
      })
      ->sortBy('dateofbirth');

    $upcomingBirthdays = Teammember::where('status', '1')
      ->whereRaw('DATE_FORMAT(dateofbirth, "%m-%d") > DATE_FORMAT(NOW(), "%m-%d")')
      ->orderByRaw('DATE_FORMAT(dateofbirth, "%m-%d")')
      ->limit(7)
      ->get();



    $workAnniversaries = Teammember::whereNotNull('joining_date')
      ->where('status', '1')
      ->get()
      ->filter(function ($teammember) {
        $joiningDate = Carbon::parse($teammember->joining_date);
        $currentDate = Carbon::now();

        // Compare the month and day without considering the current year
        $isAnniversaryToday = $joiningDate->month == $currentDate->month && $joiningDate->day == $currentDate->day;

        // Exclude work anniversaries with a duration of 0 years
        $isNonZeroAnniversary = $joiningDate->diffInYears($currentDate) > 0;

        return $isAnniversaryToday && $isNonZeroAnniversary;
      })
      ->sortBy('joining_date')
      ->take(2);

    $upcomingHolidays = Holiday::where('startdate', '>', now()->format('Y-m-d'))
      ->where('status', 1)
      ->orderBy('startdate', 'asc')
      ->take(2)
      ->get();

    if (auth()->user()->role_id == 11 || auth()->user()->role_id == 12) {
      $authidd = Assignmentteammapping::where('teammember_id', auth()->user()->teammember_id)->select('assignmentmapping_id')->pluck('assignmentmapping_id')->first();
      $authid = auth()->user()->teammember_id;
      $notificationDatas =  DB::table('notifications')
        ->join('teammembers', 'teammembers.id', 'notifications.created_by')
        ->select(
          'notifications.*',
          'teammembers.profilepic',
          'teammembers.team_member'
        )->orderBy('created_at', 'desc')->paginate('2');
      // dd($notificationDatas);
      $client = Client::count();
      $teammember = Teammember::where('status', '1')->count();
      $userid = auth()->user()->role_id;
      $pageid = Permission::where('role_id', $userid)->select('page_id')->pluck('page_id')->first();
      $assetticket = DB::table('assettickets')
        ->leftjoin('teammembers', 'teammembers.id', 'assettickets.created_by')
        ->select('assettickets.*', 'teammembers.team_member')->orderBy('created_at', 'desc')->paginate(2);
      $assignment =  DB::table('assignmentbudgetings')
        ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->select(
          'assignmentbudgetings.*',
          'clients.client_name',
          'assignments.assignment_name'
        )->orderBy('assignmentbudgetings.created_at', 'desc')->take(5)->get();

      $openleave = DB::table('applyleaves')
        ->where('status', 0)
        ->count();

      $opentimesheetrequests = DB::table('timesheetrequests')
        ->where('status', 0)
        ->count();

      $assignmentcount = Assignmentmapping::count();
      $notification = Notification::count();

      // Get open assinment count
      $openassignmentcount =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->where('assignmentbudgetings.status', '1')
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->count();
      // Get closed assinment count
      $closedassignmentcount =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->where('assignmentbudgetings.status', '0')
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->count();

      return view('backEnd.index', compact('openassignmentcount', 'closedassignmentcount', 'opentimesheetrequests', 'openleave', 'mentor', 'mentees', 'notification', 'assignmentcount', 'assignment', 'pageid', 'assetticket', 'client', 'teammember', 'notificationDatas', 'upcomingBirthdays', 'workAnniversaries', 'upcomingHolidays', 'todayBirthdays'));
    } elseif ($permotioncheck && auth()->user()->role_id == 13) {

      //Aproved leave jan to dec 
      $currentYear = date('Y');
      $approvedleavesvalue = DB::table('applyleaves')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 1)
        ->whereYear('from',  $currentYear)
        ->get();

      $leaveDurations = [];
      foreach ($approvedleavesvalue as $approvedleavesvalues) {
        $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

        $diff_in_days = $to->diffInDays($from) + 1;

        $holidaycount = DB::table('holidays')
          ->where('startdate', '>=', $approvedleavesvalues->from)
          ->where('enddate', '<=', $approvedleavesvalues->to)
          ->count();

        $leaveDurationcount = $diff_in_days - $holidaycount;
        $leaveDurations[] = $leaveDurationcount;
      }

      $approvedleavesvaluecount = array_sum($leaveDurations);
      // dd($approvedleavesvaluecount);
      //Aproved leave jan to dec end hare 
      // dd(auth()->user()->teammember_id);
      $authidd = Assignmentteammapping::where('teammember_id', auth()->user()->teammember_id)->select('assignmentmapping_id')->pluck('assignmentmapping_id')->first();
      $authid = auth()->user()->teammember_id;

      $notificationDatas =   DB::table('notifications')
        ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
        ->where('notifications.targettype', '1')
        ->select('notifications.*', 'teammembers.team_member', 'teammembers.profilepic')->orWhere('targettype', '2')->orderBy('notifications.id', 'desc')->paginate(2);

      //  dd($notificationDatas);
      $notification = Notification::count();
      $client = Client::count();
      $teammember = Teammember::where('status', '1')->count();
      $userid = auth()->user()->role_id;
      $pageid = Permission::where('role_id', $userid)->select('page_id')->pluck('page_id')->first();
      $assetticket = DB::table('assettickets')
        ->leftjoin('users', 'users.id', 'assettickets.created_by')
        ->leftjoin('teammembers', 'teammembers.id', 'users.teammember_id')->where('assettickets.created_by', auth()->user()->teammember_id)
        ->select('assettickets.*', 'teammembers.team_member')->orderBy('created_at', 'desc')->get();


      $openleave = DB::table('applyleaves')
        ->where('approver', auth()->user()->teammember_id)
        ->where('status', 0)
        ->count();
      //  dd($notificationDatas);

      $opentimesheetrequests = DB::table('timesheetrequests')
        ->where('status', 0)
        ->where(function ($query) {
          $query->where('timesheetrequests.partner', auth()->user()->teammember_id)
            ->orWhere('timesheetrequests.createdby', auth()->user()->teammember_id);
        })
        ->count();

      $assignment =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        // get assignment name only
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->whereNotIn('clients.id', [33, 32, 34, 29])
        ->select(
          'assignmentbudgetings.client_id',
          'clients.client_name',
          'assignmentbudgetings.assignmentgenerate_id',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentname'
        )
        // ->where('clients.status', 0)
        ->where('assignmentbudgetings.status', 1)
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->take(5)->get();

      // $assignmentcount = count($assignment);

      $assignmentcountbefore = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        // get assignment name only
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->whereNotIn('clients.id', [33, 32, 34, 29])
        ->select(
          'assignmentbudgetings.client_id',
          'clients.client_name',
          'assignmentbudgetings.assignmentgenerate_id',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentname'
        )
        // ->where('clients.status', 0)
        ->where('assignmentbudgetings.status', 1)
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->count();


      $assignmentcountafter = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->where(function ($query) {
          $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
            ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
        })

        ->select(
          'assignmentmappings.*',
          'clients.client_name',
          'assignmentbudgetings.assignmentname',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentgenerate_id'
        )
        ->where('assignmentbudgetings.status', 1)
        ->count();

      $assignmentcount = $assignmentcountbefore + $assignmentcountafter;
      // manager
      return view('backEnd.index', compact('notification', 'opentimesheetrequests', 'openleave', 'mentor', 'mentees', 'assignmentcount', 'assignment', 'pageid', 'assetticket', 'client', 'teammember', 'notificationDatas', 'upcomingBirthdays', 'workAnniversaries', 'upcomingHolidays', 'todayBirthdays', 'approvedleavesvaluecount'));
    } elseif (auth()->user()->role_id == 13) {
      $authidd = Assignmentteammapping::where('teammember_id', auth()->user()->teammember_id)->select('assignmentmapping_id')->pluck('assignmentmapping_id')->first();
      $authid = auth()->user()->teammember_id;

      $notificationDatas =  DB::table('notifications')
        ->join('teammembers', 'teammembers.id', 'notifications.created_by')
        ->Where('targettype', '3')
        ->orWhere('targettype', '2')
        ->select(
          'notifications.*',
          'teammembers.profilepic',
          'teammembers.team_member'
        )->orderBy('created_at', 'desc')->paginate('2');
      //  dd($notificationDatas);

      $notification = Notification::count();
      $client = Client::count();
      $tender = Tender::where('teammember_id', auth()->user()->teammember_id)->count();
      $teammember = Teammember::where('status', '1')->count();
      $userid = auth()->user()->role_id;
      $pageid = Permission::where('role_id', $userid)->select('page_id')->pluck('page_id')->first();

      $openleave = DB::table('applyleaves')
        ->where('approver', auth()->user()->teammember_id)
        ->where('status', 0)
        ->count();

      $assetticket = DB::table('assettickets')
        ->leftjoin('teammembers', 'teammembers.id', 'assettickets.created_by')->where('assettickets.created_by', auth()->user()->teammember_id)
        ->select('assettickets.*', 'teammembers.team_member')->orderBy('created_at', 'desc')->get();
      $assignment =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->where(function ($query) {
          $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
            ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
        })

        ->select(
          'assignmentmappings.*',
          'clients.client_name',
          'assignmentbudgetings.assignmentname',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentgenerate_id'
        )
        ->where('assignmentbudgetings.status', 1)
        ->take(5)->get();

      $assignmentcount = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->where(function ($query) {
          $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
            ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
        })

        ->select(
          'assignmentmappings.*',
          'clients.client_name',
          'assignmentbudgetings.assignmentname',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentgenerate_id'
        )
        ->where('assignmentbudgetings.status', 1)
        ->count();

      $opentimesheetrequests = DB::table('timesheetrequests')
        ->where('status', 0)
        ->where(function ($query) {
          $query->where('timesheetrequests.partner', auth()->user()->teammember_id)
            ->orWhere('timesheetrequests.createdby', auth()->user()->teammember_id);
        })
        ->count();

      //Aproved leave jan to dec 
      $currentYear = date('Y');
      $approvedleavesvalue = DB::table('applyleaves')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 1)
        ->whereYear('from',  $currentYear)
        ->get();

      $leaveDurations = [];
      foreach ($approvedleavesvalue as $approvedleavesvalues) {
        $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

        $diff_in_days = $to->diffInDays($from) + 1;

        $holidaycount = DB::table('holidays')
          ->where('startdate', '>=', $approvedleavesvalues->from)
          ->where('enddate', '<=', $approvedleavesvalues->to)
          ->count();

        $leaveDurationcount = $diff_in_days - $holidaycount;
        $leaveDurations[] = $leaveDurationcount;
      }

      $approvedleavesvaluecount = array_sum($leaveDurations);
      // dd($approvedleavesvaluecount);
      //Aproved leave jan to dec end hare 

      return view('backEnd.index', compact('opentimesheetrequests', 'openleave', 'tender', 'mentor', 'mentees', 'notification', 'assignmentcount', 'assignment', 'pageid', 'assetticket', 'client', 'teammember', 'notificationDatas', 'upcomingBirthdays', 'workAnniversaries', 'upcomingHolidays', 'todayBirthdays', 'approvedleavesvaluecount'));
    } elseif (auth()->user()->role_id == 16) {
      $authidd = Assignmentteammapping::where('teammember_id', auth()->user()->teammember_id)->select('assignmentmapping_id')->pluck('assignmentmapping_id')->first();
      $authid = auth()->user()->teammember_id;
      $notificationDatas =    $notificationDatas = DB::table('notifications')
        //    ->leftjoin('users','users.id','notifications.created_by')
        ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
        ->Where('targettype', '3')->orWhere('targettype', '2')->orderBy('notifications.id', 'desc')->paginate(2);
      //  dd($notificationDatas);
      $notification = Notification::count();
      $client = Client::count();
      $tender = Tender::where('teammember_id', auth()->user()->teammember_id)->count();
      $teammember = Teammember::where('status', '1')->count();
      $userid = auth()->user()->role_id;
      $pageid = Permission::where('role_id', $userid)->select('page_id')->pluck('page_id')->first();
      $assetticket = DB::table('assettickets')
        ->leftjoin('teammembers', 'teammembers.id', 'assettickets.created_by')
        ->select('assettickets.*', 'teammembers.team_member')->orderBy('created_at', 'desc')->get();
      $assignment =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')

        ->select(
          'assignmentbudgetings.client_id',
          'assignmentbudgetings.assignmentgenerate_id',
          'clients.client_name',
          'assignments.assignment_name'
        )
        ->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)->distinct()->get();
      $assignmentcount = count($assignment);
      return view('backEnd.index', compact('tender', 'mentor', 'mentees', 'notification', 'assignmentcount', 'assignment', 'pageid', 'assetticket', 'client', 'teammember', 'notificationDatas', 'upcomingBirthdays', 'workAnniversaries', 'upcomingHolidays', 'todayBirthdays'));
    } elseif (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {
      //Aproved leave jan to dec 
      $currentYear = date('Y');
      $approvedleavesvalue = DB::table('applyleaves')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 1)
        ->whereYear('from',  $currentYear)
        ->get();

      $leaveDurations = [];
      foreach ($approvedleavesvalue as $approvedleavesvalues) {
        $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

        $diff_in_days = $to->diffInDays($from) + 1;

        $holidaycount = DB::table('holidays')
          ->where('startdate', '>=', $approvedleavesvalues->from)
          ->where('enddate', '<=', $approvedleavesvalues->to)
          ->count();

        $leaveDurationcount = $diff_in_days - $holidaycount;
        $leaveDurations[] = $leaveDurationcount;
      }

      $approvedleavesvaluecount = array_sum($leaveDurations);
      // dd($approvedleavesvaluecount);
      //Aproved leave jan to dec end hare 
      // dd(auth()->user()->teammember_id);
      $authidd = Assignmentteammapping::where('teammember_id', auth()->user()->teammember_id)->select('assignmentmapping_id')->pluck('assignmentmapping_id')->first();
      $authid = auth()->user()->teammember_id;

      $notificationDatas =   DB::table('notifications')
        ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
        ->where('notifications.targettype', '1')
        ->select('notifications.*', 'teammembers.team_member', 'teammembers.profilepic')->orWhere('targettype', '2')->orderBy('notifications.id', 'desc')->paginate(2);

      //  dd($notificationDatas);
      $notification = Notification::count();
      $client = Client::count();
      $teammember = Teammember::where('status', '1')->count();
      $userid = auth()->user()->role_id;
      $pageid = Permission::where('role_id', $userid)->select('page_id')->pluck('page_id')->first();
      $assetticket = DB::table('assettickets')
        ->leftjoin('users', 'users.id', 'assettickets.created_by')
        ->leftjoin('teammembers', 'teammembers.id', 'users.teammember_id')->where('assettickets.created_by', auth()->user()->teammember_id)
        ->select('assettickets.*', 'teammembers.team_member')->orderBy('created_at', 'desc')->get();

      //  dd($notificationDatas);

      $assignment =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        // get assignment name only
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->whereNotIn('clients.id', [33, 32, 34, 29])
        ->select(
          'assignmentbudgetings.client_id',
          'clients.client_name',
          'assignmentbudgetings.assignmentgenerate_id',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentname'
        )
        // ->where('clients.status', 0)
        ->where('assignmentbudgetings.status', 1)
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->take(5)->get();

      // $assignmentcount = count($assignment);

      $assignmentcount = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        // get assignment name only
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->whereNotIn('clients.id', [33, 32, 34, 29])
        ->select(
          'assignmentbudgetings.client_id',
          'clients.client_name',
          'assignmentbudgetings.assignmentgenerate_id',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentname'
        )
        // ->where('clients.status', 0)
        ->where('assignmentbudgetings.status', 1)
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->count();

      // manager
      return view('backEnd.index', compact('notification', 'mentor', 'mentees', 'assignmentcount', 'assignment', 'pageid', 'assetticket', 'client', 'teammember', 'notificationDatas', 'upcomingBirthdays', 'workAnniversaries', 'upcomingHolidays', 'todayBirthdays', 'approvedleavesvaluecount'));
    } else {
      $authidd = Assignmentteammapping::where('teammember_id', auth()->user()->teammember_id)->select('assignmentmapping_id')->pluck('assignmentmapping_id')->first();
      $authid = auth()->user()->teammember_id;
      $notificationDatas =   DB::table('notifications')
        //  ->leftjoin('users','users.id','notifications.created_by')
        ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
        ->where('notifications.targettype', '1')
        ->select('notifications.*', 'teammembers.team_member', 'teammembers.profilepic')->orWhere('targettype', '2')->orderBy('notifications.id', 'desc')->paginate(2);

      //  dd($notificationDatas);
      $notification = Notification::count();
      $client = Client::count();
      $teammember = Teammember::where('status', '1')->count();
      $userid = auth()->user()->role_id;
      $pageid = Permission::where('role_id', $userid)->select('page_id')->pluck('page_id')->first();
      $assetticket = DB::table('assettickets')
        ->leftjoin('users', 'users.id', 'assettickets.created_by')
        ->leftjoin('teammembers', 'teammembers.id', 'users.teammember_id')->where('assettickets.created_by', auth()->user()->teammember_id)
        ->select('assettickets.*', 'teammembers.team_member')->orderBy('created_at', 'desc')->get();

      $assignment =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->select(
          'assignmentbudgetings.client_id',
          'clients.client_name',
          'assignmentbudgetings.assignmentgenerate_id',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentname'
        )
        ->where('clients.status', 1)
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->take(5)->get();

      $assignmentcount = count($assignment);
      return view('backEnd.index', compact('notification', 'mentor', 'mentees', 'assignmentcount', 'assignment', 'pageid', 'assetticket', 'client', 'teammember', 'notificationDatas', 'upcomingBirthdays', 'workAnniversaries', 'upcomingHolidays', 'todayBirthdays'));
    }
  }



Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentmappingController.php
replace create() function 



    public function create(Request $request)
    {
        // $partner = Teammember::where('role_id', '=', 13)->where('status', '=', 1)->with('title')
        //     ->orderBy('team_member', 'asc')->get();
        // dd($partner);
        $partner = Teammember::where('role_id', '=', 13)
            ->where('status', '=', 1)
            ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
            ->with('title')
            ->orderBy('team_member', 'asc')
            ->get();

        $teammember = Teammember::where('status', '1')->whereIn('role_id', [14, 15])->with('title', 'role')
            ->orderBy('team_member', 'asc')->get();
        //dd($teammember);
        if ($request->ajax()) {


            if (isset($request->category_id)) {
                echo "<option>Please Select One</option>";

                $assignments = Assignment::leftJoin('assignmentbudgetings', function ($join) {
                    $join->on('assignments.id', '=', 'assignmentbudgetings.assignment_id');
                })->leftJoin('assignmentmappings', function ($join) {
                    $join->on('assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id');
                })
                    ->where('assignmentbudgetings.client_id', $request->category_id)
                    // get data only that is not matches assignmentmappings.assignmentgenerate_id from assignmentbudgetings table
                    ->whereNull('assignmentmappings.assignmentgenerate_id')
                    ->select('assignments.*', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentbudgetings.duedate', 'assignmentbudgetings.assignmentname')
                    ->get();

                foreach ($assignments as $sub) {
                    echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name  . '( ' . $sub->assignmentgenerate_id . ' )' . '( ' . $sub->assignmentname . ' )' . "</option>";
                }
            }
        } else {
            if (auth()->user()->role_id == 11 || auth()->user()->role_id == 12) {
                $client = Client::where('status', 1)->latest()->get();

                $assignment = Assignment::where('status', '1')
                    ->whereNotIn('id',  [214, 215])->orderBy('assignment_name')->get();

                $clientss = Client::activeClient()->orderBy('client_name')->orWhere('clients.leadpartner', auth()->user()->teammember_id)->orWhere('clients.createdbyadmin_id', auth()->user()->id)->orWhere('clients.updatedbyadmin_id', auth()->user()->id)->select('clients.*')->get();

                return view('backEnd.assignmentmapping.create', compact('client', 'teammember', 'partner', 'assignment', 'clientss'));
            } else {
                $client = DB::table('assignmentbudgetings')
                    ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                    ->Where('assignmentbudgetings.created_by', auth()->user()->id)
                    ->select('clients.client_name', 'clients.id')
                    ->distinct()->get();


                $assignment = Assignment::where('status', '1')
                    ->whereNotIn('id',  [214, 215])->orderBy('assignment_name')->get();

                $clientss = Client::activeClient()->orderBy('client_name')->orWhere('clients.leadpartner', auth()->user()->teammember_id)->orWhere('clients.createdbyadmin_id', auth()->user()->id)->orWhere('clients.updatedbyadmin_id', auth()->user()->id)->select('clients.*')->get();

                //	DB::table('clients')->
                //  orWhere('clients.leadpartner',auth()->user()->teammember_id)->
                //  orWhere('clients.createdbyadmin_id',auth()->user()->id)->
                //	 orWhere('clients.updatedbyadmin_id',auth()->user()->id)->
                //   select('clients.client_name','clients.id')->get();

                return view('backEnd.assignmentmapping.create', compact('client', 'teammember', 'partner', 'assignment', 'clientss'));
            }
        }
    }



Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentmappingController.php
replace index() function 


   public function index()
    {
        $permotioncheck = DB::table('teamrolehistory')
            ->where('teammember_id', auth()->user()->teammember_id)->first();

        if (auth()->user()->role_id == 11 || auth()->user()->role_id == 12 || auth()->user()->role_id == 18) {
            $assignmentmappingData = DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                //  ->leftjoin('assignmentteammappings','assignmentteammappings.assignmentmapping_id','assignmentmappings.id')
                // ->where('clients.status',1)
                ->select('assignmentbudgetings.client_id', 'clients.client_name', 'clients.client_code')->distinct()->get();
            //   dd($assignmentmappingData);
            return view('backEnd.assignmentmapping.index', compact('assignmentmappingData'));
        } elseif ($permotioncheck && auth()->user()->role_id == 13) {
            $assignmentmappingDatabefore =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->select('assignmentbudgetings.client_id', 'clients.client_name', 'clients.client_code')
                // ->where('clients.status', 0)
                ->whereNotIn('clients.id', [33, 32, 34, 29])
                ->where('assignmentbudgetings.status', 1)
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
                ->distinct()->get();

            $assignmentmappingDataafter = DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->where(function ($query) {
                    $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                        ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
                })
                ->where('assignmentbudgetings.status', 1)
                ->select('assignmentbudgetings.client_id', 'clients.client_name', 'clients.client_code')
                ->distinct()->get();

            $assignmentmappingData = $assignmentmappingDatabefore->merge($assignmentmappingDataafter);

            return view('backEnd.assignmentmapping.index', compact('assignmentmappingData'));
        } elseif (auth()->user()->role_id == 13) {
            $assignmentmappingData = DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->where(function ($query) {
                    $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                        ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
                })
                ->where('assignmentbudgetings.status', 1)
                ->select('assignmentbudgetings.client_id', 'clients.client_name', 'clients.client_code')
                ->distinct()->get();
            return view('backEnd.assignmentmapping.index', compact('assignmentmappingData'));
        } elseif (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {
            $assignmentmappingData =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->select('assignmentbudgetings.client_id', 'clients.client_name', 'clients.client_code')
                // ->where('clients.status', 0)
                ->whereNotIn('clients.id', [33, 32, 34, 29])
                ->where('assignmentbudgetings.status', 1)
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->get();

            return view('backEnd.assignmentmapping.index', compact('assignmentmappingData'));
        } else {
            $assignmentmappingData = DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')

                ->select('assignmentbudgetings.client_id', 'clients.client_name', 'clients.client_code')
                ->whereNotIn('clients.id', [33, 32, 34, 29])
                ->where('clients.status', 1)
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->get();

            return view('backEnd.assignmentmapping.index', compact('assignmentmappingData'));
        }
    }




Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php
replace index() function 


  public function index()
  {

    $permotioncheck = DB::table('teamrolehistory')
      ->where('teammember_id', auth()->user()->teammember_id)->first();
    // dd($permotioncheck);
    $currentdate = date('Y-m-d');
    $currentYear = date('Y');
    $financialYearStart = $currentYear . '-04-01';
    $financialYearEnd = ($currentYear + 1) . '-03-31';

    $casualteam = DB::table('teammembers')->where('id', auth()->user()->teammember_id)->first();

    $birthday = DB::table('leavetypes')
      ->where('year', $currentYear)->where('name', 'Birthday/Religious Festival')->first();
    $Casual = DB::table('leavetypes')->where('year', $currentYear)->where('name', 'Casual Leave')->first();
    $Sick = DB::table('leavetypes')->where('year', $currentYear)->where('name', 'Sick Leave')->first();
    //  dd($casualteam);
    if ($casualteam->joining_date < $Casual->startdate) {

      $to = \Carbon\Carbon::createFromFormat('Y-m-d', $Casual->startdate);
    } else {
      $to = \Carbon\Carbon::createFromFormat('Y-m-d', $casualteam->joining_date);
    }




    $diff_in_months = $to->diffInMonths($currentdate) + 1;
    if (\Carbon\Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->diffInDays($currentdate) < 90) {
      $diff_in_months = 0;
    }
    //dd($diff_in_months);
    $teamdate = \Carbon\Carbon::createFromFormat('Y-m-d', $casualteam->joining_date);
    //   $currentdate = date('Y-m-d');
    $teammonthcount = $teamdate->diffInMonths($currentdate) + 1;
    if ($teamdate->diffInDays($currentdate) < 90) {
      $teammonthcount = 0;
    }

    if (auth()->user()->teammember_id == 434 || auth()->user()->teammember_id == 429) {
      $teammember = Teammember::with('role:id,rolename')
        ->whereNotNull('joining_date')
        ->get();




      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;

      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);

        $datess = [];
        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->where('startdate', '>=', $toDate)
          ->where('enddate', '<=', $toDate)->select('startdate')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }

        $countSick = array_diff($datess, $hdatess);
      }

      $countSick = DB::table('leaveapprove')
        ->where('year', $currentYear)->where('leavetype', $Sick->id)
        ->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');
      //  dd($countSick);
      $countCasual = DB::table('leaveapprove')
        ->where('year', $currentYear)->where('leavetype', $Casual->id)
        ->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');

      $countCasualafmnth = DB::table('leaveapprove')
        ->where('year', $currentYear)
        ->where('leavetype', $Casual->id)
        ->where('teammemberid', auth()->user()->teammember_id)
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addMonths(3))->sum('totaldays');

      $countbirthday = DB::table('leaveapprove')
        ->where('year', $currentYear)->where('leavetype', $birthday->id)
        ->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');

      //dd($countSick);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      // dd($totalcountCasual);
      //  dd($countCasualafmnth);
      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name')->get();
      // dd($applyleaveDatas);
      return view('backEnd.applyleave.teamapplication', compact(
        'teammember',
        'countCasualafmnth',
        'teammonthcount',
        'totalcountCasual',
        'teamapplyleaveDatas',
        'birthday',
        'countbirthday',
        'Casual',
        'Sick',
        'countSick',
        'countCasual'
      ));
    } elseif (auth()->user()->role_id == 11) {

      $teammember = Teammember::with('role:id,rolename')
        ->whereNotNull('joining_date')
        ->get();

      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;
      $datess = [];
      $hdatess = [];
      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();


        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $datess = array_unique($datess);
      }
      $countSick = count(array_diff($datess, $hdatess));


      $appliedCasual = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countCasual = 0;
      $casualDates = [];
      foreach ($appliedCasual as $CasualLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $casualDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $casualDates = array_unique($casualDates);
      }
      $countCasual = count(array_diff($casualDates, $hdatess));

      $appliedCasualafmnth = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addDays(90))
        ->get();

      $countCasualafmnth = 0;
      $CasualafmnthDates = [];
      foreach ($appliedCasualafmnth as $CasualafmnthLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $CasualafmnthDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $CasualafmnthDates = array_unique($CasualafmnthDates);
      }
      $countCasualafmnth = count(array_diff($CasualafmnthDates, $hdatess));





      $appliedbirthday = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $birthday->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();
      $countbirthday = 0;
      $birthdayDates = [];
      foreach ($appliedbirthday as $birthdayLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $birthdayDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $birthdayDates = array_unique($birthdayDates);
      }
      $countbirthday = count(array_diff($birthdayDates, $hdatess));

      //dd($diff_in_months);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      //  dd($diff_in_months);

      //  dd($countCasualafmnth);
      $leavetaken = DB::table('leaveapprove')
        ->where('year', '2023')->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');
      $myapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.createdby', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name')->latest()->get();
      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name')->get();

      $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
      $attendance = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $clInAttendance = 0;
      $slInAttendance = 0;
      //dd($attendance);
      foreach ($attendance as $item) {
        foreach ($columns as $column) {
          if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
            $clInAttendance++;
          }
          if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
            $slInAttendance++;
          }
        }
      }

      $role_id = auth()->user()->teammember_id;
      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'teammembers.emailid', 'roles.rolename', 'leavetypes.name')
        // ->take(7)
        ->get();

      $hasPendingRequests = $teamapplyleaveDatas->contains('status', 0);
      // dd($applyleaveDatas);
      return view('backEnd.applyleave.teamapplication', compact(
        'teammember',
        'countCasualafmnth',
        'teammonthcount',
        'totalcountCasual',
        'teamapplyleaveDatas',
        'birthday',
        'countbirthday',
        'Casual',
        'Sick',
        'countSick',
        'countCasual',
        'role_id',
        'clInAttendance',
        'slInAttendance',
        'hasPendingRequests',
      ));
    } elseif (auth()->user()->role_id == 18) {

      $role_id = auth()->user()->teammember_id;

      $teammember = Teammember::with('role:id,rolename')
        ->whereNotNull('joining_date')
        ->get();

      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;
      $datess = [];
      $hdatess = [];
      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();


        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $datess = array_unique($datess);
      }
      $countSick = count(array_diff($datess, $hdatess));


      $appliedCasual = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countCasual = 0;
      $casualDates = [];
      foreach ($appliedCasual as $CasualLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $casualDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $casualDates = array_unique($casualDates);
      }
      $countCasual = count(array_diff($casualDates, $hdatess));

      $appliedCasualafmnth = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addDays(90))
        ->get();

      $countCasualafmnth = 0;
      $CasualafmnthDates = [];
      foreach ($appliedCasualafmnth as $CasualafmnthLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $CasualafmnthDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $CasualafmnthDates = array_unique($CasualafmnthDates);
      }
      $countCasualafmnth = count(array_diff($CasualafmnthDates, $hdatess));





      $appliedbirthday = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $birthday->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();
      $countbirthday = 0;
      $birthdayDates = [];
      foreach ($appliedbirthday as $birthdayLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $birthdayDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $birthdayDates = array_unique($birthdayDates);
      }
      $countbirthday = count(array_diff($birthdayDates, $hdatess));

      //dd($diff_in_months);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      //  dd($diff_in_months);

      //  dd($countCasualafmnth);
      $leavetaken = DB::table('leaveapprove')
        ->where('year', '2023')->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');

      $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
      $attendance = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $clInAttendance = 0;
      $slInAttendance = 0;
      //dd($attendance);
      foreach ($attendance as $item) {
        foreach ($columns as $column) {
          if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
            $clInAttendance++;
          }
          if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
            $slInAttendance++;
          }
        }
      }
      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name')->latest()->get();

      return view('backEnd.applyleave.teamapplication', compact(
        'teammember',
        'countCasualafmnth',
        'teammonthcount',
        'totalcountCasual',
        'teamapplyleaveDatas',
        'birthday',
        'countbirthday',
        'Casual',
        'Sick',
        'countSick',
        'countCasual',
        'role_id',
        'clInAttendance',
        'slInAttendance',
      ));
    } elseif ($permotioncheck && auth()->user()->role_id == 13) {

      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;
      $datess = [];
      $hdatess = [];
      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();


        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $datess = array_unique($datess);
      }
      $countSick = count(array_diff($datess, $hdatess));


      $appliedCasual = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countCasual = 0;
      $casualDates = [];
      foreach ($appliedCasual as $CasualLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $casualDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $casualDates = array_unique($casualDates);
      }
      $countCasual = count(array_diff($casualDates, $hdatess));

      $appliedCasualafmnth = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addDays(90))
        ->get();

      $countCasualafmnth = 0;
      $CasualafmnthDates = [];
      foreach ($appliedCasualafmnth as $CasualafmnthLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $CasualafmnthDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $CasualafmnthDates = array_unique($CasualafmnthDates);
      }
      $countCasualafmnth = count(array_diff($CasualafmnthDates, $hdatess));

      $appliedbirthday = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $birthday->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();
      $countbirthday = 0;
      $birthdayDates = [];
      foreach ($appliedbirthday as $birthdayLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $birthdayDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $birthdayDates = array_unique($birthdayDates);
      }
      $countbirthday = count(array_diff($birthdayDates, $hdatess));

      //dd($diff_in_months);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      //  dd($diff_in_months);

      //  dd($countCasualafmnth);
      $leavetaken = DB::table('leaveapprove')
        ->where('year', '2023')->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');
      // $myapplyleaveDatas  = DB::table('applyleaves')
      //   ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
      //   ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
      //   ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
      //   ->where('applyleaves.createdby', auth()->user()->teammember_id)
      //   ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->latest()->get();



      $commonQuery = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.createdby', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name');

      $myapplyleaveDatasbefore = (clone $commonQuery)
        ->whereDate('applyleaves.created_at', '<', $permotioncheck->created_at)
        ->addSelect('teammembers.staffcode')
        ->get();

      $myapplyleaveDatasafter = (clone $commonQuery)
        ->leftJoin('teamrolehistory as createdby_history', 'createdby_history.teammember_id', '=', 'teammembers.id')
        ->whereDate('applyleaves.created_at', '>', $permotioncheck->created_at)
        ->addSelect('createdby_history.newstaff_code')
        ->get();
      $myapplyleaveDatas = $myapplyleaveDatasafter->merge($myapplyleaveDatasbefore);





      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->get();

      $hasPendingRequests = $teamapplyleaveDatas->contains('status', 0);


      $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
      $attendance = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $clInAttendance = 0;
      $slInAttendance = 0;
      //dd($attendance);
      foreach ($attendance as $item) {
        foreach ($columns as $column) {
          if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
            $clInAttendance++;
          }
          if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
            $slInAttendance++;
          }
        }
      }

      //Aproved leave jan to dec 
      $currentYear = date('Y');
      $approvedleavesvalue = DB::table('applyleaves')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 1)
        ->whereYear('from',  $currentYear)
        ->get();

      $leaveDurations = [];
      foreach ($approvedleavesvalue as $approvedleavesvalues) {
        $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

        $diff_in_days = $to->diffInDays($from) + 1;

        $holidaycount = DB::table('holidays')
          ->where('startdate', '>=', $approvedleavesvalues->from)
          ->where('enddate', '<=', $approvedleavesvalues->to)
          ->count();

        $leaveDurationcount = $diff_in_days - $holidaycount;
        $leaveDurations[] = $leaveDurationcount;
      }

      $approvedleavesvaluecount = array_sum($leaveDurations);
      // dd($approvedleavesvaluecount);
      //Aproved leave jan to dec end hare 

      // dd($applyleaveDatas);
      return view('backEnd.applyleave.index', compact('countCasualafmnth', 'leavetaken', 'teammonthcount', 'totalcountCasual', 'myapplyleaveDatas', 'teamapplyleaveDatas', 'birthday', 'countbirthday', 'Casual', 'Sick', 'countSick', 'countCasual', 'clInAttendance', 'slInAttendance', 'approvedleavesvaluecount', 'hasPendingRequests'));
    } else {


      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;
      $datess = [];
      $hdatess = [];
      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();


        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $datess = array_unique($datess);
      }
      $countSick = count(array_diff($datess, $hdatess));


      $appliedCasual = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countCasual = 0;
      $casualDates = [];
      foreach ($appliedCasual as $CasualLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $casualDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $casualDates = array_unique($casualDates);
      }
      $countCasual = count(array_diff($casualDates, $hdatess));

      $appliedCasualafmnth = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addDays(90))
        ->get();

      $countCasualafmnth = 0;
      $CasualafmnthDates = [];
      foreach ($appliedCasualafmnth as $CasualafmnthLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $CasualafmnthDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $CasualafmnthDates = array_unique($CasualafmnthDates);
      }
      $countCasualafmnth = count(array_diff($CasualafmnthDates, $hdatess));

      $appliedbirthday = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $birthday->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();
      $countbirthday = 0;
      $birthdayDates = [];
      foreach ($appliedbirthday as $birthdayLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $birthdayDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $birthdayDates = array_unique($birthdayDates);
      }
      $countbirthday = count(array_diff($birthdayDates, $hdatess));

      //dd($diff_in_months);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      //  dd($diff_in_months);

      //  dd($countCasualafmnth);
      $leavetaken = DB::table('leaveapprove')
        ->where('year', '2023')->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');
      $myapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.createdby', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->latest()->get();

      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->get();

      $hasPendingRequests = $teamapplyleaveDatas->contains('status', 0);


      $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
      $attendance = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $clInAttendance = 0;
      $slInAttendance = 0;
      //dd($attendance);
      foreach ($attendance as $item) {
        foreach ($columns as $column) {
          if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
            $clInAttendance++;
          }
          if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
            $slInAttendance++;
          }
        }
      }

      //Aproved leave jan to dec 
      $currentYear = date('Y');
      $approvedleavesvalue = DB::table('applyleaves')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 1)
        ->whereYear('from',  $currentYear)
        ->get();

      $leaveDurations = [];
      foreach ($approvedleavesvalue as $approvedleavesvalues) {
        $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

        $diff_in_days = $to->diffInDays($from) + 1;

        $holidaycount = DB::table('holidays')
          ->where('startdate', '>=', $approvedleavesvalues->from)
          ->where('enddate', '<=', $approvedleavesvalues->to)
          ->count();

        $leaveDurationcount = $diff_in_days - $holidaycount;
        $leaveDurations[] = $leaveDurationcount;
      }

      $approvedleavesvaluecount = array_sum($leaveDurations);
      // dd($approvedleavesvaluecount);
      //Aproved leave jan to dec end hare 

      // dd($applyleaveDatas);
      return view('backEnd.applyleave.index', compact('countCasualafmnth', 'leavetaken', 'teammonthcount', 'totalcountCasual', 'myapplyleaveDatas', 'teamapplyleaveDatas', 'birthday', 'countbirthday', 'Casual', 'Sick', 'countSick', 'countCasual', 'clInAttendance', 'slInAttendance', 'approvedleavesvaluecount', 'hasPendingRequests'));
    }
  }



Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php
replace examleaverequestlist() function 



  public function examleaverequestlist()
  {
    $permotioncheck = DB::table('teamrolehistory')
      ->where('teammember_id', auth()->user()->teammember_id)->first();

    if (auth()->user()->role_id == 11) {
      $timesheetrequestsDatas = DB::table('leaverequest')
        ->leftjoin('teammembers', 'teammembers.id', 'leaverequest.approver')
        ->leftjoin('teammembers as createdby', 'createdby.id', 'leaverequest.createdby')
        ->leftjoin('applyleaves', 'applyleaves.id', 'leaverequest.applyleaveid')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        // ->where('createdby.id', auth()->user()->teammember_id)
        ->select(
          'leaverequest.*',
          'teammembers.team_member',
          'teammembers.staffcode',
          'applyleaves.leavetype',
          'leavetypes.name',
          'createdby.team_member as createdbyauth',
          'createdby.staffcode as teamstaffcode'
        )->get();

      $hasPendingRequests = $timesheetrequestsDatas->contains('status', 0);

      return view('backEnd.applyleave.adminrevertleave', compact(
        'timesheetrequestsDatas',
        'hasPendingRequests'

      ));
    } elseif ($permotioncheck && auth()->user()->role_id == 13) {
      $timesheetrequestsDatas = DB::table('leaverequest')
        ->leftjoin('teammembers', 'teammembers.id', 'leaverequest.approver')
        ->leftjoin('teammembers as createdby', 'createdby.id', 'leaverequest.createdby')
        ->leftJoin('teamrolehistory as createdby_history', 'createdby_history.teammember_id', '=', 'createdby.id')
        ->leftjoin('applyleaves', 'applyleaves.id', 'leaverequest.applyleaveid')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->where('createdby.id', auth()->user()->teammember_id)
        ->select(
          'leaverequest.*',
          'teammembers.team_member',
          'teammembers.staffcode',
          'applyleaves.leavetype',
          'leavetypes.name',
          'createdby.team_member as createdbyauth',
          'createdby.staffcode as teamstaffcode',
          'createdby_history.newstaff_code'
        )->get();

      $myteamtimesheetrequestsDatas = DB::table('leaverequest')
        ->leftjoin('teammembers', 'teammembers.id', 'leaverequest.approver')
        ->leftjoin('teammembers as createdby', 'createdby.id', 'leaverequest.createdby')
        ->leftjoin('applyleaves', 'applyleaves.id', 'leaverequest.applyleaveid')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->where('leaverequest.approver', auth()->user()->teammember_id)
        ->select(
          'leaverequest.*',
          'teammembers.team_member',
          'teammembers.staffcode',
          'applyleaves.leavetype',
          'leavetypes.name',
          'createdby.team_member as createdbyauth',
          'createdby.staffcode as teamstaffcode'
        )->get();

      $hasPendingRequests = $myteamtimesheetrequestsDatas->contains('status', 0);

      return view('backEnd.applyleave.examrequestlist', compact('timesheetrequestsDatas', 'myteamtimesheetrequestsDatas', 'hasPendingRequests'));
    } else {

      $timesheetrequestsDatas = DB::table('leaverequest')
        ->leftjoin('teammembers', 'teammembers.id', 'leaverequest.approver')
        ->leftjoin('teammembers as createdby', 'createdby.id', 'leaverequest.createdby')
        ->leftjoin('applyleaves', 'applyleaves.id', 'leaverequest.applyleaveid')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->where('createdby.id', auth()->user()->teammember_id)
        ->select(
          'leaverequest.*',
          'teammembers.team_member',
          'teammembers.staffcode',
          'applyleaves.leavetype',
          'leavetypes.name',
          'createdby.team_member as createdbyauth',
          'createdby.staffcode as teamstaffcode'
        )->get();

      $myteamtimesheetrequestsDatas = DB::table('leaverequest')
        ->leftjoin('teammembers', 'teammembers.id', 'leaverequest.approver')
        ->leftjoin('teammembers as createdby', 'createdby.id', 'leaverequest.createdby')
        ->leftjoin('applyleaves', 'applyleaves.id', 'leaverequest.applyleaveid')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->where('leaverequest.approver', auth()->user()->teammember_id)
        ->select(
          'leaverequest.*',
          'teammembers.team_member',
          'teammembers.staffcode',
          'applyleaves.leavetype',
          'leavetypes.name',
          'createdby.team_member as createdbyauth',
          'createdby.staffcode as teamstaffcode'
        )->get();

      $hasPendingRequests = $myteamtimesheetrequestsDatas->contains('status', 0);

      return view('backEnd.applyleave.examrequestlist', compact('timesheetrequestsDatas', 'myteamtimesheetrequestsDatas', 'hasPendingRequests'));
    }
  }
  

Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php
replace open_leave() function 


  public function open_leave($id)
  {

    $permotioncheck = DB::table('teamrolehistory')
      ->where('teammember_id', auth()->user()->teammember_id)->first();

    if (auth()->user()->role_id == 11) {

      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.status', '0')
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->get();
      // dd($applyleaveDatas);
      return view('backEnd.applyleave.adminopen', compact(
        'teamapplyleaveDatas'
      ));
    } elseif ($permotioncheck && auth()->user()->role_id == 13) {
      // $myapplyleaveDatas  = DB::table('applyleaves')
      //   ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
      //   ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
      //   ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
      //   ->where('applyleaves.createdby', auth()->user()->teammember_id)
      //   ->where('applyleaves.status', 0)
      //   ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')
      //   ->latest()->get();

      $commonQuery  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.createdby', auth()->user()->teammember_id)
        ->where('applyleaves.status', 0)
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name');


      $databeforepermotion = (clone $commonQuery)
        ->whereDate('applyleaves.created_at', '<', $permotioncheck->created_at)
        ->addSelect('teammembers.staffcode')
        ->get();

      $dataafterpermotion = (clone $commonQuery)
        ->leftJoin('teamrolehistory as createdby_history', 'createdby_history.teammember_id', '=', 'teammembers.id')
        ->whereDate('applyleaves.created_at', '>', $permotioncheck->created_at)
        ->addSelect('createdby_history.newstaff_code')
        ->get();

      // dd($timesheetrequestspermotion);

      $myapplyleaveDatas = $databeforepermotion->merge($dataafterpermotion);




      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->where('applyleaves.status', 0)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->get();
      return view('backEnd.applyleave.openindex', compact(
        'myapplyleaveDatas',
        'teamapplyleaveDatas'
      ));
    } else {
      $myapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.createdby', auth()->user()->teammember_id)
        ->where('applyleaves.status', 0)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->latest()->get();
      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->where('applyleaves.status', 0)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->get();
      return view('backEnd.applyleave.openindex', compact(
        'myapplyleaveDatas',
        'teamapplyleaveDatas'
      ));
    }
  }





Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ReportController.php
replace assignment_report() function 

  public function assignment_report()
  {


    $permotioncheck = DB::table('teamrolehistory')
      ->where('teammember_id', auth()->user()->teammember_id)->first();

    if (auth()->user()->role_id == 11) {
      $assignmentmappingData =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentbudgetings.status', '1')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code'
        )
        ->get();
      $assignmentmappingcloseData =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentbudgetings.status', '0')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code'
        )
        ->get();
      return view('backEnd.report.assignmentreport', compact('assignmentmappingData', 'assignmentmappingcloseData'));
    } elseif ($permotioncheck && auth()->user()->role_id == 13) {
      $assignmentmappingDatabefore =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        ->where('assignmentbudgetings.status', '1')
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentteammappings.teamhour',
        )->get();



      $assignmentmappingOpenleadpartner =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '1')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentmappings.leadpartner',
        )
        ->get();

      $assignmentmappingOpenotherpartner =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentmappings.otherpartner', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '1')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentmappings.otherpartner',

        )
        ->get();
      $assignmentmappingData = $assignmentmappingOpenotherpartner->merge($assignmentmappingOpenleadpartner)->merge($assignmentmappingDatabefore);

      $assignmentmappingcloseDatabefore =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '0')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentteammappings.teamhour',
        )->get();

      // dd($assignmentmappingData);
      $assignmentmappingClosedleadpartner =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '0')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentmappings.leadpartner',
        )->get();

      $assignmentmappingClosedotherpartner =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentmappings.otherpartner', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '0')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentmappings.otherpartner',
        )->get();

      $assignmentmappingcloseData =       $assignmentmappingClosedotherpartner->merge($assignmentmappingClosedleadpartner)->merge($assignmentmappingcloseDatabefore);

      // dd($assignmentmappingData);
      return view('backEnd.report.assignmentreport', compact('assignmentmappingData', 'assignmentmappingcloseData'));
    } elseif (auth()->user()->role_id == 13) {

      $assignmentmappingOpenleadpartner =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '1')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentmappings.leadpartner',
        )
        ->get();

      $assignmentmappingOpenotherpartner =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentmappings.otherpartner', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '1')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentmappings.otherpartner',

        )
        ->get();

      $assignmentmappingData = $assignmentmappingOpenotherpartner->merge($assignmentmappingOpenleadpartner);

      // dd($assignmentmappingData);
      $assignmentmappingClosedleadpartner =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '0')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentmappings.leadpartner',
        )->get();

      $assignmentmappingClosedotherpartner =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentmappings.otherpartner', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '0')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentmappings.otherpartner',
        )->get();

      $assignmentmappingcloseData = $assignmentmappingClosedotherpartner->merge($assignmentmappingClosedleadpartner);
      // dd($assignmentmappingcloseData);
      return view('backEnd.report.assignmentreport', compact('assignmentmappingData', 'assignmentmappingcloseData'));
    } else {
      $assignmentmappingData =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        ->where('assignmentbudgetings.status', '1')
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentteammappings.teamhour',
        )->get();



      $assignmentmappingcloseData =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '0')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentteammappings.teamhour',
        )->get();
      // dd($assignmentmappingcloseData);

      // dd($assignmentmappingData);
      return view('backEnd.report.assignmentreport', compact('assignmentmappingData', 'assignmentmappingcloseData'));
    }
  }





Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\BackEndController.php
replace index() function 


  public function index()
  {

    $permotioncheck = DB::table('teamrolehistory')
      ->where('teammember_id', auth()->user()->teammember_id)->first();

    $mentor_id = DB::table('teammembers')
      ->join('users', 'users.teammember_id', 'teammembers.id')
      ->where('users.teammember_id', auth()->user()->teammember_id)
      ->pluck('mentor_id')
      ->first();

    $mentee_id = DB::table('teammembers')
      ->join('users', 'users.teammember_id', 'teammembers.id')
      ->where('teammembers.mentor_id', auth()->user()->teammember_id)
      //->pluck('teammembers.id')
      ->get();

    //dd($mentee_id);
    $mentor = null;
    $mentees = null;

    if ($mentor_id != null) {
      $mentor = DB::table('teammembers')->where('id', $mentor_id)->first();
    }

    if (count($mentee_id) != 0) {
      $mentees = $mentee_id;
    }

    // Set $mentees to null (if needed)
    if ($mentees == null) {
      $mentees = null;
    }

    $todayBirthdays = Teammember::whereNotNull('dateofbirth')
      ->where('status', '1')
      ->get()
      ->filter(function ($birthday) {
        $dateofbirth = Carbon::parse($birthday->dateofbirth);
        $currentDate = Carbon::now();

        // Compare the month and day without considering the current year
        return $dateofbirth->month == $currentDate->month && $dateofbirth->day == $currentDate->day;
      })
      ->sortBy('dateofbirth');

    $upcomingBirthdays = Teammember::where('status', '1')
      ->whereRaw('DATE_FORMAT(dateofbirth, "%m-%d") > DATE_FORMAT(NOW(), "%m-%d")')
      ->orderByRaw('DATE_FORMAT(dateofbirth, "%m-%d")')
      ->limit(7)
      ->get();



    $workAnniversaries = Teammember::whereNotNull('joining_date')
      ->where('status', '1')
      ->get()
      ->filter(function ($teammember) {
        $joiningDate = Carbon::parse($teammember->joining_date);
        $currentDate = Carbon::now();

        // Compare the month and day without considering the current year
        $isAnniversaryToday = $joiningDate->month == $currentDate->month && $joiningDate->day == $currentDate->day;

        // Exclude work anniversaries with a duration of 0 years
        $isNonZeroAnniversary = $joiningDate->diffInYears($currentDate) > 0;

        return $isAnniversaryToday && $isNonZeroAnniversary;
      })
      ->sortBy('joining_date')
      ->take(2);

    $upcomingHolidays = Holiday::where('startdate', '>', now()->format('Y-m-d'))
      ->where('status', 1)
      ->orderBy('startdate', 'asc')
      ->take(2)
      ->get();

    if (auth()->user()->role_id == 11 || auth()->user()->role_id == 12) {
      $authidd = Assignmentteammapping::where('teammember_id', auth()->user()->teammember_id)->select('assignmentmapping_id')->pluck('assignmentmapping_id')->first();
      $authid = auth()->user()->teammember_id;
      $notificationDatas =  DB::table('notifications')
        ->join('teammembers', 'teammembers.id', 'notifications.created_by')
        ->select(
          'notifications.*',
          'teammembers.profilepic',
          'teammembers.team_member'
        )->orderBy('created_at', 'desc')->paginate('2');
      // dd($notificationDatas);
      $client = Client::count();
      $teammember = Teammember::where('status', '1')->count();
      $userid = auth()->user()->role_id;
      $pageid = Permission::where('role_id', $userid)->select('page_id')->pluck('page_id')->first();
      $assetticket = DB::table('assettickets')
        ->leftjoin('teammembers', 'teammembers.id', 'assettickets.created_by')
        ->select('assettickets.*', 'teammembers.team_member')->orderBy('created_at', 'desc')->paginate(2);
      $assignment =  DB::table('assignmentbudgetings')
        ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->select(
          'assignmentbudgetings.*',
          'clients.client_name',
          'assignments.assignment_name'
        )->orderBy('assignmentbudgetings.created_at', 'desc')->take(5)->get();

      $openleave = DB::table('applyleaves')
        ->where('status', 0)
        ->count();

      $opentimesheetrequests = DB::table('timesheetrequests')
        ->where('status', 0)
        ->count();

      $assignmentcount = Assignmentmapping::count();
      $notification = Notification::count();

      // Get open assinment count
      $openassignmentcount =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->where('assignmentbudgetings.status', '1')
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->count();
      // Get closed assinment count
      $closedassignmentcount =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->where('assignmentbudgetings.status', '0')
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->count();

      return view('backEnd.index', compact('openassignmentcount', 'closedassignmentcount', 'opentimesheetrequests', 'openleave', 'mentor', 'mentees', 'notification', 'assignmentcount', 'assignment', 'pageid', 'assetticket', 'client', 'teammember', 'notificationDatas', 'upcomingBirthdays', 'workAnniversaries', 'upcomingHolidays', 'todayBirthdays'));
    } elseif ($permotioncheck && auth()->user()->role_id == 13) {

      //Aproved leave jan to dec 
      $currentYear = date('Y');
      $approvedleavesvalue = DB::table('applyleaves')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 1)
        ->whereYear('from',  $currentYear)
        ->get();

      $leaveDurations = [];
      foreach ($approvedleavesvalue as $approvedleavesvalues) {
        $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

        $diff_in_days = $to->diffInDays($from) + 1;

        $holidaycount = DB::table('holidays')
          ->where('startdate', '>=', $approvedleavesvalues->from)
          ->where('enddate', '<=', $approvedleavesvalues->to)
          ->count();

        $leaveDurationcount = $diff_in_days - $holidaycount;
        $leaveDurations[] = $leaveDurationcount;
      }

      $approvedleavesvaluecount = array_sum($leaveDurations);
      // dd($approvedleavesvaluecount);
      //Aproved leave jan to dec end hare 
      // dd(auth()->user()->teammember_id);
      $authidd = Assignmentteammapping::where('teammember_id', auth()->user()->teammember_id)->select('assignmentmapping_id')->pluck('assignmentmapping_id')->first();
      $authid = auth()->user()->teammember_id;

      $notificationDatas =   DB::table('notifications')
        ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
        ->where('notifications.targettype', '1')
        ->select('notifications.*', 'teammembers.team_member', 'teammembers.profilepic')->orWhere('targettype', '2')->orderBy('notifications.id', 'desc')->paginate(2);

      //  dd($notificationDatas);
      $notification = Notification::count();
      $client = Client::count();
      $teammember = Teammember::where('status', '1')->count();
      $userid = auth()->user()->role_id;
      $pageid = Permission::where('role_id', $userid)->select('page_id')->pluck('page_id')->first();
      $assetticket = DB::table('assettickets')
        ->leftjoin('users', 'users.id', 'assettickets.created_by')
        ->leftjoin('teammembers', 'teammembers.id', 'users.teammember_id')->where('assettickets.created_by', auth()->user()->teammember_id)
        ->select('assettickets.*', 'teammembers.team_member')->orderBy('created_at', 'desc')->get();


      $openleave = DB::table('applyleaves')
        ->where('approver', auth()->user()->teammember_id)
        ->where('status', 0)
        ->count();
      //  dd($notificationDatas);

      $opentimesheetrequests = DB::table('timesheetrequests')
        ->where('status', 0)
        ->where(function ($query) {
          $query->where('timesheetrequests.partner', auth()->user()->teammember_id)
            ->orWhere('timesheetrequests.createdby', auth()->user()->teammember_id);
        })
        ->count();

      $assignment =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        // get assignment name only
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->whereNotIn('clients.id', [33, 32, 34, 29])
        ->select(
          'assignmentbudgetings.client_id',
          'clients.client_name',
          'assignmentbudgetings.assignmentgenerate_id',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentname'
        )
        // ->where('clients.status', 0)
        ->where('assignmentbudgetings.status', 1)
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->take(5)->get();

      // $assignmentcount = count($assignment);

      $assignmentcountbefore = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        // get assignment name only
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->whereNotIn('clients.id', [33, 32, 34, 29])
        ->select(
          'assignmentbudgetings.client_id',
          'clients.client_name',
          'assignmentbudgetings.assignmentgenerate_id',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentname'
        )
        // ->where('clients.status', 0)
        ->where('assignmentbudgetings.status', 1)
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->count();


      $assignmentcountafter = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->where(function ($query) {
          $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
            ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
        })

        ->select(
          'assignmentmappings.*',
          'clients.client_name',
          'assignmentbudgetings.assignmentname',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentgenerate_id'
        )
        ->where('assignmentbudgetings.status', 1)
        ->count();

      $assignmentcount = $assignmentcountbefore + $assignmentcountafter;
      // manager
      return view('backEnd.index', compact('notification', 'opentimesheetrequests', 'openleave', 'mentor', 'mentees', 'assignmentcount', 'assignment', 'pageid', 'assetticket', 'client', 'teammember', 'notificationDatas', 'upcomingBirthdays', 'workAnniversaries', 'upcomingHolidays', 'todayBirthdays', 'approvedleavesvaluecount'));
    } elseif (auth()->user()->role_id == 13) {
      $authidd = Assignmentteammapping::where('teammember_id', auth()->user()->teammember_id)->select('assignmentmapping_id')->pluck('assignmentmapping_id')->first();
      $authid = auth()->user()->teammember_id;

      $notificationDatas =  DB::table('notifications')
        ->join('teammembers', 'teammembers.id', 'notifications.created_by')
        ->Where('targettype', '3')
        ->orWhere('targettype', '2')
        ->select(
          'notifications.*',
          'teammembers.profilepic',
          'teammembers.team_member'
        )->orderBy('created_at', 'desc')->paginate('2');
      //  dd($notificationDatas);

      $notification = Notification::count();
      $client = Client::count();
      $tender = Tender::where('teammember_id', auth()->user()->teammember_id)->count();
      $teammember = Teammember::where('status', '1')->count();
      $userid = auth()->user()->role_id;
      $pageid = Permission::where('role_id', $userid)->select('page_id')->pluck('page_id')->first();

      $openleave = DB::table('applyleaves')
        ->where('approver', auth()->user()->teammember_id)
        ->where('status', 0)
        ->count();

      $assetticket = DB::table('assettickets')
        ->leftjoin('teammembers', 'teammembers.id', 'assettickets.created_by')->where('assettickets.created_by', auth()->user()->teammember_id)
        ->select('assettickets.*', 'teammembers.team_member')->orderBy('created_at', 'desc')->get();
      $assignment =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->where(function ($query) {
          $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
            ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
        })

        ->select(
          'assignmentmappings.*',
          'clients.client_name',
          'assignmentbudgetings.assignmentname',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentgenerate_id'
        )
        ->where('assignmentbudgetings.status', 1)
        ->take(5)->get();

      $assignmentcount = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->where(function ($query) {
          $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
            ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
        })

        ->select(
          'assignmentmappings.*',
          'clients.client_name',
          'assignmentbudgetings.assignmentname',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentgenerate_id'
        )
        ->where('assignmentbudgetings.status', 1)
        ->count();

      $opentimesheetrequests = DB::table('timesheetrequests')
        ->where('status', 0)
        ->where(function ($query) {
          $query->where('timesheetrequests.partner', auth()->user()->teammember_id)
            ->orWhere('timesheetrequests.createdby', auth()->user()->teammember_id);
        })
        ->count();

      //Aproved leave jan to dec 
      $currentYear = date('Y');
      $approvedleavesvalue = DB::table('applyleaves')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 1)
        ->whereYear('from',  $currentYear)
        ->get();

      $leaveDurations = [];
      foreach ($approvedleavesvalue as $approvedleavesvalues) {
        $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

        $diff_in_days = $to->diffInDays($from) + 1;

        $holidaycount = DB::table('holidays')
          ->where('startdate', '>=', $approvedleavesvalues->from)
          ->where('enddate', '<=', $approvedleavesvalues->to)
          ->count();

        $leaveDurationcount = $diff_in_days - $holidaycount;
        $leaveDurations[] = $leaveDurationcount;
      }

      $approvedleavesvaluecount = array_sum($leaveDurations);
      // dd($approvedleavesvaluecount);
      //Aproved leave jan to dec end hare 

      return view('backEnd.index', compact('opentimesheetrequests', 'openleave', 'tender', 'mentor', 'mentees', 'notification', 'assignmentcount', 'assignment', 'pageid', 'assetticket', 'client', 'teammember', 'notificationDatas', 'upcomingBirthdays', 'workAnniversaries', 'upcomingHolidays', 'todayBirthdays', 'approvedleavesvaluecount'));
    } elseif (auth()->user()->role_id == 16) {
      $authidd = Assignmentteammapping::where('teammember_id', auth()->user()->teammember_id)->select('assignmentmapping_id')->pluck('assignmentmapping_id')->first();
      $authid = auth()->user()->teammember_id;
      $notificationDatas =    $notificationDatas = DB::table('notifications')
        //    ->leftjoin('users','users.id','notifications.created_by')
        ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
        ->Where('targettype', '3')->orWhere('targettype', '2')->orderBy('notifications.id', 'desc')->paginate(2);
      //  dd($notificationDatas);
      $notification = Notification::count();
      $client = Client::count();
      $tender = Tender::where('teammember_id', auth()->user()->teammember_id)->count();
      $teammember = Teammember::where('status', '1')->count();
      $userid = auth()->user()->role_id;
      $pageid = Permission::where('role_id', $userid)->select('page_id')->pluck('page_id')->first();
      $assetticket = DB::table('assettickets')
        ->leftjoin('teammembers', 'teammembers.id', 'assettickets.created_by')
        ->select('assettickets.*', 'teammembers.team_member')->orderBy('created_at', 'desc')->get();
      $assignment =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')

        ->select(
          'assignmentbudgetings.client_id',
          'assignmentbudgetings.assignmentgenerate_id',
          'clients.client_name',
          'assignments.assignment_name'
        )
        ->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)->distinct()->get();
      $assignmentcount = count($assignment);
      return view('backEnd.index', compact('tender', 'mentor', 'mentees', 'notification', 'assignmentcount', 'assignment', 'pageid', 'assetticket', 'client', 'teammember', 'notificationDatas', 'upcomingBirthdays', 'workAnniversaries', 'upcomingHolidays', 'todayBirthdays'));
    } elseif (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {
      //Aproved leave jan to dec 
      $currentYear = date('Y');
      $approvedleavesvalue = DB::table('applyleaves')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 1)
        ->whereYear('from',  $currentYear)
        ->get();

      $leaveDurations = [];
      foreach ($approvedleavesvalue as $approvedleavesvalues) {
        $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

        $diff_in_days = $to->diffInDays($from) + 1;

        $holidaycount = DB::table('holidays')
          ->where('startdate', '>=', $approvedleavesvalues->from)
          ->where('enddate', '<=', $approvedleavesvalues->to)
          ->count();

        $leaveDurationcount = $diff_in_days - $holidaycount;
        $leaveDurations[] = $leaveDurationcount;
      }

      $approvedleavesvaluecount = array_sum($leaveDurations);
      // dd($approvedleavesvaluecount);
      //Aproved leave jan to dec end hare 
      // dd(auth()->user()->teammember_id);
      $authidd = Assignmentteammapping::where('teammember_id', auth()->user()->teammember_id)->select('assignmentmapping_id')->pluck('assignmentmapping_id')->first();
      $authid = auth()->user()->teammember_id;

      $notificationDatas =   DB::table('notifications')
        ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
        ->where('notifications.targettype', '1')
        ->select('notifications.*', 'teammembers.team_member', 'teammembers.profilepic')->orWhere('targettype', '2')->orderBy('notifications.id', 'desc')->paginate(2);

      //  dd($notificationDatas);
      $notification = Notification::count();
      $client = Client::count();
      $teammember = Teammember::where('status', '1')->count();
      $userid = auth()->user()->role_id;
      $pageid = Permission::where('role_id', $userid)->select('page_id')->pluck('page_id')->first();
      $assetticket = DB::table('assettickets')
        ->leftjoin('users', 'users.id', 'assettickets.created_by')
        ->leftjoin('teammembers', 'teammembers.id', 'users.teammember_id')->where('assettickets.created_by', auth()->user()->teammember_id)
        ->select('assettickets.*', 'teammembers.team_member')->orderBy('created_at', 'desc')->get();

      //  dd($notificationDatas);

      $assignment =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        // get assignment name only
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->whereNotIn('clients.id', [33, 32, 34, 29])
        ->select(
          'assignmentbudgetings.client_id',
          'clients.client_name',
          'assignmentbudgetings.assignmentgenerate_id',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentname'
        )
        // ->where('clients.status', 0)
        ->where('assignmentbudgetings.status', 1)
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->take(5)->get();

      // $assignmentcount = count($assignment);

      $assignmentcount = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        // get assignment name only
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->whereNotIn('clients.id', [33, 32, 34, 29])
        ->select(
          'assignmentbudgetings.client_id',
          'clients.client_name',
          'assignmentbudgetings.assignmentgenerate_id',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentname'
        )
        // ->where('clients.status', 0)
        ->where('assignmentbudgetings.status', 1)
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->count();

      // manager
      return view('backEnd.index', compact('notification', 'mentor', 'mentees', 'assignmentcount', 'assignment', 'pageid', 'assetticket', 'client', 'teammember', 'notificationDatas', 'upcomingBirthdays', 'workAnniversaries', 'upcomingHolidays', 'todayBirthdays', 'approvedleavesvaluecount'));
    } else {
      $authidd = Assignmentteammapping::where('teammember_id', auth()->user()->teammember_id)->select('assignmentmapping_id')->pluck('assignmentmapping_id')->first();
      $authid = auth()->user()->teammember_id;
      $notificationDatas =   DB::table('notifications')
        //  ->leftjoin('users','users.id','notifications.created_by')
        ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
        ->where('notifications.targettype', '1')
        ->select('notifications.*', 'teammembers.team_member', 'teammembers.profilepic')->orWhere('targettype', '2')->orderBy('notifications.id', 'desc')->paginate(2);

      //  dd($notificationDatas);
      $notification = Notification::count();
      $client = Client::count();
      $teammember = Teammember::where('status', '1')->count();
      $userid = auth()->user()->role_id;
      $pageid = Permission::where('role_id', $userid)->select('page_id')->pluck('page_id')->first();
      $assetticket = DB::table('assettickets')
        ->leftjoin('users', 'users.id', 'assettickets.created_by')
        ->leftjoin('teammembers', 'teammembers.id', 'users.teammember_id')->where('assettickets.created_by', auth()->user()->teammember_id)
        ->select('assettickets.*', 'teammembers.team_member')->orderBy('created_at', 'desc')->get();

      $assignment =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->select(
          'assignmentbudgetings.client_id',
          'clients.client_name',
          'assignmentbudgetings.assignmentgenerate_id',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentname'
        )
        ->where('clients.status', 1)
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->take(5)->get();

      $assignmentcount = count($assignment);
      return view('backEnd.index', compact('notification', 'mentor', 'mentees', 'assignmentcount', 'assignment', 'pageid', 'assetticket', 'client', 'teammember', 'notificationDatas', 'upcomingBirthdays', 'workAnniversaries', 'upcomingHolidays', 'todayBirthdays'));
    }
  }



Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\layouts\includes\leftsidebar.blade.php
find text    @elseif ($getroledata->page_id == 6)
add this code before searched text 



                  @elseif ($getroledata->page_id == 5)
                          <li>
                              <a class="material-ripple" href="{{ url('permotionandrejoin') }}">
                                  {{-- <i class="typcn typcn-book d-block mr-2"></i> --}}
                                  <i class="typcn typcn-arrow-up d-block mr-2"></i>
                                  Permotion/Rejoining
                              </a>
                          </li>




Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\layouts\includes\leftsidebar.blade.php
find text    $getuser = DB::table('teammembers')

      $getuserafter = DB::table('teammembers')
          ->join('roles', 'roles.id', 'teammembers.role_id')
          ->join('teamrolehistory', 'teamrolehistory.teammember_id', 'teammembers.id')
          ->where('teammembers.id', auth()->user()->teammember_id)
          ->select(
              'roles.rolename',
              'teammembers.team_member',
              'teammembers.profilepic',
              'teamrolehistory.newstaff_code',
          )
          ->first();

Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\layouts\includes\leftsidebar.blade.php
find text   { $getuser->team_member ?? '' }}

     <div class="profile-text">
              <h6 class="m-0">{{ $getuser->team_member ?? '' }} <br> (
                  {{ $getuser->newstaff_code ?? ($getuser->staffcode ?? '') }} )</h6>
              <span>{{ $getuser->rolename ?? '' }}</span>
          </div>




Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\report\assignmentreport.blade.php


find text   <table id="examplee" class="display nowrap">

                                <table id="examplee" class="display nowrap">
                                    <thead>
                                        <tr>
                                            <th style="display: none;">id</th>
                                            @if (auth()->user()->role_id == 13 || Auth::user()->role_id == 11 || Auth::user()->role_id == 14)
                                                <th>Edit</th>
                                            @endif
                                            <th>Assignment Id</th>
                                            <th>Assignment</th>
                                            <th>Client</th>
                                            <th>Client Code</th>
                                            <th>Period Start</th>
                                            <th>Period End</th>
                                            <th>Deadline</th>
                                            <th>Assigned Status</th>
                                            <th>Assigned Partner11</th>
                                            <th>Other Partner</th>
                                            <th>Team Leader </th>
                                            <th>Teammember</th>
                                            <th>Total Hour</th>
                                        </tr>
                                    </thead>

                                    <tbody>
                                        @foreach ($assignmentmappingData as $assignmentmappingDatas)
                                            <tr>
                                                @php
                                                    if (auth()->user()->role_id == 11) {
                                                        $teamhourteams = DB::table('assignmentteammappings')
                                                            ->where('assignmentmapping_id', $assignmentmappingDatas->id)
                                                            ->select(DB::raw('SUM(teamhour) as teamhourteam'))
                                                            ->first();

                                                        $partnerhour =
                                                            $assignmentmappingDatas->leadpartnerhour +
                                                            $assignmentmappingDatas->otherpartnerhour;

                                                        $totalhour = $partnerhour + $teamhourteams->teamhourteam;
                                                        // dd($totalhour);
                                                    }
                                                @endphp
                                                <td style="display: none;">{{ $assignmentmappingDatas->id }}</td>
                                                @if (auth()->user()->role_id == 13 || Auth::user()->role_id == 11 || Auth::user()->role_id == 14)
                                                    <td>
                                                        <a href="{{ url('/assignmentlist/' . $assignmentmappingDatas->assignmentgenerate_id) }}"
                                                            class="btn btn-info-soft btn-sm"><i class="far fa-edit"></i></a>
                                                    </td>
                                                @endif
                                                <td> <a
                                                        href="{{ url('/viewassignment/' . $assignmentmappingDatas->assignmentgenerate_id) }}">{{ $assignmentmappingDatas->assignmentgenerate_id }}</a>
                                                </td>
                                                <td>
                                                    {{ $assignmentmappingDatas->assignment_name }} @if ($assignmentmappingDatas->assignmentname != null)
                                                        ({{ $assignmentmappingDatas->assignmentname }})
                                                    @endif
                                                </td>
                                                <td> {{ $assignmentmappingDatas->client_name }}
                                                </td>
                                                <td> {{ $assignmentmappingDatas->client_code }}
                                                </td>
                                                <td>
                                                    @if ($assignmentmappingDatas->periodstart != null)
                                                        {{ date('d-m-Y', strtotime($assignmentmappingDatas->periodstart)) }}
                                                    @endif
                                                </td>

                                                <td>
                                                    @if ($assignmentmappingDatas->periodend != null)
                                                        {{ date('d-m-Y', strtotime($assignmentmappingDatas->periodend)) }}
                                                    @endif
                                                </td>
                                                <td>
                                                    @if ($assignmentmappingDatas->duedate != null)
                                                        {{ date('d-m-Y', strtotime($assignmentmappingDatas->duedate)) }}
                                                    @endif
                                                </td>
                                                <td>
                                                    @if ($assignmentmappingDatas->status == 1)
                                                        <span class="badge badge-primary">OPEN</span>
                                                    @elseif($assignmentmappingDatas->status == 0)
                                                        <span class="badge badge-danger">CLOSED</span>
                                                    @endif

                                                </td>

                                                {{-- <td>
                                                    {{ App\Models\Teammember::select('team_member')->where('id', $assignmentmappingDatas->leadpartner)->first()->team_member ?? '' }}
                                                    (
                                                    {{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $assignmentmappingDatas->leadpartner)->first()->staffcode ?? '' }})
                                                </td>
                                                <td>
                                                    {{ App\Models\Teammember::select('team_member')->where('id', $assignmentmappingDatas->otherpartner)->first()->team_member ?? '' }}
                                                    ({{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $assignmentmappingDatas->otherpartner)->first()->staffcode ?? '' }})
                                                </td> --}}

                                                @php
                                                    // $leadpartner = App\Models\Teammember::select(
                                                    //     'team_member',
                                                    //     'staffcode',
                                                    // )
                                                    //     ->where('id', $assignmentmappingDatas->leadpartner)
                                                    //     ->first();

                                                    // $otherPartner = App\Models\Teammember::select(
                                                    //     'team_member',
                                                    //     'staffcode',
                                                    // )
                                                    //     ->where('id', $assignmentmappingDatas->otherpartner)
                                                    //     ->first();

                                                    $leadpartner = DB::table('teammembers')
                                                        ->leftJoin(
                                                            'teamrolehistory',
                                                            'teamrolehistory.teammember_id',
                                                            '=',
                                                            'teammembers.id',
                                                        )
                                                        ->where('teammembers.id', $assignmentmappingDatas->leadpartner)
                                                        ->select(
                                                            'teammembers.team_member',
                                                            'teammembers.staffcode',
                                                            'teamrolehistory.newstaff_code',
                                                        )
                                                        ->first();

                                                    $otherPartner = DB::table('teammembers')
                                                        ->leftJoin(
                                                            'teamrolehistory',
                                                            'teamrolehistory.teammember_id',
                                                            '=',
                                                            'teammembers.id',
                                                        )
                                                        ->where('teammembers.id', $assignmentmappingDatas->otherpartner)
                                                        ->select(
                                                            'teammembers.team_member',
                                                            'teammembers.staffcode',
                                                            'teamrolehistory.newstaff_code',
                                                        )
                                                        ->first();

                                                @endphp
                                                <td>
                                                    {{ $leadpartner->team_member ?? '' }}
                                                    @if ($leadpartner && $leadpartner->team_member)
                                                        (
                                                        {{ $leadpartner->newstaff_code ?? ($leadpartner->staffcode ?? '') }})
                                                    @endif
                                                </td>

                                                <td>
                                                    {{ $otherPartner->team_member ?? '' }}
                                                    @if ($otherPartner && $otherPartner->team_member)
                                                        (
                                                        {{ $otherPartner->newstaff_code ?? ($otherPartner->staffcode ?? '') }})
                                                    @endif
                                                </td>

                                                <td>
                                                    @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $assignmentmappingDatas->id)->where('assignmentteammappings.type', 0)->get() as $sub)
                                                        {{ $sub->team_member }} ,
                                                    @endforeach
                                                </td>
                                                <td>
                                                    @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $assignmentmappingDatas->id)->where('assignmentteammappings.type', 2)->get() as $sub)
                                                        {{ $sub->team_member }} ,
                                                    @endforeach
                                                </td>

                                                @if (auth()->user()->role_id == 11)
                                                    <td> {{ $totalhour ?? '0' }}</td>
                                                @elseif (auth()->user()->role_id == 13)
                                                    <td>{{ $assignmentmappingDatas->leadpartnerhour ?? ($assignmentmappingDatas->otherpartnerhour ?? 0) }}
                                                    </td>
                                                @else
                                                    <td>{{ $assignmentmappingDatas->teamhour ?? '0' }} </td>
                                                @endif
                                            </tr>
                                        @endforeach
                                    </tbody>
                                </table>


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\report\assignmentreport.blade.php


find text   <table id="exampleee" class="display nowrap">

                            <table id="exampleee" class="display nowrap">
                                <thead>
                                    <tr>
                                        <th style="display: none;">id</th>
                                        <th>Assignment Id</th>
                                        <th>Assignment</th>
                                        <th>Client</th>
                                        <th>Client Code</th>

                                        <th>Period Start</th>
                                        <th>Period End</th>
                                        <th>Deadline</th>
                                        <th>Assigned Status</th>
                                        <th>Assigned Partner22</th>
                                        <th>Other Partner</th>
                                        <th>Team Leader </th>
                                        <th>Teammember</th>
                                        <th>Total Hour</th>
                                        @if (auth()->user()->role_id != 15 && Auth::user()->role_id != 11)
                                            <th>Edit</th>
                                        @endif

                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach ($assignmentmappingcloseData as $assignmentmappingcloseDatas)
                                        <tr>
                                            @php
                                                if (auth()->user()->role_id == 11) {
                                                    $teamhourteamsclosed = DB::table('assignmentteammappings')
                                                        ->where(
                                                            'assignmentmapping_id',
                                                            $assignmentmappingcloseDatas->id,
                                                        )
                                                        ->select(DB::raw('SUM(teamhour) as teamhourteam'))
                                                        ->first();

                                                    $partnerhourclosed =
                                                        $assignmentmappingcloseDatas->leadpartnerhour +
                                                        $assignmentmappingcloseDatas->otherpartnerhour;

                                                    $totalhourclosed =
                                                        $partnerhourclosed + $teamhourteamsclosed->teamhourteam;
                                                }
                                            @endphp



                                            <td style="display: none;">{{ $assignmentmappingcloseDatas->id }}</td>
                                            <td> <a
                                                    href="{{ url('/viewassignment/' . $assignmentmappingcloseDatas->assignmentgenerate_id) }}">{{ $assignmentmappingcloseDatas->assignmentgenerate_id }}</a>
                                            </td>
                                            <td>
                                                {{ $assignmentmappingcloseDatas->assignment_name }} @if ($assignmentmappingcloseDatas->assignmentname != null)
                                                    ({{ $assignmentmappingcloseDatas->assignmentname }})
                                                @endif
                                            </td>
                                            <td> {{ $assignmentmappingcloseDatas->client_name }}</td>
                                            <td> {{ $assignmentmappingcloseDatas->client_code }}</td>

                                            <td>
                                                @if ($assignmentmappingcloseDatas->periodstart != null)
                                                    {{ date('d-m-Y', strtotime($assignmentmappingcloseDatas->periodstart)) }}
                                                @endif
                                            </td>

                                            <td>
                                                @if ($assignmentmappingcloseDatas->periodend != null)
                                                    {{ date('d-m-Y', strtotime($assignmentmappingcloseDatas->periodend)) }}
                                                @endif
                                            </td>
                                            <td>
                                                @if ($assignmentmappingcloseDatas->duedate != null)
                                                    {{ date('d-m-Y', strtotime($assignmentmappingcloseDatas->duedate)) }}
                                                @endif
                                            </td>
                                            <td>
                                                @if ($assignmentmappingcloseDatas->status == 1)
                                                    <span class="badge badge-primary">OPEN</span>
                                                @elseif($assignmentmappingcloseDatas->status == 0)
                                                    <span class="badge badge-danger">CLOSED</span>
                                                @endif

                                            </td>
                                            {{-- <td>{{ App\Models\Teammember::select('team_member')->where('id', $assignmentmappingcloseDatas->leadpartner)->first()->team_member ?? '' }}
                                            </td>
                                            <td>{{ App\Models\Teammember::select('team_member')->where('id', $assignmentmappingcloseDatas->otherpartner)->first()->team_member ?? '' }}
                                            </td> --}}
                                            @php
                                                $leadpartnercloseed = App\Models\Teammember::select(
                                                    'team_member',
                                                    'staffcode',
                                                )
                                                    ->where('id', $assignmentmappingcloseDatas->leadpartner)
                                                    ->first();

                                                $otherPartnerclosed = App\Models\Teammember::select(
                                                    'team_member',
                                                    'staffcode',
                                                )
                                                    ->where('id', $assignmentmappingcloseDatas->otherpartner)
                                                    ->first();
                                            @endphp
                                            <td>
                                                {{ $leadpartnercloseed->team_member ?? '' }}
                                                @if ($leadpartnercloseed && $leadpartnercloseed->team_member)
                                                    ({{ $leadpartnercloseed->staffcode ?? '' }})
                                                @endif
                                            </td>
                                            <td>
                                                {{ $otherPartnerclosed->team_member ?? '' }}
                                                @if ($otherPartnerclosed && $otherPartnerclosed->team_member)
                                                    ({{ $otherPartnerclosed->staffcode ?? '' }})
                                                @endif
                                            </td>

                                            <td>
                                                @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $assignmentmappingcloseDatas->id)->where('assignmentteammappings.type', 0)->get() as $sub)
                                                    {{ $sub->team_member }} ,
                                                @endforeach
                                            </td>
                                            <td>
                                                @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $assignmentmappingcloseDatas->id)->where('assignmentteammappings.type', 2)->get() as $sub)
                                                    {{ $sub->team_member }} ,
                                                @endforeach
                                            </td>

                                            @if (auth()->user()->role_id == 11)
                                                <td> {{ $totalhourclosed ?? '0' }}</td>
                                            @elseif (auth()->user()->role_id == 13)
                                                <td>{{ $assignmentmappingcloseDatas->leadpartnerhour ?? ($assignmentmappingcloseDatas->otherpartnerhour ?? 0) }}
                                                </td>
                                            @else
                                                <td>{{ $assignmentmappingcloseDatas->teamhour ?? '0' }} </td>
                                            @endif

                                            @if (auth()->user()->role_id != 15 && Auth::user()->role_id != 11)
                                                <td>
                                                    <a href="{{ url('/assignmentlist/' . $assignmentmappingcloseDatas->assignmentgenerate_id) }}"
                                                        class="btn btn-info-soft btn-sm"><i class="far fa-edit"></i></a>
                                                </td>
                                            @endif
                                        </tr>
                                    @endforeach
                                </tbody>
                            </table>
							


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\clientlist.blade.php
find text    <table id="examplee" class="table display table-bordered table-striped table-hover">


                            <table id="examplee" class="table display table-bordered table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th class="textfixed">Assignment Id</th>
                                        <th class="textfixed">Assignment</th>
                                        <th class="textfixed">Status</th>
                                        <th class="textfixed">Period Start</th>
                                        <th class="textfixed">Period End</th>
                                        <th class="textfixed">Deadline</th>
                                        <th class="textfixed">Assigned Partner</th>
                                        <th class="textfixed">Other Partner</th>
                                        <th class="textfixed">Team Leader</th>
                                        <th>Teammember</th>
                                        <!--   <th>Edit</th>-->
                                    </tr>
                                </thead>
                                <tbody>

                                    @foreach ($clientassignment as $clientassignmentDatas)
                                        <tr>
                                            <td>
                                                @if (auth()->user()->role_id == 13)
                                                    @if (
                                                        $clientassignmentDatas->leadpartner == auth()->user()->teammember_id ||
                                                            $clientassignmentDatas->otherpartner == auth()->user()->teammember_id)
                                                        <a
                                                            href="{{ url('/viewassignment/' . $clientassignmentDatas->assignmentgenerate_id) }}">{{ $clientassignmentDatas->assignmentgenerate_id }}
                                                        </a>
                                                    @else
                                                        {{ $clientassignmentDatas->assignmentgenerate_id }}
                                                    @endif
                                                @else
                                                    <a
                                                        href="{{ url('/viewassignment/' . $clientassignmentDatas->assignmentgenerate_id) }}">{{ $clientassignmentDatas->assignmentgenerate_id }}
                                                    </a>
                                                @endif
                                            </td>
                                            <td><span><b> Client Name :</b></span>
                                                {{ $clientassignmentDatas->client_name }}<br><span><b>Assignment
                                                        :</b></span>
                                                {{ $clientassignmentDatas->assignment_name }}
                                            </td>
                                            {{-- <td class="text-center"> --}}
                                            <td>
                                                @if ($clientassignmentDatas->status == 1)
                                                    <span class="badge badge-primary">Open</span>
                                                @elseif($clientassignmentDatas->status == 0)
                                                    <span class="badge badge-danger">Closed</span>
                                                @endif

                                            </td>
                                            <td class="textfixed">
                                                @if ($clientassignmentDatas->periodstart != null)
                                                    {{ date('d-m-Y', strtotime($clientassignmentDatas->periodstart)) }}
                                                @endif
                                            </td>
                                            <td class="textfixed">
                                                @if ($clientassignmentDatas->periodend != null)
                                                    {{ date('d-m-Y', strtotime($clientassignmentDatas->periodend)) }}
                                                @endif
                                            </td>
                                            <td class="textfixed">
                                                {{ date('d-m-Y', strtotime($clientassignmentDatas->duedate)) }}</td>
                                            {{-- <td>
                                                {{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $clientassignmentDatas->leadpartner)->first()->team_member ?? '' }}
                                                ({{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $clientassignmentDatas->leadpartner)->first()->staffcode ?? '' }})
                                            </td>
                                            <td>
                                                {{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $clientassignmentDatas->otherpartner)->first()->team_member ?? '' }}
                                                ({{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $clientassignmentDatas->otherpartner)->first()->staffcode ?? '' }})
                                            </td> --}}

                                            @php

                                                $leadpartner = DB::table('teammembers')
                                                    ->leftJoin(
                                                        'teamrolehistory',
                                                        'teamrolehistory.teammember_id',
                                                        '=',
                                                        'teammembers.id',
                                                    )
                                                    ->where('teammembers.id', $clientassignmentDatas->leadpartner)
                                                    ->select(
                                                        'teammembers.team_member',
                                                        'teammembers.staffcode',
                                                        'teamrolehistory.newstaff_code',
                                                    )
                                                    ->first();

                                                $otherPartner = DB::table('teammembers')
                                                    ->leftJoin(
                                                        'teamrolehistory',
                                                        'teamrolehistory.teammember_id',
                                                        '=',
                                                        'teammembers.id',
                                                    )
                                                    ->where('teammembers.id', $clientassignmentDatas->otherpartner)
                                                    ->select(
                                                        'teammembers.team_member',
                                                        'teammembers.staffcode',
                                                        'teamrolehistory.newstaff_code',
                                                    )
                                                    ->first();

                                            @endphp

                                            <td>
                                                {{ $leadpartner->team_member ?? '' }}
                                                @if ($leadpartner && $leadpartner->team_member)
                                                    ({{ $leadpartner->newstaff_code ?? ($leadpartner->staffcode ?? '') }})
                                                @endif
                                            </td>
                                            <td>
                                                {{ $otherPartner->team_member ?? '' }}
                                                @if ($otherPartner && $otherPartner->team_member)
                                                    (
                                                    {{ $otherPartner->newstaff_code ?? ($otherPartner->staffcode ?? '') }})
                                                @endif
                                            </td>
                                            <td>
                                                @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $clientassignmentDatas->id)->where('assignmentteammappings.type', 0)->get() as $sub)
                                                    {{-- @php
                                                        dd($sub);
                                                    @endphp --}}
                                                    @if ($sub->profilepic == null)
                                                        <a class="avatar avatar-xs" data-toggle="tooltip"
                                                            title="{{ $sub->team_member }}({{ $sub->staffcode }})">
                                                            <img src="{{ url('backEnd/image/dummy.png') }}"
                                                                class="avatar-img rounded-circle" alt="...">
                                                        @else
                                                            <a class="avatar avatar-xs" data-toggle="tooltip"
                                                                title="{{ $sub->team_member }}({{ $sub->staffcode }})">
                                                                <img src="{{ asset('backEnd/image/teammember/profilepic/' . $sub->profilepic) }}"
                                                                    class="avatar-img rounded-circle" alt="...">
                                                    @endif
                                                @endforeach
                                            </td>
                                            <td>
                                                @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $clientassignmentDatas->id)->where('assignmentteammappings.type', 2)->get() as $sub)
                                                    @if ($sub->profilepic == null)
                                                        <a class="avatar avatar-xs" data-toggle="tooltip"
                                                            title="{{ $sub->team_member }}({{ $sub->staffcode }})">
                                                            <img src="{{ url('backEnd/image/dummy.png') }}"
                                                                class="avatar-img rounded-circle" alt="...">
                                                        @else
                                                            <a class="avatar avatar-xs" data-toggle="tooltip"
                                                                title="{{ $sub->team_member }}({{ $sub->staffcode }})">
                                                                <img src="{{ asset('backEnd/image/teammember/profilepic/' . $sub->profilepic) }}"
                                                                    class="avatar-img rounded-circle" alt="...">
                                                    @endif
                                                @endforeach
                                            </td>

                                            <!--  <td>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <a href="{{ url('/assignmentlist/' . $clientassignmentDatas->assignmentgenerate_id) }}"
class="btn btn-info-soft btn-sm"><i class="far fa-edit"></i></a>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    </td>-->
                                        </tr>
                                    @endforeach
                                </tbody>
                            </table>
							


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\viewassignment.blade.php

find text     @foreach ($partner as $partnerData)

      @foreach ($partner as $partnerData)
                                                    <tr>
                                                        @php
                                                            $permotioncheck = DB::table('teamrolehistory')
                                                                ->where('teammember_id', $partnerData->id)
                                                                ->first();
                                                        @endphp
                                                        <td>{{ $partnerData->title }} {{ $partnerData->team_member }}
                                                        </td>
                                                        {{-- <td>{{ $partnerData->staffcode }}
                                                        </td> --}}
                                                        <td>
                                                            {{ $permotioncheck->newstaff_code ?? ($partnerData->staffcode ?? '') }}
                                                        </td>
                                                        <td>
                                                            @if ($partnerData->role_id == 13)
                                                                <span>Partner</span>
                                                            @else
                                                                <span>NA</span>
                                                            @endif
                                                        </td>
                                                        <td><a
                                                                href="tel:={{ $partnerData->mobile_no }}">{{ $partnerData->mobile_no }}</a>
                                                        </td>
                                                        <td>{{ $partnerData->leadpartnerhour ?? ($partnerData->otherpartnerhour ?? 0) }}
                                                        </td>

                                                    </tr>
                                                @endforeach




Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\applyleave\adminopen.blade.php
find text   <table id="examplee" class="table display table-bordered table-striped table-hover">


                    <table id="examplee" class="table display table-bordered table-striped table-hover">
                        <thead>
                            <tr>
                                <th style="display: none;">id</th>
                                <th>Employee</th>
                                <th>Staff Code</th>
                                <th>Date of Request</th>
                                <th>Status</th>
                                <th>Leave Type</th>
                                <th>Leave Period</th>
                                <th>Days</th>
                                <th>Approver</th>
                                <th>Reason for Leave</th>
                                <th>Approved</th>
                                <th>Reject</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach ($teamapplyleaveDatas as $applyleaveDatas)
                                <tr>
                                    @php
                                        $permotioncheck = DB::table('teamrolehistory')
                                            ->where('teammember_id', $applyleaveDatas->createdby)
                                            ->first();

                                        $datadate = Carbon\Carbon::createFromFormat(
                                            'Y-m-d H:i:s',
                                            $applyleaveDatas->created_at,
                                        );

                                        $permotiondate = null;
                                        if ($permotioncheck) {
                                            $permotiondate = Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $permotioncheck->created_at,
                                            );
                                        }

                                    @endphp
                                    <td style="display: none;">{{ $applyleaveDatas->id }}</td>
                                    <td> <a href="{{ route('applyleave.show', $applyleaveDatas->id) }}">
                                            {{ $applyleaveDatas->team_member ?? '' }}</a>
                                    </td>
                                    {{-- <td>{{ $applyleaveDatas->staffcode ?? '' }}</td> --}}
                                    @if ($permotioncheck && $datadate->greaterThan($permotiondate))
                                        <td>{{ $permotioncheck->newstaff_code }}</td>
                                    @else
                                        <td>{{ $applyleaveDatas->staffcode }}</td>
                                    @endif
                                    <td>{{ date('d-m-Y', strtotime($applyleaveDatas->created_at)) ?? '' }}</td>
                                    <td class="columnSize">
                                        @if ($applyleaveDatas->status == 0)
                                            <span class="badge badge-pill badge-warning"><span
                                                    style="display: none;">A</span>Created</span>
                                        @elseif($applyleaveDatas->status == 1)
                                            <span class="badge badge-success"><span
                                                    style="display: none;">B</span>Approved</span>
                                        @elseif($applyleaveDatas->status == 2)
                                            <span class="badge badge-danger">Rejected</span>
                                        @endif
                                    </td>

                                    <td>

                                        {{ $applyleaveDatas->name ?? '' }}<br>
                                        @if ($applyleaveDatas->type == '0')
                                            <b>Type :</b> <span>Birthday</span><br>
                                            <span><b>Birthday Date :
                                                </b>{{ date(
                                                    'F d,Y',
                                                    strtotime(
                                                        App\Models\Teammember::select('dateofbirth')->where('id', $applyleaveDatas->createdby)->first()->dateofbirth,
                                                    ),
                                                ) ?? '' }}</span>
                                        @elseif($applyleaveDatas->type == '1')
                                            <span>Religious Festival</span>
                                        @endif
                                    </td>
                                    <td>{{ date('d-m-Y', strtotime($applyleaveDatas->from)) ?? '' }} -
                                        {{ date('d-m-Y', strtotime($applyleaveDatas->to)) ?? '' }}</td>
                                    @php
                                        $to = Carbon\Carbon::createFromFormat('Y-m-d', $applyleaveDatas->to ?? '');
                                        $from = Carbon\Carbon::createFromFormat('Y-m-d', $applyleaveDatas->from);
                                        $diff_in_days = $to->diffInDays($from) + 1;
                                        $holidaycount = DB::table('holidays')
                                            ->where('startdate', '>=', $applyleaveDatas->from)
                                            ->where('enddate', '<=', $applyleaveDatas->to)
                                            ->count();
                                    @endphp
                                    <td>{{ $diff_in_days - $holidaycount ?? '' }}</td>
                                    <td>{{ App\Models\Teammember::select('team_member')->where('id', $applyleaveDatas->approver)->first()->team_member ?? '' }}
                                        ({{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $applyleaveDatas->approver)->first()->staffcode ?? '' }})
                                    </td>
                                    <td>
                                        <div style="font-size: 15px; width: 7rem;text-wrap: wrap;">
                                            {{ $applyleaveDatas->reasonleave ?? '' }}
                                        </div>
                                    </td>
                                    <td>
                                        @if ($applyleaveDatas->status == 0)
                                            <form method="post"
                                                action="{{ route('applyleave.update', $applyleaveDatas->id) }}"
                                                enctype="multipart/form-data" style="text-align: center;">
                                                @method('PATCH')
                                                @csrf
                                                <input type="text" hidden id="example-date-input" name="status"
                                                    value="1" class="form-control" placeholder="Enter Location">
                                                <button type="submit" class="btn btn-success"
                                                    style="border-radius: 7px; font-size: 10px; padding: 5px;">
                                                    Approve</button>
                                            </form>
                                        @endif
                                    </td>
                                    <td style="text-align: center;">
                                        @if ($applyleaveDatas->status == 0)
                                            <button data-toggle="modal" data-target="#exampleModal12{{ $loop->index }}"
                                                class="btn btn-danger"
                                                style="border-radius: 7px; font-size: 10px; padding: 5px; margin-bottom: 16px;">
                                                Reject</button>
                                        @endif
                                    </td>

                                    <!-- model box / pop up box  -->
                                    <div class="modal fade" id="exampleModal12{{ $loop->index }}" tabindex="-1"
                                        role="dialog" aria-labelledby="exampleModalLabel4" aria-hidden="true">
                                        <div class="modal-dialog" role="document">
                                            <div class="modal-content">
                                                <div class="modal-header" style="background:#37A000">
                                                    <h5 style="color: white" class="modal-title font-weight-600"
                                                        id="exampleModalLabel1">Reason For
                                                        Rejection</h5>
                                                    <button type="button" class="close" data-dismiss="modal"
                                                        aria-label="Close">
                                                        <span aria-hidden="true">&times;</span>
                                                    </button>
                                                </div>
                                                <form method="post"
                                                    action="{{ url('applyleave/update', $applyleaveDatas->id) }}"
                                                    enctype="multipart/form-data">
                                                    @csrf
                                                    <div class="modal-body">
                                                        <div class="row row-sm">
                                                            <div class="col-12">
                                                                <div class="form-group">
                                                                    <textarea rows="6" name="remark" class="form-control" placeholder=""></textarea>
                                                                    <input hidden type="text" id="example-date-input"
                                                                        name="status" value="2" class="form-control"
                                                                        placeholder="Enter Reason">
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <button type="button" class="btn btn-danger"
                                                            data-dismiss="modal">Close</button>
                                                        <button type="submit" style="float: right"
                                                            class="btn btn-success">Save </button>
                                                    </div>
                                                </form>
                                            </div>
                                        </div>
                                    </div>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
					


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\applyleave\adminrevertleave.blade.php
find text   <table id="examplee" class="table display table-bordered table-striped table-hover">


      <table id="examplee" class="table display table-bordered table-striped table-hover">
                         <thead>
                             <tr>
                                 <th style="display: none;">id</th>
                                 <th class="textfixed">Employee</th>
                                 <th class="textfixed">Staff Code</th>
                                 <th class="textfixed">Status</th>
                                 <th class="textfixed">Leave Type</th>
                                 <th class="textfixed">Date Of Request</th>
                                 <th class="textfixed">From</th>
                                 <th class="textfixed">To</th>
                                 <th class="textfixed">Approver</th>
                                 <th>Reason</th>
                                 @if ($hasPendingRequests)
                                     <th>Approved</th>
                                     <th>Reject</th>
                                 @endif
                             </tr>
                         </thead>
                         <tbody>
                             {{-- @php
                               dd($timesheetrequestsDatas);
                           @endphp --}}
                             @foreach ($timesheetrequestsDatas as $timesheetrequestsData)
                                 <tr>
                                     @php
                                         $permotioncheck = DB::table('teamrolehistory')
                                             ->where('teammember_id', $timesheetrequestsData->createdby)
                                             ->first();

                                         $datadate = Carbon\Carbon::createFromFormat(
                                             'Y-m-d H:i:s',
                                             $timesheetrequestsData->created_at,
                                         );

                                         $permotiondate = null;
                                         if ($permotioncheck) {
                                             $permotiondate = Carbon\Carbon::createFromFormat(
                                                 'Y-m-d H:i:s',
                                                 $permotioncheck->created_at,
                                             );
                                         }

                                     @endphp
                                     <td style="display: none;">{{ $timesheetrequestsData->id }}</td>
                                     {{-- <td>{{ $timesheetrequestsData->createdbyauth }}</td> --}}
                                     @if (auth()->user()->role_id == 11)
                                         <td class="textfixed">
                                             {{-- <a href="{{ route('applyleave.show', $applyleaveDatas->id) }}"> --}}
                                             <a href="{{ url('examleaverequest', $timesheetrequestsData->id) }}">
                                                 {{ $timesheetrequestsData->createdbyauth ?? '' }}</a>
                                         </td>
                                         {{-- <td>{{ $timesheetrequestsData->teamstaffcode }}</td> --}}
                                         @if ($permotioncheck && $datadate->greaterThan($permotiondate))
                                             <td>{{ $permotioncheck->newstaff_code }}</td>
                                         @else
                                             <td>{{ $timesheetrequestsData->teamstaffcode }}</td>
                                         @endif
                                     @else
                                         <td>{{ $timesheetrequestsData->createdbyauth }}</td>
                                         {{-- <td>{{ $timesheetrequestsData->teamstaffcode }}</td> --}}
                                     @endif
                                     <td>
                                         @if ($timesheetrequestsData->status == 0)
                                             <span class="badge badge-pill badge-warning">Created</span>
                                         @elseif($timesheetrequestsData->status == 1)
                                             <span class="badge badge-pill badge-success">Approved</span>
                                         @else
                                             <span class="badge badge-pill badge-danger">Rejected</span>
                                         @endif
                                     </td>
                                     <td>{{ $timesheetrequestsData->name }}</td>

                                     <td class="textfixed">
                                         {{ date('d-M-Y', strtotime($timesheetrequestsData->created_at)) }}</td>

                                     <td class="textfixed">
                                         {{ date('d-M-Y', strtotime($timesheetrequestsData->from_date)) }}</td>
                                     <td class="textfixed">
                                         {{ $timesheetrequestsData->to_date ? date('d-M-Y', strtotime($timesheetrequestsData->to_date)) : 'NA' }}
                                     </td>
                                     <td>{{ $timesheetrequestsData->team_member }}
                                         ({{ $timesheetrequestsData->staffcode }})
                                     </td>
                                     <td>{{ $timesheetrequestsData->reason }}</td>
                                     {{-- <td>{{ $timesheetrequestsData->remark }}</td> --}}
                                     <td>
                                         @if ($timesheetrequestsData->status == 0)
                                             <form method="post"
                                                 action="{{ route('examleaveapprove', $timesheetrequestsData->id) }}"
                                                 enctype="multipart/form-data" style="text-align: center;">
                                                 @method('PATCH')
                                                 @csrf
                                                 <button type="submit" class="btn btn-success"
                                                     style="border-radius: 7px; font-size: 10px; padding: 5px;">
                                                     Approve</button>
                                                 <input type="text" hidden id="example-date-input" name="status"
                                                     value="1" class="form-control">

                                                 <input type="hidden" name="leavetype"
                                                     value="{{ $timesheetrequestsData->leavetype }}" class="form-control"
                                                     placeholder="">
                                             </form>
                                         @endif
                                     </td>
                                     <td>
                                         @if ($timesheetrequestsData->status == 0)
                                             <form method="post"
                                                 action="{{ route('examleaveapprove', $timesheetrequestsData->id) }}"
                                                 enctype="multipart/form-data" style="text-align: center;">
                                                 @method('PATCH')
                                                 @csrf
                                                 <button style="border-radius: 7px; font-size: 10px; padding: 5px;"
                                                     type="submit" class="btn btn-danger">
                                                     Reject</button>
                                                 <input hidden type="text" id="example-date-input" name="status"
                                                     value="2" class="form-control" placeholder="Enter Location">
                                             </form>
                                         @endif
                                     </td>
                                 </tr>
                             @endforeach
                         </tbody>
                     </table>
					 

Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\applyleave\examrequestlist.blade.php
find text  <table id="examplee" class="table display table-bordered table-striped table-hover">


    <table id="examplee" class="table display table-bordered table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th style="display: none;">id</th>
                                            <th>Employee</th>
                                            <th>Staff Code</th>
                                            <th>Status</th>
                                            <th>Leave Type</th>
                                            <th>Date of Request</th>
                                            <th>From</th>
                                            <th>To</th>
                                            <th>Approver</th>
                                            <th>Reason</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach ($timesheetrequestsDatas as $timesheetrequestsData)
                                            <tr>
                                                @php
                                                    $permotioncheck = DB::table('teamrolehistory')
                                                        ->where('teammember_id', auth()->user()->teammember_id)
                                                        ->first();

                                                    $datadate = Carbon\Carbon::createFromFormat(
                                                        'Y-m-d H:i:s',
                                                        $timesheetrequestsData->created_at,
                                                    );

                                                    $permotiondate = null;
                                                    if ($permotioncheck) {
                                                        $permotiondate = Carbon\Carbon::createFromFormat(
                                                            'Y-m-d H:i:s',
                                                            $permotioncheck->created_at,
                                                        );
                                                    }
                                                @endphp
                                                <td style="display: none;">{{ $timesheetrequestsData->id }}</td>
                                                {{-- <td>{{ $timesheetrequestsData->createdbyauth }}</td> --}}
                                                @if (auth()->user()->role_id == 11)
                                                    <td>
                                                        {{-- <a href="{{ route('applyleave.show', $applyleaveDatas->id) }}"> --}}
                                                        <a href="{{ url('examleaverequest', $timesheetrequestsData->id) }}">
                                                            {{ $timesheetrequestsData->createdbyauth ?? '' }}</a>
                                                    </td>
                                                @else
                                                    <td>{{ $timesheetrequestsData->createdbyauth }}</td>
                                                @endif
                                                {{-- <td>{{ $timesheetrequestsData->teamstaffcode }}</td> --}}
                                                @if ($permotiondate && $datadate->greaterThan($permotiondate))
                                                    <td>{{ $timesheetrequestsData->newstaff_code }}</td>
                                                @else
                                                    <td>{{ $timesheetrequestsData->teamstaffcode }}</td>
                                                @endif
                                                <td>
                                                    @if ($timesheetrequestsData->status == 0)
                                                        <span class="badge badge-pill badge-warning">Created</span>
                                                    @elseif($timesheetrequestsData->status == 1)
                                                        <span class="badge badge-pill badge-success">Approved</span>
                                                    @else
                                                        <span class="badge badge-pill badge-danger">Rejected</span>
                                                    @endif
                                                </td>
                                                <td>{{ $timesheetrequestsData->name }}</td>

                                                <td>{{ date('d-M-Y', strtotime($timesheetrequestsData->created_at)) }}</td>
                                                <td>{{ date('d-M-Y', strtotime($timesheetrequestsData->from_date)) }}</td>
                                                {{-- <td>{{ date('d-M-Y', strtotime($timesheetrequestsData->to_date)) }}</td> --}}
                                                <td> {{ $timesheetrequestsData->to_date ? date('d-M-Y', strtotime($timesheetrequestsData->to_date)) : 'NA' }}
                                                </td>

                                                <td>{{ $timesheetrequestsData->team_member }}
                                                    ({{ $timesheetrequestsData->staffcode }})
                                                </td>

                                                <td>{{ $timesheetrequestsData->reason }}</td>
                                                {{-- <td>{{ $timesheetrequestsData->remark }}</td> --}}
                                            </tr>
                                        @endforeach
                                    </tbody>
                                </table>



Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\assignmentmapping\yearwise.blade.php

     <table id="examplee" class="table display table-bordered table-striped table-hover">
                        <thead>
                            <tr>
                                <th class="textfixed">Assignment Id</th>
                                <th class="textfixed">Assignment</th>
                                <th class="textfixed">Client</th>
                                <th class="textfixed">Client Code</th>
                                <th class="textfixed">Deadline</th>
                                <th class="textfixed">Period Start</th>
                                <th class="textfixed">Period End</th>
                                <th class="textfixed">Assigned Partner</th>
                                <th class="textfixed">Other Partner</th>
                                <th class="textfixed">Team Leader</th>
                                <th class="textfixed">Teammember</th>
                                @if (auth()->user()->role_id != 15)
                                    <th class="textfixed">Edit</th>
                                @endif
                            </tr>
                        </thead>
                        <tbody>
                            @foreach ($assignmentmappingData as $assignmentmappingDatas)
                                <tr>
                                    <td> <a
                                            href="{{ url('/viewassignment/' . $assignmentmappingDatas->assignmentgenerate_id) }}">{{ $assignmentmappingDatas->assignmentgenerate_id }}</a>
                                    </td>
                                    <td>
                                        {{ $assignmentmappingDatas->assignment_name }} @if ($assignmentmappingDatas->assignmentname != null)
                                            ({{ $assignmentmappingDatas->assignmentname }})
                                        @endif
                                    </td>
                                    <td> {{ $assignmentmappingDatas->client_name }}</td>
                                    <td> {{ $assignmentmappingDatas->client_code }}</td>
                                    <td class="textfixed">
                                        @if ($assignmentmappingDatas->duedate != null)
                                            {{ date('d-m-Y', strtotime($assignmentmappingDatas->duedate)) }}
                                        @endif
                                    </td>
                                    <td class="textfixed">
                                        @if ($assignmentmappingDatas->periodstart != null)
                                            {{ date('d-m-Y', strtotime($assignmentmappingDatas->periodstart)) }}
                                        @endif
                                    </td>
                                    <td class="textfixed">
                                        @if ($assignmentmappingDatas->periodend != null)
                                            {{ date('d-m-Y', strtotime($assignmentmappingDatas->periodend)) }}
                                        @endif
                                    </td>
                                    {{-- <td>{{ App\Models\Teammember::select('team_member')->where('id', $assignmentmappingDatas->leadpartner)->first()->team_member ?? '' }}
                                        ({{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $assignmentmappingDatas->leadpartner)->first()->staffcode ?? '' }})
                                    </td>
                                    <td>{{ App\Models\Teammember::select('team_member')->where('id', $assignmentmappingDatas->otherpartner)->first()->team_member ?? '' }}
                                        ({{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $assignmentmappingDatas->otherpartner)->first()->staffcode ?? '' }})
                                    </td> --}}
                                    @php

                                        $leadpartner = DB::table('teammembers')
                                            ->leftJoin(
                                                'teamrolehistory',
                                                'teamrolehistory.teammember_id',
                                                '=',
                                                'teammembers.id',
                                            )
                                            ->where('teammembers.id', $assignmentmappingDatas->leadpartner)
                                            ->select(
                                                'teammembers.team_member',
                                                'teammembers.staffcode',
                                                'teamrolehistory.newstaff_code',
                                            )
                                            ->first();

                                        $otherPartner = DB::table('teammembers')
                                            ->leftJoin(
                                                'teamrolehistory',
                                                'teamrolehistory.teammember_id',
                                                '=',
                                                'teammembers.id',
                                            )
                                            ->where('teammembers.id', $assignmentmappingDatas->otherpartner)
                                            ->select(
                                                'teammembers.team_member',
                                                'teammembers.staffcode',
                                                'teamrolehistory.newstaff_code',
                                            )
                                            ->first();

                                    @endphp

                                    <td>
                                        {{ $leadpartner->team_member ?? '' }}
                                        @if ($leadpartner && $leadpartner->team_member)
                                            (
                                            {{ $leadpartner->newstaff_code ?? ($leadpartner->staffcode ?? '') }})
                                        @endif
                                    </td>
                                    <td>
                                        {{ $otherPartner->team_member ?? '' }}
                                        @if ($otherPartner && $otherPartner->team_member)
                                            (
                                            {{ $otherPartner->newstaff_code ?? ($otherPartner->staffcode ?? '') }})
                                        @endif
                                    </td>

                                    <td>
                                        @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $assignmentmappingDatas->id)->where('assignmentteammappings.type', 0)->get() as $sub)
                                            @if ($sub->profilepic == null)
                                                <a class="avatar avatar-xs" data-toggle="tooltip"
                                                    title="{{ $sub->team_member }}({{ $sub->staffcode }})">
                                                    <img src="{{ url('backEnd/image/dummy.png') }}"
                                                        class="avatar-img rounded-circle" alt="...">
                                                @else
                                                    <a class="avatar avatar-xs" data-toggle="tooltip"
                                                        title="{{ $sub->team_member }}({{ $sub->staffcode }})">
                                                        <img src="{{ asset('backEnd/image/teammember/profilepic/' . $sub->profilepic) }}"
                                                            class="avatar-img rounded-circle" alt="...">
                                            @endif
                                        @endforeach
                                    </td>

                                    <td>
                                        @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $assignmentmappingDatas->id)->where('assignmentteammappings.type', 2)->get() as $sub)
                                            @if ($sub->profilepic == null)
                                                <a class="avatar avatar-xs" data-toggle="tooltip"
                                                    title="{{ $sub->team_member }}({{ $sub->staffcode }})">
                                                    <img src="{{ url('backEnd/image/dummy.png') }}"
                                                        class="avatar-img rounded-circle" alt="...">
                                                @else
                                                    <a class="avatar avatar-xs" data-toggle="tooltip"
                                                        title="{{ $sub->team_member }}({{ $sub->staffcode }})">
                                                        <img src="{{ asset('backEnd/image/teammember/profilepic/' . $sub->profilepic) }}"
                                                            class="avatar-img rounded-circle" alt="...">
                                            @endif
                                        @endforeach
                                    </td>
                                    @if (auth()->user()->role_id != 15)
                                        <td>
                                            <a href="{{ url('/assignmentlist/' . $assignmentmappingDatas->assignmentgenerate_id) }}"
                                                class="btn btn-info-soft btn-sm"><i class="far fa-edit"></i></a>
                                        </td>
                                    @endif
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
					

Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\assignmentmapping\yearwisepartnerlist.blade.php

                            <table class="table display table-bordered table-striped table-hover examplee">
                                <thead>
                                    <tr>
                                        <th>Assignment Id</th>
                                        <th>Assignment</th>
                                        <th>Client</th>
                                        <th>Client Code</th>
                                        <th>Deadline</th>
                                        <th>Period End</th>
                                        <th>Assigned Partner</th>
                                        <th>Other Partner</th>
                                        <th>Teammember</th>
                                        @if (auth()->user()->role_id != 15 && Auth::user()->role_id != 11)
                                            <th>Edit</th>
                                        @endif
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach ($assigned as $assignmentmappingDatas)
                                        <tr>

                                            <td> <a
                                                    href="{{ url('/viewassignment/' . $assignmentmappingDatas->assignmentgenerate_id) }}">{{ $assignmentmappingDatas->assignmentgenerate_id }}</a>
                                            </td>
                                            <td>
                                                {{ $assignmentmappingDatas->assignment_name }} @if ($assignmentmappingDatas->assignmentname != null)
                                                    ({{ $assignmentmappingDatas->assignmentname }})
                                                @endif
                                            </td>
                                            <td> {{ $assignmentmappingDatas->client_name }}</td>
                                            <td> {{ $assignmentmappingDatas->client_code }}</td>
                                            <td>
                                                @if ($assignmentmappingDatas->duedate != null)
                                                    {{ date('d-m-Y', strtotime($assignmentmappingDatas->duedate)) }}
                                                @endif
                                            </td>
                                            <td>
                                                @if ($assignmentmappingDatas->periodend != null)
                                                    {{ date('d-m-Y', strtotime($assignmentmappingDatas->periodend)) }}
                                                @endif
                                            </td>
                                            {{-- <td>{{ App\Models\Teammember::select('team_member')->where('id', $assignmentmappingDatas->leadpartner)->first()->team_member ?? '' }}
                                                ({{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $assignmentmappingDatas->leadpartner)->first()->staffcode ?? '' }})
                                            </td>
                                            <td>{{ App\Models\Teammember::select('team_member')->where('id', $assignmentmappingDatas->otherpartner)->first()->team_member ?? '' }}
                                                ({{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $assignmentmappingDatas->otherpartner)->first()->staffcode ?? '' }})
                                            </td> --}}

                                            @php
                                                $leadpartner = DB::table('teammembers')
                                                    ->leftJoin(
                                                        'teamrolehistory',
                                                        'teamrolehistory.teammember_id',
                                                        '=',
                                                        'teammembers.id',
                                                    )
                                                    ->where('teammembers.id', $assignmentmappingDatas->leadpartner)
                                                    ->select(
                                                        'teammembers.team_member',
                                                        'teammembers.staffcode',
                                                        'teamrolehistory.newstaff_code',
                                                    )
                                                    ->first();

                                                $otherPartner = DB::table('teammembers')
                                                    ->leftJoin(
                                                        'teamrolehistory',
                                                        'teamrolehistory.teammember_id',
                                                        '=',
                                                        'teammembers.id',
                                                    )
                                                    ->where('teammembers.id', $assignmentmappingDatas->otherpartner)
                                                    ->select(
                                                        'teammembers.team_member',
                                                        'teammembers.staffcode',
                                                        'teamrolehistory.newstaff_code',
                                                    )
                                                    ->first();
                                            @endphp
                                            <td>
                                                {{ $leadpartner->team_member ?? '' }}
                                                @if ($leadpartner && $leadpartner->team_member)
                                                    (
                                                    {{ $leadpartner->newstaff_code ?? ($leadpartner->staffcode ?? '') }})
                                                @endif
                                            </td>
                                            <td>
                                                {{ $otherPartner->team_member ?? '' }}
                                                @if ($otherPartner && $otherPartner->team_member)
                                                    (
                                                    {{ $otherPartner->newstaff_code ?? ($otherPartner->staffcode ?? '') }})
                                                @endif
                                            </td>

                                            <td>
                                                @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $assignmentmappingDatas->id)->get() as $sub)
                                                    @if ($sub->profilepic == null)
                                                        <a class="avatar avatar-xs" data-toggle="tooltip"
                                                            title="{{ $sub->team_member }} ({{ $sub->staffcode }})">
                                                            <img src="{{ url('backEnd/image/dummy.png') }}"
                                                                class="avatar-img rounded-circle" alt="...">
                                                        @else
                                                            <a class="avatar avatar-xs" data-toggle="tooltip"
                                                                title="{{ $sub->team_member }} ({{ $sub->staffcode }})">
                                                                <img src="{{ asset('backEnd/image/teammember/profilepic/' . $sub->profilepic) }}"
                                                                    class="avatar-img rounded-circle" alt="...">
                                                    @endif
                                                @endforeach
                                            </td>
                                            @if (auth()->user()->role_id != 15 && Auth::user()->role_id != 11)
                                                <td>
                                                    <a href="{{ url('/assignmentlist/' . $assignmentmappingDatas->assignmentgenerate_id) }}"
                                                        class="btn btn-info-soft btn-sm"><i class="far fa-edit"></i></a>
                                                </td>
                                            @endif
                                        </tr>
                                    @endforeach
                                </tbody>
                            </table>
							


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\report\assignmentreport.blade.php

                                <table id="examplee" class="display nowrap">
                                    <thead>
                                        <tr>
                                            <th style="display: none;">id</th>
                                            @if (auth()->user()->role_id == 13 || Auth::user()->role_id == 11 || Auth::user()->role_id == 14)
                                                <th>Edit</th>
                                            @endif
                                            <th>Assignment Id</th>
                                            <th>Assignment</th>
                                            <th>Client</th>
                                            <th>Client Code</th>
                                            <th>Period Start</th>
                                            <th>Period End</th>
                                            <th>Deadline</th>
                                            <th>Assigned Status</th>
                                            <th>Assigned Partner11</th>
                                            <th>Other Partner</th>
                                            <th>Team Leader </th>
                                            <th>Teammember</th>
                                            <th>Total Hour</th>
                                        </tr>
                                    </thead>

                                    <tbody>
                                        @foreach ($assignmentmappingData as $assignmentmappingDatas)
                                            <tr>
                                                @php
                                                    if (auth()->user()->role_id == 11) {
                                                        $teamhourteams = DB::table('assignmentteammappings')
                                                            ->where('assignmentmapping_id', $assignmentmappingDatas->id)
                                                            ->select(DB::raw('SUM(teamhour) as teamhourteam'))
                                                            ->first();

                                                        $partnerhour =
                                                            $assignmentmappingDatas->leadpartnerhour +
                                                            $assignmentmappingDatas->otherpartnerhour;

                                                        $totalhour = $partnerhour + $teamhourteams->teamhourteam;
                                                        // dd($totalhour);
                                                    }
                                                @endphp
                                                <td style="display: none;">{{ $assignmentmappingDatas->id }}</td>
                                                @if (auth()->user()->role_id == 13 || Auth::user()->role_id == 11 || Auth::user()->role_id == 14)
                                                    <td>
                                                        <a href="{{ url('/assignmentlist/' . $assignmentmappingDatas->assignmentgenerate_id) }}"
                                                            class="btn btn-info-soft btn-sm"><i class="far fa-edit"></i></a>
                                                    </td>
                                                @endif
                                                <td> <a
                                                        href="{{ url('/viewassignment/' . $assignmentmappingDatas->assignmentgenerate_id) }}">{{ $assignmentmappingDatas->assignmentgenerate_id }}</a>
                                                </td>
                                                <td>
                                                    {{ $assignmentmappingDatas->assignment_name }} @if ($assignmentmappingDatas->assignmentname != null)
                                                        ({{ $assignmentmappingDatas->assignmentname }})
                                                    @endif
                                                </td>
                                                <td> {{ $assignmentmappingDatas->client_name }}
                                                </td>
                                                <td> {{ $assignmentmappingDatas->client_code }}
                                                </td>
                                                <td>
                                                    @if ($assignmentmappingDatas->periodstart != null)
                                                        {{ date('d-m-Y', strtotime($assignmentmappingDatas->periodstart)) }}
                                                    @endif
                                                </td>

                                                <td>
                                                    @if ($assignmentmappingDatas->periodend != null)
                                                        {{ date('d-m-Y', strtotime($assignmentmappingDatas->periodend)) }}
                                                    @endif
                                                </td>
                                                <td>
                                                    @if ($assignmentmappingDatas->duedate != null)
                                                        {{ date('d-m-Y', strtotime($assignmentmappingDatas->duedate)) }}
                                                    @endif
                                                </td>
                                                <td>
                                                    @if ($assignmentmappingDatas->status == 1)
                                                        <span class="badge badge-primary">OPEN</span>
                                                    @elseif($assignmentmappingDatas->status == 0)
                                                        <span class="badge badge-danger">CLOSED</span>
                                                    @endif

                                                </td>

                                                {{-- <td>
                                                    {{ App\Models\Teammember::select('team_member')->where('id', $assignmentmappingDatas->leadpartner)->first()->team_member ?? '' }}
                                                    (
                                                    {{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $assignmentmappingDatas->leadpartner)->first()->staffcode ?? '' }})
                                                </td>
                                                <td>
                                                    {{ App\Models\Teammember::select('team_member')->where('id', $assignmentmappingDatas->otherpartner)->first()->team_member ?? '' }}
                                                    ({{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $assignmentmappingDatas->otherpartner)->first()->staffcode ?? '' }})
                                                </td> --}}

                                                @php
                                                    // $leadpartner = App\Models\Teammember::select(
                                                    //     'team_member',
                                                    //     'staffcode',
                                                    // )
                                                    //     ->where('id', $assignmentmappingDatas->leadpartner)
                                                    //     ->first();

                                                    // $otherPartner = App\Models\Teammember::select(
                                                    //     'team_member',
                                                    //     'staffcode',
                                                    // )
                                                    //     ->where('id', $assignmentmappingDatas->otherpartner)
                                                    //     ->first();

                                                    $leadpartner = DB::table('teammembers')
                                                        ->leftJoin(
                                                            'teamrolehistory',
                                                            'teamrolehistory.teammember_id',
                                                            '=',
                                                            'teammembers.id',
                                                        )
                                                        ->where('teammembers.id', $assignmentmappingDatas->leadpartner)
                                                        ->select(
                                                            'teammembers.team_member',
                                                            'teammembers.staffcode',
                                                            'teamrolehistory.newstaff_code',
                                                        )
                                                        ->first();

                                                    $otherPartner = DB::table('teammembers')
                                                        ->leftJoin(
                                                            'teamrolehistory',
                                                            'teamrolehistory.teammember_id',
                                                            '=',
                                                            'teammembers.id',
                                                        )
                                                        ->where('teammembers.id', $assignmentmappingDatas->otherpartner)
                                                        ->select(
                                                            'teammembers.team_member',
                                                            'teammembers.staffcode',
                                                            'teamrolehistory.newstaff_code',
                                                        )
                                                        ->first();

                                                @endphp
                                                <td>
                                                    {{ $leadpartner->team_member ?? '' }}
                                                    @if ($leadpartner && $leadpartner->team_member)
                                                        (
                                                        {{ $leadpartner->newstaff_code ?? ($leadpartner->staffcode ?? '') }})
                                                    @endif
                                                </td>

                                                <td>
                                                    {{ $otherPartner->team_member ?? '' }}
                                                    @if ($otherPartner && $otherPartner->team_member)
                                                        (
                                                        {{ $otherPartner->newstaff_code ?? ($otherPartner->staffcode ?? '') }})
                                                    @endif
                                                </td>

                                                <td>
                                                    @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $assignmentmappingDatas->id)->where('assignmentteammappings.type', 0)->get() as $sub)
                                                        {{ $sub->team_member }} ,
                                                    @endforeach
                                                </td>
                                                <td>
                                                    @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $assignmentmappingDatas->id)->where('assignmentteammappings.type', 2)->get() as $sub)
                                                        {{ $sub->team_member }} ,
                                                    @endforeach
                                                </td>

                                                @if (auth()->user()->role_id == 11)
                                                    <td> {{ $totalhour ?? '0' }}</td>
                                                @elseif (auth()->user()->role_id == 13)
                                                    <td>{{ $assignmentmappingDatas->leadpartnerhour ?? ($assignmentmappingDatas->otherpartnerhour ?? 0) }}
                                                    </td>
                                                @else
                                                    <td>{{ $assignmentmappingDatas->teamhour ?? '0' }} </td>
                                                @endif
                                            </tr>
                                        @endforeach
                                    </tbody>
                                </table>
								



Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\report\openandcloseassignment.blade.php

                    <table id="examplee" class="display nowrap">
                        <thead>
                            <tr>
                                <th style="display: none;">id</th>
                                <th>Assignment Id</th>
                                <th>Assignment</th>
                                <th>Client</th>
                                <th>Client Code</th>
                                <th>Period Start</th>
                                <th>Period End</th>
                                <th>Deadline</th>
                                <th>Assigned Status</th>
                                <th>Assigned Partner</th>
                                <th>Other Partner</th>
                                <th>Team Leader </th>
                                <th>Teammember</th>
                                @if (auth()->user()->role_id != 15 && Auth::user()->role_id != 11)
                                    <th>Edit</th>
                                @endif
                                {{-- <th>Action</th> --}}
                            </tr>
                        </thead>
                        <tbody>
                            @foreach ($assignmentmappingData as $assignmentmappingDatas)
                                <tr>
                                    <td style="display: none;">{{ $assignmentmappingDatas->id }}</td>
                                    <td> <a
                                            href="{{ url('/viewassignment/' . $assignmentmappingDatas->assignmentgenerate_id) }}">{{ $assignmentmappingDatas->assignmentgenerate_id }}</a>
                                    </td>
                                    <td>
                                        {{ $assignmentmappingDatas->assignment_name }} @if ($assignmentmappingDatas->assignmentname != null)
                                            ({{ $assignmentmappingDatas->assignmentname }})
                                        @endif
                                    </td>
                                    <td> {{ $assignmentmappingDatas->client_name }}</td>
                                    <td> {{ $assignmentmappingDatas->client_code }}</td>

                                    <td>
                                        @if ($assignmentmappingDatas->periodstart != null)
                                            {{ date('d-m-Y', strtotime($assignmentmappingDatas->periodstart)) }}
                                        @endif
                                    </td>

                                    <td>
                                        @if ($assignmentmappingDatas->periodend != null)
                                            {{ date('d-m-Y', strtotime($assignmentmappingDatas->periodend)) }}
                                        @endif
                                    </td>
                                    <td>
                                        @if ($assignmentmappingDatas->duedate != null)
                                            {{ date('d-m-Y', strtotime($assignmentmappingDatas->duedate)) }}
                                        @endif
                                    </td>
                                    <td>
                                        @if ($assignmentmappingDatas->status == 1)
                                            <span class="badge badge-primary">OPEN</span>
                                        @elseif($assignmentmappingDatas->status == 0)
                                            <span class="badge badge-danger">CLOSED</span>
                                        @elseif($assignmentmappingDatas->status == 2)
                                            <span class="badge badge-info">Rejected</span>
                                        @endif

                                    </td>
                                    {{-- <td>{{ App\Models\Teammember::select('team_member')->where('id', $assignmentmappingDatas->leadpartner)->first()->team_member ?? '' }}
                                    </td>
                                    <td>{{ App\Models\Teammember::select('team_member')->where('id', $assignmentmappingDatas->otherpartner)->first()->team_member ?? '' }}
                                    </td> --}}
                                    @php
                                        // $leadpartner = App\Models\Teammember::select('team_member', 'staffcode')
                                        //     ->where('id', $assignmentmappingDatas->leadpartner)
                                        //     ->first();

                                        // $otherPartner = App\Models\Teammember::select('team_member', 'staffcode')
                                        //     ->where('id', $assignmentmappingDatas->otherpartner)
                                        //     ->first();

                                        $leadpartner = DB::table('teammembers')
                                            ->leftJoin(
                                                'teamrolehistory',
                                                'teamrolehistory.teammember_id',
                                                '=',
                                                'teammembers.id',
                                            )
                                            ->where('teammembers.id', $assignmentmappingDatas->leadpartner)
                                            ->select(
                                                'teammembers.team_member',
                                                'teammembers.staffcode',
                                                'teamrolehistory.newstaff_code',
                                            )
                                            ->first();

                                        $otherPartner = DB::table('teammembers')
                                            ->leftJoin(
                                                'teamrolehistory',
                                                'teamrolehistory.teammember_id',
                                                '=',
                                                'teammembers.id',
                                            )
                                            ->where('teammembers.id', $assignmentmappingDatas->otherpartner)
                                            ->select(
                                                'teammembers.team_member',
                                                'teammembers.staffcode',
                                                'teamrolehistory.newstaff_code',
                                            )
                                            ->first();

                                    @endphp
                                    <td>
                                        {{ $leadpartner->team_member ?? '' }}
                                        @if ($leadpartner && $leadpartner->team_member)
                                            (
                                            {{ $leadpartner->newstaff_code ?? ($leadpartner->staffcode ?? '') }})
                                        @endif
                                    </td>
                                    <td>
                                        {{ $otherPartner->team_member ?? '' }}
                                        @if ($otherPartner && $otherPartner->team_member)
                                            (
                                            {{ $otherPartner->newstaff_code ?? ($otherPartner->staffcode ?? '') }})
                                        @endif
                                    </td>
                                    <td>
                                        @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $assignmentmappingDatas->id)->where('assignmentteammappings.type', 0)->get() as $sub)
                                            {{ $sub->team_member }}
                                        @endforeach
                                    </td>
                                    <td>
                                        @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $assignmentmappingDatas->id)->where('assignmentteammappings.type', 2)->get() as $sub)
                                            {{ $sub->team_member }} ,
                                        @endforeach
                                    </td>
                                    @if (auth()->user()->role_id != 15 && Auth::user()->role_id != 11)
                                        <td>
                                            <a href="{{ url('/assignmentlist/' . $assignmentmappingDatas->assignmentgenerate_id) }}"
                                                class="btn btn-info-soft btn-sm"><i class="far fa-edit"></i></a>
                                        </td>
                                    @endif
                                    {{-- <td>
                                     
                                        <a href="  {{ url('/assignment/reject/' . $assignmentmappingDatas->assignmentgenerate_id) }}"
                                            onclick="return confirm('Are you sure you want to Reject this Assignment?');">
                                            <button class="btn btn-danger" data-toggle="modal"
                                                style="height: 16px; width: auto; border-radius: 7px; display: flex; align-items: center; justify-content: center;font-size: 11px;"
                                                data-target="#requestModal">Reject</button>
                                        </a>
                        
                                    </td> --}}
                                </tr>
                            @endforeach
                        </tbody>
                    </table>



Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\hrindex.blade.php



                    <table id="examplee" class="display nowrap">
                        <thead>

                            <tr>
                                <th style="display: none;">id</th>
                                <th>Employee Name</th>
                                <th>Staff Code</th>
                                <th>Date</th>
                                <th>Day</th>
                                <th>Client Name</th>
                                <th>Assignment Name</th>
                                <th>Work Item</th>
                                <th>Partner</th>
                                <th>Hour</th>
                                <th>Total Hour</th>
                                @if (Auth::user()->role_id == 18 || Auth::user()->role_id == 11)
                                    <th>Action</th>
                                @endif
                            </tr>

                        </thead>
                        <tbody>
                            @foreach ($timesheetData as $timesheetDatas)
                                <tr>
                                    @php
                                        $client_id = DB::table('timesheetusers')
                                            ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
                                            ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
                                            ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.partner')
                                            ->where('timesheetusers.timesheetid', $timesheetDatas->id)

                                            ->select(
                                                'clients.client_name',
                                                'clients.client_code',
                                                'timesheetusers.hour',
                                                'assignments.assignment_name',
                                                'billable_status',
                                                'workitem',
                                                'teammembers.team_member',
                                                'teammembers.staffcode',
                                            )
                                            ->get();

                                        //  dd($client_id);
                                        $total = DB::table('timesheetusers')

                                            ->where('timesheetusers.timesheetid', $timesheetDatas->id)
                                            ->sum('hour');

                                        $dates = date('l', strtotime($timesheetDatas->date));

                                        $permotioncheck = DB::table('teamrolehistory')
                                            ->where('teammember_id', $timesheetDatas->created_by)
                                            ->first();

                                        $datadate = Carbon\Carbon::createFromFormat(
                                            'Y-m-d H:i:s',
                                            $timesheetDatas->created_at,
                                        );

                                        $permotiondate = null;
                                        if ($permotioncheck) {
                                            $permotiondate = Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $permotioncheck->created_at,
                                            );
                                        }
                                    @endphp
                                    <td style="display: none;">{{ $timesheetDatas->id }}</td>
                                    <td>{{ $timesheetDatas->team_member ?? '' }} </td>
                                    @if ($permotioncheck && $datadate->greaterThan($permotiondate))
                                        <td>{{ $permotioncheck->newstaff_code }}</td>
                                    @else
                                        <td>{{ $timesheetDatas->staffcode }}</td>
                                    @endif
                                    {{-- <td>{{ $timesheetDatas->staffcode ?? '' }} </td> --}}
                                    <!-- <td>{{ date('d-M-Y', strtotime($timesheetDatas->created_at)) ?? '' }} </td>-->
                                    <td>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                    </td>
                                    <td>
                                        @if ($timesheetDatas->date != null)
                                            {{ $dates ?? '' }}
                                        @endif
                                    </td>

                                    <span style="font-size: 13px;">

                                        <td>

                                            @foreach ($client_id as $item)
                                                {{ $item->client_name ?? '' }} ({{ $item->client_code ?? '' }})
                                                @if ($item->client_name != 0)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>
                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->assignment_name ?? '' }}@if ($item->assignment_name != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>

                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->workitem ?? '' }}@if ($item->workitem != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>
                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->team_member ?? '' }} ({{ $item->staffcode ?? '' }})
                                                @if ($item->team_member != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>
                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->hour ?? '' }} @if ($item->hour != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>






                                        <td>{{ $total }}</td>
                                        <td>

                                            @if (auth()->user()->role_id == 18 || auth()->user()->role_id == 11)
                                                <a href="{{ url('/timesheet/destroy/' . $timesheetDatas->id) }}"
                                                    onclick="return confirm('Are you sure you want to delete this item?');"
                                                    class="btn btn-danger-soft btn-sm"><i class="far fa-trash-alt"></i></a>
                                            @else
                                                <!-- <td> <a href="{{ url('/timesheet/destroy/' . $timesheetDatas->id) }}"
                                                                                                                                                                                                                                        onclick="return confirm('Are you sure you want to delete this item?');"
                                                                                                                                                                                                                                        class="btn btn-danger-soft btn-sm"><i class="far fa-trash-alt"></i></a></td>
                                                                                                                                                                                                                                -->
                                            @endif
                                        </td>



                                </tr>
                            @endforeach
                        </tbody>
                    </table>
					


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\index.blade.php

                                @foreach ($timesheetData as $timesheetDatas)
                                    <tr>
                                        @php
                                            $timeid = DB::table('timesheetusers')
                                                ->where('timesheetusers.id', $timesheetDatas->id)
                                                ->first();

                                            $client_id = DB::table('timesheetusers')
                                                ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
                                                ->leftjoin(
                                                    'assignmentbudgetings',
                                                    'assignmentbudgetings.assignment_id',
                                                    'timesheetusers.assignment_id',
                                                )
                                                ->leftjoin(
                                                    'assignments',
                                                    'assignments.id',
                                                    'timesheetusers.assignment_id',
                                                )
                                                ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.partner')
                                                ->leftJoin('teamrolehistory', function ($join) {
                                                    $join
                                                        ->on('teamrolehistory.teammember_id', '=', 'teammembers.id')
                                                        ->on(
                                                            'teamrolehistory.created_at',
                                                            '<',
                                                            'timesheetusers.created_at',
                                                        );
                                                })
                                                ->where('timesheetusers.id', $timesheetDatas->id)
                                                ->select(
                                                    'clients.client_name',
                                                    'clients.client_code',
                                                    'timesheetusers.hour',
                                                    'timesheetusers.location',
                                                    'timesheetusers.status',
                                                    'assignments.assignment_name',
                                                    'billable_status',
                                                    'workitem',
                                                    'teammembers.team_member',
                                                    'teammembers.staffcode',
                                                    'teamrolehistory.newstaff_code',
                                                    'assignmentbudgetings.assignmentname',
                                                    'assignmentbudgetings.assignmentgenerate_id',
                                                )
                                                ->first();

                                            $total = DB::table('timesheetusers')

                                                ->where('timesheetusers.timesheetid', $timesheetDatas->timesheetid)
                                                ->sum('hour');
                                            //	dd($total);
                                            $dates = date('l', strtotime($timesheetDatas->date));

                                        @endphp
                                        <td style="display: none;">{{ $timesheetDatas->id }}</td>
                                        <td>
                                            @if ($client_id->status == 0)
                                                <span class="badge badge-pill badge-warning">saved</span>
                                            @else
                                                <span class="badge badge-pill badge-danger">submit</span>
                                            @endif
                                        </td>

                                        @php

                                            $date = $timesheetDatas->date;

                                            $leaves = DB::table('applyleaves')
                                                ->where('applyleaves.createdby', auth()->user()->teammember_id)
                                                ->where('status', '!=', 2)
                                                ->select('applyleaves.from', 'applyleaves.to')
                                                ->get();

                                            $leavesWithinRange = $leaves->filter(function ($leave) use ($date) {
                                                return $leave->from <= $date && $leave->to >= $date;
                                            });

                                            //dd($leavesWithinRange);

                                        @endphp

                                        <td> <span style="display: none;">
                                                {{ date('Y-m-d', strtotime($timesheetDatas->date)) }}</span>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                        </td>

                                        <td>
                                            @if ($timesheetDatas->date != null)
                                                {{ $dates ?? '' }}
                                            @endif
                                        </td>


                                        <td>
                                            {{ $client_id->client_name ?? '' }}
                                            @if (count((array) $client_id->client_name) > 1)
                                                ,
                                            @endif
                                        </td>
                                        <td>
                                            {{ $client_id->client_code ?? '' }}
                                            @if (count((array) $client_id->client_code) > 1)
                                                ,
                                            @endif
                                        </td>

                                        <td>

                                            {{ $client_id->assignment_name ?? '' }} (
                                            {{ $client_id->assignmentgenerate_id ?? '' }})
                                            @if ($timesheetDatas->assignmentname != null)
                                                ({{ $timesheetDatas->assignmentname ?? '' }})
                                            @endif
                                            @if (count((array) $client_id->assignment_name) > 1)
                                                ,
                                            @endif
                                        </td>
                                        <td>
                                            {{ $client_id->workitem ?? '' }}
                                            @if (count((array) $client_id->workitem) > 1)
                                                ,
                                            @endif
                                        </td>

                                        <td>
                                            {{ $client_id->location ?? '' }}
                                            @if (count((array) $client_id->location) > 1)
                                                ,
                                            @endif
                                        </td>

                                        <td>
                                            {{ $client_id->team_member ?? '' }} (
                                            {{ $client_id->newstaff_code ?? ($client_id->staffcode ?? '') }})
                                            @if (count((array) $client_id->team_member) > 1)
                                                ,
                                            @endif
                                        </td>

                                        <td>
                                            {{ $client_id->hour ?? '' }}
                                            @if (count((array) $client_id->hour) > 1)
                                                ,
                                            @endif
                                        </td>
                                        <td>{{ $total }}</td>
                                        <td>
                                            @if ($client_id->status == 0)
                                                @if ($leavesWithinRange->isEmpty())
                                                    <a href="{{ url('/timesheet/destroy/' . $timesheetDatas->timesheetid) }}"
                                                        onclick="return confirm('Are you sure you want to delete this item?');"
                                                        class="btn btn-danger-soft btn-sm"><i
                                                            class="far fa-trash-alt"></i></a>
                                                @endif
                                            @else
                                                delete blocked
                                            @endif
                                        </td>
                                    </tr>
                                @endforeach
								


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\rejectedlist.blade.php


                    <table id="examplee" class="table display table-bordered table-striped table-hover">
                        <thead>
                            <tr>
                                <th style="display: none;">id</th>

                                <th>Employee Name</th>
                                <th>Staff Code</th>
                                <th>Date</th>
                                <th>Day</th>
                                <th>Client Name</th>
                                <th>Assignment Name</th>

                                <th>Work Item</th>
                                <th>Location</th>
                                <th>Partner</th>
                                {{-- <th>Hour</th> --}}
                                <th>Total Hour</th>
                                <th>Status</th>

                                @if (Auth::user()->role_id == 13 || Auth::user()->role_id == 14 || Auth::user()->role_id == 15)
                                    <th>Action</th>
                                @endif


                            </tr>
                        </thead>
                        <tbody>
                            @foreach ($timesheetData as $timesheetDatas)
                                <tr>

                                    @php

                                        $timeid = DB::table('timesheetusers')
                                            ->where('timesheetusers.timesheetid', $timesheetDatas->timesheetid)
                                            ->first();

                                        $client_id = DB::table('timesheetusers')
                                            ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
                                            ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
                                            ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.partner')
                                            ->where('timesheetusers.timesheetid', $timesheetDatas->timesheetid)
                                            ->select(
                                                'clients.client_name',
                                                'clients.client_code',
                                                'timesheetusers.hour',
                                                'timesheetusers.location',
                                                'timesheetusers.*',
                                                'assignments.assignment_name',
                                                'billable_status',
                                                'workitem',
                                                'teammembers.team_member',
                                                'teammembers.staffcode',
                                                'timesheetusers.timesheetid',
                                            )
                                            ->get();
                                        // dd($client_id);
                                        $total = DB::table('timesheetusers')

                                            ->where('timesheetusers.timesheetid', $timesheetDatas->timesheetid)
                                            ->sum('hour');

                                        $dates = date('l', strtotime($timesheetDatas->date));

                                        $permotioncheck = DB::table('teamrolehistory')
                                            ->where('teammember_id', $timesheetDatas->createdby)
                                            ->first();

                                        $datadate = Carbon\Carbon::createFromFormat('Y-m-d', $timesheetDatas->date);

                                        $permotiondate = null;
                                        if ($permotioncheck) {
                                            $permotiondate = Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $permotioncheck->created_at,
                                            );
                                        }

                                    @endphp


                                    <td style="display: none;">{{ $timesheetDatas->id }}</td>

                                    <td>
                                        {{ $timesheetDatas->team_member ?? '' }} </td>
                                    {{-- <td> {{ $timesheetDatas->staffcode ?? '' }} </td> --}}
                                    @if ($permotiondate && $datadate->greaterThan($permotiondate))
                                        <td>{{ $permotioncheck->newstaff_code }}</td>
                                    @else
                                        <td>{{ $timesheetDatas->staffcode }}</td>
                                    @endif
                                    <td>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                    </td>
                                    <td>
                                        @if ($timesheetDatas->date != null)
                                            {{ $dates ?? '' }}
                                        @endif
                                    </td>
                                    <span style="font-size: 13px;">
                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->client_name ?? '' }} ({{ $item->client_code ?? '' }})
                                                @if ($item->client_name != 0)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>
                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->assignment_name ?? '' }}
                                                ({{ $item->assignmentgenerate_id ?? '' }})
                                                @if ($item->assignment_name != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>

                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->workitem ?? '' }}@if ($item->workitem != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>

                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->location ?? '' }}@if ($item->location != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>
                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->team_member ?? '' }} ( {{ $item->staffcode ?? '' }})
                                                @if ($item->team_member != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>
                                        <td>{{ $total }}</td>
                                        <td>
                                            {{-- @php
                                                dd($client_id);
                                            @endphp --}}
                                            @foreach ($client_id as $item)
                                                @if ($item->status == 0)
                                                    <span class="badge badge-pill badge-warning">saved</span>
                                                @elseif ($item->status == 1)
                                                    <span class="badge badge-pill badge-danger">submit</span>
                                                @elseif ($item->status == 3)
                                                    <span class="badge badge-pill badge-info">Submitted</span>
                                                @else
                                                    <span class="badge badge-pill badge-secondary">Rejected</span>
                                                @endif
                                            @endforeach
                                        </td>

                                        @if (Auth::user()->role_id == 13 || Auth::user()->role_id == 14 || Auth::user()->role_id == 15)
                                            <td>
                                                @foreach ($client_id as $item)
                                                    @if ($item->status == 2)
                                                        <a href="{{ url('/timesheetreject/edit/' . $item->timesheetid) }}"
                                                            class="btn btn-info-soft btn-sm"><i class="far fa-edit"></i></a>
                                                    @endif
                                                @endforeach
                                            </td>
                                        @endif

                                </tr>
                                <div class="modal fade" id="exampleModal12" tabindex="-1" role="dialog"
                                    aria-labelledby="exampleModalLabel4" aria-hidden="true">
                                    <div class="modal-dialog" role="document">
                                        <div class="modal-content">
                                            <form id="detailsForm" method="post" action="{{ url('/timesheet/submit') }}"
                                                enctype="multipart/form-data" style="margin-bottom: 0px;">
                                                @csrf
                                                <div class="modal-header" style="background:#37A000;color:white; m-5">
                                                    <h5 class="modal-title font-weight-600" id="exampleModalLabel4">Update
                                                        Timesheet</h5>
                                                    <div>
                                                        <ul>
                                                            @foreach ($errors->all() as $e)
                                                                <li style="color:red;">{{ $e }}</li>
                                                            @endforeach
                                                        </ul>
                                                    </div>
                                                    <button style="color: white" type="button" class="close"
                                                        data-dismiss="modal" aria-label="Close">
                                                        <span aria-hidden="true">&times;</span>
                                                    </button>
                                                </div>
                                                <div class="modal-body">

                                                    <div class="row row-sm">
                                                        {{-- <label for="name" class="col-sm-3 col-form-label font-weight-600">Name :</label> --}}
                                                        <div class="col-sm-12">
                                                            <input type="text" readonly id="teamname"
                                                                class="form-control" placeholder="Enter Name">
                                                            <input hidden class="form-control" id="timesheetid"
                                                                name="timesheetid" type="text">
                                                        </div>
                                                    </div>

                                                    <br>
                                                    @php

                                                        $clientlist = DB::table('clients')
                                                            ->select('clients.client_name', 'clients.id')
                                                            ->get();
                                                        $partner = DB::table('teammembers')
                                                            ->select('teammembers.team_member', 'teammembers.id')
                                                            ->get();
                                                        // dd($partner);
                                                        $assignmentlist = DB::table('assignments')
                                                            ->select('assignments.assignment_name', 'assignments.id')
                                                            ->get();
                                                    @endphp
                                                    <br>

                                                    <div class="row row-sm">
                                                        {{-- <label for="name" class="col-sm-3 col-form-label font-weight-600">Name :</label> --}}
                                                        <div class="col-sm-6">
                                                            <label for="">Select Client</label>
                                                            <select class="form-control" name="client_id" id="client_id">
                                                                <option value="">Select Client</option>
                                                                @foreach ($clientlist as $city)
                                                                    <option value="{{ $city->id }}">
                                                                        {{ $city->client_name }}</option>
                                                                @endforeach
                                                            </select>
                                                        </div>
                                                        {{-- <label for="name" class="col-sm-3 col-form-label font-weight-600">Name :</label> --}}
                                                        <div class="col-sm-6">
                                                            <label for="">Select Assignment</label>
                                                            <select class="form-control" name="assignment_id"
                                                                id="assignment_id">
                                                                <option value="">Select Assignment</option>
                                                                @foreach ($assignmentlist as $assignmentlistData)
                                                                    <option value="{{ $assignmentlistData->id }}">
                                                                        {{ $assignmentlistData->assignment_name }}</option>
                                                                @endforeach
                                                            </select>
                                                        </div>
                                                    </div>

                                                    <br>

                                                    <div class="row row-sm">
                                                        {{-- <label for="name" class="col-sm-3 col-form-label font-weight-600">Name :</label> --}}
                                                        <div class="col-sm-6">
                                                            <label for="">Select Partner</label>
                                                            <select class="form-control" name="partner" id="partner">
                                                                <option value="">Select Partner</option>
                                                                @foreach ($partner as $partnerData)
                                                                    <option value="{{ $partnerData->id }}">
                                                                        {{ $partnerData->team_member }}</option>
                                                                @endforeach
                                                            </select>
                                                        </div>
                                                        <div class="col-sm-6">
                                                            <label for="">Employee Name</label>
                                                            <input required type="text" name="workitem" id="workitem"
                                                                class="form-control" placeholder="Enter Employee Name">
                                                        </div>
                                                    </div>
                                                    <br>
                                                    <div class="row row-sm">
                                                        <div class="col-sm-6">
                                                            <label for="">Location</label>
                                                            <input required type="text" name="location" id="location"
                                                                class="form-control" placeholder="Enter Location">
                                                        </div>
                                                        <div class="col-sm-6">
                                                            <label for="">Work Item</label>
                                                            <input required type="text" name="totalhour"
                                                                id="totalhour" class="form-control"
                                                                placeholder="Enter Name">
                                                        </div>
                                                    </div>
                                                    <br>
                                                    <div class="row row-sm">
                                                        <div class="col-sm-6">
                                                            <label for="">Total Hour</label>
                                                            <input required type="text" name="location" id="location"
                                                                class="form-control" placeholder="Enter Location">
                                                        </div>
                                                    </div>
                                                    <br>

                                                    <div class="modal-footer">
                                                        <button type="button" class="btn btn-danger"
                                                            data-dismiss="modal">Close</button>
                                                        <button type="submit" class="btn btn-success">Submit</button>
                                                    </div>
                                            </form>

                                        </div>
                                    </div>
                                </div>



                                {{-- 2222222222222222222 --}}
                            @endforeach
                        </tbody>
                    </table>
					


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\timesheetdownload.blade.php

                      @if (Request::is('adminsearchtimesheet') || Request::is('mytimesheetlist/*') || Request::is('searchingtimesheet'))
                          <table id="examplee" class="table display table-bordered table-striped table-hover">
                              <thead>
                                  <tr>
                                      <th style="display: none;">id</th>
                                      <th>Employee Name</th>
                                      @if (Request::is('adminsearchtimesheet'))
                                          <th>Employee Code</th>
                                      @endif
                                      <th>Date</th>
                                      <th>Day</th>
                                      <th>Client Name</th>
                                      <th>Client Code</th>
                                      <th>Assignment Name</th>
                                      <th>Work Item</th>
                                      <th>Location</th>
                                      <th>Partner</th>
                                      <th>Hour</th>
                                  </tr>
                              </thead>
                              <tbody>

                                  @foreach ($timesheetData as $timesheetDatas)
                                      <tr>
                                          @if (Request::is('adminsearchtimesheet'))
                                              @php
                                                  $permotioncheck = DB::table('teamrolehistory')
                                                      ->where('teammember_id', $timesheetDatas->createdby)
                                                      ->first();

                                                  $datadate = Carbon\Carbon::createFromFormat(
                                                      'Y-m-d H:i:s',
                                                      $timesheetDatas->created_at,
                                                  );

                                                  $permotiondate = null;
                                                  if ($permotioncheck) {
                                                      $permotiondate = Carbon\Carbon::createFromFormat(
                                                          'Y-m-d H:i:s',
                                                          $permotioncheck->created_at,
                                                      );
                                                  }
                                              @endphp
                                          @endif
                                          <td style="display: none;">{{ $timesheetDatas->id }}</td>
                                          <td> {{ $timesheetDatas->team_member ?? '' }} </td>
                                          @if (Request::is('adminsearchtimesheet'))
                                              {{-- <td> {{ $timesheetDatas->staffcode ?? '' }} </td> --}}
                                              @if ($permotioncheck && $datadate->greaterThan($permotiondate))
                                                  <td>{{ $permotioncheck->newstaff_code }}</td>
                                              @else
                                                  <td>{{ $timesheetDatas->staffcode }}</td>
                                              @endif
                                          @endif
                                          <td> <span style="display: none;">
                                                  {{ date('Y-m-d', strtotime($timesheetDatas->date)) }}</span>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                          </td>
                                          <td>
                                              @if ($timesheetDatas->date != null)
                                                  {{ date('l', strtotime($timesheetDatas->date)) }}
                                              @endif
                                          </td>
                                          <td>{{ $timesheetDatas->client_name ?? '' }}
                                          </td>
                                          <td>{{ $timesheetDatas->client_code ?? '' }}
                                          </td>
                                          <td>
                                              {{ $timesheetDatas->assignment_name ?? '' }} (
                                              {{ $timesheetDatas->assignmentgenerate_id ?? '' }})
                                              @if ($timesheetDatas->assignmentname != null)
                                                  ({{ $timesheetDatas->assignmentname ?? '' }})
                                              @endif
                                          </td>
                                          <td> {{ $timesheetDatas->workitem ?? '' }}</td>
                                          <td>{{ $timesheetDatas->location ?? '' }} </td>
                                          <td> {{ $timesheetDatas->patnername ?? '' }} (
                                              {{ $timesheetDatas->patnerstaffcode ?? '' }}) </td>
                                          <td>{{ $timesheetDatas->hour ?? '' }}</td>
                                      </tr>
                                  @endforeach
                              </tbody>
                          </table>
                      @endif



Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\weeklylist.blade.php

                    <table class="table display table-bordered table-striped table-hover basic">
                        <thead>
                            <tr>
                                <th style="display: none;">id</th>
                                <th>Employee Name</th>
                                <th>Staff Code</th>
                                <th>Date</th>
                                <th>Day</th>
                                <th>Client Name</th>
                                <th>Assignment Name</th>
                                <th>Work Item</th>
                                <th>Location</th>
                                <th>Partner</th>
                                <th>Hour</th>
                                <th>Status</th>
                                @if (Auth::user()->role_id == 11 || Auth::user()->teammember_id != $timesheetData[0]->createdby)
                                    <th>Action</th>
                                @endif
                            </tr>
                        </thead>

                        <tbody>
                            @foreach ($timesheetData as $timesheetDatas)
                                <tr>
                                    @php

                                        $permotioncheck = DB::table('teamrolehistory')
                                            ->where('teammember_id', $timesheetDatas->createdby)
                                            ->first();

                                        $datadate = Carbon\Carbon::createFromFormat(
                                            'Y-m-d H:i:s',
                                            $timesheetDatas->created_at,
                                        );

                                        $permotiondate = null;
                                        if ($permotioncheck) {
                                            $permotiondate = Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $permotioncheck->created_at,
                                            );
                                        }

                                    @endphp
                                    <td style="display: none;">{{ $timesheetDatas->id }}</td>
                                    <td> {{ $timesheetDatas->team_member ?? '' }} </td>
                                    {{-- <td> {{ $timesheetDatas->staffcode ?? '' }} </td> --}}
                                    @if ($permotiondate && $datadate->greaterThan($permotiondate))
                                        <td>{{ $permotioncheck->newstaff_code }}</td>
                                    @else
                                        <td>{{ $timesheetDatas->staffcode }}</td>
                                    @endif
                                    <td> <span style="display: none;">
                                            {{ date('Y-m-d', strtotime($timesheetDatas->date)) }}</span>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                    </td>
                                    <td>
                                        @if ($timesheetDatas->date != null)
                                            {{ date('l', strtotime($timesheetDatas->date)) }}
                                        @endif
                                    </td>
                                    <td>{{ $timesheetDatas->client_name ?? '' }} ({{ $timesheetDatas->client_code ?? '' }})
                                    </td>
                                    <td>
                                        {{ $timesheetDatas->assignment_name ?? '' }} (
                                        {{ $timesheetDatas->assignmentgenerate_id ?? '' }})
                                        @if ($timesheetDatas->assignmentname != null)
                                            ({{ $timesheetDatas->assignmentname ?? '' }})
                                        @endif
                                    </td>
                                    <td> {{ $timesheetDatas->workitem ?? '' }}</td>
                                    <td>{{ $timesheetDatas->location ?? '' }} </td>
                                    <td> {{ $timesheetDatas->patnername ?? '' }}
                                        ({{ $timesheetDatas->patnerstaffcodee ?? '' }})
                                    </td>
                                    <td>{{ $timesheetDatas->hour ?? '' }}</td>
                                    <td>
                                        @if ($timesheetDatas->status == 0)
                                            <span class="badge badge-pill badge-warning">Saved</span>
                                        @elseif ($timesheetDatas->status == 1 || $timesheetDatas->status == 3)
                                            <span class="badge badge-pill badge-danger">Submit</span>
                                        @else
                                            <span class="badge badge-pill badge-secondary">Rejected</span>
                                        @endif
                                    </td>
                                    @if (Auth::user()->role_id == 11 || Auth::user()->teammember_id != $timesheetDatas->createdby)
                                        <td>
                                            @if ($timesheetDatas->status == 2)
                                                <a href="  {{ url('/timesheet/reject/' . $timesheetDatas->id) }}"
                                                    onclick="return confirm('Are you sure you want to Reject this timesheet?');">
                                                    <button class="btn btn-danger" data-toggle="modal"
                                                        style="height: 16px; width: auto; border-radius: 7px; display: flex; align-items: center; justify-content: center;font-size: 11px;"
                                                        data-target="#requestModal" disabled>Reject</button>
                                                </a>
                                            @else
                                                <a href="  {{ url('/timesheet/reject/' . $timesheetDatas->id) }}"
                                                    onclick="return confirm('Are you sure you want to Reject this timesheet?');">
                                                    <button class="btn btn-danger" data-toggle="modal"
                                                        style="height: 16px; width: auto; border-radius: 7px; display: flex; align-items: center; justify-content: center;font-size: 11px;"
                                                        data-target="#requestModal">Reject</button>
                                                </a>
                                            @endif
                                        </td>
                                    @endif
                                </tr>
                            @endforeach
                        </tbody>
                    </table>




Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheetrequest\index.blade.php

                    <table id="examplee" class="display nowrap">
                        <thead>
                            <tr>
                                <th style="display: none;">id</th>
                                <th>Status</th>
                                <th>Date</th>
                                <th>Time</th>
                                <th>Created By</th>
                                <th>Staff Code</th>
                                <th>Approver</th>
                                <th>Reason</th>
                                <th>Attachment</th>
                                <th>Reason for Reject</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach ($timesheetrequestsDatas as $timesheetrequestsData)
                                <tr>
                                    @php
                                        if (auth()->user()->role_id == 11) {
                                            $permotioncheck = DB::table('teamrolehistory')
                                                ->where('teammember_id', $timesheetrequestsData->createdby)
                                                ->first();

                                            $datadate = Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $timesheetrequestsData->created_at,
                                            );

                                            $permotiondate = null;
                                            if ($permotioncheck) {
                                                $permotiondate = Carbon\Carbon::createFromFormat(
                                                    'Y-m-d H:i:s',
                                                    $permotioncheck->created_at,
                                                );
                                            }
                                        }
                                    @endphp
                                    <td style="display: none;">{{ $timesheetrequestsData->id }}</td>
                                    <td>
                                        @if ($timesheetrequestsData->status == 0)
                                            <span class="badge badge-pill badge-warning">Created</span>
                                        @elseif($timesheetrequestsData->status == 1)
                                            <span class="badge badge-pill badge-success">Approved</span>
                                        @else
                                            <span class="badge badge-pill badge-danger">Rejected</span>
                                        @endif
                                    </td>
                                    <td>{{ date('d-m-Y', strtotime($timesheetrequestsData->created_at)) }}</td>
                                    <td>{{ date('h:m:s', strtotime($timesheetrequestsData->created_at)) }}</td>
                                    <td><a href="{{ url('timesheetrequest/view', $timesheetrequestsData->id) }}">
                                            {{ $timesheetrequestsData->createdbyauth }}</a></td>

                                    @if (auth()->user()->role_id == 11)
                                        @if ($permotioncheck && $datadate->greaterThan($permotiondate))
                                            <td>{{ $permotioncheck->newstaff_code }}</td>
                                        @else
                                            <td>{{ $timesheetrequestsData->staffcodeid }}</td>
                                        @endif
                                    @else
                                        <td>{{ $timesheetrequestsData->newstaff_code ?? $timesheetrequestsData->staffcodeid }}
                                    @endif

                                    </td>
                                    <td>{{ $timesheetrequestsData->team_member }}
                                        ({{ $timesheetrequestsData->staffcode }})
                                    </td>
                                    <td style="width: 900px; word-wrap: break-word; white-space: normal;">
                                        {{ $timesheetrequestsData->reason }}</td>
                                    <td>
                                        @if ($timesheetrequestsData && $timesheetrequestsData->attachment)
                                            <a
                                                href="{{ url('backEnd/image/confirmationfile/' . $timesheetrequestsData->attachment) }}">
                                                {{ $timesheetrequestsData->attachment ?? 'NA' }}
                                            </a>
                                        @else
                                            {{ 'NA' }}
                                        @endif
                                    </td>
                                    <td>{{ $timesheetrequestsData->remark ?? 'NA' }}</td>

                                </tr>
                            @endforeach
                        </tbody>
                    </table>
					



Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheetrequest\teamtimesheetrequest.blade.php

                              <table id="myTimesheetTable" class="table display table-bordered table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th>Status</th>
                                            <th>Date</th>
                                            <th>Time</th>
                                            <th>Created By</th>
                                            <th>Staff Code</th>
                                            <th>Approver</th>
                                            <th>Reason</th>
                                            <th>Attachment</th>
                                            <th>Reason for Reject</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach ($mytimesheetrequest as $timesheetrequestsData)
                                            <tr>
                                                @php
                                                    $permotioncheck = DB::table('teamrolehistory')
                                                        ->where('teammember_id', auth()->user()->teammember_id)
                                                        ->first();

                                                    $datadate = Carbon\Carbon::createFromFormat(
                                                        'Y-m-d H:i:s',
                                                        $timesheetrequestsData->created_at,
                                                    );

                                                    $permotiondate = null;
                                                    if ($permotioncheck) {
                                                        $permotiondate = Carbon\Carbon::createFromFormat(
                                                            'Y-m-d H:i:s',
                                                            $permotioncheck->created_at,
                                                        );
                                                    }
                                                @endphp
                                                <td>
                                                    @if ($timesheetrequestsData->status == 0)
                                                        <span class="badge badge-pill badge-warning">Created</span>
                                                    @elseif($timesheetrequestsData->status == 1)
                                                        <span class="badge badge-pill badge-success">Approved</span>
                                                    @else
                                                        <span class="badge badge-pill badge-danger">Rejected</span>
                                                    @endif
                                                </td>
                                                <td> <span style="display: none;">
                                                        {{ date('Y-m-d', strtotime($timesheetrequestsData->created_at)) }}</span>{{ date('d-m-Y', strtotime($timesheetrequestsData->created_at)) }}
                                                </td>
                                                <td>{{ date('g:i A', strtotime($timesheetrequestsData->created_at)) }}
                                                </td>
                                                <td><a
                                                        href="{{ url('timesheetrequest/view', $timesheetrequestsData->id) }}">
                                                        {{ $timesheetrequestsData->createdbyauth }}</a></td>
                                                {{-- <td>{{ $timesheetrequestsData->staffcodeid }}</td> --}}
                                                @if ($permotiondate && $datadate->greaterThan($permotiondate))
                                                    <td>{{ $permotioncheck->newstaff_code }}</td>
                                                @else
                                                    <td>{{ $timesheetrequestsData->staffcodeid }}</td>
                                                @endif
                                                <td>{{ $timesheetrequestsData->team_member }}
                                                    ({{ $timesheetrequestsData->staffcode }})
                                                </td>
                                                <td>{{ $timesheetrequestsData->reason }}</td>
                                                <td>
                                                    @if ($timesheetrequestsData && $timesheetrequestsData->attachment)
                                                        <a href="{{ url('backEnd/image/confirmationfile/' . $timesheetrequestsData->attachment) }}"
                                                            target="_blank">
                                                            {{ $timesheetrequestsData->attachment ?? 'NA' }}
                                                        </a>
                                                    @else
                                                        {{ 'NA' }}
                                                    @endif
                                                </td>
                                                <td>{{ $timesheetrequestsData->remark ?? 'NA' }}</td>
                                            </tr>
                                        @endforeach
                                    </tbody>
                                </table>
								



2222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php
resources\views\backEnd\applyleave\permotionandrejoin.blade.php
add this file hare 



table 2222222222222222222222222222222222222222222222222222222222222222222222222222
teamrolehistery

route 2222222222222222222222222222222222222222222222222222222222222222222222222222
2 route rest


Route::get('/permotionandrejoin', [PromotionandrejoiningController::class, 'permotionandrejoin']);
Route::post('/permotionandrejoinstore',  [PromotionandrejoiningController::class, 'permotionandrejoinstore']);




after bugs
P1010

2222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\assignmentmapping\form.blade.php
2222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\assignmentmapping\form.blade.php


2222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentmappingController.php

     $partner = Teammember::where('role_id', '=', 13)
            ->where('status', '=', 1)
            ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
            ->with('title')
            ->orderBy('team_member', 'asc')
            ->select('teammembers.*', 'teamrolehistory.newstaff_code')
            ->get();


2222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\assignmentmapping\form.blade.php

<div class="row row-sm">
    <div class="col-6">

        <div class="form-group">
            <label class="font-weight-600">Lead Partner *</label>
            <select required class="language form-control" id="category" name="leadpartner"
                @if (Request::is('client/*/edit')) > <option disabled
            style="display:block">Please Select One</option>

            @foreach ($partner as $teammemberData)
            <option value="{{ $teammemberData->id }}"
            @if ($client->leadpartner == $teammemberData->id) selected @endif>
                {{ $teammemberData->team_member }}</option>
                @endforeach
            @else
                <option></option>
                <option value="">Please Select One</option>
                @foreach ($partner as $teammemberData)
                    <option value="{{ $teammemberData->id }}">
                        {{ $teammemberData->team_member }} (
                        {{ $teammemberData->newstaff_code ?? ($teammemberData->staffcode ?? '') }} )</option>
                @endforeach
                @endif
            </select>
        </div>
    </div>
    <div class="col-6">
        <div class="form-group">
            <label class="font-weight-600">Other Partner </label>
            <select class="language form-control" name="otherpartner"
                @if (Request::is('client/*/edit')) > <option disabled
            style="display:block">Please Select One</option>

            @foreach ($partner as $teammemberData)
            <option value="{{ $teammemberData->id }}"
            @if ($client->leadpartner == $teammemberData->id) selected @endif>
                {{ $teammemberData->team_member }}</option>
                @endforeach
            @else
                <option></option>
                <option value="">Please Select One</option>
                @foreach ($partner as $teammemberData)
                    <option value="{{ $teammemberData->id }}">
                        {{ $teammemberData->team_member }} (
                        {{ $teammemberData->newstaff_code ?? ($teammemberData->staffcode ?? '') }} )</option>

                @endforeach
                @endif
            </select>
        </div>
    </div>
</div>

2222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\layouts\includes\leftsidebar.blade.php

      $getuser = DB::table('teammembers')
          ->join('roles', 'roles.id', '=', 'teammembers.role_id')
          ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
          ->where('teammembers.id', '=', auth()->user()->teammember_id)
          ->select(
              'roles.rolename',
              'teammembers.team_member',
              'teammembers.staffcode',
              'teammembers.profilepic',
              'teamrolehistory.newstaff_code',
          )
          ->first();