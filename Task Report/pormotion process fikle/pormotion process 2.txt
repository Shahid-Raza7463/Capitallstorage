Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetrequestController.php

    public function open_timesheet($id)
    {

        $permotioncheck = DB::table('teamrolehistory')
            ->where('teammember_id', auth()->user()->teammember_id)->first();

        if (auth()->user()->role_id == 11 || auth()->user()->role_id == 18) {
            $timesheetrequestsDatas = DB::table('timesheetrequests')
                ->leftjoin('clients', 'clients.id', 'timesheetrequests.client_id')
                ->leftjoin('assignments', 'assignments.id', 'timesheetrequests.assignment_id')
                ->leftjoin('teammembers', 'teammembers.id', 'timesheetrequests.partner')
                ->leftjoin('teammembers as createdby', 'createdby.id', 'timesheetrequests.createdby')
                ->where('timesheetrequests.status', 0)
                ->select(
                    'timesheetrequests.*',
                    'clients.client_name',
                    'assignments.assignment_name',
                    'teammembers.team_member',
                    'teammembers.staffcode',
                    'createdby.team_member as createdbyauth',
                    'createdby.staffcode as staffcodeid',
                )->get();
            // dd($timesheetrequestsDatas);
        } elseif ($permotioncheck && auth()->user()->role_id == 13) {
            // Define the common parts of the query
            $commonQuery = DB::table('timesheetrequests')
                ->leftJoin('clients', 'clients.id', '=', 'timesheetrequests.client_id')
                ->leftJoin('assignments', 'assignments.id', '=', 'timesheetrequests.assignment_id')
                ->leftJoin('teammembers', 'teammembers.id', '=', 'timesheetrequests.partner')
                ->leftJoin('teammembers as createdby', 'createdby.id', '=', 'timesheetrequests.createdby')
                ->where('timesheetrequests.status', 0)
                ->where(function ($query) {
                    $query->where('timesheetrequests.partner', auth()->user()->teammember_id)
                        ->orWhere('timesheetrequests.createdby', auth()->user()->teammember_id);
                })
                ->select(
                    'timesheetrequests.*',
                    'clients.client_name',
                    'assignments.assignment_name',
                    'teammembers.team_member',
                    'teammembers.staffcode',
                    'createdby.team_member as createdbyauth'
                );

            // Get the timesheet requests before and after the promotion date
            $timesheetrequestsDatas1 = (clone $commonQuery)
                ->whereDate('timesheetrequests.created_at', '<', $permotioncheck->created_at)
                ->addSelect('createdby.staffcode as staffcodeid')
                ->get();

            $timesheetrequestspermotion = (clone $commonQuery)
                ->leftJoin('teamrolehistory as createdby_history', 'createdby_history.teammember_id', '=', 'createdby.id')
                ->whereDate('timesheetrequests.created_at', '>', $permotioncheck->created_at)
                ->addSelect('createdby_history.newstaff_code')
                ->get();

            $timesheetrequestsDatas = $timesheetrequestsDatas1->merge($timesheetrequestspermotion);
        } else {
            $timesheetrequestsDatas = DB::table('timesheetrequests')
                ->leftjoin('clients', 'clients.id', 'timesheetrequests.client_id')
                ->leftjoin('assignments', 'assignments.id', 'timesheetrequests.assignment_id')
                ->leftjoin('teammembers', 'teammembers.id', 'timesheetrequests.partner')
                ->leftjoin('teammembers as createdby', 'createdby.id', 'timesheetrequests.createdby')
                ->where('timesheetrequests.status', 0)
                ->where(function ($query) {
                    $query->where('timesheetrequests.partner', auth()->user()->teammember_id)
                        ->orWhere('timesheetrequests.createdby', auth()->user()->teammember_id);
                })
                ->select(
                    'timesheetrequests.*',
                    'clients.client_name',
                    'assignments.assignment_name',
                    'teammembers.team_member',
                    'teammembers.staffcode',
                    'createdby.team_member as createdbyauth',
                    'createdby.staffcode as staffcodeid',
                )->get();
        }
        return view('backEnd.timesheetrequest.index', compact('timesheetrequestsDatas'));
    }





Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheetrequest\index.blade.php

                    <table id="examplee" class="display nowrap">
                        <thead>
                            <tr>
                                <th style="display: none;">id</th>
                                <th>Status</th>
                                <th>Date</th>
                                <th>Time</th>
                                <th>Created By</th>
                                <th>Staff Code</th>
                                <th>Approver</th>
                                <th>Reason</th>
                                <th>Attachment</th>
                                <th>Reason for Reject</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach ($timesheetrequestsDatas as $timesheetrequestsData)
                                <tr>
                                    @php
                                        if (auth()->user()->role_id == 11) {
                                            $permotioncheck = DB::table('teamrolehistory')
                                                ->where('teammember_id', $timesheetrequestsData->createdby)
                                                ->first();

                                            $datadate = Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $timesheetrequestsData->created_at,
                                            );

                                            $permotiondate = null;
                                            if ($permotioncheck) {
                                                $permotiondate = Carbon\Carbon::createFromFormat(
                                                    'Y-m-d H:i:s',
                                                    $permotioncheck->created_at,
                                                );
                                            }
                                        }
                                    @endphp
                                    <td style="display: none;">{{ $timesheetrequestsData->id }}</td>
                                    <td>
                                        @if ($timesheetrequestsData->status == 0)
                                            <span class="badge badge-pill badge-warning">Created</span>
                                        @elseif($timesheetrequestsData->status == 1)
                                            <span class="badge badge-pill badge-success">Approved</span>
                                        @else
                                            <span class="badge badge-pill badge-danger">Rejected</span>
                                        @endif
                                    </td>
                                    <td>{{ date('d-m-Y', strtotime($timesheetrequestsData->created_at)) }}</td>
                                    <td>{{ date('h:m:s', strtotime($timesheetrequestsData->created_at)) }}</td>
                                    <td><a href="{{ url('timesheetrequest/view', $timesheetrequestsData->id) }}">
                                            {{ $timesheetrequestsData->createdbyauth }}</a></td>

                                    @if (auth()->user()->role_id == 11)
                                        @if ($permotioncheck && $datadate->greaterThan($permotiondate))
                                            <td>{{ $permotioncheck->newstaff_code }}</td>
                                        @else
                                            <td>{{ $timesheetrequestsData->staffcodeid }}</td>
                                        @endif
                                    @else
                                        <td>{{ $timesheetrequestsData->newstaff_code ?? $timesheetrequestsData->staffcodeid }}
                                    @endif

                                    </td>
                                    <td>{{ $timesheetrequestsData->team_member }}
                                        ({{ $timesheetrequestsData->staffcode }})
                                    </td>
                                    <td style="width: 900px; word-wrap: break-word; white-space: normal;">
                                        {{ $timesheetrequestsData->reason }}</td>
                                    <td>
                                        @if ($timesheetrequestsData && $timesheetrequestsData->attachment)
                                            <a
                                                href="{{ url('backEnd/image/confirmationfile/' . $timesheetrequestsData->attachment) }}">
                                                {{ $timesheetrequestsData->attachment ?? 'NA' }}
                                            </a>
                                        @else
                                            {{ 'NA' }}
                                        @endif
                                    </td>
                                    <td>{{ $timesheetrequestsData->remark ?? 'NA' }}</td>

                                </tr>
                            @endforeach
                        </tbody>
                    </table>



Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php

  public function index()
  {

    $permotioncheck = DB::table('teamrolehistory')
      ->where('teammember_id', auth()->user()->teammember_id)->first();
    // dd($permotioncheck);
    $currentdate = date('Y-m-d');
    $currentYear = date('Y');
    $financialYearStart = $currentYear . '-04-01';
    $financialYearEnd = ($currentYear + 1) . '-03-31';

    $casualteam = DB::table('teammembers')->where('id', auth()->user()->teammember_id)->first();

    $birthday = DB::table('leavetypes')
      ->where('year', $currentYear)->where('name', 'Birthday/Religious Festival')->first();
    $Casual = DB::table('leavetypes')->where('year', $currentYear)->where('name', 'Casual Leave')->first();
    $Sick = DB::table('leavetypes')->where('year', $currentYear)->where('name', 'Sick Leave')->first();
    //  dd($casualteam);
    if ($casualteam->joining_date < $Casual->startdate) {

      $to = \Carbon\Carbon::createFromFormat('Y-m-d', $Casual->startdate);
    } else {
      $to = \Carbon\Carbon::createFromFormat('Y-m-d', $casualteam->joining_date);
    }




    $diff_in_months = $to->diffInMonths($currentdate) + 1;
    if (\Carbon\Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->diffInDays($currentdate) < 90) {
      $diff_in_months = 0;
    }
    //dd($diff_in_months);
    $teamdate = \Carbon\Carbon::createFromFormat('Y-m-d', $casualteam->joining_date);
    //   $currentdate = date('Y-m-d');
    $teammonthcount = $teamdate->diffInMonths($currentdate) + 1;
    if ($teamdate->diffInDays($currentdate) < 90) {
      $teammonthcount = 0;
    }

    if (auth()->user()->teammember_id == 434 || auth()->user()->teammember_id == 429) {
      $teammember = Teammember::with('role:id,rolename')
        ->whereNotNull('joining_date')
        ->get();




      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;

      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);

        $datess = [];
        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->where('startdate', '>=', $toDate)
          ->where('enddate', '<=', $toDate)->select('startdate')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }

        $countSick = array_diff($datess, $hdatess);
      }

      $countSick = DB::table('leaveapprove')
        ->where('year', $currentYear)->where('leavetype', $Sick->id)
        ->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');
      //  dd($countSick);
      $countCasual = DB::table('leaveapprove')
        ->where('year', $currentYear)->where('leavetype', $Casual->id)
        ->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');

      $countCasualafmnth = DB::table('leaveapprove')
        ->where('year', $currentYear)
        ->where('leavetype', $Casual->id)
        ->where('teammemberid', auth()->user()->teammember_id)
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addMonths(3))->sum('totaldays');

      $countbirthday = DB::table('leaveapprove')
        ->where('year', $currentYear)->where('leavetype', $birthday->id)
        ->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');

      //dd($countSick);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      // dd($totalcountCasual);
      //  dd($countCasualafmnth);
      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name')->get();
      // dd($applyleaveDatas);
      return view('backEnd.applyleave.teamapplication', compact(
        'teammember',
        'countCasualafmnth',
        'teammonthcount',
        'totalcountCasual',
        'teamapplyleaveDatas',
        'birthday',
        'countbirthday',
        'Casual',
        'Sick',
        'countSick',
        'countCasual'
      ));
    } elseif (auth()->user()->role_id == 11) {

      $teammember = Teammember::with('role:id,rolename')
        ->whereNotNull('joining_date')
        ->get();

      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;
      $datess = [];
      $hdatess = [];
      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();


        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $datess = array_unique($datess);
      }
      $countSick = count(array_diff($datess, $hdatess));


      $appliedCasual = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countCasual = 0;
      $casualDates = [];
      foreach ($appliedCasual as $CasualLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $casualDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $casualDates = array_unique($casualDates);
      }
      $countCasual = count(array_diff($casualDates, $hdatess));

      $appliedCasualafmnth = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addDays(90))
        ->get();

      $countCasualafmnth = 0;
      $CasualafmnthDates = [];
      foreach ($appliedCasualafmnth as $CasualafmnthLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $CasualafmnthDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $CasualafmnthDates = array_unique($CasualafmnthDates);
      }
      $countCasualafmnth = count(array_diff($CasualafmnthDates, $hdatess));





      $appliedbirthday = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $birthday->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();
      $countbirthday = 0;
      $birthdayDates = [];
      foreach ($appliedbirthday as $birthdayLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $birthdayDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $birthdayDates = array_unique($birthdayDates);
      }
      $countbirthday = count(array_diff($birthdayDates, $hdatess));

      //dd($diff_in_months);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      //  dd($diff_in_months);

      //  dd($countCasualafmnth);
      $leavetaken = DB::table('leaveapprove')
        ->where('year', '2023')->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');
      $myapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.createdby', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name')->latest()->get();
      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name')->get();

      $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
      $attendance = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $clInAttendance = 0;
      $slInAttendance = 0;
      //dd($attendance);
      foreach ($attendance as $item) {
        foreach ($columns as $column) {
          if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
            $clInAttendance++;
          }
          if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
            $slInAttendance++;
          }
        }
      }

      $role_id = auth()->user()->teammember_id;
      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'teammembers.emailid', 'roles.rolename', 'leavetypes.name')
        // ->take(7)
        ->get();

      $hasPendingRequests = $teamapplyleaveDatas->contains('status', 0);
      // dd($applyleaveDatas);
      return view('backEnd.applyleave.teamapplication', compact(
        'teammember',
        'countCasualafmnth',
        'teammonthcount',
        'totalcountCasual',
        'teamapplyleaveDatas',
        'birthday',
        'countbirthday',
        'Casual',
        'Sick',
        'countSick',
        'countCasual',
        'role_id',
        'clInAttendance',
        'slInAttendance',
        'hasPendingRequests',
      ));
    } elseif (auth()->user()->role_id == 18) {

      $role_id = auth()->user()->teammember_id;

      $teammember = Teammember::with('role:id,rolename')
        ->whereNotNull('joining_date')
        ->get();

      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;
      $datess = [];
      $hdatess = [];
      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();


        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $datess = array_unique($datess);
      }
      $countSick = count(array_diff($datess, $hdatess));


      $appliedCasual = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countCasual = 0;
      $casualDates = [];
      foreach ($appliedCasual as $CasualLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $casualDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $casualDates = array_unique($casualDates);
      }
      $countCasual = count(array_diff($casualDates, $hdatess));

      $appliedCasualafmnth = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addDays(90))
        ->get();

      $countCasualafmnth = 0;
      $CasualafmnthDates = [];
      foreach ($appliedCasualafmnth as $CasualafmnthLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $CasualafmnthDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $CasualafmnthDates = array_unique($CasualafmnthDates);
      }
      $countCasualafmnth = count(array_diff($CasualafmnthDates, $hdatess));





      $appliedbirthday = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $birthday->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();
      $countbirthday = 0;
      $birthdayDates = [];
      foreach ($appliedbirthday as $birthdayLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $birthdayDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $birthdayDates = array_unique($birthdayDates);
      }
      $countbirthday = count(array_diff($birthdayDates, $hdatess));

      //dd($diff_in_months);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      //  dd($diff_in_months);

      //  dd($countCasualafmnth);
      $leavetaken = DB::table('leaveapprove')
        ->where('year', '2023')->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');

      $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
      $attendance = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $clInAttendance = 0;
      $slInAttendance = 0;
      //dd($attendance);
      foreach ($attendance as $item) {
        foreach ($columns as $column) {
          if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
            $clInAttendance++;
          }
          if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
            $slInAttendance++;
          }
        }
      }
      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name')->latest()->get();

      return view('backEnd.applyleave.teamapplication', compact(
        'teammember',
        'countCasualafmnth',
        'teammonthcount',
        'totalcountCasual',
        'teamapplyleaveDatas',
        'birthday',
        'countbirthday',
        'Casual',
        'Sick',
        'countSick',
        'countCasual',
        'role_id',
        'clInAttendance',
        'slInAttendance',
      ));
    } elseif ($permotioncheck && auth()->user()->role_id == 13) {

      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;
      $datess = [];
      $hdatess = [];
      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();


        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $datess = array_unique($datess);
      }
      $countSick = count(array_diff($datess, $hdatess));


      $appliedCasual = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countCasual = 0;
      $casualDates = [];
      foreach ($appliedCasual as $CasualLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $casualDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $casualDates = array_unique($casualDates);
      }
      $countCasual = count(array_diff($casualDates, $hdatess));

      $appliedCasualafmnth = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addDays(90))
        ->get();

      $countCasualafmnth = 0;
      $CasualafmnthDates = [];
      foreach ($appliedCasualafmnth as $CasualafmnthLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $CasualafmnthDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $CasualafmnthDates = array_unique($CasualafmnthDates);
      }
      $countCasualafmnth = count(array_diff($CasualafmnthDates, $hdatess));

      $appliedbirthday = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $birthday->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();
      $countbirthday = 0;
      $birthdayDates = [];
      foreach ($appliedbirthday as $birthdayLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $birthdayDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $birthdayDates = array_unique($birthdayDates);
      }
      $countbirthday = count(array_diff($birthdayDates, $hdatess));

      //dd($diff_in_months);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      //  dd($diff_in_months);

      //  dd($countCasualafmnth);
      $leavetaken = DB::table('leaveapprove')
        ->where('year', '2023')->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');
      // $myapplyleaveDatas  = DB::table('applyleaves')
      //   ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
      //   ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
      //   ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
      //   ->where('applyleaves.createdby', auth()->user()->teammember_id)
      //   ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->latest()->get();



      $commonQuery = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.createdby', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name');

      $myapplyleaveDatasbefore = (clone $commonQuery)
        ->whereDate('applyleaves.created_at', '<', $permotioncheck->created_at)
        ->addSelect('teammembers.staffcode')
        ->get();

      $myapplyleaveDatasafter = (clone $commonQuery)
        ->leftJoin('teamrolehistory as createdby_history', 'createdby_history.teammember_id', '=', 'teammembers.id')
        ->whereDate('applyleaves.created_at', '>', $permotioncheck->created_at)
        ->addSelect('createdby_history.newstaff_code')
        ->get();
      $myapplyleaveDatas = $myapplyleaveDatasafter->merge($myapplyleaveDatasbefore);





      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->get();

      $hasPendingRequests = $teamapplyleaveDatas->contains('status', 0);


      $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
      $attendance = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $clInAttendance = 0;
      $slInAttendance = 0;
      //dd($attendance);
      foreach ($attendance as $item) {
        foreach ($columns as $column) {
          if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
            $clInAttendance++;
          }
          if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
            $slInAttendance++;
          }
        }
      }

      //Aproved leave jan to dec 
      $currentYear = date('Y');
      $approvedleavesvalue = DB::table('applyleaves')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 1)
        ->whereYear('from',  $currentYear)
        ->get();

      $leaveDurations = [];
      foreach ($approvedleavesvalue as $approvedleavesvalues) {
        $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

        $diff_in_days = $to->diffInDays($from) + 1;

        $holidaycount = DB::table('holidays')
          ->where('startdate', '>=', $approvedleavesvalues->from)
          ->where('enddate', '<=', $approvedleavesvalues->to)
          ->count();

        $leaveDurationcount = $diff_in_days - $holidaycount;
        $leaveDurations[] = $leaveDurationcount;
      }

      $approvedleavesvaluecount = array_sum($leaveDurations);
      // dd($approvedleavesvaluecount);
      //Aproved leave jan to dec end hare 

      // dd($applyleaveDatas);
      return view('backEnd.applyleave.index', compact('countCasualafmnth', 'leavetaken', 'teammonthcount', 'totalcountCasual', 'myapplyleaveDatas', 'teamapplyleaveDatas', 'birthday', 'countbirthday', 'Casual', 'Sick', 'countSick', 'countCasual', 'clInAttendance', 'slInAttendance', 'approvedleavesvaluecount', 'hasPendingRequests'));
    } else {


      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;
      $datess = [];
      $hdatess = [];
      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();


        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $datess = array_unique($datess);
      }
      $countSick = count(array_diff($datess, $hdatess));


      $appliedCasual = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countCasual = 0;
      $casualDates = [];
      foreach ($appliedCasual as $CasualLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $casualDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $casualDates = array_unique($casualDates);
      }
      $countCasual = count(array_diff($casualDates, $hdatess));

      $appliedCasualafmnth = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addDays(90))
        ->get();

      $countCasualafmnth = 0;
      $CasualafmnthDates = [];
      foreach ($appliedCasualafmnth as $CasualafmnthLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $CasualafmnthDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $CasualafmnthDates = array_unique($CasualafmnthDates);
      }
      $countCasualafmnth = count(array_diff($CasualafmnthDates, $hdatess));

      $appliedbirthday = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $birthday->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();
      $countbirthday = 0;
      $birthdayDates = [];
      foreach ($appliedbirthday as $birthdayLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $birthdayDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $birthdayDates = array_unique($birthdayDates);
      }
      $countbirthday = count(array_diff($birthdayDates, $hdatess));

      //dd($diff_in_months);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      //  dd($diff_in_months);

      //  dd($countCasualafmnth);
      $leavetaken = DB::table('leaveapprove')
        ->where('year', '2023')->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');
      $myapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.createdby', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->latest()->get();

      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->get();

      $hasPendingRequests = $teamapplyleaveDatas->contains('status', 0);


      $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
      $attendance = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $clInAttendance = 0;
      $slInAttendance = 0;
      //dd($attendance);
      foreach ($attendance as $item) {
        foreach ($columns as $column) {
          if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
            $clInAttendance++;
          }
          if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
            $slInAttendance++;
          }
        }
      }

      //Aproved leave jan to dec 
      $currentYear = date('Y');
      $approvedleavesvalue = DB::table('applyleaves')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 1)
        ->whereYear('from',  $currentYear)
        ->get();

      $leaveDurations = [];
      foreach ($approvedleavesvalue as $approvedleavesvalues) {
        $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

        $diff_in_days = $to->diffInDays($from) + 1;

        $holidaycount = DB::table('holidays')
          ->where('startdate', '>=', $approvedleavesvalues->from)
          ->where('enddate', '<=', $approvedleavesvalues->to)
          ->count();

        $leaveDurationcount = $diff_in_days - $holidaycount;
        $leaveDurations[] = $leaveDurationcount;
      }

      $approvedleavesvaluecount = array_sum($leaveDurations);
      // dd($approvedleavesvaluecount);
      //Aproved leave jan to dec end hare 

      // dd($applyleaveDatas);
      return view('backEnd.applyleave.index', compact('countCasualafmnth', 'leavetaken', 'teammonthcount', 'totalcountCasual', 'myapplyleaveDatas', 'teamapplyleaveDatas', 'birthday', 'countbirthday', 'Casual', 'Sick', 'countSick', 'countCasual', 'clInAttendance', 'slInAttendance', 'approvedleavesvaluecount', 'hasPendingRequests'));
    }
  }





Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\applyleave\index.blade.php

                                  <table id="examplee" class="table display table-bordered table-striped table-hover">
                                      <thead>
                                          <tr>
                                              <th>Date of Request</th>
                                              <th>Employee</th>
                                              <th>Staff Code</th>
                                              <th>Leave Type</th>
                                              <th>Approver</th>
                                              <th>Reason for Leave</th>
                                              <th>Leave Period</th>
                                              <th>Days</th>
                                              <th>Status</th>
                                              {{-- @if (auth()->user()->role_id != 13) --}}
                                              <th>Action</th>
                                              {{-- @endif --}}
                                          </tr>
                                      </thead>
                                      <tbody>

                                          @foreach ($myapplyleaveDatas as $applyleaveDatas)
                                              <tr>
                                                  {{-- @php
                                                      dd($applyleaveDatas);
                                                  @endphp --}}
                                                  <td>{{ date('F d,Y', strtotime($applyleaveDatas->created_at)) ?? '' }}
                                                  </td>
                                                  <td> <a href="{{ route('applyleave.show', $applyleaveDatas->id) }}">
                                                          {{ $applyleaveDatas->team_member ?? '' }}</a></td>
                                                  {{-- <td>{{ $applyleaveDatas->staffcode }}</td> --}}
                                                  <td>{{ $applyleaveDatas->newstaff_code ?? $applyleaveDatas->staffcode }}
                                                  </td>
                                                  <td>

                                                      {{ $applyleaveDatas->name ?? '' }}<br>
                                                      @if ($applyleaveDatas->type == '0')
                                                          <b>Type :</b> <span>Birthday</span><br>
                                                          <span><b>Birthday Date :
                                                              </b>{{ date(
                                                                  'F d,Y',
                                                                  strtotime(
                                                                      App\Models\Teammember::select('dateofbirth')->where('id', $applyleaveDatas->createdby)->first()->dateofbirth,
                                                                  ),
                                                              ) ?? '' }}</span>
                                                      @elseif($applyleaveDatas->type == '1')
                                                          <span>Religious Festival</span>
                                                      @endif
                                                      @if ($applyleaveDatas->examtype == '0')
                                                          <b>Exam Type :</b> <span>PCC</span>
                                                      @elseif($applyleaveDatas->examtype == '1')
                                                          <b>Exam Type :</b> <span>CA Final</span>
                                                      @elseif($applyleaveDatas->examtype == '2')
                                                          <b>Exam Type :</b> <span>B.Com</span>
                                                      @endif
                                                      @if ($applyleaveDatas->examtype == '3')
                                                          <b>Other :</b>
                                                          <span>{{ $applyleaveDatas->otherexam ?? '' }}</span>
                                                      @endif
                                                  </td>
                                                  <td>{{ App\Models\Teammember::select('team_member')->where('id', $applyleaveDatas->approver)->first()->team_member ?? '' }}
                                                      ({{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $applyleaveDatas->approver)->first()->staffcode ?? '' }})
                                                  </td>

                                                  <td>{{ $applyleaveDatas->reasonleave ?? '' }} </td>

                                                  <td>{{ date('F d,Y', strtotime($applyleaveDatas->from)) ?? '' }} -
                                                      {{ date('F d,Y', strtotime($applyleaveDatas->to)) ?? '' }}</td>
                                                  @php
                                                      $to = Carbon\Carbon::createFromFormat(
                                                          'Y-m-d',
                                                          $applyleaveDatas->to ?? '',
                                                      );
                                                      $from = Carbon\Carbon::createFromFormat(
                                                          'Y-m-d',
                                                          $applyleaveDatas->from,
                                                      );
                                                      $diff_in_days = $to->diffInDays($from) + 1;
                                                      $holidaycount = DB::table('holidays')
                                                          ->where('startdate', '>=', $applyleaveDatas->from)
                                                          ->where('enddate', '<=', $applyleaveDatas->to)
                                                          ->count();
                                                  @endphp
                                                  <td>{{ $diff_in_days - $holidaycount ?? '' }}</td>


                                                  <td>
                                                      @if ($applyleaveDatas->status == 0)
                                                          <span class="badge badge-pill badge-warning">Created</span>
                                                      @elseif($applyleaveDatas->status == 1)
                                                          <span class="badge badge-success">Approved</span>
                                                      @elseif($applyleaveDatas->status == 2)
                                                          <span class="badge badge-danger">Rejected</span>
                                                      @endif
                                                  </td>
                                                  <td>

                                                      @php
                                                          $currentDate = now()->format('Y-m-d');
                                                          $lastdate = $applyleaveDatas->to;
                                                      @endphp
                                                      @if ($lastdate >= $currentDate && $applyleaveDatas->status == 1)
                                                          {{-- @if (auth()->user()->role_id != 13) --}}
                                                          <button class="btn btn-danger" data-toggle="modal"
                                                              style="height: 16px; width: auto; border-radius: 7px; display: flex; align-items: center; justify-content: center;font-size: 11px;"
                                                              data-target="#requestModal{{ $applyleaveDatas->id }}">Request</button>
                                                          {{-- @endif --}}
                                                      @endif
                                                  </td>

                                              </tr>

                                              {{-- leaverequest pop up box open  --}}
                                              @if ($applyleaveDatas->leavetype == 11 || $applyleaveDatas->leavetype == 9)
                                                  <div class="modal fade" id="requestModal{{ $applyleaveDatas->id }}"
                                                      tabindex="-1" role="dialog" aria-labelledby="requestModalLabel"
                                                      aria-hidden="true">
                                                      <div class="modal-dialog" role="document">
                                                          <form method="post" action="{{ route('applyleaverequest') }}"
                                                              enctype="multipart/form-data">
                                                              @csrf
                                                              <div class="modal-content">
                                                                  <div class="modal-header">

                                                                      <h5 class="modal-title" id="requestModalLabel">Enter
                                                                          Request Details</h5>
                                                                      <button type="button" class="close"
                                                                          data-dismiss="modal" aria-label="Close">
                                                                          <span aria-hidden="true">&times;</span>
                                                                      </button>
                                                                  </div>
                                                                  <div class="modal-body">
                                                                      @if ($errors->any())
                                                                          <div class="">
                                                                              <ul>
                                                                                  @foreach ($errors->all() as $error)
                                                                                      <li class="text-danger">
                                                                                          {{ $error }}</li>
                                                                                  @endforeach
                                                                              </ul>
                                                                          </div>
                                                                      @endif

                                                                      <input type="hidden" name="applyleaveid"
                                                                          value="{{ $applyleaveDatas->id }}"
                                                                          class="form-control" placeholder="">
                                                                      <input type="hidden" name="createdby"
                                                                          value="{{ $applyleaveDatas->createdby }}"
                                                                          class="form-control" placeholder="">
                                                                      <input type="hidden" name="approver"
                                                                          value="{{ $applyleaveDatas->approver }}"
                                                                          class="form-control" placeholder="">
                                                                      <input type="hidden" name="status"
                                                                          value="{{ $applyleaveDatas->status }}"
                                                                          class="form-control" placeholder="">
                                                                      <input type="hidden" name="leavetype"
                                                                          value="{{ $applyleaveDatas->leavetype }}"
                                                                          class="form-control" placeholder="">
                                                                      <input type="hidden" name="from"
                                                                          value="{{ $applyleaveDatas->from }}"
                                                                          class="form-control" placeholder=""
                                                                          id="startdateleave">
                                                                      <input type="hidden" name="to"
                                                                          value="{{ $applyleaveDatas->to }}"
                                                                          class="form-control" placeholder=""
                                                                          id="enddateleave">

                                                                      <!-- Input fields for request details here -->
                                                                      <label for="">Reason:*</label>

                                                                      <input type="text" name="reason"
                                                                          class="form-control" placeholder="Enter Reason"
                                                                          required>
                                                                      <label for="">Select Date:*</label>
                                                                      <input type="date" name="date"
                                                                          class="form-control yearValidate" maxlength="10"
                                                                          required>
                                                                      {{-- validation for year --}}

                                                                      <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

                                                                      <script>
                                                                          $(document).ready(function() {
                                                                              $('.yearValidate').on('change', function() {
                                                                                  var leaveDate = $('.yearValidate');
                                                                                  //   alert(leaveDate);
                                                                                  var leaveDateValue = $('.yearValidate').val();
                                                                                  //   console.log(leaveDateValue);
                                                                                  var leaveDateGet = new Date(leaveDateValue);
                                                                                  var leaveyear = leaveDateGet.getFullYear();
                                                                                  // console.log(startyear);
                                                                                  var leaveyearLength = leaveyear.toString().length;
                                                                                  if (leaveyearLength > 4) {
                                                                                      alert('Enter four digits for the year');
                                                                                      leaveDate.val('');
                                                                                  }
                                                                              });
                                                                          });
                                                                      </script>

                                                                  </div>
                                                                  <div class="modal-footer">
                                                                      <button type="button" class="btn btn-secondary"
                                                                          data-dismiss="modal">Close</button>
                                                                      <button type="submit"
                                                                          class="btn btn-primary">Submit</button>
                                                                  </div>
                                                              </div>
                                                          </form>
                                                      </div>
                                                  </div>
                                              @endif
                                          @endforeach
                                      </tbody>
                                  </table>




Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentmappingController.php

    public function create(Request $request)
    {
        // $partner = Teammember::where('role_id', '=', 13)->where('status', '=', 1)->with('title')
        //     ->orderBy('team_member', 'asc')->get();
        // dd($partner);

     $partner = Teammember::where('role_id', '=', 13)
            ->where('status', '=', 1)
            ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
            ->with('title')
            ->orderBy('team_member', 'asc')
            ->select('teammembers.*', 'teamrolehistory.newstaff_code')
            ->get();

        $teammember = Teammember::where('status', '1')->whereIn('role_id', [14, 15])->with('title', 'role')
            ->orderBy('team_member', 'asc')->get();
        //dd($teammember);
        if ($request->ajax()) {


            if (isset($request->category_id)) {
                echo "<option>Please Select One</option>";

                $assignments = Assignment::leftJoin('assignmentbudgetings', function ($join) {
                    $join->on('assignments.id', '=', 'assignmentbudgetings.assignment_id');
                })->leftJoin('assignmentmappings', function ($join) {
                    $join->on('assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id');
                })
                    ->where('assignmentbudgetings.client_id', $request->category_id)
                    // get data only that is not matches assignmentmappings.assignmentgenerate_id from assignmentbudgetings table
                    ->whereNull('assignmentmappings.assignmentgenerate_id')
                    ->select('assignments.*', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentbudgetings.duedate', 'assignmentbudgetings.assignmentname')
                    ->get();

                foreach ($assignments as $sub) {
                    echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name  . '( ' . $sub->assignmentgenerate_id . ' )' . '( ' . $sub->assignmentname . ' )' . "</option>";
                }
            }
        } else {
            if (auth()->user()->role_id == 11 || auth()->user()->role_id == 12) {
                $client = Client::where('status', 1)->latest()->get();

                $assignment = Assignment::where('status', '1')
                    ->whereNotIn('id',  [214, 215])->orderBy('assignment_name')->get();

                $clientss = Client::activeClient()->orderBy('client_name')->orWhere('clients.leadpartner', auth()->user()->teammember_id)->orWhere('clients.createdbyadmin_id', auth()->user()->id)->orWhere('clients.updatedbyadmin_id', auth()->user()->id)->select('clients.*')->get();

                return view('backEnd.assignmentmapping.create', compact('client', 'teammember', 'partner', 'assignment', 'clientss'));
            } else {
                $client = DB::table('assignmentbudgetings')
                    ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                    ->Where('assignmentbudgetings.created_by', auth()->user()->id)
                    ->select('clients.client_name', 'clients.id')
                    ->distinct()->get();


                $assignment = Assignment::where('status', '1')
                    ->whereNotIn('id',  [214, 215])->orderBy('assignment_name')->get();

                $clientss = Client::activeClient()->orderBy('client_name')->orWhere('clients.leadpartner', auth()->user()->teammember_id)->orWhere('clients.createdbyadmin_id', auth()->user()->id)->orWhere('clients.updatedbyadmin_id', auth()->user()->id)->select('clients.*')->get();

                //	DB::table('clients')->
                //  orWhere('clients.leadpartner',auth()->user()->teammember_id)->
                //  orWhere('clients.createdbyadmin_id',auth()->user()->id)->
                //	 orWhere('clients.updatedbyadmin_id',auth()->user()->id)->
                //   select('clients.client_name','clients.id')->get();

                return view('backEnd.assignmentmapping.create', compact('client', 'teammember', 'partner', 'assignment', 'clientss'));
            }
        }
    }






Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\assignmentmapping\form.blade.php

<div class="row row-sm">
    <div class="col-6">

        <div class="form-group">
            <label class="font-weight-600">Lead Partner *</label>
            <select required class="language form-control" id="category" name="leadpartner"
                @if (Request::is('client/*/edit')) > <option disabled
            style="display:block">Please Select One</option>

            @foreach ($partner as $teammemberData)
            <option value="{{ $teammemberData->id }}"
            @if ($client->leadpartner == $teammemberData->id) selected @endif>
                {{ $teammemberData->team_member }}</option>
                @endforeach
            @else
                <option></option>
                <option value="">Please Select One</option>
                @foreach ($partner as $teammemberData)
                    <option value="{{ $teammemberData->id }}">
                        {{ $teammemberData->team_member }} (
                        {{ $teammemberData->newstaff_code ?? ($teammemberData->staffcode ?? '') }} )</option>
                @endforeach
                @endif
            </select>
        </div>
    </div>
    <div class="col-6">
        <div class="form-group">
            <label class="font-weight-600">Other Partner </label>
            <select class="language form-control" name="otherpartner"
                @if (Request::is('client/*/edit')) > <option disabled
            style="display:block">Please Select One</option>

            @foreach ($partner as $teammemberData)
            <option value="{{ $teammemberData->id }}"
            @if ($client->leadpartner == $teammemberData->id) selected @endif>
                {{ $teammemberData->team_member }}</option>
                @endforeach
            @else
                <option></option>
                <option value="">Please Select One</option>
                @foreach ($partner as $teammemberData)
                    <option value="{{ $teammemberData->id }}">
                        {{ $teammemberData->team_member }} (
                        {{ $teammemberData->newstaff_code ?? ($teammemberData->staffcode ?? '') }} )</option>

                @endforeach
                @endif
            </select>
        </div>
    </div>
</div>



Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentmappingController.php

    public function yearWise(Request $request)
    {
        if (auth()->user()->role_id == 11) {
            $partner = Teammember::where('role_id', '=', 13)->where('status', '=', 1)->with('title')
                ->orderBy('team_member', 'asc')->get();
            $clientid = $request->clientid;
            $assignmentmappingData =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->where('clients.id', $request->clientid)
                ->where('assignmentmappings.year', $request->year)
                ->select(
                    'assignmentmappings.*',
                    'assignmentbudgetings.duedate',
                    'assignmentbudgetings.assignmentname',
                    'assignments.assignment_name',
                    'clients.client_name',
                    'clients.client_code',
                )->distinct()->get();
            return view('backEnd.assignmentmapping.yearwise', compact('assignmentmappingData', 'clientid', 'partner'));
        } elseif (auth()->user()->role_id == 13) {
            $clientid = $request->clientid;
            $assigned =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->where('clients.id', $request->clientid)
                ->where('assignmentmappings.year', $request->year)
                ->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                ->select(
                    'assignmentmappings.*',
                    'assignmentbudgetings.duedate',
                    'assignments.assignment_name',
                    'clients.client_name',
                    'clients.client_code',
                    'assignmentbudgetings.assignmentname'
                )->distinct()->get();

            $otherassigned =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->where('clients.id', $request->clientid)
                ->where('assignmentmappings.year', $request->year)
                ->where('assignmentmappings.otherpartner', auth()->user()->teammember_id)
                ->select(
                    'assignmentmappings.*',
                    'assignmentbudgetings.duedate',
                    'assignments.assignment_name',
                    'clients.client_name',
                    'clients.client_code',
                    'assignmentbudgetings.assignmentname'
                )->distinct()->get();
            return view('backEnd.assignmentmapping.yearwisepartnerlist', compact('assigned', 'otherassigned', 'clientid'));
        } else {
            // assrejected
            $clientid = $request->clientid;
            $assignmentmappingData =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->where('clients.id', $request->clientid)
                ->where('assignmentmappings.year', $request->year)
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
                ->where('assignmentteammappings.status', 1)
                ->select(
                    'assignmentmappings.*',
                    'assignmentbudgetings.duedate',
                    'assignmentbudgetings.assignmentname',
                    'assignments.assignment_name',
                    'clients.client_name',
                    'clients.client_code',
                )->distinct()->get();
            // assrejected
            return view('backEnd.assignmentmapping.yearwise', compact('assignmentmappingData', 'clientid'));
        }
    }
	



Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\assignmentmapping\yearwise.blade.php

                    <table id="examplee" class="table display table-bordered table-striped table-hover">
                        <thead>
                            <tr>
                                <th class="textfixed">Assignment Id</th>
                                <th class="textfixed">Assignment</th>
                                <th class="textfixed">Client</th>
                                <th class="textfixed">Client Code</th>
                                <th class="textfixed">Deadline</th>
                                <th class="textfixed">Period Start</th>
                                <th class="textfixed">Period End</th>
                                <th class="textfixed">Assigned Partner</th>
                                <th class="textfixed">Other Partner</th>
                                <th class="textfixed">Team Leader</th>
                                <th class="textfixed">Teammember</th>
                                @if (auth()->user()->role_id != 15)
                                    <th class="textfixed">Edit</th>
                                @endif
                            </tr>
                        </thead>
                        <tbody>
                            @foreach ($assignmentmappingData as $assignmentmappingDatas)
                                <tr>
                                    <td> <a
                                            href="{{ url('/viewassignment/' . $assignmentmappingDatas->assignmentgenerate_id) }}">{{ $assignmentmappingDatas->assignmentgenerate_id }}</a>
                                    </td>
                                    <td>
                                        {{ $assignmentmappingDatas->assignment_name }} @if ($assignmentmappingDatas->assignmentname != null)
                                            ({{ $assignmentmappingDatas->assignmentname }})
                                        @endif
                                    </td>
                                    <td> {{ $assignmentmappingDatas->client_name }}</td>
                                    <td> {{ $assignmentmappingDatas->client_code }}</td>
                                    <td class="textfixed">
                                        @if ($assignmentmappingDatas->duedate != null)
                                            {{ date('d-m-Y', strtotime($assignmentmappingDatas->duedate)) }}
                                        @endif
                                    </td>
                                    <td class="textfixed">
                                        @if ($assignmentmappingDatas->periodstart != null)
                                            {{ date('d-m-Y', strtotime($assignmentmappingDatas->periodstart)) }}
                                        @endif
                                    </td>
                                    <td class="textfixed">
                                        @if ($assignmentmappingDatas->periodend != null)
                                            {{ date('d-m-Y', strtotime($assignmentmappingDatas->periodend)) }}
                                        @endif
                                    </td>
                                    {{-- <td>{{ App\Models\Teammember::select('team_member')->where('id', $assignmentmappingDatas->leadpartner)->first()->team_member ?? '' }}
                                        ({{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $assignmentmappingDatas->leadpartner)->first()->staffcode ?? '' }})
                                    </td>
                                    <td>{{ App\Models\Teammember::select('team_member')->where('id', $assignmentmappingDatas->otherpartner)->first()->team_member ?? '' }}
                                        ({{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $assignmentmappingDatas->otherpartner)->first()->staffcode ?? '' }})
                                    </td> --}}
                                    @php

                                        $leadpartner = DB::table('teammembers')
                                            ->leftJoin(
                                                'teamrolehistory',
                                                'teamrolehistory.teammember_id',
                                                '=',
                                                'teammembers.id',
                                            )
                                            ->where('teammembers.id', $assignmentmappingDatas->leadpartner)
                                            ->select(
                                                'teammembers.team_member',
                                                'teammembers.staffcode',
                                                'teamrolehistory.newstaff_code',
                                            )
                                            ->first();

                                        $otherPartner = DB::table('teammembers')
                                            ->leftJoin(
                                                'teamrolehistory',
                                                'teamrolehistory.teammember_id',
                                                '=',
                                                'teammembers.id',
                                            )
                                            ->where('teammembers.id', $assignmentmappingDatas->otherpartner)
                                            ->select(
                                                'teammembers.team_member',
                                                'teammembers.staffcode',
                                                'teamrolehistory.newstaff_code',
                                            )
                                            ->first();

                                    @endphp

                                    <td>
                                        {{ $leadpartner->team_member ?? '' }}
                                        @if ($leadpartner && $leadpartner->team_member)
                                            (
                                            {{ $leadpartner->newstaff_code ?? ($leadpartner->staffcode ?? '') }})
                                        @endif
                                    </td>
                                    <td>
                                        {{ $otherPartner->team_member ?? '' }}
                                        @if ($otherPartner && $otherPartner->team_member)
                                            (
                                            {{ $otherPartner->newstaff_code ?? ($otherPartner->staffcode ?? '') }})
                                        @endif
                                    </td>

                                    <td>
                                        @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $assignmentmappingDatas->id)->where('assignmentteammappings.type', 0)->get() as $sub)
                                            @if ($sub->profilepic == null)
                                                <a class="avatar avatar-xs" data-toggle="tooltip"
                                                    title="{{ $sub->team_member }}({{ $sub->staffcode }})">
                                                    <img src="{{ url('backEnd/image/dummy.png') }}"
                                                        class="avatar-img rounded-circle" alt="...">
                                                @else
                                                    <a class="avatar avatar-xs" data-toggle="tooltip"
                                                        title="{{ $sub->team_member }}({{ $sub->staffcode }})">
                                                        <img src="{{ asset('backEnd/image/teammember/profilepic/' . $sub->profilepic) }}"
                                                            class="avatar-img rounded-circle" alt="...">
                                            @endif
                                        @endforeach
                                    </td>

                                    <td>
                                        @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $assignmentmappingDatas->id)->where('assignmentteammappings.type', 2)->get() as $sub)
                                            @if ($sub->profilepic == null)
                                                <a class="avatar avatar-xs" data-toggle="tooltip"
                                                    title="{{ $sub->team_member }}({{ $sub->staffcode }})">
                                                    <img src="{{ url('backEnd/image/dummy.png') }}"
                                                        class="avatar-img rounded-circle" alt="...">
                                                @else
                                                    <a class="avatar avatar-xs" data-toggle="tooltip"
                                                        title="{{ $sub->team_member }}({{ $sub->staffcode }})">
                                                        <img src="{{ asset('backEnd/image/teammember/profilepic/' . $sub->profilepic) }}"
                                                            class="avatar-img rounded-circle" alt="...">
                                            @endif
                                        @endforeach
                                    </td>
                                    @if (auth()->user()->role_id != 15)
                                        <td>
                                            <a href="{{ url('/assignmentlist/' . $assignmentmappingDatas->assignmentgenerate_id) }}"
                                                class="btn btn-info-soft btn-sm"><i class="far fa-edit"></i></a>
                                        </td>
                                    @endif
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
					
					



Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\assignmentmapping\yearwisepartnerlist.blade.php

                            <table class="table display table-bordered table-striped table-hover examplee">
                                <thead>
                                    <tr>
                                        <th>Assignment Id</th>
                                        <th>Assignment</th>
                                        <th>Client</th>
                                        <th>Client Code</th>
                                        <th>Deadline</th>
                                        <th>Period End</th>
                                        <th>Assigned Partner</th>
                                        <th>Other Partner</th>
                                        <th>Teammember</th>
                                        @if (auth()->user()->role_id != 15 && Auth::user()->role_id != 11)
                                            <th>Edit</th>
                                        @endif
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach ($assigned as $assignmentmappingDatas)
                                        <tr>

                                            <td> <a
                                                    href="{{ url('/viewassignment/' . $assignmentmappingDatas->assignmentgenerate_id) }}">{{ $assignmentmappingDatas->assignmentgenerate_id }}</a>
                                            </td>
                                            <td>
                                                {{ $assignmentmappingDatas->assignment_name }} @if ($assignmentmappingDatas->assignmentname != null)
                                                    ({{ $assignmentmappingDatas->assignmentname }})
                                                @endif
                                            </td>
                                            <td> {{ $assignmentmappingDatas->client_name }}</td>
                                            <td> {{ $assignmentmappingDatas->client_code }}</td>
                                            <td>
                                                @if ($assignmentmappingDatas->duedate != null)
                                                    {{ date('d-m-Y', strtotime($assignmentmappingDatas->duedate)) }}
                                                @endif
                                            </td>
                                            <td>
                                                @if ($assignmentmappingDatas->periodend != null)
                                                    {{ date('d-m-Y', strtotime($assignmentmappingDatas->periodend)) }}
                                                @endif
                                            </td>
                                            {{-- <td>{{ App\Models\Teammember::select('team_member')->where('id', $assignmentmappingDatas->leadpartner)->first()->team_member ?? '' }}
                                                ({{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $assignmentmappingDatas->leadpartner)->first()->staffcode ?? '' }})
                                            </td>
                                            <td>{{ App\Models\Teammember::select('team_member')->where('id', $assignmentmappingDatas->otherpartner)->first()->team_member ?? '' }}
                                                ({{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $assignmentmappingDatas->otherpartner)->first()->staffcode ?? '' }})
                                            </td> --}}

                                            @php
                                                $leadpartner = DB::table('teammembers')
                                                    ->leftJoin(
                                                        'teamrolehistory',
                                                        'teamrolehistory.teammember_id',
                                                        '=',
                                                        'teammembers.id',
                                                    )
                                                    ->where('teammembers.id', $assignmentmappingDatas->leadpartner)
                                                    ->select(
                                                        'teammembers.team_member',
                                                        'teammembers.staffcode',
                                                        'teamrolehistory.newstaff_code',
                                                    )
                                                    ->first();

                                                $otherPartner = DB::table('teammembers')
                                                    ->leftJoin(
                                                        'teamrolehistory',
                                                        'teamrolehistory.teammember_id',
                                                        '=',
                                                        'teammembers.id',
                                                    )
                                                    ->where('teammembers.id', $assignmentmappingDatas->otherpartner)
                                                    ->select(
                                                        'teammembers.team_member',
                                                        'teammembers.staffcode',
                                                        'teamrolehistory.newstaff_code',
                                                    )
                                                    ->first();
                                            @endphp
                                            <td>
                                                {{ $leadpartner->team_member ?? '' }}
                                                @if ($leadpartner && $leadpartner->team_member)
                                                    (
                                                    {{ $leadpartner->newstaff_code ?? ($leadpartner->staffcode ?? '') }})
                                                @endif
                                            </td>
                                            <td>
                                                {{ $otherPartner->team_member ?? '' }}
                                                @if ($otherPartner && $otherPartner->team_member)
                                                    (
                                                    {{ $otherPartner->newstaff_code ?? ($otherPartner->staffcode ?? '') }})
                                                @endif
                                            </td>

                                            <td>
                                                @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $assignmentmappingDatas->id)->get() as $sub)
                                                    @if ($sub->profilepic == null)
                                                        <a class="avatar avatar-xs" data-toggle="tooltip"
                                                            title="{{ $sub->team_member }} ({{ $sub->staffcode }})">
                                                            <img src="{{ url('backEnd/image/dummy.png') }}"
                                                                class="avatar-img rounded-circle" alt="...">
                                                        @else
                                                            <a class="avatar avatar-xs" data-toggle="tooltip"
                                                                title="{{ $sub->team_member }} ({{ $sub->staffcode }})">
                                                                <img src="{{ asset('backEnd/image/teammember/profilepic/' . $sub->profilepic) }}"
                                                                    class="avatar-img rounded-circle" alt="...">
                                                    @endif
                                                @endforeach
                                            </td>
                                            @if (auth()->user()->role_id != 15 && Auth::user()->role_id != 11)
                                                <td>
                                                    <a href="{{ url('/assignmentlist/' . $assignmentmappingDatas->assignmentgenerate_id) }}"
                                                        class="btn btn-info-soft btn-sm"><i class="far fa-edit"></i></a>
                                                </td>
                                            @endif
                                        </tr>
                                    @endforeach
                                </tbody>
                            </table>
						
						

Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TeammemberController.php

    public function index()
    {

        if (auth()->user()->role_id == 11) {

            // $teammemberDatas = Teammember::with('title', 'role')
            //     ->whereNotIn('id', [793, 878])
            //     //   ->where('role_id','>',auth()->user()->role_id)
            //     ->get();

            $teammemberDatas = Teammember::with(['title', 'role'])
                ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
                ->whereNotIn('teammembers.id', [793, 878])
                ->select('teammembers.*', 'teamrolehistory.newstaff_code')
                ->get();

            return view('backEnd.teammember.index', compact('teammemberDatas'));
        } elseif (auth()->user()->role_id == 18 || auth()->user()->role_id == 16) {
            $teammemberactiveDatas = Teammember::with('title', 'role')
                ->where('role_id', '!=', 11)->where('status', 1)->orderBy('joining_date', 'desc')->get();
            $teammemberinactiveDatas = Teammember::with('title', 'role')
                ->where('role_id', '!=', 11)->where('status', 0)->orderBy('joining_date', 'desc')->get();
            //dd($teammemberDatas);
            return view('backEnd.teammember.hrindex', compact('teammemberactiveDatas', 'teammemberinactiveDatas'));
        } else {
            $teammemberDatas = Teammember::with(['title', 'role'])
                ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
                ->where('teammembers.role_id', '!=', 11)
                ->where('teammembers.status', 1)
                ->select('teammembers.*', 'teamrolehistory.newstaff_code')
                ->get();

            return view('backEnd.teammember.allindex', compact('teammemberDatas'));
        }
    }






Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\teammember\index.blade.php

                                    <td>
                                        {{ $teammemberData->newstaff_code ?? ($teammemberData->staffcode ?? '') }}
                                        @if ($teammemberData->newstaff_code)
                                            ({{ $teammemberData->staffcode }})
                                        @endif
                                    </td>
									


Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\teammember\allindex.blade.php

                    <table id="examplee" class="table display table-bordered table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Team Member Name</th>
                                <th>Team Role</th>
                                <th>Mobile No</th>
                                <th>Email</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach ($teammemberDatas as $teammemberData)
                                <tr>
                                    <td>
                                        {{ $teammemberData->team_member }} (
                                        {{ $teammemberData->newstaff_code ?? ($teammemberData->staffcode ?? '') }} )
                                    </td>
                                    <td>{{ $teammemberData->role->rolename ?? '' }}</td>

                                    <td>{{ $teammemberData->mobile_no }}</td>

                                    <td><a
                                            href="mailto:{{ $teammemberData->emailid }}">{{ $teammemberData->emailid ?? '' }}</a>
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>





Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php

  public function index()
  {

    $permotioncheck = DB::table('teamrolehistory')
      ->where('teammember_id', auth()->user()->teammember_id)->first();
    // dd($permotioncheck);
    $currentdate = date('Y-m-d');
    $currentYear = date('Y');
    $financialYearStart = $currentYear . '-04-01';
    $financialYearEnd = ($currentYear + 1) . '-03-31';

    $casualteam = DB::table('teammembers')->where('id', auth()->user()->teammember_id)->first();

    $birthday = DB::table('leavetypes')
      ->where('year', $currentYear)->where('name', 'Birthday/Religious Festival')->first();
    $Casual = DB::table('leavetypes')->where('year', $currentYear)->where('name', 'Casual Leave')->first();
    $Sick = DB::table('leavetypes')->where('year', $currentYear)->where('name', 'Sick Leave')->first();
    //  dd($casualteam);
    if ($casualteam->joining_date < $Casual->startdate) {

      $to = \Carbon\Carbon::createFromFormat('Y-m-d', $Casual->startdate);
    } else {
      $to = \Carbon\Carbon::createFromFormat('Y-m-d', $casualteam->joining_date);
    }




    $diff_in_months = $to->diffInMonths($currentdate) + 1;
    if (\Carbon\Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->diffInDays($currentdate) < 90) {
      $diff_in_months = 0;
    }
    //dd($diff_in_months);
    $teamdate = \Carbon\Carbon::createFromFormat('Y-m-d', $casualteam->joining_date);
    //   $currentdate = date('Y-m-d');
    $teammonthcount = $teamdate->diffInMonths($currentdate) + 1;
    if ($teamdate->diffInDays($currentdate) < 90) {
      $teammonthcount = 0;
    }

    if (auth()->user()->teammember_id == 434 || auth()->user()->teammember_id == 429) {
      $teammember = Teammember::with('role:id,rolename')
        ->whereNotNull('joining_date')
        ->get();




      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;

      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);

        $datess = [];
        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->where('startdate', '>=', $toDate)
          ->where('enddate', '<=', $toDate)->select('startdate')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }

        $countSick = array_diff($datess, $hdatess);
      }

      $countSick = DB::table('leaveapprove')
        ->where('year', $currentYear)->where('leavetype', $Sick->id)
        ->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');
      //  dd($countSick);
      $countCasual = DB::table('leaveapprove')
        ->where('year', $currentYear)->where('leavetype', $Casual->id)
        ->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');

      $countCasualafmnth = DB::table('leaveapprove')
        ->where('year', $currentYear)
        ->where('leavetype', $Casual->id)
        ->where('teammemberid', auth()->user()->teammember_id)
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addMonths(3))->sum('totaldays');

      $countbirthday = DB::table('leaveapprove')
        ->where('year', $currentYear)->where('leavetype', $birthday->id)
        ->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');

      //dd($countSick);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      // dd($totalcountCasual);
      //  dd($countCasualafmnth);
      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name')->get();
      // dd($applyleaveDatas);
      return view('backEnd.applyleave.teamapplication', compact(
        'teammember',
        'countCasualafmnth',
        'teammonthcount',
        'totalcountCasual',
        'teamapplyleaveDatas',
        'birthday',
        'countbirthday',
        'Casual',
        'Sick',
        'countSick',
        'countCasual'
      ));
    } elseif (auth()->user()->role_id == 11) {

      $teammember = Teammember::with('role:id,rolename')
        ->whereNotNull('joining_date')
        ->get();

      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;
      $datess = [];
      $hdatess = [];
      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();


        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $datess = array_unique($datess);
      }
      $countSick = count(array_diff($datess, $hdatess));


      $appliedCasual = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countCasual = 0;
      $casualDates = [];
      foreach ($appliedCasual as $CasualLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $casualDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $casualDates = array_unique($casualDates);
      }
      $countCasual = count(array_diff($casualDates, $hdatess));

      $appliedCasualafmnth = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addDays(90))
        ->get();

      $countCasualafmnth = 0;
      $CasualafmnthDates = [];
      foreach ($appliedCasualafmnth as $CasualafmnthLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $CasualafmnthDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $CasualafmnthDates = array_unique($CasualafmnthDates);
      }
      $countCasualafmnth = count(array_diff($CasualafmnthDates, $hdatess));





      $appliedbirthday = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $birthday->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();
      $countbirthday = 0;
      $birthdayDates = [];
      foreach ($appliedbirthday as $birthdayLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $birthdayDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $birthdayDates = array_unique($birthdayDates);
      }
      $countbirthday = count(array_diff($birthdayDates, $hdatess));

      //dd($diff_in_months);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      //  dd($diff_in_months);

      //  dd($countCasualafmnth);
      $leavetaken = DB::table('leaveapprove')
        ->where('year', '2023')->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');
      $myapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.createdby', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name')->latest()->get();
      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name')->get();

      $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
      $attendance = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $clInAttendance = 0;
      $slInAttendance = 0;
      //dd($attendance);
      foreach ($attendance as $item) {
        foreach ($columns as $column) {
          if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
            $clInAttendance++;
          }
          if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
            $slInAttendance++;
          }
        }
      }

      $role_id = auth()->user()->teammember_id;
      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'teammembers.emailid', 'roles.rolename', 'leavetypes.name')
        // ->take(7)
        ->get();

      $hasPendingRequests = $teamapplyleaveDatas->contains('status', 0);
      // dd($applyleaveDatas);
      return view('backEnd.applyleave.teamapplication', compact(
        'teammember',
        'countCasualafmnth',
        'teammonthcount',
        'totalcountCasual',
        'teamapplyleaveDatas',
        'birthday',
        'countbirthday',
        'Casual',
        'Sick',
        'countSick',
        'countCasual',
        'role_id',
        'clInAttendance',
        'slInAttendance',
        'hasPendingRequests',
      ));
    } elseif (auth()->user()->role_id == 18) {

      $role_id = auth()->user()->teammember_id;

      $teammember = Teammember::with('role:id,rolename')
        ->whereNotNull('joining_date')
        ->get();

      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;
      $datess = [];
      $hdatess = [];
      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();


        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $datess = array_unique($datess);
      }
      $countSick = count(array_diff($datess, $hdatess));


      $appliedCasual = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countCasual = 0;
      $casualDates = [];
      foreach ($appliedCasual as $CasualLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $casualDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $casualDates = array_unique($casualDates);
      }
      $countCasual = count(array_diff($casualDates, $hdatess));

      $appliedCasualafmnth = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addDays(90))
        ->get();

      $countCasualafmnth = 0;
      $CasualafmnthDates = [];
      foreach ($appliedCasualafmnth as $CasualafmnthLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $CasualafmnthDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $CasualafmnthDates = array_unique($CasualafmnthDates);
      }
      $countCasualafmnth = count(array_diff($CasualafmnthDates, $hdatess));





      $appliedbirthday = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $birthday->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();
      $countbirthday = 0;
      $birthdayDates = [];
      foreach ($appliedbirthday as $birthdayLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $birthdayDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $birthdayDates = array_unique($birthdayDates);
      }
      $countbirthday = count(array_diff($birthdayDates, $hdatess));

      //dd($diff_in_months);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      //  dd($diff_in_months);

      //  dd($countCasualafmnth);
      $leavetaken = DB::table('leaveapprove')
        ->where('year', '2023')->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');

      $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
      $attendance = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $clInAttendance = 0;
      $slInAttendance = 0;
      //dd($attendance);
      foreach ($attendance as $item) {
        foreach ($columns as $column) {
          if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
            $clInAttendance++;
          }
          if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
            $slInAttendance++;
          }
        }
      }
      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name')->latest()->get();

      return view('backEnd.applyleave.teamapplication', compact(
        'teammember',
        'countCasualafmnth',
        'teammonthcount',
        'totalcountCasual',
        'teamapplyleaveDatas',
        'birthday',
        'countbirthday',
        'Casual',
        'Sick',
        'countSick',
        'countCasual',
        'role_id',
        'clInAttendance',
        'slInAttendance',
      ));
    } elseif ($permotioncheck && auth()->user()->role_id == 13) {

      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;
      $datess = [];
      $hdatess = [];
      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();


        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $datess = array_unique($datess);
      }
      $countSick = count(array_diff($datess, $hdatess));


      $appliedCasual = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countCasual = 0;
      $casualDates = [];
      foreach ($appliedCasual as $CasualLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $casualDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $casualDates = array_unique($casualDates);
      }
      $countCasual = count(array_diff($casualDates, $hdatess));

      $appliedCasualafmnth = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addDays(90))
        ->get();

      $countCasualafmnth = 0;
      $CasualafmnthDates = [];
      foreach ($appliedCasualafmnth as $CasualafmnthLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $CasualafmnthDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $CasualafmnthDates = array_unique($CasualafmnthDates);
      }
      $countCasualafmnth = count(array_diff($CasualafmnthDates, $hdatess));

      $appliedbirthday = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $birthday->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();
      $countbirthday = 0;
      $birthdayDates = [];
      foreach ($appliedbirthday as $birthdayLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $birthdayDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $birthdayDates = array_unique($birthdayDates);
      }
      $countbirthday = count(array_diff($birthdayDates, $hdatess));

      //dd($diff_in_months);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      //  dd($diff_in_months);

      //  dd($countCasualafmnth);
      $leavetaken = DB::table('leaveapprove')
        ->where('year', '2023')->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');
      // $myapplyleaveDatas  = DB::table('applyleaves')
      //   ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
      //   ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
      //   ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
      //   ->where('applyleaves.createdby', auth()->user()->teammember_id)
      //   ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->latest()->get();



      $commonQuery = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.createdby', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name');

      $myapplyleaveDatasbefore = (clone $commonQuery)
        ->whereDate('applyleaves.created_at', '<', $permotioncheck->created_at)
        ->addSelect('teammembers.staffcode')
        ->get();

      $myapplyleaveDatasafter = (clone $commonQuery)
        ->leftJoin('teamrolehistory as createdby_history', 'createdby_history.teammember_id', '=', 'teammembers.id')
        ->whereDate('applyleaves.created_at', '>', $permotioncheck->created_at)
        ->addSelect('createdby_history.newstaff_code')
        ->get();
      $myapplyleaveDatas = $myapplyleaveDatasafter->merge($myapplyleaveDatasbefore);





      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->get();

      $hasPendingRequests = $teamapplyleaveDatas->contains('status', 0);


      $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
      $attendance = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $clInAttendance = 0;
      $slInAttendance = 0;
      //dd($attendance);
      foreach ($attendance as $item) {
        foreach ($columns as $column) {
          if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
            $clInAttendance++;
          }
          if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
            $slInAttendance++;
          }
        }
      }

      //Aproved leave jan to dec 
      $currentYear = date('Y');
      $approvedleavesvalue = DB::table('applyleaves')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 1)
        ->whereYear('from',  $currentYear)
        ->get();

      $leaveDurations = [];
      foreach ($approvedleavesvalue as $approvedleavesvalues) {
        $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

        $diff_in_days = $to->diffInDays($from) + 1;

        $holidaycount = DB::table('holidays')
          ->where('startdate', '>=', $approvedleavesvalues->from)
          ->where('enddate', '<=', $approvedleavesvalues->to)
          ->count();

        $leaveDurationcount = $diff_in_days - $holidaycount;
        $leaveDurations[] = $leaveDurationcount;
      }

      $approvedleavesvaluecount = array_sum($leaveDurations);
      // dd($approvedleavesvaluecount);
      //Aproved leave jan to dec end hare 

      // dd($applyleaveDatas);
      return view('backEnd.applyleave.index', compact('countCasualafmnth', 'leavetaken', 'teammonthcount', 'totalcountCasual', 'myapplyleaveDatas', 'teamapplyleaveDatas', 'birthday', 'countbirthday', 'Casual', 'Sick', 'countSick', 'countCasual', 'clInAttendance', 'slInAttendance', 'approvedleavesvaluecount', 'hasPendingRequests'));
    } else {


      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;
      $datess = [];
      $hdatess = [];
      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();


        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $datess = array_unique($datess);
      }
      $countSick = count(array_diff($datess, $hdatess));


      $appliedCasual = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countCasual = 0;
      $casualDates = [];
      foreach ($appliedCasual as $CasualLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $casualDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $casualDates = array_unique($casualDates);
      }
      $countCasual = count(array_diff($casualDates, $hdatess));

      $appliedCasualafmnth = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addDays(90))
        ->get();

      $countCasualafmnth = 0;
      $CasualafmnthDates = [];
      foreach ($appliedCasualafmnth as $CasualafmnthLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $CasualafmnthDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $CasualafmnthDates = array_unique($CasualafmnthDates);
      }
      $countCasualafmnth = count(array_diff($CasualafmnthDates, $hdatess));

      $appliedbirthday = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $birthday->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();
      $countbirthday = 0;
      $birthdayDates = [];
      foreach ($appliedbirthday as $birthdayLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $birthdayDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $birthdayDates = array_unique($birthdayDates);
      }
      $countbirthday = count(array_diff($birthdayDates, $hdatess));

      //dd($diff_in_months);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      //  dd($diff_in_months);

      //  dd($countCasualafmnth);
      $leavetaken = DB::table('leaveapprove')
        ->where('year', '2023')->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');
      $myapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.createdby', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->latest()->get();

      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->get();

      $hasPendingRequests = $teamapplyleaveDatas->contains('status', 0);


      $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
      $attendance = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $clInAttendance = 0;
      $slInAttendance = 0;
      //dd($attendance);
      foreach ($attendance as $item) {
        foreach ($columns as $column) {
          if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
            $clInAttendance++;
          }
          if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
            $slInAttendance++;
          }
        }
      }

      //Aproved leave jan to dec 
      $currentYear = date('Y');
      $approvedleavesvalue = DB::table('applyleaves')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 1)
        ->whereYear('from',  $currentYear)
        ->get();

      $leaveDurations = [];
      foreach ($approvedleavesvalue as $approvedleavesvalues) {
        $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

        $diff_in_days = $to->diffInDays($from) + 1;

        $holidaycount = DB::table('holidays')
          ->where('startdate', '>=', $approvedleavesvalues->from)
          ->where('enddate', '<=', $approvedleavesvalues->to)
          ->count();

        $leaveDurationcount = $diff_in_days - $holidaycount;
        $leaveDurations[] = $leaveDurationcount;
      }

      $approvedleavesvaluecount = array_sum($leaveDurations);
      // dd($approvedleavesvaluecount);
      //Aproved leave jan to dec end hare 

      // dd($applyleaveDatas);
      return view('backEnd.applyleave.index', compact('countCasualafmnth', 'leavetaken', 'teammonthcount', 'totalcountCasual', 'myapplyleaveDatas', 'teamapplyleaveDatas', 'birthday', 'countbirthday', 'Casual', 'Sick', 'countSick', 'countCasual', 'clInAttendance', 'slInAttendance', 'approvedleavesvaluecount', 'hasPendingRequests'));
    }
  }
  
  
  
  
  
  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  

Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\applyleave\openindex.blade.php


                                  <table id="examplee" class="table display table-bordered table-striped table-hover">
                                      <thead>
                                          <tr>
                                              <th>Date of Request</th>
                                              <th>Employee</th>
                                              <th>Staff Code</th>
                                              <th>Leave Type</th>
                                              <th>Approver</th>
                                              <th>Reason for Leave</th>
                                              <th>Leave Period</th>
                                              <th>Days</th>
                                              <th>Status</th>

                                              @foreach ($myapplyleaveDatas as $applyleaveDatas)
                                                  @if ($applyleaveDatas->leavetype == 11 && $applyleaveDatas->status == 1 && $loop->first)
                                                      <th>Action</th>
                                                  @endif
                                              @endforeach
                                          </tr>
                                      </thead>
                                      <tbody>

                                          @foreach ($myapplyleaveDatas as $applyleaveDatas)
                                              <tr>
                                                  <td>{{ date('F d,Y', strtotime($applyleaveDatas->created_at)) ?? '' }}
                                                  </td>
                                                  <td> <a href="{{ route('applyleave.show', $applyleaveDatas->id) }}">
                                                          {{ $applyleaveDatas->team_member ?? '' }}</a></td>
                                                  {{-- <td>{{ $applyleaveDatas->staffcode ?? '' }}</td> --}}
                                                  <td>{{ $applyleaveDatas->newstaff_code ?? $applyleaveDatas->staffcode }}
                                                  </td>
                                                  <td>

                                                      {{ $applyleaveDatas->name ?? '' }}<br>
                                                      @if ($applyleaveDatas->type == '0')
                                                          <b>Type :</b> <span>Birthday</span><br>
                                                          <span><b>Birthday Date :
                                                              </b>{{ date(
                                                                  'F d,Y',
                                                                  strtotime(
                                                                      App\Models\Teammember::select('dateofbirth')->where('id', $applyleaveDatas->createdby)->first()->dateofbirth,
                                                                  ),
                                                              ) ?? '' }}</span>
                                                      @elseif($applyleaveDatas->type == '1')
                                                          <span>Religious Festival</span>
                                                      @endif
                                                      @if ($applyleaveDatas->examtype == '0')
                                                          <b>Exam Type :</b> <span>PCC</span>
                                                      @elseif($applyleaveDatas->examtype == '1')
                                                          <b>Exam Type :</b> <span>CA Final</span>
                                                      @elseif($applyleaveDatas->examtype == '2')
                                                          <b>Exam Type :</b> <span>B.Com</span>
                                                      @endif
                                                      @if ($applyleaveDatas->examtype == '3')
                                                          <b>Other :</b>
                                                          <span>{{ $applyleaveDatas->otherexam ?? '' }}</span>
                                                      @endif
                                                  </td>
                                                  <td>{{ App\Models\Teammember::select('team_member')->where('id', $applyleaveDatas->approver)->first()->team_member ?? '' }}
                                                      ({{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $applyleaveDatas->approver)->first()->staffcode ?? '' }})
                                                  </td>

                                                  <td>{{ $applyleaveDatas->reasonleave ?? '' }} </td>

                                                  <td>{{ date('F d,Y', strtotime($applyleaveDatas->from)) ?? '' }} -
                                                      {{ date('F d,Y', strtotime($applyleaveDatas->to)) ?? '' }}</td>
                                                  @php
                                                      $to = Carbon\Carbon::createFromFormat(
                                                          'Y-m-d',
                                                          $applyleaveDatas->to ?? '',
                                                      );
                                                      $from = Carbon\Carbon::createFromFormat(
                                                          'Y-m-d',
                                                          $applyleaveDatas->from,
                                                      );
                                                      $diff_in_days = $to->diffInDays($from) + 1;
                                                      $holidaycount = DB::table('holidays')
                                                          ->where('startdate', '>=', $applyleaveDatas->from)
                                                          ->where('enddate', '<=', $applyleaveDatas->to)
                                                          ->count();
                                                  @endphp
                                                  <td>{{ $diff_in_days - $holidaycount ?? '' }}</td>


                                                  <td>
                                                      @if ($applyleaveDatas->status == 0)
                                                          <span class="badge badge-pill badge-warning">Created</span>
                                                      @elseif($applyleaveDatas->status == 1)
                                                          <span class="badge badge-success">Approved</span>
                                                      @elseif($applyleaveDatas->status == 2)
                                                          <span class="badge badge-danger">Rejected</span>
                                                      @endif
                                                  </td>
                                                  <td>
                                                      @if ($applyleaveDatas->leavetype == 11 && $applyleaveDatas->status == 1 && $loop->first)
                                                          <button class="btn btn-danger" data-toggle="modal"
                                                              style="height: 16px; width: auto; border-radius: 7px; display: flex; align-items: center; justify-content: center;font-size: 11px;"
                                                              data-target="#requestModal{{ $applyleaveDatas->id }}">Request</button>
                                                      @endif
                                                  </td>

                                              </tr>
                                              {{-- leaverequest form --}}
                                              @if ($applyleaveDatas->leavetype == 11)
                                                  <div class="modal fade" id="requestModal{{ $applyleaveDatas->id }}"
                                                      tabindex="-1" role="dialog" aria-labelledby="requestModalLabel"
                                                      aria-hidden="true">
                                                      <div class="modal-dialog" role="document">
                                                          <form method="post" action="{{ route('applyleaverequest') }}"
                                                              enctype="multipart/form-data">
                                                              @csrf
                                                              <div class="modal-content">
                                                                  <div class="modal-header">
                                                                      {{-- @php
                                                                    dd($applyleaveDatas);
                                                                @endphp --}}
                                                                      <h5 class="modal-title" id="requestModalLabel">Enter
                                                                          Request Details</h5>
                                                                      <button type="button" class="close"
                                                                          data-dismiss="modal" aria-label="Close">
                                                                          <span aria-hidden="true">&times;</span>
                                                                      </button>
                                                                  </div>
                                                                  <div class="modal-body">
                                                                      @if ($errors->any())
                                                                          <div class="">
                                                                              <ul>
                                                                                  @foreach ($errors->all() as $error)
                                                                                      <li class="text-danger">
                                                                                          {{ $error }}</li>
                                                                                  @endforeach
                                                                              </ul>
                                                                          </div>
                                                                      @endif
                                                                      {{-- <form method="post"
                                                                    action="{{ url('/applyleaverequest') }}"
                                                                    enctype="multipart/form-data"> --}}

                                                                      <input type="hidden" name="applyleaveid"
                                                                          value="{{ $applyleaveDatas->id }}"
                                                                          class="form-control" placeholder="">
                                                                      <input type="hidden" name="createdby"
                                                                          value="{{ $applyleaveDatas->createdby }}"
                                                                          class="form-control" placeholder="">
                                                                      <input type="hidden" name="approver"
                                                                          value="{{ $applyleaveDatas->approver }}"
                                                                          class="form-control" placeholder="">
                                                                      <input type="hidden" name="status"
                                                                          value="{{ $applyleaveDatas->status }}"
                                                                          class="form-control" placeholder="">

                                                                      <!-- Input fields for request details here -->
                                                                      <label for="">Reason:*</label>

                                                                      <input type="text" name="reason"
                                                                          class="form-control" placeholder="Enter Reason"
                                                                          required>
                                                                      <label for="">Select Date:*</label>
                                                                      <input type="date" name="date"
                                                                          class="form-control yearValidate" maxlength="10"
                                                                          required>
                                                                      {{-- validation for year --}}
                                                                      <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
                                                                      <script>
                                                                          $(document).ready(function() {
                                                                              $('.yearValidate').on('change', function() {
                                                                                  var leaveDate = $('.yearValidate');
                                                                                  var leaveDateValue = $('.yearValidate').val();
                                                                                  console.log(leaveDateValue);
                                                                                  var leaveDateGet = new Date(leaveDateValue);
                                                                                  var leaveyear = leaveDateGet.getFullYear();
                                                                                  // console.log(startyear);
                                                                                  var leaveyearLength = leaveyear.toString().length;
                                                                                  if (leaveyearLength > 4) {
                                                                                      alert('Enter four digits for the year');
                                                                                      leaveDate.val('');
                                                                                  }
                                                                              });
                                                                          });
                                                                      </script>
                                                                  </div>
                                                                  <div class="modal-footer">
                                                                      <button type="button" class="btn btn-secondary"
                                                                          data-dismiss="modal">Close</button>
                                                                      <button type="submit"
                                                                          class="btn btn-primary">Submit</button>
                                                                  </div>
                                                              </div>
                                                          </form>
                                                      </div>
                                                  </div>
                                              @endif
                                          @endforeach
                                      </tbody>
                                  </table>







Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\applyleave\adminopen.blade.php

                    <table id="examplee" class="table display table-bordered table-striped table-hover">
                        <thead>
                            <tr>
                                <th style="display: none;">id</th>
                                <th>Employee</th>
                                <th>Staff Code</th>
                                <th>Date of Request</th>
                                <th>Status</th>
                                <th>Leave Type</th>
                                <th>Leave Period</th>
                                <th>Days</th>
                                <th>Approver</th>
                                <th>Reason for Leave</th>
                                <th>Approved</th>
                                <th>Reject</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach ($teamapplyleaveDatas as $applyleaveDatas)
                                <tr>
                                    @php
                                        $permotioncheck = DB::table('teamrolehistory')
                                            ->where('teammember_id', $applyleaveDatas->createdby)
                                            ->first();

                                        $datadate = Carbon\Carbon::createFromFormat(
                                            'Y-m-d H:i:s',
                                            $applyleaveDatas->created_at,
                                        );

                                        $permotiondate = null;
                                        if ($permotioncheck) {
                                            $permotiondate = Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $permotioncheck->created_at,
                                            );
                                        }

                                    @endphp
                                    <td style="display: none;">{{ $applyleaveDatas->id }}</td>
                                    <td> <a href="{{ route('applyleave.show', $applyleaveDatas->id) }}">
                                            {{ $applyleaveDatas->team_member ?? '' }}</a>
                                    </td>
                                    {{-- <td>{{ $applyleaveDatas->staffcode ?? '' }}</td> --}}
                                    @if ($permotioncheck && $datadate->greaterThan($permotiondate))
                                        <td>{{ $permotioncheck->newstaff_code }}</td>
                                    @else
                                        <td>{{ $applyleaveDatas->staffcode }}</td>
                                    @endif
                                    <td>{{ date('d-m-Y', strtotime($applyleaveDatas->created_at)) ?? '' }}</td>
                                    <td class="columnSize">
                                        @if ($applyleaveDatas->status == 0)
                                            <span class="badge badge-pill badge-warning"><span
                                                    style="display: none;">A</span>Created</span>
                                        @elseif($applyleaveDatas->status == 1)
                                            <span class="badge badge-success"><span
                                                    style="display: none;">B</span>Approved</span>
                                        @elseif($applyleaveDatas->status == 2)
                                            <span class="badge badge-danger">Rejected</span>
                                        @endif
                                    </td>

                                    <td>

                                        {{ $applyleaveDatas->name ?? '' }}<br>
                                        @if ($applyleaveDatas->type == '0')
                                            <b>Type :</b> <span>Birthday</span><br>
                                            <span><b>Birthday Date :
                                                </b>{{ date(
                                                    'F d,Y',
                                                    strtotime(
                                                        App\Models\Teammember::select('dateofbirth')->where('id', $applyleaveDatas->createdby)->first()->dateofbirth,
                                                    ),
                                                ) ?? '' }}</span>
                                        @elseif($applyleaveDatas->type == '1')
                                            <span>Religious Festival</span>
                                        @endif
                                    </td>
                                    <td>{{ date('d-m-Y', strtotime($applyleaveDatas->from)) ?? '' }} -
                                        {{ date('d-m-Y', strtotime($applyleaveDatas->to)) ?? '' }}</td>
                                    @php
                                        $to = Carbon\Carbon::createFromFormat('Y-m-d', $applyleaveDatas->to ?? '');
                                        $from = Carbon\Carbon::createFromFormat('Y-m-d', $applyleaveDatas->from);
                                        $diff_in_days = $to->diffInDays($from) + 1;
                                        $holidaycount = DB::table('holidays')
                                            ->where('startdate', '>=', $applyleaveDatas->from)
                                            ->where('enddate', '<=', $applyleaveDatas->to)
                                            ->count();
                                    @endphp
                                    <td>{{ $diff_in_days - $holidaycount ?? '' }}</td>
                                    <td>{{ App\Models\Teammember::select('team_member')->where('id', $applyleaveDatas->approver)->first()->team_member ?? '' }}
                                        ({{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $applyleaveDatas->approver)->first()->staffcode ?? '' }})
                                    </td>
                                    <td>
                                        <div style="font-size: 15px; width: 7rem;text-wrap: wrap;">
                                            {{ $applyleaveDatas->reasonleave ?? '' }}
                                        </div>
                                    </td>
                                    <td>
                                        @if ($applyleaveDatas->status == 0)
                                            <form method="post"
                                                action="{{ route('applyleave.update', $applyleaveDatas->id) }}"
                                                enctype="multipart/form-data" style="text-align: center;">
                                                @method('PATCH')
                                                @csrf
                                                <input type="text" hidden id="example-date-input" name="status"
                                                    value="1" class="form-control" placeholder="Enter Location">
                                                <button type="submit" class="btn btn-success"
                                                    style="border-radius: 7px; font-size: 10px; padding: 5px;">
                                                    Approve</button>
                                            </form>
                                        @endif
                                    </td>
                                    <td style="text-align: center;">
                                        @if ($applyleaveDatas->status == 0)
                                            <button data-toggle="modal" data-target="#exampleModal12{{ $loop->index }}"
                                                class="btn btn-danger"
                                                style="border-radius: 7px; font-size: 10px; padding: 5px; margin-bottom: 16px;">
                                                Reject</button>
                                        @endif
                                    </td>

                                    <!-- model box / pop up box  -->
                                    <div class="modal fade" id="exampleModal12{{ $loop->index }}" tabindex="-1"
                                        role="dialog" aria-labelledby="exampleModalLabel4" aria-hidden="true">
                                        <div class="modal-dialog" role="document">
                                            <div class="modal-content">
                                                <div class="modal-header" style="background:#37A000">
                                                    <h5 style="color: white" class="modal-title font-weight-600"
                                                        id="exampleModalLabel1">Reason For
                                                        Rejection</h5>
                                                    <button type="button" class="close" data-dismiss="modal"
                                                        aria-label="Close">
                                                        <span aria-hidden="true">&times;</span>
                                                    </button>
                                                </div>
                                                <form method="post"
                                                    action="{{ url('applyleave/update', $applyleaveDatas->id) }}"
                                                    enctype="multipart/form-data">
                                                    @csrf
                                                    <div class="modal-body">
                                                        <div class="row row-sm">
                                                            <div class="col-12">
                                                                <div class="form-group">
                                                                    <textarea rows="6" name="remark" class="form-control" placeholder=""></textarea>
                                                                    <input hidden type="text" id="example-date-input"
                                                                        name="status" value="2" class="form-control"
                                                                        placeholder="Enter Reason">
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <button type="button" class="btn btn-danger"
                                                            data-dismiss="modal">Close</button>
                                                        <button type="submit" style="float: right"
                                                            class="btn btn-success">Save </button>
                                                    </div>
                                                </form>
                                            </div>
                                        </div>
                                    </div>
                                </tr>
                            @endforeach


                        </tbody>
                    </table>
					
					




Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php

  public function open_leave($id)
  {

    $permotioncheck = DB::table('teamrolehistory')
      ->where('teammember_id', auth()->user()->teammember_id)->first();

    if (auth()->user()->role_id == 11) {

      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.status', '0')
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->get();
      // dd($applyleaveDatas);
      return view('backEnd.applyleave.adminopen', compact(
        'teamapplyleaveDatas'
      ));
    } elseif ($permotioncheck && auth()->user()->role_id == 13) {
      // $myapplyleaveDatas  = DB::table('applyleaves')
      //   ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
      //   ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
      //   ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
      //   ->where('applyleaves.createdby', auth()->user()->teammember_id)
      //   ->where('applyleaves.status', 0)
      //   ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')
      //   ->latest()->get();

      $commonQuery  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.createdby', auth()->user()->teammember_id)
        ->where('applyleaves.status', 0)
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name');


      $databeforepermotion = (clone $commonQuery)
        ->whereDate('applyleaves.created_at', '<', $permotioncheck->created_at)
        ->addSelect('teammembers.staffcode')
        ->get();

      $dataafterpermotion = (clone $commonQuery)
        ->leftJoin('teamrolehistory as createdby_history', 'createdby_history.teammember_id', '=', 'teammembers.id')
        ->whereDate('applyleaves.created_at', '>', $permotioncheck->created_at)
        ->addSelect('createdby_history.newstaff_code')
        ->get();

      // dd($timesheetrequestspermotion);

      $myapplyleaveDatas = $databeforepermotion->merge($dataafterpermotion);




      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->where('applyleaves.status', 0)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->get();
      return view('backEnd.applyleave.openindex', compact(
        'myapplyleaveDatas',
        'teamapplyleaveDatas'
      ));
    } else {
      $myapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.createdby', auth()->user()->teammember_id)
        ->where('applyleaves.status', 0)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->latest()->get();
      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->where('applyleaves.status', 0)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->get();
      return view('backEnd.applyleave.openindex', compact(
        'myapplyleaveDatas',
        'teamapplyleaveDatas'
      ));
    }
  }



Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\viewassignment.blade.php

                                                @foreach ($partner as $partnerData)
                                                    <tr>
                                                        @php
                                                            $permotioncheck = DB::table('teamrolehistory')
                                                                ->where('teammember_id', $partnerData->id)
                                                                ->first();
                                                        @endphp
                                                        <td>{{ $partnerData->title }} {{ $partnerData->team_member }}
                                                        </td>
                                                        {{-- <td>{{ $partnerData->staffcode }}
                                                        </td> --}}
                                                        <td>
                                                            {{ $permotioncheck->newstaff_code ?? ($partnerData->staffcode ?? '') }}
                                                        </td>
                                                        <td>
                                                            @if ($partnerData->role_id == 13)
                                                                <span>Partner</span>
                                                            @else
                                                                <span>NA</span>
                                                            @endif
                                                        </td>
                                                        <td><a
                                                                href="tel:={{ $partnerData->mobile_no }}">{{ $partnerData->mobile_no }}</a>
                                                        </td>
                                                        <td>{{ $partnerData->leadpartnerhour ?? ($partnerData->otherpartnerhour ?? 0) }}
                                                        </td>

                                                    </tr>
                                                @endforeach





Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\StepController.php

    public function viewAssignment($id)
    {
        // $teammemberall = Teammember::where('role_id', '=', 15)->orwhere('role_id', '=', 14)->where('status', '=', 1)->with('title', 'role')->get();
        $teammemberall = Teammember::whereIn('role_id', [15, 14])
            ->where('status', 1)
            ->with('title', 'role')
            ->get();

        $assignmentid = Assignmentmapping::where('assignmentgenerate_id', $id)->select('assignment_id')->pluck('assignment_id')->first();
        // dd($assignmentgenerateid); 
        $assignmentcheck =
            DB::table('financialstatementclassifications')
            ->where('assignmentgenerate_id', $id)
            ->get();

        if ($assignmentcheck->isEmpty()) {
            $assignmentcheckDatas =
                DB::table('financialstatementclassifications')
                ->where('assignment_id', $assignmentid)
                ->where('assignmentgenerate_id', null)
                ->get();
            //dd($assignmentcheckDatas);
        } else {
            $assignmentcheckDatas =
                DB::table('financialstatementclassifications')
                ->where('assignment_id', $assignmentid)
                ->where('assignmentgenerate_id', null)
                ->orwhere('assignmentgenerate_id',  $id)
                ->get();
        }

        //  dd($assignmentcheckDatas);

        $assignmentbudgetingDatas = DB::table('assignmentbudgetings')
            ->join('clients', 'clients.id', 'assignmentbudgetings.client_id')
            ->join('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
            ->join('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
            ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
            ->where('assignmentbudgetings.assignmentgenerate_id', $id)
            ->select(
                'assignmentbudgetings.*',
                'assignmentmappings.*',
                'clients.client_name',
                'clients.client_code',
                'assignmentteammappings.type',
                'assignments.assignment_name'
            )->first();
        // dd($assignmentbudgetingDatas);
        $teammemberDatas = DB::table('assignmentmappings')
            ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
            ->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')
            ->leftjoin('titles', 'titles.id', 'teammembers.title_id')
            ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
            ->where('assignmentmappings.assignmentgenerate_id', $id)
            ->select('teammembers.*', 'roles.rolename', 'assignmentteammappings.type', 'titles.title', 'assignmentteammappings.id As assignmentteammappingsId', 'assignmentteammappings.status as assignmentteammappingsStatus', 'assignmentmappings.assignmentgenerate_id as assignmentgenerateid', 'assignmentteammappings.teamhour', 'assignmentmappings.leadpartner', 'assignmentteammappings.viewerteam')
            ->orderBy('assignmentteammappingsId', 'desc')
            ->get();
        // dd($teammemberDatas, 1);
        $contactDatas = DB::table('assignmentbudgetings')
            ->join('clients', 'clients.id', 'assignmentbudgetings.client_id')
            ->join('clientcontacts', 'clientcontacts.client_id', 'clients.id')
            ->where('assignmentbudgetings.assignmentgenerate_id', $id)
            ->select(
                'clientcontacts.*'
            )->get();
        $udinDatas = DB::table('assignmentbudgetingudins')
            ->join('teammembers', 'teammembers.id', 'assignmentbudgetingudins.created_by')
            ->join('roles', 'roles.id', 'teammembers.role_id')
            ->where('assignmentbudgetingudins.assignment_generate_id', $id)
            ->select('teammembers.*', 'assignmentbudgetingudins.udin', 'assignmentbudgetingudins.udindate', 'assignmentbudgetingudins.id as assignmentbudgetingudinsid', 'roles.rolename', 'assignmentbudgetingudins.partner', 'assignmentbudgetingudins.created_at as created')->get();
        // dd($contactDatas);

        $leadpartner = DB::table('assignmentmappings')
            ->join('teammembers as team', 'team.id', 'assignmentmappings.leadpartner')
            ->leftJoin('titles', 'titles.id', '=', 'team.title_id')
            ->where('assignmentmappings.assignmentgenerate_id', $id)
            ->select('team.id', 'team.team_member', 'team.staffcode',  'team.mobile_no', 'team.role_id', 'assignmentmappings.leadpartnerhour', 'titles.title')
            ->get();


        $otherpartner = DB::table('assignmentmappings')
            ->join('teammembers as team', 'team.id', 'assignmentmappings.otherpartner')
            ->leftJoin('titles', 'titles.id', '=', 'team.title_id')
            ->where('assignmentmappings.assignmentgenerate_id', $id)
            ->select('team.id', 'team.team_member', 'team.staffcode', 'team.mobile_no', 'team.role_id', 'assignmentmappings.otherpartnerhour', 'titles.title',)
            ->get();

        $partner = $leadpartner->merge($otherpartner);

        return view('backEnd.viewassignment', compact('partner', 'udinDatas', 'contactDatas', 'teammemberDatas', 'assignmentcheckDatas', 'assignmentbudgetingDatas', 'teammemberall'));
    }



Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\report\assignmentreport.blade.php

                <div class="tab-content" id="pills-tabContent">
                    <div class="tab-pane fade show active" id="pills-home" role="tabpanel" aria-labelledby="pills-home-tab">
                        <div class="table-responsive example">

                            <div class="table-responsive">
                                <table id="examplee" class="display nowrap">
                                    <thead>
                                        <tr>
                                            <th style="display: none;">id</th>
                                            @if (auth()->user()->role_id == 13 || Auth::user()->role_id == 11 || Auth::user()->role_id == 14)
                                                <th>Edit</th>
                                            @endif
                                            <th>Assignment Id</th>
                                            <th>Assignment</th>
                                            <th>Client</th>
                                            <th>Client Code</th>
                                            <th>Period Start</th>
                                            <th>Period End</th>
                                            <th>Deadline</th>
                                            <th>Assigned Status</th>
                                            <th>Assigned Partner11</th>
                                            <th>Other Partner</th>
                                            <th>Team Leader </th>
                                            <th>Teammember</th>
                                            <th>Total Hour</th>
                                        </tr>
                                    </thead>

                                    <tbody>
                                        @foreach ($assignmentmappingData as $assignmentmappingDatas)
                                            <tr>
                                                @php
                                                    if (auth()->user()->role_id == 11) {
                                                        $teamhourteams = DB::table('assignmentteammappings')
                                                            ->where('assignmentmapping_id', $assignmentmappingDatas->id)
                                                            ->select(DB::raw('SUM(teamhour) as teamhourteam'))
                                                            ->first();

                                                        $partnerhour =
                                                            $assignmentmappingDatas->leadpartnerhour +
                                                            $assignmentmappingDatas->otherpartnerhour;

                                                        $totalhour = $partnerhour + $teamhourteams->teamhourteam;
                                                        // dd($totalhour);
                                                    }
                                                @endphp
                                                <td style="display: none;">{{ $assignmentmappingDatas->id }}</td>
                                                @if (auth()->user()->role_id == 13 || Auth::user()->role_id == 11 || Auth::user()->role_id == 14)
                                                    <td>
                                                        <a href="{{ url('/assignmentlist/' . $assignmentmappingDatas->assignmentgenerate_id) }}"
                                                            class="btn btn-info-soft btn-sm"><i class="far fa-edit"></i></a>
                                                    </td>
                                                @endif
                                                <td> <a
                                                        href="{{ url('/viewassignment/' . $assignmentmappingDatas->assignmentgenerate_id) }}">{{ $assignmentmappingDatas->assignmentgenerate_id }}</a>
                                                </td>
                                                <td>
                                                    {{ $assignmentmappingDatas->assignment_name }} @if ($assignmentmappingDatas->assignmentname != null)
                                                        ({{ $assignmentmappingDatas->assignmentname }})
                                                    @endif
                                                </td>
                                                <td> {{ $assignmentmappingDatas->client_name }}
                                                </td>
                                                <td> {{ $assignmentmappingDatas->client_code }}
                                                </td>
                                                <td>
                                                    @if ($assignmentmappingDatas->periodstart != null)
                                                        {{ date('d-m-Y', strtotime($assignmentmappingDatas->periodstart)) }}
                                                    @endif
                                                </td>

                                                <td>
                                                    @if ($assignmentmappingDatas->periodend != null)
                                                        {{ date('d-m-Y', strtotime($assignmentmappingDatas->periodend)) }}
                                                    @endif
                                                </td>
                                                <td>
                                                    @if ($assignmentmappingDatas->duedate != null)
                                                        {{ date('d-m-Y', strtotime($assignmentmappingDatas->duedate)) }}
                                                    @endif
                                                </td>
                                                <td>
                                                    @if ($assignmentmappingDatas->status == 1)
                                                        <span class="badge badge-primary">OPEN</span>
                                                    @elseif($assignmentmappingDatas->status == 0)
                                                        <span class="badge badge-danger">CLOSED</span>
                                                    @endif

                                                </td>

                                                {{-- <td>
                                                    {{ App\Models\Teammember::select('team_member')->where('id', $assignmentmappingDatas->leadpartner)->first()->team_member ?? '' }}
                                                    (
                                                    {{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $assignmentmappingDatas->leadpartner)->first()->staffcode ?? '' }})
                                                </td>
                                                <td>
                                                    {{ App\Models\Teammember::select('team_member')->where('id', $assignmentmappingDatas->otherpartner)->first()->team_member ?? '' }}
                                                    ({{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $assignmentmappingDatas->otherpartner)->first()->staffcode ?? '' }})
                                                </td> --}}

                                                @php
                                                    // $leadpartner = App\Models\Teammember::select(
                                                    //     'team_member',
                                                    //     'staffcode',
                                                    // )
                                                    //     ->where('id', $assignmentmappingDatas->leadpartner)
                                                    //     ->first();

                                                    // $otherPartner = App\Models\Teammember::select(
                                                    //     'team_member',
                                                    //     'staffcode',
                                                    // )
                                                    //     ->where('id', $assignmentmappingDatas->otherpartner)
                                                    //     ->first();

                                                    $leadpartner = DB::table('teammembers')
                                                        ->leftJoin(
                                                            'teamrolehistory',
                                                            'teamrolehistory.teammember_id',
                                                            '=',
                                                            'teammembers.id',
                                                        )
                                                        ->where('teammembers.id', $assignmentmappingDatas->leadpartner)
                                                        ->select(
                                                            'teammembers.team_member',
                                                            'teammembers.staffcode',
                                                            'teamrolehistory.newstaff_code',
                                                        )
                                                        ->first();

                                                    $otherPartner = DB::table('teammembers')
                                                        ->leftJoin(
                                                            'teamrolehistory',
                                                            'teamrolehistory.teammember_id',
                                                            '=',
                                                            'teammembers.id',
                                                        )
                                                        ->where('teammembers.id', $assignmentmappingDatas->otherpartner)
                                                        ->select(
                                                            'teammembers.team_member',
                                                            'teammembers.staffcode',
                                                            'teamrolehistory.newstaff_code',
                                                        )
                                                        ->first();

                                                @endphp
                                                <td>
                                                    {{ $leadpartner->team_member ?? '' }}
                                                    @if ($leadpartner && $leadpartner->team_member)
                                                        (
                                                        {{ $leadpartner->newstaff_code ?? ($leadpartner->staffcode ?? '') }})
                                                    @endif
                                                </td>

                                                <td>
                                                    {{ $otherPartner->team_member ?? '' }}
                                                    @if ($otherPartner && $otherPartner->team_member)
                                                        (
                                                        {{ $otherPartner->newstaff_code ?? ($otherPartner->staffcode ?? '') }})
                                                    @endif
                                                </td>

                                                <td>
                                                    @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $assignmentmappingDatas->id)->where('assignmentteammappings.type', 0)->get() as $sub)
                                                        {{ $sub->team_member }} ,
                                                    @endforeach
                                                </td>
                                                <td>
                                                    @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $assignmentmappingDatas->id)->where('assignmentteammappings.type', 2)->get() as $sub)
                                                        {{ $sub->team_member }} ,
                                                    @endforeach
                                                </td>

                                                @if (auth()->user()->role_id == 11)
                                                    <td> {{ $totalhour ?? '0' }}</td>
                                                @elseif (auth()->user()->role_id == 13)
                                                    <td>{{ $assignmentmappingDatas->leadpartnerhour ?? ($assignmentmappingDatas->otherpartnerhour ?? 0) }}
                                                    </td>
                                                @else
                                                    <td>{{ $assignmentmappingDatas->teamhour ?? '0' }} </td>
                                                @endif
                                            </tr>
                                        @endforeach
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>

                    <br>
                    <div class="tab-pane fade" id="pills-user" role="tabpanel" aria-labelledby="pills-user-tab">

                        <div class="table-responsive">
                            <table id="exampleee" class="display nowrap">
                                <thead>
                                    <tr>
                                        <th style="display: none;">id</th>
                                        <th>Assignment Id</th>
                                        <th>Assignment</th>
                                        <th>Client</th>
                                        <th>Client Code</th>

                                        <th>Period Start</th>
                                        <th>Period End</th>
                                        <th>Deadline</th>
                                        <th>Assigned Status</th>
                                        <th>Assigned Partner22</th>
                                        <th>Other Partner</th>
                                        <th>Team Leader </th>
                                        <th>Teammember</th>
                                        <th>Total Hour</th>
                                        @if (auth()->user()->role_id != 15 && Auth::user()->role_id != 11)
                                            <th>Edit</th>
                                        @endif

                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach ($assignmentmappingcloseData as $assignmentmappingcloseDatas)
                                        <tr>
                                            @php
                                                if (auth()->user()->role_id == 11) {
                                                    $teamhourteamsclosed = DB::table('assignmentteammappings')
                                                        ->where(
                                                            'assignmentmapping_id',
                                                            $assignmentmappingcloseDatas->id,
                                                        )
                                                        ->select(DB::raw('SUM(teamhour) as teamhourteam'))
                                                        ->first();

                                                    $partnerhourclosed =
                                                        $assignmentmappingcloseDatas->leadpartnerhour +
                                                        $assignmentmappingcloseDatas->otherpartnerhour;

                                                    $totalhourclosed =
                                                        $partnerhourclosed + $teamhourteamsclosed->teamhourteam;
                                                }
                                            @endphp



                                            <td style="display: none;">{{ $assignmentmappingcloseDatas->id }}</td>
                                            <td> <a
                                                    href="{{ url('/viewassignment/' . $assignmentmappingcloseDatas->assignmentgenerate_id) }}">{{ $assignmentmappingcloseDatas->assignmentgenerate_id }}</a>
                                            </td>
                                            <td>
                                                {{ $assignmentmappingcloseDatas->assignment_name }} @if ($assignmentmappingcloseDatas->assignmentname != null)
                                                    ({{ $assignmentmappingcloseDatas->assignmentname }})
                                                @endif
                                            </td>
                                            <td> {{ $assignmentmappingcloseDatas->client_name }}</td>
                                            <td> {{ $assignmentmappingcloseDatas->client_code }}</td>

                                            <td>
                                                @if ($assignmentmappingcloseDatas->periodstart != null)
                                                    {{ date('d-m-Y', strtotime($assignmentmappingcloseDatas->periodstart)) }}
                                                @endif
                                            </td>

                                            <td>
                                                @if ($assignmentmappingcloseDatas->periodend != null)
                                                    {{ date('d-m-Y', strtotime($assignmentmappingcloseDatas->periodend)) }}
                                                @endif
                                            </td>
                                            <td>
                                                @if ($assignmentmappingcloseDatas->duedate != null)
                                                    {{ date('d-m-Y', strtotime($assignmentmappingcloseDatas->duedate)) }}
                                                @endif
                                            </td>
                                            <td>
                                                @if ($assignmentmappingcloseDatas->status == 1)
                                                    <span class="badge badge-primary">OPEN</span>
                                                @elseif($assignmentmappingcloseDatas->status == 0)
                                                    <span class="badge badge-danger">CLOSED</span>
                                                @endif

                                            </td>
                                            {{-- <td>{{ App\Models\Teammember::select('team_member')->where('id', $assignmentmappingcloseDatas->leadpartner)->first()->team_member ?? '' }}
                                            </td>
                                            <td>{{ App\Models\Teammember::select('team_member')->where('id', $assignmentmappingcloseDatas->otherpartner)->first()->team_member ?? '' }}
                                            </td> --}}
                                            @php
                                                $leadpartnercloseed = App\Models\Teammember::select(
                                                    'team_member',
                                                    'staffcode',
                                                )
                                                    ->where('id', $assignmentmappingcloseDatas->leadpartner)
                                                    ->first();

                                                $otherPartnerclosed = App\Models\Teammember::select(
                                                    'team_member',
                                                    'staffcode',
                                                )
                                                    ->where('id', $assignmentmappingcloseDatas->otherpartner)
                                                    ->first();
                                            @endphp
                                            <td>
                                                {{ $leadpartnercloseed->team_member ?? '' }}
                                                @if ($leadpartnercloseed && $leadpartnercloseed->team_member)
                                                    ({{ $leadpartnercloseed->staffcode ?? '' }})
                                                @endif
                                            </td>
                                            <td>
                                                {{ $otherPartnerclosed->team_member ?? '' }}
                                                @if ($otherPartnerclosed && $otherPartnerclosed->team_member)
                                                    ({{ $otherPartnerclosed->staffcode ?? '' }})
                                                @endif
                                            </td>

                                            <td>
                                                @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $assignmentmappingcloseDatas->id)->where('assignmentteammappings.type', 0)->get() as $sub)
                                                    {{ $sub->team_member }} ,
                                                @endforeach
                                            </td>
                                            <td>
                                                @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $assignmentmappingcloseDatas->id)->where('assignmentteammappings.type', 2)->get() as $sub)
                                                    {{ $sub->team_member }} ,
                                                @endforeach
                                            </td>

                                            @if (auth()->user()->role_id == 11)
                                                <td> {{ $totalhourclosed ?? '0' }}</td>
                                            @elseif (auth()->user()->role_id == 13)
                                                <td>{{ $assignmentmappingcloseDatas->leadpartnerhour ?? ($assignmentmappingcloseDatas->otherpartnerhour ?? 0) }}
                                                </td>
                                            @else
                                                <td>{{ $assignmentmappingcloseDatas->teamhour ?? '0' }} </td>
                                            @endif

                                            @if (auth()->user()->role_id != 15 && Auth::user()->role_id != 11)
                                                <td>
                                                    <a href="{{ url('/assignmentlist/' . $assignmentmappingcloseDatas->assignmentgenerate_id) }}"
                                                        class="btn btn-info-soft btn-sm"><i class="far fa-edit"></i></a>
                                                </td>
                                            @endif
                                        </tr>
                                    @endforeach
                                </tbody>
                            </table>
                        </div>

                    </div>
                    <div>
                    </div>
                </div>






Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ReportController.php

  public function assignment_report()
  {


    $permotioncheck = DB::table('teamrolehistory')
      ->where('teammember_id', auth()->user()->teammember_id)->first();

    if (auth()->user()->role_id == 11) {
      $assignmentmappingData =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentbudgetings.status', '1')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code'
        )
        ->get();
      $assignmentmappingcloseData =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentbudgetings.status', '0')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code'
        )
        ->get();
      return view('backEnd.report.assignmentreport', compact('assignmentmappingData', 'assignmentmappingcloseData'));
    } elseif ($permotioncheck && auth()->user()->role_id == 13) {
      $assignmentmappingDatabefore =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        ->where('assignmentbudgetings.status', '1')
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentteammappings.teamhour',
        )->get();



      $assignmentmappingOpenleadpartner =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '1')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentmappings.leadpartner',
        )
        ->get();

      $assignmentmappingOpenotherpartner =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentmappings.otherpartner', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '1')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentmappings.otherpartner',

        )
        ->get();
      $assignmentmappingData = $assignmentmappingOpenotherpartner->merge($assignmentmappingOpenleadpartner)->merge($assignmentmappingDatabefore);

      $assignmentmappingcloseDatabefore =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '0')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentteammappings.teamhour',
        )->get();

      // dd($assignmentmappingData);
      $assignmentmappingClosedleadpartner =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '0')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentmappings.leadpartner',
        )->get();

      $assignmentmappingClosedotherpartner =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentmappings.otherpartner', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '0')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentmappings.otherpartner',
        )->get();

      $assignmentmappingcloseData =       $assignmentmappingClosedotherpartner->merge($assignmentmappingClosedleadpartner)->merge($assignmentmappingcloseDatabefore);

      // dd($assignmentmappingData);
      return view('backEnd.report.assignmentreport', compact('assignmentmappingData', 'assignmentmappingcloseData'));
    } elseif (auth()->user()->role_id == 13) {

      $assignmentmappingOpenleadpartner =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '1')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentmappings.leadpartner',
        )
        ->get();

      $assignmentmappingOpenotherpartner =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentmappings.otherpartner', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '1')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentmappings.otherpartner',

        )
        ->get();

      $assignmentmappingData = $assignmentmappingOpenotherpartner->merge($assignmentmappingOpenleadpartner);

      // dd($assignmentmappingData);
      $assignmentmappingClosedleadpartner =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '0')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentmappings.leadpartner',
        )->get();

      $assignmentmappingClosedotherpartner =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->where('assignmentmappings.otherpartner', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '0')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentmappings.otherpartner',
        )->get();

      $assignmentmappingcloseData = $assignmentmappingClosedotherpartner->merge($assignmentmappingClosedleadpartner);
      // dd($assignmentmappingcloseData);
      return view('backEnd.report.assignmentreport', compact('assignmentmappingData', 'assignmentmappingcloseData'));
    } else {
      $assignmentmappingData =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        ->where('assignmentbudgetings.status', '1')
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentteammappings.teamhour',
        )->get();



      $assignmentmappingcloseData =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
        ->where('assignmentbudgetings.status', '0')
        //------------------- Shahid's code start---------------------
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->select(
          'assignmentmappings.*',
          'assignmentbudgetings.duedate',
          'assignmentbudgetings.assignmentname',
          'assignmentbudgetings.status',
          'assignments.assignment_name',
          'clients.client_name',
          'clients.client_code',
          'assignmentteammappings.teamhour',
        )->get();
      // dd($assignmentmappingcloseData);

      // dd($assignmentmappingData);
      return view('backEnd.report.assignmentreport', compact('assignmentmappingData', 'assignmentmappingcloseData'));
    }
  }
  
  

Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\layouts\includes\leftsidebar.blade.php

          <div class="profile-text">
              <h6 class="m-0">{{ $getuser->team_member ?? '' }} <br> (
                  {{ $getuser->newstaff_code ?? ($getuser->staffcode ?? '') }} )</h6>
              <span>{{ $getuser->rolename ?? '' }}</span>
          </div>
		  

Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\layouts\includes\leftsidebar.blade.php


@php
      $getuserbefore = DB::table('teammembers')
          ->join('roles', 'roles.id', 'teammembers.role_id')
          ->where('teammembers.id', auth()->user()->teammember_id)
          ->select('roles.rolename', 'teammembers.team_member', 'teammembers.staffcode', 'teammembers.profilepic')
          ->first();

      $getuserafter = DB::table('teammembers')
          ->join('roles', 'roles.id', 'teammembers.role_id')
          ->join('teamrolehistory', 'teamrolehistory.teammember_id', 'teammembers.id')
          ->where('teammembers.id', auth()->user()->teammember_id)
          ->select(
              'roles.rolename',
              'teammembers.team_member',
              'teammembers.profilepic',
              'teamrolehistory.newstaff_code',
          )
          ->first();

      if ($getuserafter) {
          $getuser = $getuserafter;
      } else {
          $getuser = $getuserbefore;
      }

      //   $permotioncheck = DB::table('teamrolehistory')
      //       ->where('teammember_id', auth()->user()->teammember_id)
      //       ->select('newstaff_code')
      //       ->first();

      $getrole = App\Models\Permission::select('page_id')
          ->where('role_id', Auth::user()->role_id ?? '')
          ->get();
      // permission for patner,manager and staff timesheet report
      if (Auth::user()->role_id == 13 || Auth::user()->role_id == 14 || Auth::user()->role_id == 15) {
          $permissiontimesheet = DB::table('timesheetreport')
              ->where('timesheetreport.teamid', auth()->user()->teammember_id)
              ->first();
      }
      // permission for Admin timesheet report
      if (Auth::user()->role_id == 11) {
          $permissiontimesheet = DB::table('timesheetreport')->first();
      }

      //dd($getrole);

  @endphp




Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\BackEndController.php

  public function index()
  {

    $permotioncheck = DB::table('teamrolehistory')
      ->where('teammember_id', auth()->user()->teammember_id)->first();

    $mentor_id = DB::table('teammembers')
      ->join('users', 'users.teammember_id', 'teammembers.id')
      ->where('users.teammember_id', auth()->user()->teammember_id)
      ->pluck('mentor_id')
      ->first();

    $mentee_id = DB::table('teammembers')
      ->join('users', 'users.teammember_id', 'teammembers.id')
      ->where('teammembers.mentor_id', auth()->user()->teammember_id)
      //->pluck('teammembers.id')
      ->get();

    //dd($mentee_id);
    $mentor = null;
    $mentees = null;

    if ($mentor_id != null) {
      $mentor = DB::table('teammembers')->where('id', $mentor_id)->first();
    }

    if (count($mentee_id) != 0) {
      $mentees = $mentee_id;
    }

    // Set $mentees to null (if needed)
    if ($mentees == null) {
      $mentees = null;
    }

    $todayBirthdays = Teammember::whereNotNull('dateofbirth')
      ->where('status', '1')
      ->get()
      ->filter(function ($birthday) {
        $dateofbirth = Carbon::parse($birthday->dateofbirth);
        $currentDate = Carbon::now();

        // Compare the month and day without considering the current year
        return $dateofbirth->month == $currentDate->month && $dateofbirth->day == $currentDate->day;
      })
      ->sortBy('dateofbirth');

    $upcomingBirthdays = Teammember::where('status', '1')
      ->whereRaw('DATE_FORMAT(dateofbirth, "%m-%d") > DATE_FORMAT(NOW(), "%m-%d")')
      ->orderByRaw('DATE_FORMAT(dateofbirth, "%m-%d")')
      ->limit(7)
      ->get();



    $workAnniversaries = Teammember::whereNotNull('joining_date')
      ->where('status', '1')
      ->get()
      ->filter(function ($teammember) {
        $joiningDate = Carbon::parse($teammember->joining_date);
        $currentDate = Carbon::now();

        // Compare the month and day without considering the current year
        $isAnniversaryToday = $joiningDate->month == $currentDate->month && $joiningDate->day == $currentDate->day;

        // Exclude work anniversaries with a duration of 0 years
        $isNonZeroAnniversary = $joiningDate->diffInYears($currentDate) > 0;

        return $isAnniversaryToday && $isNonZeroAnniversary;
      })
      ->sortBy('joining_date')
      ->take(2);

    $upcomingHolidays = Holiday::where('startdate', '>', now()->format('Y-m-d'))
      ->where('status', 1)
      ->orderBy('startdate', 'asc')
      ->take(2)
      ->get();

    if (auth()->user()->role_id == 11 || auth()->user()->role_id == 12) {
      $authidd = Assignmentteammapping::where('teammember_id', auth()->user()->teammember_id)->select('assignmentmapping_id')->pluck('assignmentmapping_id')->first();
      $authid = auth()->user()->teammember_id;
      $notificationDatas =  DB::table('notifications')
        ->join('teammembers', 'teammembers.id', 'notifications.created_by')
        ->select(
          'notifications.*',
          'teammembers.profilepic',
          'teammembers.team_member'
        )->orderBy('created_at', 'desc')->paginate('2');
      // dd($notificationDatas);
      $client = Client::count();
      $teammember = Teammember::where('status', '1')->count();
      $userid = auth()->user()->role_id;
      $pageid = Permission::where('role_id', $userid)->select('page_id')->pluck('page_id')->first();
      $assetticket = DB::table('assettickets')
        ->leftjoin('teammembers', 'teammembers.id', 'assettickets.created_by')
        ->select('assettickets.*', 'teammembers.team_member')->orderBy('created_at', 'desc')->paginate(2);
      $assignment =  DB::table('assignmentbudgetings')
        ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->select(
          'assignmentbudgetings.*',
          'clients.client_name',
          'assignments.assignment_name'
        )->orderBy('assignmentbudgetings.created_at', 'desc')->take(5)->get();

      $openleave = DB::table('applyleaves')
        ->where('status', 0)
        ->count();

      $opentimesheetrequests = DB::table('timesheetrequests')
        ->where('status', 0)
        ->count();

      $assignmentcount = Assignmentmapping::count();
      $notification = Notification::count();

      // Get open assinment count
      $openassignmentcount =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->where('assignmentbudgetings.status', '1')
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->count();
      // Get closed assinment count
      $closedassignmentcount =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->where('assignmentbudgetings.status', '0')
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->count();

      return view('backEnd.index', compact('openassignmentcount', 'closedassignmentcount', 'opentimesheetrequests', 'openleave', 'mentor', 'mentees', 'notification', 'assignmentcount', 'assignment', 'pageid', 'assetticket', 'client', 'teammember', 'notificationDatas', 'upcomingBirthdays', 'workAnniversaries', 'upcomingHolidays', 'todayBirthdays'));
    } elseif ($permotioncheck && auth()->user()->role_id == 13) {

      //Aproved leave jan to dec 
      $currentYear = date('Y');
      $approvedleavesvalue = DB::table('applyleaves')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 1)
        ->whereYear('from',  $currentYear)
        ->get();

      $leaveDurations = [];
      foreach ($approvedleavesvalue as $approvedleavesvalues) {
        $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

        $diff_in_days = $to->diffInDays($from) + 1;

        $holidaycount = DB::table('holidays')
          ->where('startdate', '>=', $approvedleavesvalues->from)
          ->where('enddate', '<=', $approvedleavesvalues->to)
          ->count();

        $leaveDurationcount = $diff_in_days - $holidaycount;
        $leaveDurations[] = $leaveDurationcount;
      }

      $approvedleavesvaluecount = array_sum($leaveDurations);
      // dd($approvedleavesvaluecount);
      //Aproved leave jan to dec end hare 
      // dd(auth()->user()->teammember_id);
      $authidd = Assignmentteammapping::where('teammember_id', auth()->user()->teammember_id)->select('assignmentmapping_id')->pluck('assignmentmapping_id')->first();
      $authid = auth()->user()->teammember_id;

      $notificationDatas =   DB::table('notifications')
        ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
        ->where('notifications.targettype', '1')
        ->select('notifications.*', 'teammembers.team_member', 'teammembers.profilepic')->orWhere('targettype', '2')->orderBy('notifications.id', 'desc')->paginate(2);

      //  dd($notificationDatas);
      $notification = Notification::count();
      $client = Client::count();
      $teammember = Teammember::where('status', '1')->count();
      $userid = auth()->user()->role_id;
      $pageid = Permission::where('role_id', $userid)->select('page_id')->pluck('page_id')->first();
      $assetticket = DB::table('assettickets')
        ->leftjoin('users', 'users.id', 'assettickets.created_by')
        ->leftjoin('teammembers', 'teammembers.id', 'users.teammember_id')->where('assettickets.created_by', auth()->user()->teammember_id)
        ->select('assettickets.*', 'teammembers.team_member')->orderBy('created_at', 'desc')->get();


      $openleave = DB::table('applyleaves')
        ->where('approver', auth()->user()->teammember_id)
        ->where('status', 0)
        ->count();
      //  dd($notificationDatas);

      $opentimesheetrequests = DB::table('timesheetrequests')
        ->where('status', 0)
        ->where(function ($query) {
          $query->where('timesheetrequests.partner', auth()->user()->teammember_id)
            ->orWhere('timesheetrequests.createdby', auth()->user()->teammember_id);
        })
        ->count();

      $assignment =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        // get assignment name only
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->whereNotIn('clients.id', [33, 32, 34, 29])
        ->select(
          'assignmentbudgetings.client_id',
          'clients.client_name',
          'assignmentbudgetings.assignmentgenerate_id',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentname'
        )
        // ->where('clients.status', 0)
        ->where('assignmentbudgetings.status', 1)
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->take(5)->get();

      // $assignmentcount = count($assignment);

      $assignmentcountbefore = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        // get assignment name only
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->whereNotIn('clients.id', [33, 32, 34, 29])
        ->select(
          'assignmentbudgetings.client_id',
          'clients.client_name',
          'assignmentbudgetings.assignmentgenerate_id',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentname'
        )
        // ->where('clients.status', 0)
        ->where('assignmentbudgetings.status', 1)
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->count();


      $assignmentcountafter = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->where(function ($query) {
          $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
            ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
        })

        ->select(
          'assignmentmappings.*',
          'clients.client_name',
          'assignmentbudgetings.assignmentname',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentgenerate_id'
        )
        ->where('assignmentbudgetings.status', 1)
        ->count();

      $assignmentcount = $assignmentcountbefore + $assignmentcountafter;
      // manager
      return view('backEnd.index', compact('notification', 'opentimesheetrequests', 'openleave', 'mentor', 'mentees', 'assignmentcount', 'assignment', 'pageid', 'assetticket', 'client', 'teammember', 'notificationDatas', 'upcomingBirthdays', 'workAnniversaries', 'upcomingHolidays', 'todayBirthdays', 'approvedleavesvaluecount'));
    } elseif (auth()->user()->role_id == 13) {
      $authidd = Assignmentteammapping::where('teammember_id', auth()->user()->teammember_id)->select('assignmentmapping_id')->pluck('assignmentmapping_id')->first();
      $authid = auth()->user()->teammember_id;

      $notificationDatas =  DB::table('notifications')
        ->join('teammembers', 'teammembers.id', 'notifications.created_by')
        ->Where('targettype', '3')
        ->orWhere('targettype', '2')
        ->select(
          'notifications.*',
          'teammembers.profilepic',
          'teammembers.team_member'
        )->orderBy('created_at', 'desc')->paginate('2');
      //  dd($notificationDatas);

      $notification = Notification::count();
      $client = Client::count();
      $tender = Tender::where('teammember_id', auth()->user()->teammember_id)->count();
      $teammember = Teammember::where('status', '1')->count();
      $userid = auth()->user()->role_id;
      $pageid = Permission::where('role_id', $userid)->select('page_id')->pluck('page_id')->first();

      $openleave = DB::table('applyleaves')
        ->where('approver', auth()->user()->teammember_id)
        ->where('status', 0)
        ->count();

      $assetticket = DB::table('assettickets')
        ->leftjoin('teammembers', 'teammembers.id', 'assettickets.created_by')->where('assettickets.created_by', auth()->user()->teammember_id)
        ->select('assettickets.*', 'teammembers.team_member')->orderBy('created_at', 'desc')->get();
      $assignment =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->where(function ($query) {
          $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
            ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
        })

        ->select(
          'assignmentmappings.*',
          'clients.client_name',
          'assignmentbudgetings.assignmentname',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentgenerate_id'
        )
        ->where('assignmentbudgetings.status', 1)
        ->take(5)->get();

      $assignmentcount = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->where(function ($query) {
          $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
            ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
        })

        ->select(
          'assignmentmappings.*',
          'clients.client_name',
          'assignmentbudgetings.assignmentname',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentgenerate_id'
        )
        ->where('assignmentbudgetings.status', 1)
        ->count();

      $opentimesheetrequests = DB::table('timesheetrequests')
        ->where('status', 0)
        ->where(function ($query) {
          $query->where('timesheetrequests.partner', auth()->user()->teammember_id)
            ->orWhere('timesheetrequests.createdby', auth()->user()->teammember_id);
        })
        ->count();

      //Aproved leave jan to dec 
      $currentYear = date('Y');
      $approvedleavesvalue = DB::table('applyleaves')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 1)
        ->whereYear('from',  $currentYear)
        ->get();

      $leaveDurations = [];
      foreach ($approvedleavesvalue as $approvedleavesvalues) {
        $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

        $diff_in_days = $to->diffInDays($from) + 1;

        $holidaycount = DB::table('holidays')
          ->where('startdate', '>=', $approvedleavesvalues->from)
          ->where('enddate', '<=', $approvedleavesvalues->to)
          ->count();

        $leaveDurationcount = $diff_in_days - $holidaycount;
        $leaveDurations[] = $leaveDurationcount;
      }

      $approvedleavesvaluecount = array_sum($leaveDurations);
      // dd($approvedleavesvaluecount);
      //Aproved leave jan to dec end hare 

      return view('backEnd.index', compact('opentimesheetrequests', 'openleave', 'tender', 'mentor', 'mentees', 'notification', 'assignmentcount', 'assignment', 'pageid', 'assetticket', 'client', 'teammember', 'notificationDatas', 'upcomingBirthdays', 'workAnniversaries', 'upcomingHolidays', 'todayBirthdays', 'approvedleavesvaluecount'));
    } elseif (auth()->user()->role_id == 16) {
      $authidd = Assignmentteammapping::where('teammember_id', auth()->user()->teammember_id)->select('assignmentmapping_id')->pluck('assignmentmapping_id')->first();
      $authid = auth()->user()->teammember_id;
      $notificationDatas =    $notificationDatas = DB::table('notifications')
        //    ->leftjoin('users','users.id','notifications.created_by')
        ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
        ->Where('targettype', '3')->orWhere('targettype', '2')->orderBy('notifications.id', 'desc')->paginate(2);
      //  dd($notificationDatas);
      $notification = Notification::count();
      $client = Client::count();
      $tender = Tender::where('teammember_id', auth()->user()->teammember_id)->count();
      $teammember = Teammember::where('status', '1')->count();
      $userid = auth()->user()->role_id;
      $pageid = Permission::where('role_id', $userid)->select('page_id')->pluck('page_id')->first();
      $assetticket = DB::table('assettickets')
        ->leftjoin('teammembers', 'teammembers.id', 'assettickets.created_by')
        ->select('assettickets.*', 'teammembers.team_member')->orderBy('created_at', 'desc')->get();
      $assignment =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')

        ->select(
          'assignmentbudgetings.client_id',
          'assignmentbudgetings.assignmentgenerate_id',
          'clients.client_name',
          'assignments.assignment_name'
        )
        ->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)->distinct()->get();
      $assignmentcount = count($assignment);
      return view('backEnd.index', compact('tender', 'mentor', 'mentees', 'notification', 'assignmentcount', 'assignment', 'pageid', 'assetticket', 'client', 'teammember', 'notificationDatas', 'upcomingBirthdays', 'workAnniversaries', 'upcomingHolidays', 'todayBirthdays'));
    } elseif (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {
      //Aproved leave jan to dec 
      $currentYear = date('Y');
      $approvedleavesvalue = DB::table('applyleaves')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 1)
        ->whereYear('from',  $currentYear)
        ->get();

      $leaveDurations = [];
      foreach ($approvedleavesvalue as $approvedleavesvalues) {
        $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

        $diff_in_days = $to->diffInDays($from) + 1;

        $holidaycount = DB::table('holidays')
          ->where('startdate', '>=', $approvedleavesvalues->from)
          ->where('enddate', '<=', $approvedleavesvalues->to)
          ->count();

        $leaveDurationcount = $diff_in_days - $holidaycount;
        $leaveDurations[] = $leaveDurationcount;
      }

      $approvedleavesvaluecount = array_sum($leaveDurations);
      // dd($approvedleavesvaluecount);
      //Aproved leave jan to dec end hare 
      // dd(auth()->user()->teammember_id);
      $authidd = Assignmentteammapping::where('teammember_id', auth()->user()->teammember_id)->select('assignmentmapping_id')->pluck('assignmentmapping_id')->first();
      $authid = auth()->user()->teammember_id;

      $notificationDatas =   DB::table('notifications')
        ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
        ->where('notifications.targettype', '1')
        ->select('notifications.*', 'teammembers.team_member', 'teammembers.profilepic')->orWhere('targettype', '2')->orderBy('notifications.id', 'desc')->paginate(2);

      //  dd($notificationDatas);
      $notification = Notification::count();
      $client = Client::count();
      $teammember = Teammember::where('status', '1')->count();
      $userid = auth()->user()->role_id;
      $pageid = Permission::where('role_id', $userid)->select('page_id')->pluck('page_id')->first();
      $assetticket = DB::table('assettickets')
        ->leftjoin('users', 'users.id', 'assettickets.created_by')
        ->leftjoin('teammembers', 'teammembers.id', 'users.teammember_id')->where('assettickets.created_by', auth()->user()->teammember_id)
        ->select('assettickets.*', 'teammembers.team_member')->orderBy('created_at', 'desc')->get();

      //  dd($notificationDatas);

      $assignment =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        // get assignment name only
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->whereNotIn('clients.id', [33, 32, 34, 29])
        ->select(
          'assignmentbudgetings.client_id',
          'clients.client_name',
          'assignmentbudgetings.assignmentgenerate_id',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentname'
        )
        // ->where('clients.status', 0)
        ->where('assignmentbudgetings.status', 1)
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->take(5)->get();

      // $assignmentcount = count($assignment);

      $assignmentcount = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        // get assignment name only
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->whereNotIn('clients.id', [33, 32, 34, 29])
        ->select(
          'assignmentbudgetings.client_id',
          'clients.client_name',
          'assignmentbudgetings.assignmentgenerate_id',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentname'
        )
        // ->where('clients.status', 0)
        ->where('assignmentbudgetings.status', 1)
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->count();

      // manager
      return view('backEnd.index', compact('notification', 'mentor', 'mentees', 'assignmentcount', 'assignment', 'pageid', 'assetticket', 'client', 'teammember', 'notificationDatas', 'upcomingBirthdays', 'workAnniversaries', 'upcomingHolidays', 'todayBirthdays', 'approvedleavesvaluecount'));
    } else {
      $authidd = Assignmentteammapping::where('teammember_id', auth()->user()->teammember_id)->select('assignmentmapping_id')->pluck('assignmentmapping_id')->first();
      $authid = auth()->user()->teammember_id;
      $notificationDatas =   DB::table('notifications')
        //  ->leftjoin('users','users.id','notifications.created_by')
        ->leftjoin('teammembers', 'teammembers.id', 'notifications.created_by')
        ->where('notifications.targettype', '1')
        ->select('notifications.*', 'teammembers.team_member', 'teammembers.profilepic')->orWhere('targettype', '2')->orderBy('notifications.id', 'desc')->paginate(2);

      //  dd($notificationDatas);
      $notification = Notification::count();
      $client = Client::count();
      $teammember = Teammember::where('status', '1')->count();
      $userid = auth()->user()->role_id;
      $pageid = Permission::where('role_id', $userid)->select('page_id')->pluck('page_id')->first();
      $assetticket = DB::table('assettickets')
        ->leftjoin('users', 'users.id', 'assettickets.created_by')
        ->leftjoin('teammembers', 'teammembers.id', 'users.teammember_id')->where('assettickets.created_by', auth()->user()->teammember_id)
        ->select('assettickets.*', 'teammembers.team_member')->orderBy('created_at', 'desc')->get();

      $assignment =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->select(
          'assignmentbudgetings.client_id',
          'clients.client_name',
          'assignmentbudgetings.assignmentgenerate_id',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentname'
        )
        ->where('clients.status', 1)
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->take(5)->get();

      $assignmentcount = count($assignment);
      return view('backEnd.index', compact('notification', 'mentor', 'mentees', 'assignmentcount', 'assignment', 'pageid', 'assetticket', 'client', 'teammember', 'notificationDatas', 'upcomingBirthdays', 'workAnniversaries', 'upcomingHolidays', 'todayBirthdays'));
    }
  
}





  
  

Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php


  public function examleaverequestlist()
  {
    $permotioncheck = DB::table('teamrolehistory')
      ->where('teammember_id', auth()->user()->teammember_id)->first();

    if (auth()->user()->role_id == 11) {
      $timesheetrequestsDatas = DB::table('leaverequest')
        ->leftjoin('teammembers', 'teammembers.id', 'leaverequest.approver')
        ->leftjoin('teammembers as createdby', 'createdby.id', 'leaverequest.createdby')
        ->leftjoin('applyleaves', 'applyleaves.id', 'leaverequest.applyleaveid')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        // ->where('createdby.id', auth()->user()->teammember_id)
        ->select(
          'leaverequest.*',
          'teammembers.team_member',
          'teammembers.staffcode',
          'applyleaves.leavetype',
          'leavetypes.name',
          'createdby.team_member as createdbyauth',
          'createdby.staffcode as teamstaffcode'
        )->get();

      $hasPendingRequests = $timesheetrequestsDatas->contains('status', 0);

      return view('backEnd.applyleave.adminrevertleave', compact(
        'timesheetrequestsDatas',
        'hasPendingRequests'

      ));
    } elseif ($permotioncheck && auth()->user()->role_id == 13) {
      $timesheetrequestsDatas = DB::table('leaverequest')
        ->leftjoin('teammembers', 'teammembers.id', 'leaverequest.approver')
        ->leftjoin('teammembers as createdby', 'createdby.id', 'leaverequest.createdby')
        ->leftJoin('teamrolehistory as createdby_history', 'createdby_history.teammember_id', '=', 'createdby.id')
        ->leftjoin('applyleaves', 'applyleaves.id', 'leaverequest.applyleaveid')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->where('createdby.id', auth()->user()->teammember_id)
        ->select(
          'leaverequest.*',
          'teammembers.team_member',
          'teammembers.staffcode',
          'applyleaves.leavetype',
          'leavetypes.name',
          'createdby.team_member as createdbyauth',
          'createdby.staffcode as teamstaffcode',
          'createdby_history.newstaff_code'
        )->get();

      $myteamtimesheetrequestsDatas = DB::table('leaverequest')
        ->leftjoin('teammembers', 'teammembers.id', 'leaverequest.approver')
        ->leftjoin('teammembers as createdby', 'createdby.id', 'leaverequest.createdby')
        ->leftjoin('applyleaves', 'applyleaves.id', 'leaverequest.applyleaveid')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->where('leaverequest.approver', auth()->user()->teammember_id)
        ->select(
          'leaverequest.*',
          'teammembers.team_member',
          'teammembers.staffcode',
          'applyleaves.leavetype',
          'leavetypes.name',
          'createdby.team_member as createdbyauth',
          'createdby.staffcode as teamstaffcode'
        )->get();

      $hasPendingRequests = $myteamtimesheetrequestsDatas->contains('status', 0);

      return view('backEnd.applyleave.examrequestlist', compact('timesheetrequestsDatas', 'myteamtimesheetrequestsDatas', 'hasPendingRequests'));
    } else {

      $timesheetrequestsDatas = DB::table('leaverequest')
        ->leftjoin('teammembers', 'teammembers.id', 'leaverequest.approver')
        ->leftjoin('teammembers as createdby', 'createdby.id', 'leaverequest.createdby')
        ->leftjoin('applyleaves', 'applyleaves.id', 'leaverequest.applyleaveid')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->where('createdby.id', auth()->user()->teammember_id)
        ->select(
          'leaverequest.*',
          'teammembers.team_member',
          'teammembers.staffcode',
          'applyleaves.leavetype',
          'leavetypes.name',
          'createdby.team_member as createdbyauth',
          'createdby.staffcode as teamstaffcode'
        )->get();

      $myteamtimesheetrequestsDatas = DB::table('leaverequest')
        ->leftjoin('teammembers', 'teammembers.id', 'leaverequest.approver')
        ->leftjoin('teammembers as createdby', 'createdby.id', 'leaverequest.createdby')
        ->leftjoin('applyleaves', 'applyleaves.id', 'leaverequest.applyleaveid')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->where('leaverequest.approver', auth()->user()->teammember_id)
        ->select(
          'leaverequest.*',
          'teammembers.team_member',
          'teammembers.staffcode',
          'applyleaves.leavetype',
          'leavetypes.name',
          'createdby.team_member as createdbyauth',
          'createdby.staffcode as teamstaffcode'
        )->get();

      $hasPendingRequests = $myteamtimesheetrequestsDatas->contains('status', 0);

      return view('backEnd.applyleave.examrequestlist', compact('timesheetrequestsDatas', 'myteamtimesheetrequestsDatas', 'hasPendingRequests'));
    }
  }








Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\applyleave\adminrevertleave.blade.php

             <table id="examplee" class="table display table-bordered table-striped table-hover">
                         <thead>
                             <tr>
                                 <th style="display: none;">id</th>
                                 <th class="textfixed">Employee</th>
                                 <th class="textfixed">Staff Code</th>
                                 <th class="textfixed">Status</th>
                                 <th class="textfixed">Leave Type</th>
                                 <th class="textfixed">Date Of Request</th>
                                 <th class="textfixed">From</th>
                                 <th class="textfixed">To</th>
                                 <th class="textfixed">Approver</th>
                                 <th>Reason</th>
                                 @if ($hasPendingRequests)
                                     <th>Approved</th>
                                     <th>Reject</th>
                                 @endif
                             </tr>
                         </thead>
                         <tbody>
                             {{-- @php
                               dd($timesheetrequestsDatas);
                           @endphp --}}
                             @foreach ($timesheetrequestsDatas as $timesheetrequestsData)
                                 <tr>
                                     @php
                                         $permotioncheck = DB::table('teamrolehistory')
                                             ->where('teammember_id', $timesheetrequestsData->createdby)
                                             ->first();

                                         $datadate = Carbon\Carbon::createFromFormat(
                                             'Y-m-d H:i:s',
                                             $timesheetrequestsData->created_at,
                                         );

                                         $permotiondate = null;
                                         if ($permotioncheck) {
                                             $permotiondate = Carbon\Carbon::createFromFormat(
                                                 'Y-m-d H:i:s',
                                                 $permotioncheck->created_at,
                                             );
                                         }

                                     @endphp
                                     <td style="display: none;">{{ $timesheetrequestsData->id }}</td>
                                     {{-- <td>{{ $timesheetrequestsData->createdbyauth }}</td> --}}
                                     @if (auth()->user()->role_id == 11)
                                         <td class="textfixed">
                                             {{-- <a href="{{ route('applyleave.show', $applyleaveDatas->id) }}"> --}}
                                             <a href="{{ url('examleaverequest', $timesheetrequestsData->id) }}">
                                                 {{ $timesheetrequestsData->createdbyauth ?? '' }}</a>
                                         </td>
                                         {{-- <td>{{ $timesheetrequestsData->teamstaffcode }}</td> --}}
                                         @if ($permotioncheck && $datadate->greaterThan($permotiondate))
                                             <td>{{ $permotioncheck->newstaff_code }}</td>
                                         @else
                                             <td>{{ $timesheetrequestsData->teamstaffcode }}</td>
                                         @endif
                                     @else
                                         <td>{{ $timesheetrequestsData->createdbyauth }}</td>
                                         {{-- <td>{{ $timesheetrequestsData->teamstaffcode }}</td> --}}
                                     @endif
                                     <td>
                                         @if ($timesheetrequestsData->status == 0)
                                             <span class="badge badge-pill badge-warning">Created</span>
                                         @elseif($timesheetrequestsData->status == 1)
                                             <span class="badge badge-pill badge-success">Approved</span>
                                         @else
                                             <span class="badge badge-pill badge-danger">Rejected</span>
                                         @endif
                                     </td>
                                     <td>{{ $timesheetrequestsData->name }}</td>

                                     <td class="textfixed">
                                         {{ date('d-M-Y', strtotime($timesheetrequestsData->created_at)) }}</td>

                                     <td class="textfixed">
                                         {{ date('d-M-Y', strtotime($timesheetrequestsData->from_date)) }}</td>
                                     <td class="textfixed">
                                         {{ $timesheetrequestsData->to_date ? date('d-M-Y', strtotime($timesheetrequestsData->to_date)) : 'NA' }}
                                     </td>
                                     <td>{{ $timesheetrequestsData->team_member }}
                                         ({{ $timesheetrequestsData->staffcode }})
                                     </td>
                                     <td>{{ $timesheetrequestsData->reason }}</td>
                                     {{-- <td>{{ $timesheetrequestsData->remark }}</td> --}}
                                     <td>
                                         @if ($timesheetrequestsData->status == 0)
                                             <form method="post"
                                                 action="{{ route('examleaveapprove', $timesheetrequestsData->id) }}"
                                                 enctype="multipart/form-data" style="text-align: center;">
                                                 @method('PATCH')
                                                 @csrf
                                                 <button type="submit" class="btn btn-success"
                                                     style="border-radius: 7px; font-size: 10px; padding: 5px;">
                                                     Approve</button>
                                                 <input type="text" hidden id="example-date-input" name="status"
                                                     value="1" class="form-control">

                                                 <input type="hidden" name="leavetype"
                                                     value="{{ $timesheetrequestsData->leavetype }}" class="form-control"
                                                     placeholder="">
                                             </form>
                                         @endif
                                     </td>
                                     <td>
                                         @if ($timesheetrequestsData->status == 0)
                                             <form method="post"
                                                 action="{{ route('examleaveapprove', $timesheetrequestsData->id) }}"
                                                 enctype="multipart/form-data" style="text-align: center;">
                                                 @method('PATCH')
                                                 @csrf
                                                 <button style="border-radius: 7px; font-size: 10px; padding: 5px;"
                                                     type="submit" class="btn btn-danger">
                                                     Reject</button>
                                                 <input hidden type="text" id="example-date-input" name="status"
                                                     value="2" class="form-control" placeholder="Enter Location">
                                             </form>
                                         @endif
                                     </td>
                                 </tr>
                             @endforeach
                         </tbody>
                     </table>







Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\applyleave\examrequestlist.blade.php


                                <table id="examplee" class="table display table-bordered table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th style="display: none;">id</th>
                                            <th>Employee</th>
                                            <th>Staff Code</th>
                                            <th>Status</th>
                                            <th>Leave Type</th>
                                            <th>Date of Request</th>
                                            <th>From</th>
                                            <th>To</th>
                                            <th>Approver</th>
                                            <th>Reason</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach ($timesheetrequestsDatas as $timesheetrequestsData)
                                            <tr>
                                                @php
                                                    $permotioncheck = DB::table('teamrolehistory')
                                                        ->where('teammember_id', auth()->user()->teammember_id)
                                                        ->first();

                                                    $datadate = Carbon\Carbon::createFromFormat(
                                                        'Y-m-d H:i:s',
                                                        $timesheetrequestsData->created_at,
                                                    );

                                                    $permotiondate = null;
                                                    if ($permotioncheck) {
                                                        $permotiondate = Carbon\Carbon::createFromFormat(
                                                            'Y-m-d H:i:s',
                                                            $permotioncheck->created_at,
                                                        );
                                                    }
                                                @endphp
                                                <td style="display: none;">{{ $timesheetrequestsData->id }}</td>
                                                {{-- <td>{{ $timesheetrequestsData->createdbyauth }}</td> --}}
                                                @if (auth()->user()->role_id == 11)
                                                    <td>
                                                        {{-- <a href="{{ route('applyleave.show', $applyleaveDatas->id) }}"> --}}
                                                        <a href="{{ url('examleaverequest', $timesheetrequestsData->id) }}">
                                                            {{ $timesheetrequestsData->createdbyauth ?? '' }}</a>
                                                    </td>
                                                @else
                                                    <td>{{ $timesheetrequestsData->createdbyauth }}</td>
                                                @endif
                                                {{-- <td>{{ $timesheetrequestsData->teamstaffcode }}</td> --}}
                                                @if ($permotiondate && $datadate->greaterThan($permotiondate))
                                                    <td>{{ $timesheetrequestsData->newstaff_code }}</td>
                                                @else
                                                    <td>{{ $timesheetrequestsData->teamstaffcode }}</td>
                                                @endif
                                                <td>
                                                    @if ($timesheetrequestsData->status == 0)
                                                        <span class="badge badge-pill badge-warning">Created</span>
                                                    @elseif($timesheetrequestsData->status == 1)
                                                        <span class="badge badge-pill badge-success">Approved</span>
                                                    @else
                                                        <span class="badge badge-pill badge-danger">Rejected</span>
                                                    @endif
                                                </td>
                                                <td>{{ $timesheetrequestsData->name }}</td>

                                                <td>{{ date('d-M-Y', strtotime($timesheetrequestsData->created_at)) }}</td>
                                                <td>{{ date('d-M-Y', strtotime($timesheetrequestsData->from_date)) }}</td>
                                                {{-- <td>{{ date('d-M-Y', strtotime($timesheetrequestsData->to_date)) }}</td> --}}
                                                <td> {{ $timesheetrequestsData->to_date ? date('d-M-Y', strtotime($timesheetrequestsData->to_date)) : 'NA' }}
                                                </td>

                                                <td>{{ $timesheetrequestsData->team_member }}
                                                    ({{ $timesheetrequestsData->staffcode }})
                                                </td>

                                                <td>{{ $timesheetrequestsData->reason }}</td>
                                                {{-- <td>{{ $timesheetrequestsData->remark }}</td> --}}
                                            </tr>
                                        @endforeach
                                    </tbody>
                                </table>
								



Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetrequestController.php

    public function index()
    {

        if (auth()->user()->role_id == 11 || auth()->user()->role_id == 18) {
            $timesheetrequestsDatas = DB::table('timesheetrequests')
                ->leftjoin('clients', 'clients.id', 'timesheetrequests.client_id')
                ->leftjoin('assignments', 'assignments.id', 'timesheetrequests.assignment_id')
                ->leftjoin('teammembers', 'teammembers.id', 'timesheetrequests.partner')
                ->leftjoin('teammembers as createdby', 'createdby.id', 'timesheetrequests.createdby')
                ->select(
                    'timesheetrequests.*',
                    'clients.client_name',
                    'clients.client_code',
                    'assignments.assignment_name',
                    'teammembers.team_member',
                    'teammembers.staffcode',
                    'createdby.team_member as createdbyauth',
                    'createdby.staffcode as staffcodeid',
                )->get();
            //  dd($timesheetrequestsDatas);
            return view('backEnd.timesheetrequest.index', compact('timesheetrequestsDatas'));
        } elseif (auth()->user()->role_id == 13) {
            // die;
            $mytimesheetrequest = DB::table('timesheetrequests')
                ->leftjoin('clients', 'clients.id', 'timesheetrequests.client_id')
                ->leftjoin('assignments', 'assignments.id', 'timesheetrequests.assignment_id')
                ->leftjoin('teammembers', 'teammembers.id', 'timesheetrequests.partner')
                ->leftjoin('teammembers as createdby', 'createdby.id', 'timesheetrequests.createdby')
                ->where('timesheetrequests.createdby', auth()->user()->teammember_id)

                ->select(
                    'timesheetrequests.*',
                    'clients.client_name',
                    'clients.client_code',
                    'assignments.assignment_name',
                    'teammembers.team_member',
                    'teammembers.staffcode',
                    'createdby.team_member as createdbyauth',
                    'createdby.staffcode as staffcodeid',
                )
                ->orderBy('timesheetrequests.created_at', 'DESC')
                ->get();

            $teamtimesheetrequest = DB::table('timesheetrequests')
                ->leftjoin('clients', 'clients.id', 'timesheetrequests.client_id')
                ->leftjoin('assignments', 'assignments.id', 'timesheetrequests.assignment_id')
                ->leftjoin('teammembers', 'teammembers.id', 'timesheetrequests.partner')
                ->leftjoin('teammembers as createdby', 'createdby.id', 'timesheetrequests.createdby')
                ->where('timesheetrequests.partner', auth()->user()->teammember_id)
                // ->orwhere('timesheetrequests.createdby', auth()->user()->teammember_id)
                ->select(
                    'timesheetrequests.*',
                    'clients.client_name',
                    'clients.client_code',
                    'assignments.assignment_name',
                    'teammembers.team_member',
                    'teammembers.staffcode',
                    'createdby.team_member as createdbyauth',
                    'createdby.staffcode as staffcodeid',
                )
                ->orderBy('timesheetrequests.created_at', 'DESC')
                ->get();

            return view('backEnd.timesheetrequest.teamtimesheetrequest', compact('teamtimesheetrequest', 'mytimesheetrequest'));
        } else {

            $mytimesheetrequest = DB::table('timesheetrequests')
                ->leftjoin('clients', 'clients.id', 'timesheetrequests.client_id')
                ->leftjoin('assignments', 'assignments.id', 'timesheetrequests.assignment_id')
                ->leftjoin('teammembers', 'teammembers.id', 'timesheetrequests.partner')
                ->leftjoin('teammembers as createdby', 'createdby.id', 'timesheetrequests.createdby')
                ->where('timesheetrequests.createdby', auth()->user()->teammember_id)

                ->select(
                    'timesheetrequests.*',
                    'clients.client_name',
                    'clients.client_code',
                    'assignments.assignment_name',
                    'teammembers.team_member',
                    'teammembers.staffcode',
                    'createdby.team_member as createdbyauth',
                    'createdby.staffcode as staffcodeid',
                )
                ->orderBy('timesheetrequests.created_at', 'DESC')
                ->get();

            $teamtimesheetrequest = DB::table('timesheetrequests')
                ->leftjoin('clients', 'clients.id', 'timesheetrequests.client_id')
                ->leftjoin('assignments', 'assignments.id', 'timesheetrequests.assignment_id')
                ->leftjoin('teammembers', 'teammembers.id', 'timesheetrequests.partner')
                ->leftjoin('teammembers as createdby', 'createdby.id', 'timesheetrequests.createdby')
                ->where('timesheetrequests.partner', auth()->user()->teammember_id)
                // ->orwhere('timesheetrequests.createdby', auth()->user()->teammember_id)
                ->select(
                    'timesheetrequests.*',
                    'clients.client_name',
                    'assignments.assignment_name',
                    'teammembers.team_member',
                    'createdby.team_member as createdbyauth',
                    'createdby.staffcode as staffcodeid',
                )
                ->orderBy('timesheetrequests.created_at', 'DESC')
                ->get();

            return view('backEnd.timesheetrequest.teamtimesheetrequest', compact('mytimesheetrequest', 'teamtimesheetrequest'));
        }
    }






Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheetrequest\index.blade.php

                 <table id="examplee" class="display nowrap">
                        <thead>
                            <tr>
                                <th style="display: none;">id</th>
                                <th>Status</th>
                                <th>Date</th>
                                <th>Time</th>
                                <th>Created By</th>
                                <th>Staff Code</th>
                                <th>Approver</th>
                                <th>Reason</th>
                                <th>Attachment</th>
                                <th>Reason for Reject</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach ($timesheetrequestsDatas as $timesheetrequestsData)
                                <tr>
                                    @php
                                        if (auth()->user()->role_id == 11) {
                                            $permotioncheck = DB::table('teamrolehistory')
                                                ->where('teammember_id', $timesheetrequestsData->createdby)
                                                ->first();

                                            $datadate = Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $timesheetrequestsData->created_at,
                                            );

                                            $permotiondate = null;
                                            if ($permotioncheck) {
                                                $permotiondate = Carbon\Carbon::createFromFormat(
                                                    'Y-m-d H:i:s',
                                                    $permotioncheck->created_at,
                                                );
                                            }
                                        }
                                    @endphp
                                    <td style="display: none;">{{ $timesheetrequestsData->id }}</td>
                                    <td>
                                        @if ($timesheetrequestsData->status == 0)
                                            <span class="badge badge-pill badge-warning">Created</span>
                                        @elseif($timesheetrequestsData->status == 1)
                                            <span class="badge badge-pill badge-success">Approved</span>
                                        @else
                                            <span class="badge badge-pill badge-danger">Rejected</span>
                                        @endif
                                    </td>
                                    <td>{{ date('d-m-Y', strtotime($timesheetrequestsData->created_at)) }}</td>
                                    <td>{{ date('h:m:s', strtotime($timesheetrequestsData->created_at)) }}</td>
                                    <td><a href="{{ url('timesheetrequest/view', $timesheetrequestsData->id) }}">
                                            {{ $timesheetrequestsData->createdbyauth }}</a></td>

                                    @if (auth()->user()->role_id == 11)
                                        @if ($permotioncheck && $datadate->greaterThan($permotiondate))
                                            <td>{{ $permotioncheck->newstaff_code }}</td>
                                        @else
                                            <td>{{ $timesheetrequestsData->staffcodeid }}</td>
                                        @endif
                                    @else
                                        <td>{{ $timesheetrequestsData->newstaff_code ?? $timesheetrequestsData->staffcodeid }}
                                    @endif

                                    </td>
                                    <td>{{ $timesheetrequestsData->team_member }}
                                        ({{ $timesheetrequestsData->staffcode }})
                                    </td>
                                    <td style="width: 900px; word-wrap: break-word; white-space: normal;">
                                        {{ $timesheetrequestsData->reason }}</td>
                                    <td>
                                        @if ($timesheetrequestsData && $timesheetrequestsData->attachment)
                                            <a
                                                href="{{ url('backEnd/image/confirmationfile/' . $timesheetrequestsData->attachment) }}">
                                                {{ $timesheetrequestsData->attachment ?? 'NA' }}
                                            </a>
                                        @else
                                            {{ 'NA' }}
                                        @endif
                                    </td>
                                    <td>{{ $timesheetrequestsData->remark ?? 'NA' }}</td>

                                </tr>
                            @endforeach
                        </tbody>
                    </table>
					
					


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheetrequest\teamtimesheetrequest.blade.php

                                <table id="myTimesheetTable" class="table display table-bordered table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th>Status</th>
                                            <th>Date</th>
                                            <th>Time</th>
                                            <th>Created By</th>
                                            <th>Staff Code</th>
                                            <th>Approver</th>
                                            <th>Reason</th>
                                            <th>Attachment</th>
                                            <th>Reason for Reject</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach ($mytimesheetrequest as $timesheetrequestsData)
                                            <tr>
                                                @php
                                                    $permotioncheck = DB::table('teamrolehistory')
                                                        ->where('teammember_id', auth()->user()->teammember_id)
                                                        ->first();

                                                    $datadate = Carbon\Carbon::createFromFormat(
                                                        'Y-m-d H:i:s',
                                                        $timesheetrequestsData->created_at,
                                                    );

                                                    $permotiondate = null;
                                                    if ($permotioncheck) {
                                                        $permotiondate = Carbon\Carbon::createFromFormat(
                                                            'Y-m-d H:i:s',
                                                            $permotioncheck->created_at,
                                                        );
                                                    }
                                                @endphp
                                                <td>
                                                    @if ($timesheetrequestsData->status == 0)
                                                        <span class="badge badge-pill badge-warning">Created</span>
                                                    @elseif($timesheetrequestsData->status == 1)
                                                        <span class="badge badge-pill badge-success">Approved</span>
                                                    @else
                                                        <span class="badge badge-pill badge-danger">Rejected</span>
                                                    @endif
                                                </td>
                                                <td> <span style="display: none;">
                                                        {{ date('Y-m-d', strtotime($timesheetrequestsData->created_at)) }}</span>{{ date('d-m-Y', strtotime($timesheetrequestsData->created_at)) }}
                                                </td>
                                                <td>{{ date('g:i A', strtotime($timesheetrequestsData->created_at)) }}
                                                </td>
                                                <td><a
                                                        href="{{ url('timesheetrequest/view', $timesheetrequestsData->id) }}">
                                                        {{ $timesheetrequestsData->createdbyauth }}</a></td>
                                                {{-- <td>{{ $timesheetrequestsData->staffcodeid }}</td> --}}
                                                @if ($permotiondate && $datadate->greaterThan($permotiondate))
                                                    <td>{{ $permotioncheck->newstaff_code }}</td>
                                                @else
                                                    <td>{{ $timesheetrequestsData->staffcodeid }}</td>
                                                @endif
                                                <td>{{ $timesheetrequestsData->team_member }}
                                                    ({{ $timesheetrequestsData->staffcode }})
                                                </td>
                                                <td>{{ $timesheetrequestsData->reason }}</td>
                                                <td>
                                                    @if ($timesheetrequestsData && $timesheetrequestsData->attachment)
                                                        <a href="{{ url('backEnd/image/confirmationfile/' . $timesheetrequestsData->attachment) }}"
                                                            target="_blank">
                                                            {{ $timesheetrequestsData->attachment ?? 'NA' }}
                                                        </a>
                                                    @else
                                                        {{ 'NA' }}
                                                    @endif
                                                </td>
                                                <td>{{ $timesheetrequestsData->remark ?? 'NA' }}</td>
                                            </tr>
                                        @endforeach
                                    </tbody>
                                </table>







Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php

  public function admintimesheetlist(Request $request)
  {


    $teammembers = DB::table('teammembers')
      ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
      ->where('teammembers.status', 1)
      ->whereIn('teammembers.role_id', [14, 15, 13, 11])
      ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
      ->orderBy('team_member', 'ASC')
      ->get();

    $clientsname = DB::table('clients')
      ->whereIn('status', [0, 1])
      ->select('id', 'client_name', 'client_code')
      ->orderBy('client_name', 'ASC')
      ->get();

    $assignmentsname = DB::table('timesheetusers')
      ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
      ->whereIn('timesheetusers.status', [1, 2, 3])
      ->whereNotNull('assignmentbudgetings.assignmentname')
      ->select('timesheetusers.*', 'assignmentbudgetings.assignmentname')
      ->orderBy('assignmentname', 'Asc')
      ->distinct('assignmentname')
      ->get();

    if (auth()->user()->role_id == 11) {

      $timesheetData = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        // ->where('timesheetusers.createdby', $teamid)
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername')
        ->orderBy('date', 'DESC')
        ->take(7)
        ->get();
    }
    // for patner team 
    else {
      // die;
      $timesheetData = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->where('timesheetusers.partner', auth()->user()->teammember_id)
        ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername')
        ->orderBy('date', 'DESC')
        ->take(7)
        ->get();

      // dd($teammembers);
    }
    return view('backEnd.timesheet.timesheetdownload', compact('timesheetData', 'teammembers', 'clientsname', 'assignmentsname'));
  }



Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\timesheetdownload.blade.php

                      @if (Request::is('adminsearchtimesheet') || Request::is('mytimesheetlist/*') || Request::is('searchingtimesheet'))
                          <table id="examplee" class="table display table-bordered table-striped table-hover">
                              <thead>
                                  <tr>
                                      <th style="display: none;">id</th>
                                      <th>Employee Name</th>
                                      @if (Request::is('adminsearchtimesheet'))
                                          <th>Employee Code</th>
                                      @endif
                                      <th>Date</th>
                                      <th>Day</th>
                                      <th>Client Name</th>
                                      <th>Client Code</th>
                                      <th>Assignment Name</th>
                                      <th>Work Item</th>
                                      <th>Location</th>
                                      <th>Partner</th>
                                      <th>Hour</th>
                                  </tr>
                              </thead>
                              <tbody>

                                  @foreach ($timesheetData as $timesheetDatas)
                                      <tr>
                                          @if (Request::is('adminsearchtimesheet'))
                                              @php
                                                  $permotioncheck = DB::table('teamrolehistory')
                                                      ->where('teammember_id', $timesheetDatas->createdby)
                                                      ->first();

                                                  $datadate = Carbon\Carbon::createFromFormat(
                                                      'Y-m-d H:i:s',
                                                      $timesheetDatas->created_at,
                                                  );

                                                  $permotiondate = null;
                                                  if ($permotioncheck) {
                                                      $permotiondate = Carbon\Carbon::createFromFormat(
                                                          'Y-m-d H:i:s',
                                                          $permotioncheck->created_at,
                                                      );
                                                  }
                                              @endphp
                                          @endif
                                          <td style="display: none;">{{ $timesheetDatas->id }}</td>
                                          <td> {{ $timesheetDatas->team_member ?? '' }} </td>
                                          @if (Request::is('adminsearchtimesheet'))
                                              {{-- <td> {{ $timesheetDatas->staffcode ?? '' }} </td> --}}
                                              @if ($permotioncheck && $datadate->greaterThan($permotiondate))
                                                  <td>{{ $permotioncheck->newstaff_code }}</td>
                                              @else
                                                  <td>{{ $timesheetDatas->staffcode }}</td>
                                              @endif
                                          @endif
                                          <td> <span style="display: none;">
                                                  {{ date('Y-m-d', strtotime($timesheetDatas->date)) }}</span>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                          </td>
                                          <td>
                                              @if ($timesheetDatas->date != null)
                                                  {{ date('l', strtotime($timesheetDatas->date)) }}
                                              @endif
                                          </td>
                                          <td>{{ $timesheetDatas->client_name ?? '' }}
                                          </td>
                                          <td>{{ $timesheetDatas->client_code ?? '' }}
                                          </td>
                                          <td>
                                              {{ $timesheetDatas->assignment_name ?? '' }} (
                                              {{ $timesheetDatas->assignmentgenerate_id ?? '' }})
                                              @if ($timesheetDatas->assignmentname != null)
                                                  ({{ $timesheetDatas->assignmentname ?? '' }})
                                              @endif
                                          </td>
                                          <td> {{ $timesheetDatas->workitem ?? '' }}</td>
                                          <td>{{ $timesheetDatas->location ?? '' }} </td>
                                          <td> {{ $timesheetDatas->patnername ?? '' }} (
                                              {{ $timesheetDatas->patnerstaffcode ?? '' }}) </td>
                                          <td>{{ $timesheetDatas->hour ?? '' }}</td>
                                      </tr>
                                  @endforeach
                              </tbody>
                          </table>
                      @endif





Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\timesheetdownload.blade.php


<td>
                                          <div class="form-group">
                                              <select class="language form-control" id="teammemberId" name="teammemberId">
                                                  <option value="">Please Select One</option>
                                                  @php
                                                      $displayedValues = [];
                                                  @endphp
                                                  @foreach ($teammembers as $teammember)
                                                      @if (!in_array($teammember->staffcode, $displayedValues))
                                                          {{-- <option value="{{ $teammember->id }}"> --}}
                                                          <option value="{{ $teammember->id }}"
                                                              {{ old('teammemberId') == $teammember->id ? 'selected' : '' }}>
                                                              {{ $teammember->team_member }} (
                                                              {{ $teammember->newstaff_code ?? ($teammember->staffcode ?? '') }})
                                                          </option>
                                                          @php
                                                              $displayedValues[] = $teammember->staffcode;
                                                          @endphp
                                                      @endif
                                                  @endforeach
                                              </select>
                                          </div>
                                      </td>
									  



Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php

  public function adminsearchtimesheet(Request $request)
  {

    if ($request->ajax()) {
      echo "<option value='null'>Select Assignment</option>";
      foreach (DB::table('assignmentbudgetings')
        ->where('assignmentbudgetings.client_id', $request->cid)
        ->leftJoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftJoin('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
        ->orderBy('assignment_name')->get() as $sub) {
        echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . ' )' . '( ' . $sub->assignmentgenerate_id . ' )' . "</option>";
      }
    } else {
      // Get all input from form
      $startDate = $request->input('startdate', null);
      $endDate = $request->input('enddate', null);
      $teamId = $request->input('teamid', null);
      $teammemberId = $request->input('teammemberId', null);
      // $year = $request->input('year', null);
      $clientId = $request->input('clientId', null);
      $assignmentIddummy = $request->input('assignmentId', null);

      if ($assignmentIddummy == 'null') {
        $assignmentId = null;
      } else {
        $assignmentId =  $assignmentIddummy;
      }
      // dd($assignmentId);
      $teammembers = DB::table('teammembers')
        ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
        ->where('teammembers.status', 1)
        ->whereIn('teammembers.role_id', [14, 15, 13, 11])
        ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
        ->orderBy('team_member', 'ASC')
        ->get();

      $clientsname = DB::table('clients')
        ->whereIn('status', [0, 1])
        ->select('id', 'client_name', 'client_code')
        ->orderBy('client_name', 'ASC')
        ->get();

      $assignmentsname = DB::table('timesheetusers')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->whereNotNull('assignmentbudgetings.assignmentname')
        ->select('timesheetusers.*', 'assignmentbudgetings.assignmentname')
        ->orderBy('assignmentname', 'Asc')
        ->distinct('assignmentname')
        ->get();

      if (auth()->user()->role_id == 11 || auth()->user()->role_id == 13) {
        $timesheetData = DB::table('timesheetusers')
          ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
          // When startDate and endDate exist then run 'when' clause
          ->when($startDate && $endDate && $teammemberId, function ($query) use ($startDate, $endDate, $teammemberId) {
            // dd('teammemberId');
            return $query->where('timesheetusers.createdby', $teammemberId)
              ->where('timesheetusers.date', '>=', $startDate)
              ->where('timesheetusers.date', '<=', $endDate);
          })
          ->when($startDate && $endDate && $clientId, function ($query) use ($startDate, $endDate, $clientId) {
            // dd($clientId);
            return $query->where('timesheetusers.client_id', $clientId)
              ->where('timesheetusers.date', '>=', $startDate)
              ->where('timesheetusers.date', '<=', $endDate);
          })
          ->when($startDate && $endDate && $assignmentId, function ($query) use ($startDate, $endDate, $assignmentId) {
            // dd('assignmentId');
            return $query->where('timesheetusers.assignmentgenerate_id', $assignmentId)
              ->where('timesheetusers.date', '>=', $startDate)
              ->where('timesheetusers.date', '<=', $endDate);
          })
          ->when($startDate && $endDate && $teammemberId == null && $clientId == null && $assignmentId == null, function ($query) use ($startDate, $endDate) {
            // dd('year');
            return $query->where('timesheetusers.date', '>=', $startDate)
              ->where('timesheetusers.date', '<=', $endDate);
          })
          ->whereIn('timesheetusers.status', [1, 2, 3])
          ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
          ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
          ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
          ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
          ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'clients.client_code', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername', 'patnerid.staffcode as patnerstaffcode', 'assignmentbudgetings.assignmentname')
          ->orderBy('date', 'DESC')
          ->get();
        $request->flash();
        return view('backEnd.timesheet.timesheetdownload', compact('timesheetData', 'teammembers', 'clientsname', 'assignmentsname', 'assignmentId'));
      }
    }
  }







Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php

  public function timesheet_mylist()
  {
    if (auth()->user()->role_id == 13) {
      // die;
      $client = Client::select('id', 'client_name')->get();
      $getauth =  DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', '0')
        ->orderby('id', 'desc')->first();

      $dropdownYears = DB::table('timesheets')
        ->where('created_by', auth()->user()->teammember_id)
        ->select(DB::raw('YEAR(date) as year'))
        ->distinct()->orderBy('year', 'DESC')->pluck('year');
      $dropdownYears = DB::table('timesheets')
        ->where('created_by', auth()->user()->teammember_id)
        ->select(DB::raw('YEAR(date) as year'))
        ->distinct()->orderBy('year', 'DESC')->pluck('year');


      $dropdownMonths = DB::table('timesheets')
        ->where('created_by', auth()->user()->teammember_id)
        ->distinct()
        ->pluck('month');

      $partner = Teammember::where('role_id', '=', 11)->where('status', '=', 1)->where('team_member', '!=', 'Partner')->with('title')->get();

      $currentDate = now();


      $month = $currentDate->format('F');
      $year = $currentDate->format('Y');

      //	  $time =  DB::table('timesheets')->get();
      // foreach ($time as $value) {
      //dd(date('F', strtotime($value->date)));
      //      DB::table('timesheets')->where('id',$value->id)->update([	
      //          'month'         =>     date('F', strtotime($value->date)),
      //           ]);
      // }
      $teammember = DB::table('timesheets')
        ->leftjoin('timesheetusers', 'timesheetusers.timesheetid', 'timesheets.id')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheets.created_by')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('timesheetusers.partner', auth()->user()->teammember_id)
        ->select('teammembers.id', 'teammembers.team_member', 'roles.rolename')->distinct()->get();
      //  dd($teammember);
      $month = DB::table('timesheets')
        ->select('timesheets.month')->distinct()->get();

      $result = DB::table('timesheetusers')->select(DB::raw('YEAR(date) as year'))
        ->distinct()->orderBy('year', 'DESC')->limit(5)->get();
      $years = $result->pluck('year');

      $timesheetData = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->where('timesheetusers.createdby', auth()->user()->teammember_id)
        ->where('timesheetusers.status', 0)
        ->select('timesheetusers.*', 'teammembers.team_member', 'assignmentbudgetings.assignmentname')->orderBy('date', 'ASC')
        ->paginate(14);
      // dd($timesheetData);
      $getauthh =  DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->orderby('id', 'desc')->first();
      $timesheetrequest = DB::table('timesheetrequests')->where('createdby', auth()->user()->teammember_id)->orderBy('id', 'DESC')->first();

      if ($getauthh  == null) {
        return view('backEnd.timesheet.firstindex', compact('timesheetData', 'getauth', 'client', 'partner'));
      } else {
        return view('backEnd.timesheet.index', compact('timesheetrequest', 'partner', 'client', 'getauth', 'dropdownMonths', 'timesheetData', 'year', 'dropdownYears', 'month', 'teammember', 'month', 'years'));
      }
    } else {

      $dropdownYears = DB::table('timesheets')
        ->where('created_by', auth()->user()->teammember_id)
        ->select(DB::raw('YEAR(date) as year'))
        ->distinct()->orderBy('year', 'DESC')->pluck('year');

      $dropdownMonths = DB::table('timesheets')
        ->where('created_by', auth()->user()->teammember_id)
        ->distinct()
        ->pluck('month');

      $currentDate = now();


      $month = $currentDate->format('F');
      $year = $currentDate->format('Y');

      $getauths =  DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', '1')
        ->orderby('id', 'desc')->first();
      if ($getauths != null) {
        $currentDate = now();
        $currentDateformate = $currentDate->format('Y-m-d');
        $getauth =  DB::table('timesheetusers')
          ->where('createdby', auth()->user()->teammember_id)
          ->where('date', '<=', $currentDateformate)
          ->where('status', '0')
          ->orderby('id', 'desc')->first();
        // dd($getauth);
      } else {
        $getauth =  DB::table('timesheetusers')
          ->where('createdby', auth()->user()->teammember_id)
          ->where('status', '0')
          ->orderby('id', 'desc')->first();
        //dd($getauth);
      }

      $getauthh =  DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->orderby('id', 'desc')->first();


      $client = Client::select('id', 'client_name')->get();
      $timesheetData = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->where('timesheetusers.createdby', auth()->user()->teammember_id)
        ->where('timesheetusers.status', 0)
        //   ->where('timesheets.month', $month)
        //  ->whereRaw('YEAR(timesheetusers.date) = ?', [$year])
        ->select('timesheetusers.*', 'teammembers.team_member', 'assignmentbudgetings.assignmentname')->orderBy('date', 'ASC')
        ->paginate(14);
      //  dd($timesheetData);
      $partner = Teammember::whereNotIn('id', [887, 663])->where('role_id', '=', 13)->where('status', '=', 1)->with('title')
        ->orderBy('team_member', 'asc')->get();

      $timesheetrequest = DB::table('timesheetrequests')->where('createdby', auth()->user()->teammember_id)->orderBy('id', 'DESC')->first();

      if ($getauthh  == null) {
        return view('backEnd.timesheet.firstindex', compact('timesheetData', 'getauth', 'client', 'partner'));
      } else {
        return view('backEnd.timesheet.index', compact(
          'timesheetData',
          'getauth',
          'client',
          'partner',
          'timesheetrequest',
          'dropdownYears',
          'dropdownMonths',
          'month',
          'year',
        ));
      }
    }
  }





Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\index.blade.php

 <table id="examplee" class="display nowrap">
                            <thead>

                                <tr>
                                    <th style="display: none;">id</th>
                                    <!--	@if (
                                        (now()->isSaturday() && now()->hour >= 18) ||
                                            now()->isSunday() ||
                                            now()->isMonday() ||
                                            (now()->isTuesday() && now()->hour <= 18))
    <th><button type="submit"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    onclick="return confirm('Are you sure you want to submit this item?');"
formaction="timesheetsubmits" class="btn btn-danger-soft btn-sm">Submit</button>
input type="checkbox" id="chkAll">
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   <i class="os-icon os-icon-trash"></i></th>
    @endif -->
                                    <th>Status</th>
                                    <th>Date</th>
                                    <th>Day</th>
                                    <th>Client Name</th>
                                    <th>Client Code</th>
                                    <th>Assignment Name</th>
                                    <th>Work Item</th>
                                    <th>Location</th>
                                    <th>Partner</th>
                                    <th>Hour</th>
                                    <th>Total Hour</th>
                                    <th>Action</th>

                                </tr>
                            </thead>
                            <tbody>

                                @foreach ($timesheetData as $timesheetDatas)
                                    <tr>
                                        @php
                                            $timeid = DB::table('timesheetusers')
                                                ->where('timesheetusers.id', $timesheetDatas->id)
                                                ->first();

                                            $client_id = DB::table('timesheetusers')
                                                ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
                                                ->leftjoin(
                                                    'assignmentbudgetings',
                                                    'assignmentbudgetings.assignment_id',
                                                    'timesheetusers.assignment_id',
                                                )
                                                ->leftjoin(
                                                    'assignments',
                                                    'assignments.id',
                                                    'timesheetusers.assignment_id',
                                                )
                                                ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.partner')
                                                ->leftJoin('teamrolehistory', function ($join) {
                                                    $join
                                                        ->on('teamrolehistory.teammember_id', '=', 'teammembers.id')
                                                        ->on(
                                                            'teamrolehistory.created_at',
                                                            '<',
                                                            'timesheetusers.created_at',
                                                        );
                                                })
                                                ->where('timesheetusers.id', $timesheetDatas->id)
                                                ->select(
                                                    'clients.client_name',
                                                    'clients.client_code',
                                                    'timesheetusers.hour',
                                                    'timesheetusers.location',
                                                    'timesheetusers.status',
                                                    'assignments.assignment_name',
                                                    'billable_status',
                                                    'workitem',
                                                    'teammembers.team_member',
                                                    'teammembers.staffcode',
                                                    'teamrolehistory.newstaff_code',
                                                    'assignmentbudgetings.assignmentname',
                                                    'assignmentbudgetings.assignmentgenerate_id',
                                                )
                                                ->first();

                                            $total = DB::table('timesheetusers')

                                                ->where('timesheetusers.timesheetid', $timesheetDatas->timesheetid)
                                                ->sum('hour');
                                            //	dd($total);
                                            $dates = date('l', strtotime($timesheetDatas->date));

                                        @endphp
                                        <td style="display: none;">{{ $timesheetDatas->id }}</td>
                                        <td>
                                            @if ($client_id->status == 0)
                                                <span class="badge badge-pill badge-warning">saved</span>
                                            @else
                                                <span class="badge badge-pill badge-danger">submit</span>
                                            @endif
                                        </td>

                                        @php

                                            $date = $timesheetDatas->date;

                                            $leaves = DB::table('applyleaves')
                                                ->where('applyleaves.createdby', auth()->user()->teammember_id)
                                                ->where('status', '!=', 2)
                                                ->select('applyleaves.from', 'applyleaves.to')
                                                ->get();

                                            $leavesWithinRange = $leaves->filter(function ($leave) use ($date) {
                                                return $leave->from <= $date && $leave->to >= $date;
                                            });

                                            //dd($leavesWithinRange);

                                        @endphp

                                        <td> <span style="display: none;">
                                                {{ date('Y-m-d', strtotime($timesheetDatas->date)) }}</span>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                        </td>

                                        <td>
                                            @if ($timesheetDatas->date != null)
                                                {{ $dates ?? '' }}
                                            @endif
                                        </td>


                                        <td>
                                            {{ $client_id->client_name ?? '' }}
                                            @if (count((array) $client_id->client_name) > 1)
                                                ,
                                            @endif
                                        </td>
                                        <td>
                                            {{ $client_id->client_code ?? '' }}
                                            @if (count((array) $client_id->client_code) > 1)
                                                ,
                                            @endif
                                        </td>

                                        <td>

                                            {{ $client_id->assignment_name ?? '' }} (
                                            {{ $client_id->assignmentgenerate_id ?? '' }})
                                            @if ($timesheetDatas->assignmentname != null)
                                                ({{ $timesheetDatas->assignmentname ?? '' }})
                                            @endif
                                            @if (count((array) $client_id->assignment_name) > 1)
                                                ,
                                            @endif
                                        </td>
                                        <td>
                                            {{ $client_id->workitem ?? '' }}
                                            @if (count((array) $client_id->workitem) > 1)
                                                ,
                                            @endif
                                        </td>

                                        <td>
                                            {{ $client_id->location ?? '' }}
                                            @if (count((array) $client_id->location) > 1)
                                                ,
                                            @endif
                                        </td>

                                        <td>
                                            {{ $client_id->team_member ?? '' }} (
                                            {{ $client_id->newstaff_code ?? ($client_id->staffcode ?? '') }})
                                            @if (count((array) $client_id->team_member) > 1)
                                                ,
                                            @endif
                                        </td>

                                        <td>
                                            {{ $client_id->hour ?? '' }}
                                            @if (count((array) $client_id->hour) > 1)
                                                ,
                                            @endif
                                        </td>
                                        <td>{{ $total }}</td>
                                        <td>
                                            @if ($client_id->status == 0)
                                                @if ($leavesWithinRange->isEmpty())
                                                    <a href="{{ url('/timesheet/destroy/' . $timesheetDatas->timesheetid) }}"
                                                        onclick="return confirm('Are you sure you want to delete this item?');"
                                                        class="btn btn-danger-soft btn-sm"><i
                                                            class="far fa-trash-alt"></i></a>
                                                @endif
                                            @else
                                                delete blocked
                                            @endif
                                        </td>
                                    </tr>
                                @endforeach
                            </tbody>
                        </table>







Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php



  public function partnersubmitted()
  {
    // Fetch timesheet data with necessary joins
    $get_datess = DB::table('timesheetreport')
      ->leftjoin('teammembers', 'teammembers.id', 'timesheetreport.teamid')
      ->leftJoin('teamrolehistory', function ($join) {
        $join->on('teamrolehistory.teammember_id', '=', 'teammembers.id')
          ->on('teamrolehistory.created_at', '<', 'timesheetreport.created_at');
      })
      ->leftjoin('teammembers as partners', 'partners.id', 'timesheetreport.partnerid')
      ->where('timesheetreport.teamid', auth()->user()->teammember_id)
      ->select('timesheetreport.*', 'teamrolehistory.newstaff_code', 'teammembers.team_member', 'partners.team_member as partnername', 'teammembers.staffcode')
      ->latest()
      ->get();

    // Fetch the first permission timesheet record for the authenticated user
    $permissiontimesheet = DB::table('timesheetreport')
      ->where('timesheetreport.teamid', auth()->user()->teammember_id)
      ->first();

    // Group data by week and map the necessary attributes
    $groupedData = $get_datess->groupBy('week')->map(function ($group) {
      $firstItem = $group->first();

      return (object)[
        'id' => $firstItem->id,
        'teamid' => $firstItem->teamid,
        'week' => $firstItem->week,
        'totaldays' => $group->sum('totaldays'),
        'totaltime' => $group->sum('totaltime'),
        'startdate' => $firstItem->startdate,
        'enddate' => $firstItem->enddate,
        'partnername' => $firstItem->partnername,
        'created_at' => $firstItem->created_at,
        'team_member' => $firstItem->team_member,
        'partnerid' => $firstItem->partnerid,
        'staffcode' => $firstItem->newstaff_code ?? $firstItem->staffcode,
      ];
    });

    // Convert the grouped data to a collection
    $get_date = collect($groupedData->values());

    // Return the view with the grouped data and permission timesheet
    return view('backEnd.timesheet.myteamindex', compact('get_date', 'permissiontimesheet'));
  }




Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\myteamindex.blade.php

                          @if (Auth::user()->role_id == 11 || (Auth::user()->role_id == 13 && Request::is('timesheet/teamlist')))
                              <div class="col-4">
                                  <div class="form-group">
                                      <label class="font-weight-600">Team Name</label>
                                      <select class="language form-control" id="category7" name="teamname">
                                          <option value="">Please Select One</option>
                                          @php

                                              $displayedValues = [];

                                          @endphp
                                          @foreach ($get_date as $jobDatas)
                                              @if (!in_array($jobDatas->staffcode, $displayedValues))
                                                  <option value="{{ $jobDatas->teamid }}">
                                                      {{ $jobDatas->team_member }}(
                                                      {{ $jobDatas->newstaff_code ?? ($jobDatas->staffcode ?? '') }})
                                                  </option>
                                                  @php
                                                      $displayedValues[] = $jobDatas->staffcode;
                                                  @endphp
                                              @endif
                                          @endforeach
                                      </select>
                                  </div>
                              </div>
                          @endif







Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\myteamindex.blade.php

  <script>
      $(document).ready(function() {
          // Define a function for handling filter changes
          function handleFilterChange() {
              var search1 = $('#category1').val();
              var search4 = $('#category4').val();
              var search7 = $('#category7').val();
              var search8 = $('#start').val();
              var search9 = $('#end').val();

              $.ajax({
                  type: 'GET',
                  url: '/filter-dataadmin',
                  data: {
                      partnersearch: search1,
                      totalhours: search4,
                      teamname: search7,
                      start: search8,
                      end: search9
                  },
                  success: function(data) {
                      $('table tbody').html(""); // Clear the table body

                      if (data.length === 0) {
                          $('table tbody').append(
                              '<tr><td colspan="5" class="text-center">No data found</td></tr>');
                      } else {
                          $.each(data, function(index, item) {
                              var url = '/weeklylist?id=' + item.id +
                                  '&teamid=' + item.teamid +
                                  '&partnerid=' + item.partnerid +
                                  '&startdate=' + item.startdate +
                                  '&enddate=' + item.enddate;

                              var formattedDate = moment(item.created_at).format(
                                  'DD-MM-YYYY');
                              var formattedTime = moment(item.created_at).format('hh:mm A');

                              @if (Auth::user()->role_id == 11)
                                  // Add the rows to the table
                                  $('table tbody').append('<tr>' +
                                      '<td><a href="' + url + '">' + item.team_member +
                                      '</a></td>' +
                                      '<td>' + (item.newstaff_code ? item.newstaff_code :
                                          item.staffcode) + '</td>' +
                                      '<td>' + item.week + '</td>' +
                                      '<td>' + formattedDate + ' ' + formattedTime +
                                      '</td>' +
                                      '<td>' + (item.dayscount != 0 ? item.dayscount :
                                          item.totaldays) + '</td>' +
                                      '<td>' + item.totaltime + '</td>' +
                                      '</tr>');
                              @else
                                  // Add the rows to the table
                                  $('table tbody').append('<tr>' +
                                      '<td><a href="' + url + '">' + item.team_member +
                                      '</a></td>' +
                                      '<td>' + (item.newstaff_code ? item.newstaff_code :
                                          item.staffcode) + '</td>' +
                                      '<td>' + item.week + '</td>' +
                                      '<td>' + formattedDate + ' ' + formattedTime +
                                      '</td>' +
                                      '<td>' + item.totaldays + '</td>' +
                                      '<td>' + item.totaltime + '</td>' +
                                      '</tr>');
                              @endif
                          });

                          $('.paging_simple_numbers').remove();
                          $('.dataTables_info').remove();
                      }
                  }
              });
          }

          // Handle change events for all filters
          $('#category1, #category4, #category7').change(handleFilterChange);
          $('#end').change(handleFilterChange);
      });
  </script>




Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php

  public function weeklylist(Request $request)
  {
    // dd($request);
    if (auth()->user()->role_id == 13) {

      $date = DB::table('timesheetreport')->where('id', $request->id)->first();
      $timesheetData = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->where('timesheetusers.createdby', $request->teamid)
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->where('timesheetusers.date', '>=', $date->startdate)
        ->where('timesheetusers.date', '<=', $date->enddate)
        ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        // ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername', 'assignmentbudgetings.assignmentname')
        ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'clients.client_code', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername', 'patnerid.staffcode as patnerstaffcodee', 'assignmentbudgetings.assignmentname')
        ->orderBy('id', 'ASC')
        //   ->orderBy('date', 'DESC')
        ->get();
    } else {
      $date = DB::table('timesheetreport')->where('id', $request->id)->first();
      $timesheetData = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->where('timesheetusers.createdby', $request->teamid)
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->where('timesheetusers.date', '>=', $date->startdate)
        ->where('timesheetusers.date', '<=', $date->enddate)
        ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'clients.client_code', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername', 'patnerid.staffcode as patnerstaffcodee', 'assignmentbudgetings.assignmentname')
        ->orderBy('id', 'ASC')
        ->get();
      // dd($timesheetData);
    }
    return view('backEnd.timesheet.weeklylist', compact('timesheetData'));
  }








Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\weeklylist.blade.php

                    <table class="table display table-bordered table-striped table-hover basic">
                        <thead>
                            <tr>
                                <th style="display: none;">id</th>
                                <th>Employee Name</th>
                                <th>Staff Code</th>
                                <th>Date</th>
                                <th>Day</th>
                                <th>Client Name</th>
                                <th>Assignment Name</th>
                                <th>Work Item</th>
                                <th>Location</th>
                                <th>Partner</th>
                                <th>Hour</th>
                                <th>Status</th>
                                @if (Auth::user()->role_id == 11 || Auth::user()->teammember_id != $timesheetData[0]->createdby)
                                    <th>Action</th>
                                @endif
                            </tr>
                        </thead>

                        <tbody>
                            @foreach ($timesheetData as $timesheetDatas)
                                <tr>
                                    @php

                                        $permotioncheck = DB::table('teamrolehistory')
                                            ->where('teammember_id', $timesheetDatas->createdby)
                                            ->first();

                                        $datadate = Carbon\Carbon::createFromFormat(
                                            'Y-m-d H:i:s',
                                            $timesheetDatas->created_at,
                                        );

                                        $permotiondate = null;
                                        if ($permotioncheck) {
                                            $permotiondate = Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $permotioncheck->created_at,
                                            );
                                        }

                                    @endphp
                                    <td style="display: none;">{{ $timesheetDatas->id }}</td>
                                    <td> {{ $timesheetDatas->team_member ?? '' }} </td>
                                    {{-- <td> {{ $timesheetDatas->staffcode ?? '' }} </td> --}}
                                    @if ($permotiondate && $datadate->greaterThan($permotiondate))
                                        <td>{{ $permotioncheck->newstaff_code }}</td>
                                    @else
                                        <td>{{ $timesheetDatas->staffcode }}</td>
                                    @endif
                                    <td> <span style="display: none;">
                                            {{ date('Y-m-d', strtotime($timesheetDatas->date)) }}</span>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                    </td>
                                    <td>
                                        @if ($timesheetDatas->date != null)
                                            {{ date('l', strtotime($timesheetDatas->date)) }}
                                        @endif
                                    </td>
                                    <td>{{ $timesheetDatas->client_name ?? '' }} ({{ $timesheetDatas->client_code ?? '' }})
                                    </td>
                                    <td>
                                        {{ $timesheetDatas->assignment_name ?? '' }} (
                                        {{ $timesheetDatas->assignmentgenerate_id ?? '' }})
                                        @if ($timesheetDatas->assignmentname != null)
                                            ({{ $timesheetDatas->assignmentname ?? '' }})
                                        @endif
                                    </td>
                                    <td> {{ $timesheetDatas->workitem ?? '' }}</td>
                                    <td>{{ $timesheetDatas->location ?? '' }} </td>
                                    <td> {{ $timesheetDatas->patnername ?? '' }}
                                        ({{ $timesheetDatas->patnerstaffcodee ?? '' }})
                                    </td>
                                    <td>{{ $timesheetDatas->hour ?? '' }}</td>
                                    <td>
                                        @if ($timesheetDatas->status == 0)
                                            <span class="badge badge-pill badge-warning">Saved</span>
                                        @elseif ($timesheetDatas->status == 1 || $timesheetDatas->status == 3)
                                            <span class="badge badge-pill badge-danger">Submit</span>
                                        @else
                                            <span class="badge badge-pill badge-secondary">Rejected</span>
                                        @endif
                                    </td>
                                    @if (Auth::user()->role_id == 11 || Auth::user()->teammember_id != $timesheetDatas->createdby)
                                        <td>
                                            @if ($timesheetDatas->status == 2)
                                                <a href="  {{ url('/timesheet/reject/' . $timesheetDatas->id) }}"
                                                    onclick="return confirm('Are you sure you want to Reject this timesheet?');">
                                                    <button class="btn btn-danger" data-toggle="modal"
                                                        style="height: 16px; width: auto; border-radius: 7px; display: flex; align-items: center; justify-content: center;font-size: 11px;"
                                                        data-target="#requestModal" disabled>Reject</button>
                                                </a>
                                            @else
                                                <a href="  {{ url('/timesheet/reject/' . $timesheetDatas->id) }}"
                                                    onclick="return confirm('Are you sure you want to Reject this timesheet?');">
                                                    <button class="btn btn-danger" data-toggle="modal"
                                                        style="height: 16px; width: auto; border-radius: 7px; display: flex; align-items: center; justify-content: center;font-size: 11px;"
                                                        data-target="#requestModal">Reject</button>
                                                </a>
                                            @endif
                                        </td>
                                    @endif
                                </tr>
                            @endforeach
                        </tbody>
                    </table>







Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php

  public function rejectedlist(Request $request)
  {

    if (auth()->user()->role_id == 13) {
      $timesheetData = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->where('timesheetusers.createdby', auth()->user()->teammember_id)
        // ->where('timesheetusers.status', 2)
        ->whereIn('timesheetusers.status', [2, 3])
        ->select('timesheetusers.*', 'teammembers.team_member', 'teammembers.staffcode')->orderBy('id', 'ASC')->paginate(10);
      // dd($timesheetData);
    } else if (auth()->user()->role_id == 11) {
      $timesheetData = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->whereIn('timesheetusers.status', [2, 3])
        ->where('timesheetusers.rejectedby', auth()->user()->teammember_id)
        ->select('timesheetusers.*', 'teammembers.team_member', 'teammembers.staffcode')->orderBy('id', 'ASC')->get();
    } else {
      $timesheetData = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->where('timesheetusers.createdby', auth()->user()->teammember_id)
        ->whereIn('timesheetusers.status', [2, 3])
        ->select('timesheetusers.*', 'teammembers.team_member', 'teammembers.staffcode')->orderBy('id', 'ASC')->paginate(10);
      // dd($timesheetData);
    }
    // dd($timesheetData);
    return view('backEnd.timesheet.rejectedlist', compact('timesheetData'));
  }





Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\rejectedlist.blade.php

                    <table id="examplee" class="table display table-bordered table-striped table-hover">
                        <thead>
                            <tr>
                                <th style="display: none;">id</th>

                                <th>Employee Name</th>
                                <th>Staff Code</th>
                                <th>Date</th>
                                <th>Day</th>
                                <th>Client Name</th>
                                <th>Assignment Name</th>

                                <th>Work Item</th>
                                <th>Location</th>
                                <th>Partner</th>
                                {{-- <th>Hour</th> --}}
                                <th>Total Hour</th>
                                <th>Status</th>

                                @if (Auth::user()->role_id == 13 || Auth::user()->role_id == 14 || Auth::user()->role_id == 15)
                                    <th>Action</th>
                                @endif


                            </tr>
                        </thead>
                        <tbody>
                            @foreach ($timesheetData as $timesheetDatas)
                                <tr>

                                    @php

                                        $timeid = DB::table('timesheetusers')
                                            ->where('timesheetusers.timesheetid', $timesheetDatas->timesheetid)
                                            ->first();

                                        $client_id = DB::table('timesheetusers')
                                            ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
                                            ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
                                            ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.partner')
                                            ->where('timesheetusers.timesheetid', $timesheetDatas->timesheetid)
                                            ->select(
                                                'clients.client_name',
                                                'clients.client_code',
                                                'timesheetusers.hour',
                                                'timesheetusers.location',
                                                'timesheetusers.*',
                                                'assignments.assignment_name',
                                                'billable_status',
                                                'workitem',
                                                'teammembers.team_member',
                                                'teammembers.staffcode',
                                                'timesheetusers.timesheetid',
                                            )
                                            ->get();
                                        // dd($client_id);
                                        $total = DB::table('timesheetusers')

                                            ->where('timesheetusers.timesheetid', $timesheetDatas->timesheetid)
                                            ->sum('hour');

                                        $dates = date('l', strtotime($timesheetDatas->date));

                                        $permotioncheck = DB::table('teamrolehistory')
                                            ->where('teammember_id', $timesheetDatas->createdby)
                                            ->first();

                                        $datadate = Carbon\Carbon::createFromFormat('Y-m-d', $timesheetDatas->date);

                                        $permotiondate = null;
                                        if ($permotioncheck) {
                                            $permotiondate = Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $permotioncheck->created_at,
                                            );
                                        }

                                    @endphp


                                    <td style="display: none;">{{ $timesheetDatas->id }}</td>

                                    <td>
                                        {{ $timesheetDatas->team_member ?? '' }} </td>
                                    {{-- <td> {{ $timesheetDatas->staffcode ?? '' }} </td> --}}
                                    @if ($permotiondate && $datadate->greaterThan($permotiondate))
                                        <td>{{ $permotioncheck->newstaff_code }}</td>
                                    @else
                                        <td>{{ $timesheetDatas->staffcode }}</td>
                                    @endif
                                    <td>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                    </td>
                                    <td>
                                        @if ($timesheetDatas->date != null)
                                            {{ $dates ?? '' }}
                                        @endif
                                    </td>
                                    <span style="font-size: 13px;">
                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->client_name ?? '' }} ({{ $item->client_code ?? '' }})
                                                @if ($item->client_name != 0)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>
                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->assignment_name ?? '' }}
                                                ({{ $item->assignmentgenerate_id ?? '' }})
                                                @if ($item->assignment_name != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>

                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->workitem ?? '' }}@if ($item->workitem != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>

                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->location ?? '' }}@if ($item->location != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>
                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->team_member ?? '' }} ( {{ $item->staffcode ?? '' }})
                                                @if ($item->team_member != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>
                                        <td>{{ $total }}</td>
                                        <td>
                                            {{-- @php
                                                dd($client_id);
                                            @endphp --}}
                                            @foreach ($client_id as $item)
                                                @if ($item->status == 0)
                                                    <span class="badge badge-pill badge-warning">saved</span>
                                                @elseif ($item->status == 1)
                                                    <span class="badge badge-pill badge-danger">submit</span>
                                                @elseif ($item->status == 3)
                                                    <span class="badge badge-pill badge-info">Submitted</span>
                                                @else
                                                    <span class="badge badge-pill badge-secondary">Rejected</span>
                                                @endif
                                            @endforeach
                                        </td>

                                        @if (Auth::user()->role_id == 13 || Auth::user()->role_id == 14 || Auth::user()->role_id == 15)
                                            <td>
                                                @foreach ($client_id as $item)
                                                    @if ($item->status == 2)
                                                        <a href="{{ url('/timesheetreject/edit/' . $item->timesheetid) }}"
                                                            class="btn btn-info-soft btn-sm"><i class="far fa-edit"></i></a>
                                                    @endif
                                                @endforeach
                                            </td>
                                        @endif

                                </tr>
                                <div class="modal fade" id="exampleModal12" tabindex="-1" role="dialog"
                                    aria-labelledby="exampleModalLabel4" aria-hidden="true">
                                    <div class="modal-dialog" role="document">
                                        <div class="modal-content">
                                            <form id="detailsForm" method="post" action="{{ url('/timesheet/submit') }}"
                                                enctype="multipart/form-data" style="margin-bottom: 0px;">
                                                @csrf
                                                <div class="modal-header" style="background:#37A000;color:white; m-5">
                                                    <h5 class="modal-title font-weight-600" id="exampleModalLabel4">Update
                                                        Timesheet</h5>
                                                    <div>
                                                        <ul>
                                                            @foreach ($errors->all() as $e)
                                                                <li style="color:red;">{{ $e }}</li>
                                                            @endforeach
                                                        </ul>
                                                    </div>
                                                    <button style="color: white" type="button" class="close"
                                                        data-dismiss="modal" aria-label="Close">
                                                        <span aria-hidden="true">&times;</span>
                                                    </button>
                                                </div>
                                                <div class="modal-body">

                                                    <div class="row row-sm">
                                                        {{-- <label for="name" class="col-sm-3 col-form-label font-weight-600">Name :</label> --}}
                                                        <div class="col-sm-12">
                                                            <input type="text" readonly id="teamname"
                                                                class="form-control" placeholder="Enter Name">
                                                            <input hidden class="form-control" id="timesheetid"
                                                                name="timesheetid" type="text">
                                                        </div>
                                                    </div>

                                                    <br>
                                                    @php

                                                        $clientlist = DB::table('clients')
                                                            ->select('clients.client_name', 'clients.id')
                                                            ->get();
                                                        $partner = DB::table('teammembers')
                                                            ->select('teammembers.team_member', 'teammembers.id')
                                                            ->get();
                                                        // dd($partner);
                                                        $assignmentlist = DB::table('assignments')
                                                            ->select('assignments.assignment_name', 'assignments.id')
                                                            ->get();
                                                    @endphp
                                                    <br>

                                                    <div class="row row-sm">
                                                        {{-- <label for="name" class="col-sm-3 col-form-label font-weight-600">Name :</label> --}}
                                                        <div class="col-sm-6">
                                                            <label for="">Select Client</label>
                                                            <select class="form-control" name="client_id" id="client_id">
                                                                <option value="">Select Client</option>
                                                                @foreach ($clientlist as $city)
                                                                    <option value="{{ $city->id }}">
                                                                        {{ $city->client_name }}</option>
                                                                @endforeach
                                                            </select>
                                                        </div>
                                                        {{-- <label for="name" class="col-sm-3 col-form-label font-weight-600">Name :</label> --}}
                                                        <div class="col-sm-6">
                                                            <label for="">Select Assignment</label>
                                                            <select class="form-control" name="assignment_id"
                                                                id="assignment_id">
                                                                <option value="">Select Assignment</option>
                                                                @foreach ($assignmentlist as $assignmentlistData)
                                                                    <option value="{{ $assignmentlistData->id }}">
                                                                        {{ $assignmentlistData->assignment_name }}</option>
                                                                @endforeach
                                                            </select>
                                                        </div>
                                                    </div>

                                                    <br>

                                                    <div class="row row-sm">
                                                        {{-- <label for="name" class="col-sm-3 col-form-label font-weight-600">Name :</label> --}}
                                                        <div class="col-sm-6">
                                                            <label for="">Select Partner</label>
                                                            <select class="form-control" name="partner" id="partner">
                                                                <option value="">Select Partner</option>
                                                                @foreach ($partner as $partnerData)
                                                                    <option value="{{ $partnerData->id }}">
                                                                        {{ $partnerData->team_member }}</option>
                                                                @endforeach
                                                            </select>
                                                        </div>
                                                        <div class="col-sm-6">
                                                            <label for="">Employee Name</label>
                                                            <input required type="text" name="workitem" id="workitem"
                                                                class="form-control" placeholder="Enter Employee Name">
                                                        </div>
                                                    </div>
                                                    <br>
                                                    <div class="row row-sm">
                                                        <div class="col-sm-6">
                                                            <label for="">Location</label>
                                                            <input required type="text" name="location" id="location"
                                                                class="form-control" placeholder="Enter Location">
                                                        </div>
                                                        <div class="col-sm-6">
                                                            <label for="">Work Item</label>
                                                            <input required type="text" name="totalhour"
                                                                id="totalhour" class="form-control"
                                                                placeholder="Enter Name">
                                                        </div>
                                                    </div>
                                                    <br>
                                                    <div class="row row-sm">
                                                        <div class="col-sm-6">
                                                            <label for="">Total Hour</label>
                                                            <input required type="text" name="location" id="location"
                                                                class="form-control" placeholder="Enter Location">
                                                        </div>
                                                    </div>
                                                    <br>

                                                    <div class="modal-footer">
                                                        <button type="button" class="btn btn-danger"
                                                            data-dismiss="modal">Close</button>
                                                        <button type="submit" class="btn btn-success">Submit</button>
                                                    </div>
                                            </form>

                                        </div>
                                    </div>
                                </div>



                                {{-- 2222222222222222222 --}}
                            @endforeach
                        </tbody>
                    </table>



Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ClientController.php

    public function viewClient($id)
    {
        if (auth()->user()->role_id == 11 || auth()->user()->role_id == 13) {
            $clientList =  DB::table('clients')
                ->leftjoin('states', 'states.id', 'clients.c_state')
                ->where('clients.id', $id)->select('clients.*', 'states.statename')->first();
            $clientcontactList =  Clientcontact::where('client_id', $id)->get();
            // dd($clientcontactList);
            $clientassignment =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->where('assignmentbudgetings.client_id', $id)
                ->select(
                    'assignmentmappings.*',
                    'assignmentbudgetings.duedate',
                    'assignmentbudgetings.assignmentname',
                    'assignmentbudgetings.status',
                    'assignments.assignment_name',
                    'clients.client_code',
                    'clients.client_name'
                )->distinct()->get();

            $clientfileDatas = DB::table('clientdocuments')
                ->leftjoin('users', 'users.id', 'clientdocuments.created_by')
                ->leftjoin('clients', 'clients.id', 'clientdocuments.client_id')
                ->leftjoin('teammembers', 'teammembers.id', 'users.teammember_id')
                ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
                ->where('clientdocuments.client_id', $id)
                ->select('clientdocuments.*', 'teammembers.team_member', 'roles.rolename', 'clients.client_name')->get();

            if (auth()->user()->teammember_id == 214) {
                $clientfile  =  DB::table('clientfolders')
                    ->where('createdby', '214')
                    ->where('client_id', $id)->get();
            } else {
                $clientfile  =  DB::table('clientfolders')
                    ->where('client_id', $id)->get();
            }


            $clientlogin  =  DB::table('clientlogs')
                ->leftjoin('clientlogins', 'clientlogins.id', 'clientlogs.clientlogin_id')
                ->where('clientlogs.client_id', $id)
                ->select('clientlogs.*', 'clientlogins.name', 'clientlogins.email')->get();
        } else {


            $clientList =  DB::table('clients')
                ->leftjoin('states', 'states.id', 'clients.c_state')
                ->where('clients.id', $id)->select('clients.*', 'states.statename')->first();
            $clientcontactList =  Clientcontact::where('client_id', $id)->get();

            // dd(auth()->user()->teammember_id);
            $clientassignment =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->where('assignmentbudgetings.client_id', $id)
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
                ->select(
                    'assignmentmappings.*',
                    'assignmentbudgetings.duedate',
                    'assignmentbudgetings.assignmentname',
                    'assignmentbudgetings.status',
                    'assignments.assignment_name',
                    'clients.client_code',
                    'clients.client_name'
                )->distinct()->get();

            $clientfileDatas = DB::table('clientdocuments')
                ->leftjoin('users', 'users.id', 'clientdocuments.created_by')
                ->leftjoin('clients', 'clients.id', 'clientdocuments.client_id')
                ->leftjoin('teammembers', 'teammembers.id', 'users.teammember_id')
                ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
                ->where('clientdocuments.client_id', $id)
                ->select('clientdocuments.*', 'teammembers.team_member', 'roles.rolename', 'clients.client_name')->get();

            if (auth()->user()->teammember_id == 214) {
                $clientfile  =  DB::table('clientfolders')
                    ->where('createdby', '214')
                    ->where('client_id', $id)->get();
            } else {
                $clientfile  =  DB::table('clientfolders')
                    ->where('client_id', $id)->get();
            }


            $clientlogin  =  DB::table('clientlogs')
                ->leftjoin('clientlogins', 'clientlogins.id', 'clientlogs.clientlogin_id')
                ->where('clientlogs.client_id', $id)
                ->select('clientlogs.*', 'clientlogins.name', 'clientlogins.email')->get();
        }
        return view('backEnd.clientlist', compact('id', 'clientlogin', 'clientfile', 'clientcontactList', 'clientList', 'clientassignment', 'clientfileDatas'));
    }







Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\clientlist.blade.php

     <table id="examplee" class="table display table-bordered table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th class="textfixed">Assignment Id</th>
                                        <th class="textfixed">Assignment</th>
                                        <th class="textfixed">Status</th>
                                        <th class="textfixed">Period Start</th>
                                        <th class="textfixed">Period End</th>
                                        <th class="textfixed">Deadline</th>
                                        <th class="textfixed">Assigned Partner</th>
                                        <th class="textfixed">Other Partner</th>
                                        <th class="textfixed">Team Leader</th>
                                        <th>Teammember</th>
                                        <!--   <th>Edit</th>-->
                                    </tr>
                                </thead>
                                <tbody>

                                    @foreach ($clientassignment as $clientassignmentDatas)
                                        <tr>
                                            <td>
                                                @if (auth()->user()->role_id == 13)
                                                    @if (
                                                        $clientassignmentDatas->leadpartner == auth()->user()->teammember_id ||
                                                            $clientassignmentDatas->otherpartner == auth()->user()->teammember_id)
                                                        <a
                                                            href="{{ url('/viewassignment/' . $clientassignmentDatas->assignmentgenerate_id) }}">{{ $clientassignmentDatas->assignmentgenerate_id }}
                                                        </a>
                                                    @else
                                                        {{ $clientassignmentDatas->assignmentgenerate_id }}
                                                    @endif
                                                @else
                                                    <a
                                                        href="{{ url('/viewassignment/' . $clientassignmentDatas->assignmentgenerate_id) }}">{{ $clientassignmentDatas->assignmentgenerate_id }}
                                                    </a>
                                                @endif
                                            </td>
                                            <td><span><b> Client Name :</b></span>
                                                {{ $clientassignmentDatas->client_name }}<br><span><b>Assignment
                                                        :</b></span>
                                                {{ $clientassignmentDatas->assignment_name }}
                                            </td>
                                            {{-- <td class="text-center"> --}}
                                            <td>
                                                @if ($clientassignmentDatas->status == 1)
                                                    <span class="badge badge-primary">Open</span>
                                                @elseif($clientassignmentDatas->status == 0)
                                                    <span class="badge badge-danger">Closed</span>
                                                @endif

                                            </td>
                                            <td class="textfixed">
                                                @if ($clientassignmentDatas->periodstart != null)
                                                    {{ date('d-m-Y', strtotime($clientassignmentDatas->periodstart)) }}
                                                @endif
                                            </td>
                                            <td class="textfixed">
                                                @if ($clientassignmentDatas->periodend != null)
                                                    {{ date('d-m-Y', strtotime($clientassignmentDatas->periodend)) }}
                                                @endif
                                            </td>
                                            <td class="textfixed">
                                                {{ date('d-m-Y', strtotime($clientassignmentDatas->duedate)) }}</td>
                                            {{-- <td>
                                                {{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $clientassignmentDatas->leadpartner)->first()->team_member ?? '' }}
                                                ({{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $clientassignmentDatas->leadpartner)->first()->staffcode ?? '' }})
                                            </td>
                                            <td>
                                                {{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $clientassignmentDatas->otherpartner)->first()->team_member ?? '' }}
                                                ({{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $clientassignmentDatas->otherpartner)->first()->staffcode ?? '' }})
                                            </td> --}}

                                            @php

                                                $leadpartner = DB::table('teammembers')
                                                    ->leftJoin(
                                                        'teamrolehistory',
                                                        'teamrolehistory.teammember_id',
                                                        '=',
                                                        'teammembers.id',
                                                    )
                                                    ->where('teammembers.id', $clientassignmentDatas->leadpartner)
                                                    ->select(
                                                        'teammembers.team_member',
                                                        'teammembers.staffcode',
                                                        'teamrolehistory.newstaff_code',
                                                    )
                                                    ->first();

                                                $otherPartner = DB::table('teammembers')
                                                    ->leftJoin(
                                                        'teamrolehistory',
                                                        'teamrolehistory.teammember_id',
                                                        '=',
                                                        'teammembers.id',
                                                    )
                                                    ->where('teammembers.id', $clientassignmentDatas->otherpartner)
                                                    ->select(
                                                        'teammembers.team_member',
                                                        'teammembers.staffcode',
                                                        'teamrolehistory.newstaff_code',
                                                    )
                                                    ->first();

                                            @endphp

                                            <td>
                                                {{ $leadpartner->team_member ?? '' }}
                                                @if ($leadpartner && $leadpartner->team_member)
                                                    ({{ $leadpartner->newstaff_code ?? ($leadpartner->staffcode ?? '') }})
                                                @endif
                                            </td>
                                            <td>
                                                {{ $otherPartner->team_member ?? '' }}
                                                @if ($otherPartner && $otherPartner->team_member)
                                                    (
                                                    {{ $otherPartner->newstaff_code ?? ($otherPartner->staffcode ?? '') }})
                                                @endif
                                            </td>
                                            <td>
                                                @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $clientassignmentDatas->id)->where('assignmentteammappings.type', 0)->get() as $sub)
                                                    {{-- @php
                                                        dd($sub);
                                                    @endphp --}}
                                                    @if ($sub->profilepic == null)
                                                        <a class="avatar avatar-xs" data-toggle="tooltip"
                                                            title="{{ $sub->team_member }}({{ $sub->staffcode }})">
                                                            <img src="{{ url('backEnd/image/dummy.png') }}"
                                                                class="avatar-img rounded-circle" alt="...">
                                                        @else
                                                            <a class="avatar avatar-xs" data-toggle="tooltip"
                                                                title="{{ $sub->team_member }}({{ $sub->staffcode }})">
                                                                <img src="{{ asset('backEnd/image/teammember/profilepic/' . $sub->profilepic) }}"
                                                                    class="avatar-img rounded-circle" alt="...">
                                                    @endif
                                                @endforeach
                                            </td>
                                            <td>
                                                @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $clientassignmentDatas->id)->where('assignmentteammappings.type', 2)->get() as $sub)
                                                    @if ($sub->profilepic == null)
                                                        <a class="avatar avatar-xs" data-toggle="tooltip"
                                                            title="{{ $sub->team_member }}({{ $sub->staffcode }})">
                                                            <img src="{{ url('backEnd/image/dummy.png') }}"
                                                                class="avatar-img rounded-circle" alt="...">
                                                        @else
                                                            <a class="avatar avatar-xs" data-toggle="tooltip"
                                                                title="{{ $sub->team_member }}({{ $sub->staffcode }})">
                                                                <img src="{{ asset('backEnd/image/teammember/profilepic/' . $sub->profilepic) }}"
                                                                    class="avatar-img rounded-circle" alt="...">
                                                    @endif
                                                @endforeach
                                            </td>

                                            <!--  <td>
a href="{{ url('/assignmentlist/' . $clientassignmentDatas->assignmentgenerate_id) }}"
class="btn btn-info-soft btn-sm"><i class="far fa-edit"></i></a>
td>-->
                                        </tr>
                                    @endforeach
                                </tbody>
                            </table>
							



Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php

  public function open_leave($id)
  {

    $permotioncheck = DB::table('teamrolehistory')
      ->where('teammember_id', auth()->user()->teammember_id)->first();

    if (auth()->user()->role_id == 11) {

      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.status', '0')
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->get();
      // dd($applyleaveDatas);
      return view('backEnd.applyleave.adminopen', compact(
        'teamapplyleaveDatas'
      ));
    } elseif ($permotioncheck && auth()->user()->role_id == 13) {
      // $myapplyleaveDatas  = DB::table('applyleaves')
      //   ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
      //   ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
      //   ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
      //   ->where('applyleaves.createdby', auth()->user()->teammember_id)
      //   ->where('applyleaves.status', 0)
      //   ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')
      //   ->latest()->get();

      $commonQuery  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.createdby', auth()->user()->teammember_id)
        ->where('applyleaves.status', 0)
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name');


      $databeforepermotion = (clone $commonQuery)
        ->whereDate('applyleaves.created_at', '<', $permotioncheck->created_at)
        ->addSelect('teammembers.staffcode')
        ->get();

      $dataafterpermotion = (clone $commonQuery)
        ->leftJoin('teamrolehistory as createdby_history', 'createdby_history.teammember_id', '=', 'teammembers.id')
        ->whereDate('applyleaves.created_at', '>', $permotioncheck->created_at)
        ->addSelect('createdby_history.newstaff_code')
        ->get();

      // dd($timesheetrequestspermotion);

      $myapplyleaveDatas = $databeforepermotion->merge($dataafterpermotion);




      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->where('applyleaves.status', 0)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->get();
      return view('backEnd.applyleave.openindex', compact(
        'myapplyleaveDatas',
        'teamapplyleaveDatas'
      ));
    } else {
      $myapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.createdby', auth()->user()->teammember_id)
        ->where('applyleaves.status', 0)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->latest()->get();
      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->where('applyleaves.status', 0)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->get();
      return view('backEnd.applyleave.openindex', compact(
        'myapplyleaveDatas',
        'teamapplyleaveDatas'
      ));
    }
  }







Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetrequestController.php

    public function open_timesheet($id)
    {

        $permotioncheck = DB::table('teamrolehistory')
            ->where('teammember_id', auth()->user()->teammember_id)->first();

        if (auth()->user()->role_id == 11 || auth()->user()->role_id == 18) {
            $timesheetrequestsDatas = DB::table('timesheetrequests')
                ->leftjoin('clients', 'clients.id', 'timesheetrequests.client_id')
                ->leftjoin('assignments', 'assignments.id', 'timesheetrequests.assignment_id')
                ->leftjoin('teammembers', 'teammembers.id', 'timesheetrequests.partner')
                ->leftjoin('teammembers as createdby', 'createdby.id', 'timesheetrequests.createdby')
                ->where('timesheetrequests.status', 0)
                ->select(
                    'timesheetrequests.*',
                    'clients.client_name',
                    'assignments.assignment_name',
                    'teammembers.team_member',
                    'teammembers.staffcode',
                    'createdby.team_member as createdbyauth',
                    'createdby.staffcode as staffcodeid',
                )->get();
            // dd($timesheetrequestsDatas);
        } elseif ($permotioncheck && auth()->user()->role_id == 13) {
            // Define the common parts of the query
            $commonQuery = DB::table('timesheetrequests')
                ->leftJoin('clients', 'clients.id', '=', 'timesheetrequests.client_id')
                ->leftJoin('assignments', 'assignments.id', '=', 'timesheetrequests.assignment_id')
                ->leftJoin('teammembers', 'teammembers.id', '=', 'timesheetrequests.partner')
                ->leftJoin('teammembers as createdby', 'createdby.id', '=', 'timesheetrequests.createdby')
                ->where('timesheetrequests.status', 0)
                ->where(function ($query) {
                    $query->where('timesheetrequests.partner', auth()->user()->teammember_id)
                        ->orWhere('timesheetrequests.createdby', auth()->user()->teammember_id);
                })
                ->select(
                    'timesheetrequests.*',
                    'clients.client_name',
                    'assignments.assignment_name',
                    'teammembers.team_member',
                    'teammembers.staffcode',
                    'createdby.team_member as createdbyauth'
                );

            // Get the timesheet requests before and after the promotion date
            $timesheetrequestsDatas1 = (clone $commonQuery)
                ->whereDate('timesheetrequests.created_at', '<', $permotioncheck->created_at)
                ->addSelect('createdby.staffcode as staffcodeid')
                ->get();

            $timesheetrequestspermotion = (clone $commonQuery)
                ->leftJoin('teamrolehistory as createdby_history', 'createdby_history.teammember_id', '=', 'createdby.id')
                ->whereDate('timesheetrequests.created_at', '>', $permotioncheck->created_at)
                ->addSelect('createdby_history.newstaff_code')
                ->get();

            $timesheetrequestsDatas = $timesheetrequestsDatas1->merge($timesheetrequestspermotion);
        } else {
            $timesheetrequestsDatas = DB::table('timesheetrequests')
                ->leftjoin('clients', 'clients.id', 'timesheetrequests.client_id')
                ->leftjoin('assignments', 'assignments.id', 'timesheetrequests.assignment_id')
                ->leftjoin('teammembers', 'teammembers.id', 'timesheetrequests.partner')
                ->leftjoin('teammembers as createdby', 'createdby.id', 'timesheetrequests.createdby')
                ->where('timesheetrequests.status', 0)
                ->where(function ($query) {
                    $query->where('timesheetrequests.partner', auth()->user()->teammember_id)
                        ->orWhere('timesheetrequests.createdby', auth()->user()->teammember_id);
                })
                ->select(
                    'timesheetrequests.*',
                    'clients.client_name',
                    'assignments.assignment_name',
                    'teammembers.team_member',
                    'teammembers.staffcode',
                    'createdby.team_member as createdbyauth',
                    'createdby.team_member as createdbyauth',
                    'createdby.staffcode as staffcodeid',
                )->get();
        }
        return view('backEnd.timesheetrequest.index', compact('timesheetrequestsDatas'));
    }





Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheetrequest\index.blade.php

                    <table id="examplee" class="display nowrap">
                        <thead>
                            <tr>
                                <th style="display: none;">id</th>
                                <th>Status</th>
                                <th>Date</th>
                                <th>Time</th>
                                <th>Created By</th>
                                <th>Staff Code</th>
                                <th>Approver</th>
                                <th>Reason</th>
                                <th>Attachment</th>
                                <th>Reason for Reject</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach ($timesheetrequestsDatas as $timesheetrequestsData)
                                <tr>
                                    @php
                                        if (auth()->user()->role_id == 11) {
                                            $permotioncheck = DB::table('teamrolehistory')
                                                ->where('teammember_id', $timesheetrequestsData->createdby)
                                                ->first();

                                            $datadate = Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $timesheetrequestsData->created_at,
                                            );

                                            $permotiondate = null;
                                            if ($permotioncheck) {
                                                $permotiondate = Carbon\Carbon::createFromFormat(
                                                    'Y-m-d H:i:s',
                                                    $permotioncheck->created_at,
                                                );
                                            }
                                        }
                                    @endphp
                                    <td style="display: none;">{{ $timesheetrequestsData->id }}</td>
                                    <td>
                                        @if ($timesheetrequestsData->status == 0)
                                            <span class="badge badge-pill badge-warning">Created</span>
                                        @elseif($timesheetrequestsData->status == 1)
                                            <span class="badge badge-pill badge-success">Approved</span>
                                        @else
                                            <span class="badge badge-pill badge-danger">Rejected</span>
                                        @endif
                                    </td>
                                    <td>{{ date('d-m-Y', strtotime($timesheetrequestsData->created_at)) }}</td>
                                    <td>{{ date('h:m:s', strtotime($timesheetrequestsData->created_at)) }}</td>
                                    <td><a href="{{ url('timesheetrequest/view', $timesheetrequestsData->id) }}">
                                            {{ $timesheetrequestsData->createdbyauth }}</a></td>

                                    @if (auth()->user()->role_id == 11)
                                        @if ($permotioncheck && $datadate->greaterThan($permotiondate))
                                            <td>{{ $permotioncheck->newstaff_code }}</td>
                                        @else
                                            <td>{{ $timesheetrequestsData->staffcodeid }}</td>
                                        @endif
                                    @else
                                        <td>{{ $timesheetrequestsData->newstaff_code ?? $timesheetrequestsData->staffcodeid }}
                                    @endif

                                    </td>
                                    <td>{{ $timesheetrequestsData->team_member }}
                                        ({{ $timesheetrequestsData->staffcode }})
                                    </td>
                                    <td style="width: 900px; word-wrap: break-word; white-space: normal;">
                                        {{ $timesheetrequestsData->reason }}</td>
                                    <td>
                                        @if ($timesheetrequestsData && $timesheetrequestsData->attachment)
                                            <a
                                                href="{{ url('backEnd/image/confirmationfile/' . $timesheetrequestsData->attachment) }}">
                                                {{ $timesheetrequestsData->attachment ?? 'NA' }}
                                            </a>
                                        @else
                                            {{ 'NA' }}
                                        @endif
                                    </td>
                                    <td>{{ $timesheetrequestsData->remark ?? 'NA' }}</td>

                                </tr>
                            @endforeach
                        </tbody>
                    </table>






Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\BackEndController.php

  public function openandcloseassignment(Request $request, $id)
  {
    if (auth()->user()->role_id == 11) {
      if ($id == 0) {
        $assignmentmappingData =  DB::table('assignmentmappings')
          ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
          ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
          ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
          ->where('assignmentbudgetings.status', '1')
          //------------------- Shahid's code start---------------------
          ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
          ->select(
            'assignmentmappings.*',
            'assignmentbudgetings.duedate',
            'assignmentbudgetings.assignmentname',
            'assignmentbudgetings.status',
            'assignments.assignment_name',
            'clients.client_name',
            'clients.client_code',
          )->get();
        // dd($assignmentmappingData);
        return view('backEnd.report.openandcloseassignment', compact('assignmentmappingData'));
      } else {
        $assignmentmappingData =  DB::table('assignmentmappings')
          ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
          ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
          ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
          ->where('assignmentbudgetings.status', '0')
          //------------------- Shahid's code start---------------------
          ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
          ->select(
            'assignmentmappings.*',
            'assignmentbudgetings.duedate',
            'assignmentbudgetings.assignmentname',
            'assignmentbudgetings.status',
            'assignments.assignment_name',
            'clients.client_name',
            'clients.client_code',
          )->get();
        // dd($assignmentmappingData);
        return view('backEnd.report.openandcloseassignment', compact('assignmentmappingData'));
      }
    }
  }







Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\report\openandcloseassignment.blade.php



       <table id="examplee" class="display nowrap">
                        <thead>
                            <tr>
                                <th style="display: none;">id</th>
                                <th>Assignment Id</th>
                                <th>Assignment</th>
                                <th>Client</th>
                                <th>Client Code</th>
                                <th>Period Start</th>
                                <th>Period End</th>
                                <th>Deadline</th>
                                <th>Assigned Status</th>
                                <th>Assigned Partner</th>
                                <th>Other Partner</th>
                                <th>Team Leader </th>
                                <th>Teammember</th>
                                @if (auth()->user()->role_id != 15 && Auth::user()->role_id != 11)
                                    <th>Edit</th>
                                @endif
                                {{-- <th>Action</th> --}}
                            </tr>
                        </thead>
                        <tbody>
                            @foreach ($assignmentmappingData as $assignmentmappingDatas)
                                <tr>
                                    <td style="display: none;">{{ $assignmentmappingDatas->id }}</td>
                                    <td> <a
                                            href="{{ url('/viewassignment/' . $assignmentmappingDatas->assignmentgenerate_id) }}">{{ $assignmentmappingDatas->assignmentgenerate_id }}</a>
                                    </td>
                                    <td>
                                        {{ $assignmentmappingDatas->assignment_name }} @if ($assignmentmappingDatas->assignmentname != null)
                                            ({{ $assignmentmappingDatas->assignmentname }})
                                        @endif
                                    </td>
                                    <td> {{ $assignmentmappingDatas->client_name }}</td>
                                    <td> {{ $assignmentmappingDatas->client_code }}</td>

                                    <td>
                                        @if ($assignmentmappingDatas->periodstart != null)
                                            {{ date('d-m-Y', strtotime($assignmentmappingDatas->periodstart)) }}
                                        @endif
                                    </td>

                                    <td>
                                        @if ($assignmentmappingDatas->periodend != null)
                                            {{ date('d-m-Y', strtotime($assignmentmappingDatas->periodend)) }}
                                        @endif
                                    </td>
                                    <td>
                                        @if ($assignmentmappingDatas->duedate != null)
                                            {{ date('d-m-Y', strtotime($assignmentmappingDatas->duedate)) }}
                                        @endif
                                    </td>
                                    <td>
                                        @if ($assignmentmappingDatas->status == 1)
                                            <span class="badge badge-primary">OPEN</span>
                                        @elseif($assignmentmappingDatas->status == 0)
                                            <span class="badge badge-danger">CLOSED</span>
                                        @elseif($assignmentmappingDatas->status == 2)
                                            <span class="badge badge-info">Rejected</span>
                                        @endif

                                    </td>
                                    {{-- <td>{{ App\Models\Teammember::select('team_member')->where('id', $assignmentmappingDatas->leadpartner)->first()->team_member ?? '' }}
                                    </td>
                                    <td>{{ App\Models\Teammember::select('team_member')->where('id', $assignmentmappingDatas->otherpartner)->first()->team_member ?? '' }}
                                    </td> --}}
                                    @php
                                        // $leadpartner = App\Models\Teammember::select('team_member', 'staffcode')
                                        //     ->where('id', $assignmentmappingDatas->leadpartner)
                                        //     ->first();

                                        // $otherPartner = App\Models\Teammember::select('team_member', 'staffcode')
                                        //     ->where('id', $assignmentmappingDatas->otherpartner)
                                        //     ->first();

                                        $leadpartner = DB::table('teammembers')
                                            ->leftJoin(
                                                'teamrolehistory',
                                                'teamrolehistory.teammember_id',
                                                '=',
                                                'teammembers.id',
                                            )
                                            ->where('teammembers.id', $assignmentmappingDatas->leadpartner)
                                            ->select(
                                                'teammembers.team_member',
                                                'teammembers.staffcode',
                                                'teamrolehistory.newstaff_code',
                                            )
                                            ->first();

                                        $otherPartner = DB::table('teammembers')
                                            ->leftJoin(
                                                'teamrolehistory',
                                                'teamrolehistory.teammember_id',
                                                '=',
                                                'teammembers.id',
                                            )
                                            ->where('teammembers.id', $assignmentmappingDatas->otherpartner)
                                            ->select(
                                                'teammembers.team_member',
                                                'teammembers.staffcode',
                                                'teamrolehistory.newstaff_code',
                                            )
                                            ->first();

                                    @endphp
                                    <td>
                                        {{ $leadpartner->team_member ?? '' }}
                                        @if ($leadpartner && $leadpartner->team_member)
                                            (
                                            {{ $leadpartner->newstaff_code ?? ($leadpartner->staffcode ?? '') }})
                                        @endif
                                    </td>
                                    <td>
                                        {{ $otherPartner->team_member ?? '' }}
                                        @if ($otherPartner && $otherPartner->team_member)
                                            (
                                            {{ $otherPartner->newstaff_code ?? ($otherPartner->staffcode ?? '') }})
                                        @endif
                                    </td>
                                    <td>
                                        @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $assignmentmappingDatas->id)->where('assignmentteammappings.type', 0)->get() as $sub)
                                            {{ $sub->team_member }}
                                        @endforeach
                                    </td>
                                    <td>
                                        @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $assignmentmappingDatas->id)->where('assignmentteammappings.type', 2)->get() as $sub)
                                            {{ $sub->team_member }} ,
                                        @endforeach
                                    </td>
                                    @if (auth()->user()->role_id != 15 && Auth::user()->role_id != 11)
                                        <td>
                                            <a href="{{ url('/assignmentlist/' . $assignmentmappingDatas->assignmentgenerate_id) }}"
                                                class="btn btn-info-soft btn-sm"><i class="far fa-edit"></i></a>
                                        </td>
                                    @endif
                                    {{-- <td>
                                     
                                        <a href="  {{ url('/assignment/reject/' . $assignmentmappingDatas->assignmentgenerate_id) }}"
                                            onclick="return confirm('Are you sure you want to Reject this Assignment?');">
                                            <button class="btn btn-danger" data-toggle="modal"
                                                style="height: 16px; width: auto; border-radius: 7px; display: flex; align-items: center; justify-content: center;font-size: 11px;"
                                                data-target="#requestModal">Reject</button>
                                        </a>
                        
                                    </td> --}}
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
					
					


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php

  public function examleaverequestlist()
  {
    $permotioncheck = DB::table('teamrolehistory')
      ->where('teammember_id', auth()->user()->teammember_id)->first();

    if (auth()->user()->role_id == 11) {
      $timesheetrequestsDatas = DB::table('leaverequest')
        ->leftjoin('teammembers', 'teammembers.id', 'leaverequest.approver')
        ->leftjoin('teammembers as createdby', 'createdby.id', 'leaverequest.createdby')
        ->leftjoin('applyleaves', 'applyleaves.id', 'leaverequest.applyleaveid')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        // ->where('createdby.id', auth()->user()->teammember_id)
        ->select(
          'leaverequest.*',
          'teammembers.team_member',
          'teammembers.staffcode',
          'applyleaves.leavetype',
          'leavetypes.name',
          'createdby.team_member as createdbyauth',
          'createdby.staffcode as teamstaffcode'
        )->get();

      $hasPendingRequests = $timesheetrequestsDatas->contains('status', 0);

      return view('backEnd.applyleave.adminrevertleave', compact(
        'timesheetrequestsDatas',
        'hasPendingRequests'

      ));
    } elseif ($permotioncheck && auth()->user()->role_id == 13) {
      $timesheetrequestsDatas = DB::table('leaverequest')
        ->leftjoin('teammembers', 'teammembers.id', 'leaverequest.approver')
        ->leftjoin('teammembers as createdby', 'createdby.id', 'leaverequest.createdby')
        ->leftJoin('teamrolehistory as createdby_history', 'createdby_history.teammember_id', '=', 'createdby.id')
        ->leftjoin('applyleaves', 'applyleaves.id', 'leaverequest.applyleaveid')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->where('createdby.id', auth()->user()->teammember_id)
        ->select(
          'leaverequest.*',
          'teammembers.team_member',
          'teammembers.staffcode',
          'applyleaves.leavetype',
          'leavetypes.name',
          'createdby.team_member as createdbyauth',
          'createdby.staffcode as teamstaffcode',
          'createdby_history.newstaff_code'
        )->get();

      $myteamtimesheetrequestsDatas = DB::table('leaverequest')
        ->leftjoin('teammembers', 'teammembers.id', 'leaverequest.approver')
        ->leftjoin('teammembers as createdby', 'createdby.id', 'leaverequest.createdby')
        ->leftjoin('applyleaves', 'applyleaves.id', 'leaverequest.applyleaveid')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->where('leaverequest.approver', auth()->user()->teammember_id)
        ->select(
          'leaverequest.*',
          'teammembers.team_member',
          'teammembers.staffcode',
          'applyleaves.leavetype',
          'leavetypes.name',
          'createdby.team_member as createdbyauth',
          'createdby.staffcode as teamstaffcode'
        )->get();

      $hasPendingRequests = $myteamtimesheetrequestsDatas->contains('status', 0);

      return view('backEnd.applyleave.examrequestlist', compact('timesheetrequestsDatas', 'myteamtimesheetrequestsDatas', 'hasPendingRequests'));
    } else {

      $timesheetrequestsDatas = DB::table('leaverequest')
        ->leftjoin('teammembers', 'teammembers.id', 'leaverequest.approver')
        ->leftjoin('teammembers as createdby', 'createdby.id', 'leaverequest.createdby')
        ->leftjoin('applyleaves', 'applyleaves.id', 'leaverequest.applyleaveid')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->where('createdby.id', auth()->user()->teammember_id)
        ->select(
          'leaverequest.*',
          'teammembers.team_member',
          'teammembers.staffcode',
          'applyleaves.leavetype',
          'leavetypes.name',
          'createdby.team_member as createdbyauth',
          'createdby.staffcode as teamstaffcode'
        )->get();

      $myteamtimesheetrequestsDatas = DB::table('leaverequest')
        ->leftjoin('teammembers', 'teammembers.id', 'leaverequest.approver')
        ->leftjoin('teammembers as createdby', 'createdby.id', 'leaverequest.createdby')
        ->leftjoin('applyleaves', 'applyleaves.id', 'leaverequest.applyleaveid')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->where('leaverequest.approver', auth()->user()->teammember_id)
        ->select(
          'leaverequest.*',
          'teammembers.team_member',
          'teammembers.staffcode',
          'applyleaves.leavetype',
          'leavetypes.name',
          'createdby.team_member as createdbyauth',
          'createdby.staffcode as teamstaffcode'
        )->get();

      $hasPendingRequests = $myteamtimesheetrequestsDatas->contains('status', 0);

      return view('backEnd.applyleave.examrequestlist', compact('timesheetrequestsDatas', 'myteamtimesheetrequestsDatas', 'hasPendingRequests'));
    }
  }








Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php


  public function full_list()
  {

    $teammember = DB::table('teammembers')
      ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
      ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
      ->select('teammembers.id', 'teammembers.team_member', 'teammembers.emailid', 'roles.rolename', 'teammembers.staffcode', 'teamrolehistory.newstaff_code')
      ->where('teammembers.status', '1')->distinct()->get();

    $month = DB::table('timesheets')
      ->select('timesheets.month')->distinct()->get();
    $result = DB::table('timesheetusers')->select(DB::raw('YEAR(date) as year'))
      ->distinct()->orderBy('year', 'DESC')->limit(5)->get();
    $years = $result->pluck('year');

    //dd($month);
    $timesheetData = DB::table('timesheets')
      ->leftjoin('teammembers', 'teammembers.id', 'timesheets.created_by')
      ->select('timesheets.*', 'teammembers.team_member', 'teammembers.staffcode')->orderBy('id', 'DESC')->paginate(30);
    // dd($timesheetData);
    return view('backEnd.timesheet.hrindex', compact('timesheetData', 'teammember', 'month', 'years'));
  }




Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\hrindex.blade.php

  <div class="col-4">
                            <div class="form-group">
                                <label class="font-weight-600">Employee </label>
                                <select class="language form-control" id="categoryy" name="teammember">
                                    <option value="">Please Select One</option>
                                    @foreach ($teammember as $teammemberData)
                                        <option value="{{ $teammemberData->id }}">
                                            {{ $teammemberData->team_member }} (
                                            {{ $teammemberData->newstaff_code ?? ($teammemberData->staffcode ?? '') }} )
                                        </option>
                                    @endforeach
                                </select>

                            </div>
                        </div>







Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\hrindex.blade.php

                    <table id="examplee" class="display nowrap">
                        <thead>

                            <tr>
                                <th style="display: none;">id</th>
                                <th>Employee Name</th>
                                <th>Staff Code</th>
                                <th>Date</th>
                                <th>Day</th>
                                <th>Client Name</th>
                                <th>Assignment Name</th>
                                <th>Work Item</th>
                                <th>Partner</th>
                                <th>Hour</th>
                                <th>Total Hour</th>
                                @if (Auth::user()->role_id == 18 || Auth::user()->role_id == 11)
                                    <th>Action</th>
                                @endif
                            </tr>

                        </thead>
                        <tbody>
                            @foreach ($timesheetData as $timesheetDatas)
                                <tr>
                                    @php
                                        $client_id = DB::table('timesheetusers')
                                            ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
                                            ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
                                            ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.partner')
                                            ->where('timesheetusers.timesheetid', $timesheetDatas->id)

                                            ->select(
                                                'clients.client_name',
                                                'clients.client_code',
                                                'timesheetusers.hour',
                                                'assignments.assignment_name',
                                                'billable_status',
                                                'workitem',
                                                'teammembers.team_member',
                                                'teammembers.staffcode',
                                            )
                                            ->get();

                                        //  dd($client_id);
                                        $total = DB::table('timesheetusers')

                                            ->where('timesheetusers.timesheetid', $timesheetDatas->id)
                                            ->sum('hour');

                                        $dates = date('l', strtotime($timesheetDatas->date));

                                        $permotioncheck = DB::table('teamrolehistory')
                                            ->where('teammember_id', $timesheetDatas->created_by)
                                            ->first();

                                        $datadate = Carbon\Carbon::createFromFormat(
                                            'Y-m-d H:i:s',
                                            $timesheetDatas->created_at,
                                        );

                                        $permotiondate = null;
                                        if ($permotioncheck) {
                                            $permotiondate = Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $permotioncheck->created_at,
                                            );
                                        }
                                    @endphp
                                    <td style="display: none;">{{ $timesheetDatas->id }}</td>
                                    <td>{{ $timesheetDatas->team_member ?? '' }} </td>
                                    @if ($permotioncheck && $datadate->greaterThan($permotiondate))
                                        <td>{{ $permotioncheck->newstaff_code }}</td>
                                    @else
                                        <td>{{ $timesheetDatas->staffcode }}</td>
                                    @endif
                                    {{-- <td>{{ $timesheetDatas->staffcode ?? '' }} </td> --}}
                                    <!-- <td>{{ date('d-M-Y', strtotime($timesheetDatas->created_at)) ?? '' }} </td>-->
                                    <td>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                    </td>
                                    <td>
                                        @if ($timesheetDatas->date != null)
                                            {{ $dates ?? '' }}
                                        @endif
                                    </td>

                                    <span style="font-size: 13px;">

                                        <td>

                                            @foreach ($client_id as $item)
                                                {{ $item->client_name ?? '' }} ({{ $item->client_code ?? '' }})
                                                @if ($item->client_name != 0)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>
                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->assignment_name ?? '' }}@if ($item->assignment_name != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>

                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->workitem ?? '' }}@if ($item->workitem != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>
                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->team_member ?? '' }} ({{ $item->staffcode ?? '' }})
                                                @if ($item->team_member != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>
                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->hour ?? '' }} @if ($item->hour != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>






                                        <td>{{ $total }}</td>
                                        <td>

                                            @if (auth()->user()->role_id == 18 || auth()->user()->role_id == 11)
                                                <a href="{{ url('/timesheet/destroy/' . $timesheetDatas->id) }}"
                                                    onclick="return confirm('Are you sure you want to delete this item?');"
                                                    class="btn btn-danger-soft btn-sm"><i class="far fa-trash-alt"></i></a>
                                            @else
                                                <!-- <td> <a href="{{ url('/timesheet/destroy/' . $timesheetDatas->id) }}"
                                                                                                                                                                                                                                        onclick="return confirm('Are you sure you want to delete this item?');"
                                                                                                                                                                                                                                        class="btn btn-danger-soft btn-sm"><i class="far fa-trash-alt"></i></a></td>
                                                                                                                                                                                                                                -->
                                            @endif
                                        </td>



                                </tr>
                            @endforeach
                        </tbody>
                    </table> 
					
					


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php

  public function allteamsubmitted()
  {
    // Fetch all necessary data in a single query
    $get_datess = DB::table('timesheetreport')
      ->leftjoin('teammembers', 'teammembers.id', 'timesheetreport.teamid')
      ->leftJoin('teamrolehistory', function ($join) {
        $join->on('teamrolehistory.teammember_id', '=', 'teammembers.id')
          ->on('teamrolehistory.created_at', '<', 'timesheetreport.created_at');
      })
      ->leftjoin('teammembers as partners', 'partners.id', 'timesheetreport.partnerid')
      ->select(
        'timesheetreport.*',
        'teamrolehistory.newstaff_code',
        'teammembers.team_member',
        'teammembers.staffcode',
        'partners.team_member as partnername',
        'teammembers.emailid'
      )
      ->latest()
      ->get();

    $permissiontimesheet = DB::table('timesheetreport')->first();

    // Map and group data
    $groupedData = $get_datess->groupBy(function ($item) {
      return $item->team_member . '|' . $item->week;
    })->map(function ($group) {
      $firstItem = $group->first();

      return (object)[
        'id' => $firstItem->id,
        'teamid' => $firstItem->teamid,
        'week' => $firstItem->week,
        'totaldays' => $group->sum('totaldays'),
        'totaltime' => $group->sum('totaltime'),
        'dayscount' => $group->sum('dayscount'),
        'startdate' => $firstItem->startdate,
        'enddate' => $firstItem->enddate,
        'partnername' => $firstItem->partnername,
        'created_at' => $firstItem->created_at,
        'team_member' => $firstItem->team_member,
        // Use newstaff_code if available, otherwise staffcode
        'staffcode' => $firstItem->newstaff_code ?? $firstItem->staffcode,
        'partnerid' => $firstItem->partnerid,
      ];
    });

    $get_date = collect($groupedData->values());

    return view('backEnd.timesheet.myteamindex', compact('get_date', 'permissiontimesheet'));
  }







Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TeammemberController.php

    public function adminteammembers()
    {
        if (auth()->user()->role_id == 11) {

            $teammemberDatas = Teammember::with(['title', 'role'])
                ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
                ->where('teammembers.role_id', '!=', 11)
                ->where('teammembers.status', 1)
                ->select('teammembers.*', 'teamrolehistory.newstaff_code')
                ->get();
           
            return view('backEnd.teammember.allindex', compact('teammemberDatas'));
        }
    }








Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\teammember\allindex.blade.php

                  <table id="examplee" class="table display table-bordered table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Team Member Name</th>
                                <th>Team Role</th>
                                <th>Mobile No</th>
                                <th>Email</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach ($teammemberDatas as $teammemberData)
                                <tr>
                                    <td>
                                        {{ $teammemberData->team_member }} (
                                        {{ $teammemberData->newstaff_code ?? ($teammemberData->staffcode ?? '') }} )
                                    </td>
                                    <td>{{ $teammemberData->role->rolename ?? '' }}</td>

                                    <td>{{ $teammemberData->mobile_no }}</td>

                                    <td><a
                                            href="mailto:{{ $teammemberData->emailid }}">{{ $teammemberData->emailid ?? '' }}</a>
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>







Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php

  public function assignmentHourShow()
  {
    // First query with teamrolehistory join
    $teammemberDatass = DB::table('assignmentteammappings')
      ->leftjoin('assignmentmappings', 'assignmentmappings.id', 'assignmentteammappings.assignmentmapping_id')
      ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
      ->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')
      ->leftJoin('teamrolehistory', function ($join) {
        $join->on('teamrolehistory.teammember_id', '=', 'teammembers.id')
          ->on('teamrolehistory.created_at', '<', 'assignmentbudgetings.created_at');
      })

      ->leftjoin('titles', 'titles.id', 'teammembers.title_id')
      ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
      ->whereNotIn('teammembers.team_member', ['NA', 'null', 'test staff'])
      ->select(
        'assignmentmappings.id',
        'teamrolehistory.newstaff_code',
        'teammembers.id as teamid',
        'teammembers.team_member',
        'teammembers.role_id',
        'teammembers.staffcode',
        'titles.title',
        'assignmentmappings.assignmentgenerate_id',
        'assignmentbudgetings.assignmentname',
        'assignmentbudgetings.created_at',
        'assignmentteammappings.teamhour'
      )
      ->get();

    // Second query with teamrolehistory join
    $patnerdata = DB::table('assignmentmappings')
      ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
      ->leftjoin('teammembers', function ($join) {
        $join->on('teammembers.id', 'assignmentmappings.otherpartner')
          ->orOn('teammembers.id', 'assignmentmappings.leadpartner');
      })
      ->leftJoin('teamrolehistory', function ($join) {
        $join->on('teamrolehistory.teammember_id', '=', 'teammembers.id')
          ->on('teamrolehistory.created_at', '<', 'assignmentbudgetings.created_at');
      })
      ->leftjoin('titles', 'titles.id', 'teammembers.title_id')
      ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
      ->whereNotIn('teammembers.team_member', ['NA', 'test staff'])
      ->select(
        'assignmentmappings.id',
        'teammembers.id as teamid',
        'teammembers.team_member',
        'teammembers.staffcode',
        'teammembers.role_id',
        'titles.title',
        'assignmentmappings.assignmentgenerate_id',
        'assignmentbudgetings.assignmentname',
        'assignmentbudgetings.created_at',
        'assignmentmappings.otherpartner',
        'assignmentmappings.leadpartner',
        'assignmentmappings.leadpartnerhour',
        'assignmentmappings.otherpartnerhour',
        'teamrolehistory.newstaff_code'
      )
      ->get();


    $teammemberDatas = $teammemberDatass->merge($patnerdata);
    return view('backEnd.timesheet.assignmentlistwithhour', compact('teammemberDatas'));
  }
  
  



Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\assignmentlistwithhour.blade.php

                    <table id="examplee" class="display nowrap">
                        <thead>
                            <tr>
                                <th>Teammember</th>
                                <th>Assignment Id</th>
                                <th>Assignment</th>
                                <th>Total Hour</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach ($teammemberDatas as $teammemberData)
                                <tr>

                                    <td>{{ $teammemberData->title }} {{ $teammemberData->team_member }}
                                        ({{ $teammemberData->newstaff_code ?? ($teammemberData->staffcode ?? '') }})
                                    </td>
                                    <td>{{ $teammemberData->assignmentgenerate_id }}</td>
                                    <td>{{ $teammemberData->assignmentname }}</td>
                                    @if (property_exists($teammemberData, 'leadpartner') && $teammemberData->teamid == $teammemberData->leadpartner)
                                        <td>{{ $teammemberData->leadpartnerhour ?? 0 }}</td>
                                    @elseif (property_exists($teammemberData, 'otherpartner') && $teammemberData->teamid == $teammemberData->otherpartner)
                                        <td>{{ $teammemberData->otherpartnerhour ?? 0 }}</td>
                                    @else
                                        <td>{{ $teammemberData->teamhour ?? 0 }}</td>
                                    @endif
                                </tr>
                            @endforeach
                        </tbody>
                    </table>






Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php

  public function assignmentHourShowfilter(Request $request)
  {

    // Extract filter inputs
    $employee = $request->input('employee');
    $assignmentgenerateid = $request->input('assignmentgenerateid');
    $teamname = null;
    $role_id = null;

    if ($employee) {
      [$teamname, $role_id] = explode('/', $employee);
    }

    // Common query base
    $query = DB::table('assignmentmappings')
      ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
      ->leftJoin('teammembers', function ($join) {
        $join->on('teammembers.id', '=', 'assignmentmappings.otherpartner')
          ->orOn('teammembers.id', '=', 'assignmentmappings.leadpartner');
      })
      ->leftJoin('teamrolehistory', function ($join) {
        $join->on('teamrolehistory.teammember_id', '=', 'teammembers.id')
          ->on('teamrolehistory.created_at', '<', 'assignmentbudgetings.created_at');
      })
      ->leftJoin('titles', 'titles.id', 'teammembers.title_id')
      ->leftJoin('roles', 'roles.id', 'teammembers.role_id')
      ->whereNotIn('teammembers.team_member', ['NA', 'test staff'])
      ->select(
        'assignmentmappings.id',
        'teammembers.id as teamid',
        'teammembers.team_member',
        'teammembers.staffcode',
        'teammembers.role_id',
        'titles.title',
        'assignmentmappings.assignmentgenerate_id',
        'assignmentbudgetings.assignmentname',
        'assignmentbudgetings.created_at',
        'teamrolehistory.newstaff_code',
        'assignmentmappings.otherpartner',
        'assignmentmappings.leadpartner',
        'assignmentmappings.leadpartnerhour',
        'assignmentmappings.otherpartnerhour'
      );

    // Filter by assignmentgenerateid if provided
    if ($assignmentgenerateid) {
      $query->where('assignmentmappings.assignmentgenerate_id', $assignmentgenerateid);
    }

    // Filter based on role_id and teamname
    if ($role_id) {
      if ($role_id != 13) {
        $query->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
          ->where('assignmentteammappings.teammember_id', $teamname);
      } else {
        $query->where(function ($q) use ($teamname) {
          $q->where('assignmentmappings.leadpartner', $teamname)
            ->orWhere('assignmentmappings.otherpartner', $teamname);
        });
      }
    } else {
      // Specific condition for role_id 13
      if ($role_id == 13) {
        $query->where(function ($q) use ($teamname) {
          $q->where('assignmentmappings.leadpartner', $teamname)
            ->orWhere('assignmentmappings.otherpartner', $teamname);
        });
      }
    }

    // Execute query and get results
    $teammemberDatas = $query->get();

    // Flash request data and return view
    $request->flash();
    return view('backEnd.timesheet.assignmentlistwithhour', compact('teammemberDatas'));
  }




Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\assignmentlistwithhour.blade.php

                    <table id="examplee" class="display nowrap">
                        <thead>
                            <tr>
                                <th>Teammember</th>
                                <th>Assignment Id</th>
                                <th>Assignment</th>
                                <th>Total Hour</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach ($teammemberDatas as $teammemberData)
                                <tr>

                                    <td>{{ $teammemberData->title }} {{ $teammemberData->team_member }}
                                        ({{ $teammemberData->newstaff_code ?? ($teammemberData->staffcode ?? '') }})
                                    </td>
                                    <td>{{ $teammemberData->assignmentgenerate_id }}</td>
                                    <td>{{ $teammemberData->assignmentname }}</td>
                                    @if (property_exists($teammemberData, 'leadpartner') && $teammemberData->teamid == $teammemberData->leadpartner)
                                        <td>{{ $teammemberData->leadpartnerhour ?? 0 }}</td>
                                    @elseif (property_exists($teammemberData, 'otherpartner') && $teammemberData->teamid == $teammemberData->otherpartner)
                                        <td>{{ $teammemberData->otherpartnerhour ?? 0 }}</td>
                                    @else
                                        <td>{{ $teammemberData->teamhour ?? 0 }}</td>
                                    @endif
                                </tr>
                            @endforeach
                        </tbody>
                    </table>



2222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\layouts\includes\leftsidebar.blade.php
find text  @elseif ($getroledata->page_id == 6)

 
          @elseif ($getroledata->page_id == 5)
                          <li>
                              <a class="material-ripple" href="{{ url('permotionandrejoin') }}">
                                  {{-- <i class="typcn typcn-book d-block mr-2"></i> --}}
                                  <i class="typcn typcn-arrow-up d-block mr-2"></i>
                                  Permotion/Rejoining
                              </a>
                          </li>
						  
						  

2222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php
resources\views\backEnd\applyleave\permotionandrejoin.blade.php




table 2222222222222222222222222222222222222222222222222222222222222222222222222222
teamrolehistery


################################################################################################################################
Route 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
Route::get('/permotionandrejoin', [PromotionandrejoiningController::class, 'permotionandrejoin']);
Route::post('/permotionandrejoinstore',  [PromotionandrejoiningController::class, 'permotionandrejoinstore']);



bugs
25-07-24  updated on vsalocal,vsademo,vsalive
################################################################################################################################

app\Http\Controllers\AssignmentmappingController.php


    public function index()
    {
        $permotioncheck = DB::table('teamrolehistory')
            ->where('teammember_id', auth()->user()->teammember_id)->first();

        if (auth()->user()->role_id == 11 || auth()->user()->role_id == 12 || auth()->user()->role_id == 18) {
            $assignmentmappingData = DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                //  ->leftjoin('assignmentteammappings','assignmentteammappings.assignmentmapping_id','assignmentmappings.id')
                // ->where('clients.status',1)
                ->select('assignmentbudgetings.client_id', 'clients.client_name', 'clients.client_code')->distinct()->get();
            //   dd($assignmentmappingData);
            return view('backEnd.assignmentmapping.index', compact('assignmentmappingData'));
        } elseif ($permotioncheck && auth()->user()->role_id == 13) {
            $assignmentmappingDatabefore =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->select('assignmentbudgetings.client_id', 'clients.client_name', 'clients.client_code')
                // ->where('clients.status', 0)
                ->whereNotIn('clients.id', [33, 32, 34, 29])
                ->where('assignmentbudgetings.status', 1)
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
                ->distinct()->get();

            $assignmentmappingDataafter = DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->where(function ($query) {
                    $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                        ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
                })
                ->where('assignmentbudgetings.status', 1)
                ->select('assignmentbudgetings.client_id', 'clients.client_name', 'clients.client_code')
                ->distinct()->get();

            $assignmentmappingData = $assignmentmappingDatabefore->merge($assignmentmappingDataafter);

            return view('backEnd.assignmentmapping.index', compact('assignmentmappingData'));
        } elseif (auth()->user()->role_id == 13) {
            $assignmentmappingData = DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->where(function ($query) {
                    $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                        ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
                })
                ->where('assignmentbudgetings.status', 1)
                ->select('assignmentbudgetings.client_id', 'clients.client_name', 'clients.client_code')
                ->distinct()->get();
            return view('backEnd.assignmentmapping.index', compact('assignmentmappingData'));
        } elseif (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {
            $assignmentmappingData =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->select('assignmentbudgetings.client_id', 'clients.client_name', 'clients.client_code')
                // ->where('clients.status', 0)
                ->whereNotIn('clients.id', [33, 32, 34, 29])
                ->where('assignmentbudgetings.status', 1)
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->get();

            return view('backEnd.assignmentmapping.index', compact('assignmentmappingData'));
        } else {
            $assignmentmappingData = DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')

                ->select('assignmentbudgetings.client_id', 'clients.client_name', 'clients.client_code')
                ->whereNotIn('clients.id', [33, 32, 34, 29])
                ->where('clients.status', 1)
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->get();

            return view('backEnd.assignmentmapping.index', compact('assignmentmappingData'));
        }
    }
	

bugs
################################################################################################################################
app\Http\Controllers\AssignmentmappingController.php

    public function clientassignmentList($id)
    {
        $permotioncheck = DB::table('teamrolehistory')
            ->where('teammember_id', auth()->user()->teammember_id)->first();
        if (auth()->user()->teammember_id == 161 || auth()->user()->teammember_id == 99) {
            $assignmentmappingData = DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->where('clients.id', $id)
                ->select('assignmentmappings.year')->distinct()->get();
            // dd($assignmentmappingData);
            return view('backEnd.assignmentmapping.assignmentlist', compact('assignmentmappingData', 'id'));
        } elseif (auth()->user()->role_id == 11 || auth()->user()->role_id == 12) {
            $assignmentmappingData = DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->where('clients.id', $id)
                ->select('assignmentmappings.year')->distinct()->get();
            // dd($assignmentmappingData);
            return view('backEnd.assignmentmapping.assignmentlist', compact('assignmentmappingData', 'id'));
        } elseif ($permotioncheck && auth()->user()->role_id == 13) {
            $assignmentmappingDataafter = DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                //  ->leftjoin('assignmentteammappings','assignmentteammappings.assignmentmapping_id','assignmentmappings.id')
                ->select('assignmentmappings.year')
                ->where('clients.id', $id)
                ->where(function ($query) {
                    $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                        ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
                })
                ->distinct()->get();

            $assignmentmappingDatabefore = DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->select('assignmentmappings.year')
                ->where('clients.id', $id)->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->get();
            $assignmentmappingData = $assignmentmappingDatabefore->merge($assignmentmappingDataafter);
            return view('backEnd.assignmentmapping.assignmentlist', compact('assignmentmappingData', 'id'));
        } elseif (auth()->user()->role_id == 13) {

            $assignmentmappingData = DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                //  ->leftjoin('assignmentteammappings','assignmentteammappings.assignmentmapping_id','assignmentmappings.id')
                ->select('assignmentmappings.year')
                ->where('clients.id', $id)
                ->where(function ($query) {
                    $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                        ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
                })
                ->distinct()->get();
            // dd($assignmentmappingData);
            return view('backEnd.assignmentmapping.assignmentlist', compact('assignmentmappingData', 'id'));
        } else {
            $assignmentmappingData = DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->select('assignmentmappings.year')
                ->where('clients.id', $id)->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->get();

            return view('backEnd.assignmentmapping.assignmentlist', compact('assignmentmappingData', 'id'));
        }
    }



bugs
################################################################################################################################
app\Http\Controllers\AssignmentmappingController.php

    public function yearWise(Request $request)
    {
        $permotioncheck = DB::table('teamrolehistory')
            ->where('teammember_id', auth()->user()->teammember_id)->first();
        if (auth()->user()->role_id == 11) {
            $partner = Teammember::where('role_id', '=', 13)->where('status', '=', 1)->with('title')
                ->orderBy('team_member', 'asc')->get();
            $clientid = $request->clientid;
            $assignmentmappingData =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->where('clients.id', $request->clientid)
                ->where('assignmentmappings.year', $request->year)
                ->select(
                    'assignmentmappings.*',
                    'assignmentbudgetings.duedate',
                    'assignmentbudgetings.assignmentname',
                    'assignments.assignment_name',
                    'clients.client_name',
                    'clients.client_code',
                )->distinct()->get();
            return view('backEnd.assignmentmapping.yearwise', compact('assignmentmappingData', 'clientid', 'partner'));
        } elseif ($permotioncheck && auth()->user()->role_id == 13) {
            $clientid = $request->clientid;
            $assigned =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->where('clients.id', $request->clientid)
                ->where('assignmentmappings.year', $request->year)
                ->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                ->select(
                    'assignmentmappings.*',
                    'assignmentbudgetings.duedate',
                    'assignments.assignment_name',
                    'clients.client_name',
                    'clients.client_code',
                    'assignmentbudgetings.assignmentname'
                )->distinct()->get();

            $otherassigned =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->where('clients.id', $request->clientid)
                ->where('assignmentmappings.year', $request->year)
                ->where('assignmentmappings.otherpartner', auth()->user()->teammember_id)
                ->select(
                    'assignmentmappings.*',
                    'assignmentbudgetings.duedate',
                    'assignments.assignment_name',
                    'clients.client_name',
                    'clients.client_code',
                    'assignmentbudgetings.assignmentname'
                )->distinct()->get();

            $assignmentmappingData =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->where('clients.id', $request->clientid)
                ->where('assignmentmappings.year', $request->year)
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
                ->where('assignmentteammappings.status', 1)
                ->select(
                    'assignmentmappings.*',
                    'assignmentbudgetings.duedate',
                    'assignmentbudgetings.assignmentname',
                    'assignments.assignment_name',
                    'clients.client_name',
                    'clients.client_code',
                )->distinct()->get();
            if ($assignmentmappingData->isNotEmpty()) {
                return view('backEnd.assignmentmapping.yearwise', compact('assignmentmappingData', 'clientid'));
            } else {
                return view('backEnd.assignmentmapping.yearwisepartnerlist', compact('assigned', 'otherassigned', 'clientid'));
            }
        } elseif (auth()->user()->role_id == 13) {
            $clientid = $request->clientid;
            $assigned =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->where('clients.id', $request->clientid)
                ->where('assignmentmappings.year', $request->year)
                ->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                ->select(
                    'assignmentmappings.*',
                    'assignmentbudgetings.duedate',
                    'assignments.assignment_name',
                    'clients.client_name',
                    'clients.client_code',
                    'assignmentbudgetings.assignmentname'
                )->distinct()->get();

            $otherassigned =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->where('clients.id', $request->clientid)
                ->where('assignmentmappings.year', $request->year)
                ->where('assignmentmappings.otherpartner', auth()->user()->teammember_id)
                ->select(
                    'assignmentmappings.*',
                    'assignmentbudgetings.duedate',
                    'assignments.assignment_name',
                    'clients.client_name',
                    'clients.client_code',
                    'assignmentbudgetings.assignmentname'
                )->distinct()->get();
            return view('backEnd.assignmentmapping.yearwisepartnerlist', compact('assigned', 'otherassigned', 'clientid'));
        } else {
            // assrejected
            $clientid = $request->clientid;
            $assignmentmappingData =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->where('clients.id', $request->clientid)
                ->where('assignmentmappings.year', $request->year)
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
                ->where('assignmentteammappings.status', 1)
                ->select(
                    'assignmentmappings.*',
                    'assignmentbudgetings.duedate',
                    'assignmentbudgetings.assignmentname',
                    'assignments.assignment_name',
                    'clients.client_name',
                    'clients.client_code',
                )->distinct()->get();
            // assrejected
            return view('backEnd.assignmentmapping.yearwise', compact('assignmentmappingData', 'clientid'));
        }
    }




bugs
################################################################################################################################
app\Http\Controllers\TimesheetController.php


  public function create(Request $request)
  {
    $permotioncheck = DB::table('teamrolehistory')
      ->where('teammember_id', auth()->user()->teammember_id)->first();
    $partner = Teammember::where('role_id', '=', 13)->where('status', '=', 1)->with('title')->get();
    $teammember = Teammember::where('role_id', '!=', 11)->with('title', 'role')->get();
    if (auth()->user()->role_id == 11) {
      $client = Client::where('status', 1)->select('id', 'client_name', 'client_code')->orderBy('client_name', 'ASC')->get();
      $timesheetrejectData = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 2)
        ->first();
    } elseif ($permotioncheck && auth()->user()->role_id == 13) {
      $timesheetrejectData = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 2)
        ->first();

      $clientssbefore = DB::table('assignmentteammappings')
        ->leftjoin('assignmentmappings', 'assignmentmappings.id', 'assignmentteammappings.assignmentmapping_id')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->orwhere('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
        // i have add this line becouse manager contain it but staff not contain it so basically after add this code no contain staff and manager 
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->where('assignmentbudgetings.status', 1)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()->get();

      $clientssafter = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->where(function ($query) {
          $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
            ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
        })
        ->where('assignmentbudgetings.status', 1)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()->get();

      // // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
      // $clients = DB::table('clients')
      //   ->whereIn('id', [29, 32, 33, 34])
      //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
      //   ->orderBy('client_name', 'ASC')
      //   ->distinct()->get();
      // $client = $clientss->merge($clients);

      $selectedDate1 = new \DateTime();
      $formattedDate = $selectedDate1->format('Y-m-d');
      $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

      if ($holidaydatecheck) {
        $clientIds = [29, 32, 33, 34];
      } else {
        // if not holidays then go hare
        $dayOfWeek = $selectedDate1->format('w');
        if ($selectedDate1->format('l') == 'Saturday') {
          $dayOfMonth = $selectedDate1->format('j');
          // Calculate which Saturday of the month it is
          $saturdayNumber = ceil($dayOfMonth / 7);
          // offholiday client name will be show on 2nd and 4rth sturday
          if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
            $clientIds = [29, 32, 33, 34];
          } else {
            $clientIds = [29, 32, 34];
          }
        } else {
          $clientIds = [29, 32, 34];
        }
      }

      $clients = DB::table('clients')
        ->whereIn('id', $clientIds)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()
        ->get();

      $client = $clientssafter->merge($clientssbefore)->merge($clients);
    } elseif (auth()->user()->role_id == 13) {
      $timesheetrejectData = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 2)
        ->first();

      $clientss = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->where(function ($query) {
          $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
            ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
        })
        ->where('assignmentbudgetings.status', 1)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()->get();

      // // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
      // $clients = DB::table('clients')
      //   ->whereIn('id', [29, 32, 33, 34])
      //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
      //   ->orderBy('client_name', 'ASC')
      //   ->distinct()->get();
      // $client = $clientss->merge($clients);

      $selectedDate1 = new \DateTime();
      $formattedDate = $selectedDate1->format('Y-m-d');
      $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

      if ($holidaydatecheck) {
        $clientIds = [29, 32, 33, 34];
      } else {
        // if not holidays then go hare
        $dayOfWeek = $selectedDate1->format('w');
        if ($selectedDate1->format('l') == 'Saturday') {
          $dayOfMonth = $selectedDate1->format('j');
          // Calculate which Saturday of the month it is
          $saturdayNumber = ceil($dayOfMonth / 7);
          // offholiday client name will be show on 2nd and 4rth sturday
          if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
            $clientIds = [29, 32, 33, 34];
          } else {
            $clientIds = [29, 32, 34];
          }
        } else {
          $clientIds = [29, 32, 34];
        }
      }


      $clients = DB::table('clients')
        ->whereIn('id', $clientIds)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()
        ->get();

      $client = $clientss->merge($clients);
    } else {
      $timesheetrejectData = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 2)
        ->first();

      $clientss = DB::table('assignmentteammappings')
        ->leftjoin('assignmentmappings', 'assignmentmappings.id', 'assignmentteammappings.assignmentmapping_id')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->orwhere('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
        // i have add this line becouse manager contain it but staff not contain it so basically after add this code no contain staff and manager 
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->where('assignmentbudgetings.status', 1)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()->get();

      // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
      // $clients = DB::table('clients')
      //   ->whereIn('id', [29, 32, 33, 34])
      //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
      //   ->orderBy('client_name', 'ASC')
      //   ->distinct()->get();

      // $client = $clientss->merge($clients);

      $selectedDate1 = new \DateTime();
      $formattedDate = $selectedDate1->format('Y-m-d');
      $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

      if ($holidaydatecheck) {
        $clientIds = [29, 32, 33, 34];
      } else {
        // if not holidays then go hare
        $dayOfWeek = $selectedDate1->format('w');
        if ($selectedDate1->format('l') == 'Saturday') {
          $dayOfMonth = $selectedDate1->format('j');
          // Calculate which Saturday of the month it is
          $saturdayNumber = ceil($dayOfMonth / 7);
          // offholiday client name will be show on 2nd and 4rth sturday
          if (auth()->user()->role_id == 14) {
            if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
              $clientIds = [29, 32, 33, 34];
            } else {
              $clientIds = [29, 32, 34];
            }
          } else {
            if ($saturdayNumber == 1.0 || $saturdayNumber == 2.0 || $saturdayNumber == 3.0 || $saturdayNumber == 4.0 || $saturdayNumber == 5.0) {
              $clientIds = [29, 32, 33, 34];
            }
          }
        } else {
          $clientIds = [29, 32, 34];
        }
      }
      $clients = DB::table('clients')
        ->whereIn('id', $clientIds)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()
        ->get();

      $client = $clientss->merge($clients);
    }
    $assignment = Assignment::select('id', 'assignment_name')->get();
    if ($request->ajax()) {
      // dd($request);
      if (isset($request->timesheetdate)) {
        if ($permotioncheck && auth()->user()->role_id == 13) {
          echo "<option>Select Client</option>";

          $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);
          $selectedDate1 = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);


          $clientssbefore = DB::table('assignmentteammappings')
            ->leftjoin('assignmentmappings', 'assignmentmappings.id', 'assignmentteammappings.assignmentmapping_id')
            ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
            ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
            ->orwhere('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
            ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
            ->where(function ($query) use ($selectedDate) {
              $query->whereNull('otpverifydate')
                ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
            })
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()->get();

          $clientssafter = DB::table('assignmentmappings')
            ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
            ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
            ->where(function ($query) {
              $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
            })
            ->where(function ($query) use ($selectedDate) {
              $query->whereNull('otpverifydate')
                ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
            })
            // ->whereNotNull('clients.client_name')
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()->get();

          // // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
          // $clients = DB::table('clients')
          //   ->whereIn('id', [29, 32, 33, 34])
          //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
          //   ->orderBy('client_name', 'ASC')
          //   ->distinct()->get();

          // if you selected sturday date then offholydays client will be show otherwise not

          $formattedDate = $selectedDate1->format('Y-m-d');
          $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

          if ($holidaydatecheck) {
            $clientIds = [29, 32, 33, 34];
          } else {
            // if not holidays then go hare
            $dayOfWeek = $selectedDate1->format('w');
            if ($selectedDate1->format('l') == 'Saturday') {
              $dayOfMonth = $selectedDate1->format('j');
              // Calculate which Saturday of the month it is
              $saturdayNumber = ceil($dayOfMonth / 7);
              // offholiday client name will be show on 2nd and 4rth sturday
              if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
                $clientIds = [29, 32, 33, 34];
              } else {
                $clientIds = [29, 32, 34];
              }
            } else {
              $clientIds = [29, 32, 34];
            }
          }
          $clients = DB::table('clients')
            ->whereIn('id', $clientIds)
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()
            ->get();

          // $client = $clientss->merge($clients);
          $client = $clientssafter->merge($clientssbefore)->merge($clients);
          foreach ($client as $clients) {
            echo "<option value='" . $clients->id . "'>" . $clients->client_name . '( ' . $clients->client_code . ' )' . "</option>";
          }
        } elseif (auth()->user()->role_id == 13) {
          echo "<option>Select Client</option>";

          $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);
          $selectedDate1 = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);

          $clientss = DB::table('assignmentmappings')
            ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
            ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
            ->where(function ($query) {
              $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
            })
            ->where(function ($query) use ($selectedDate) {
              $query->whereNull('otpverifydate')
                ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
            })
            // ->whereNotNull('clients.client_name')
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()->get();

          // // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
          // $clients = DB::table('clients')
          //   ->whereIn('id', [29, 32, 33, 34])
          //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
          //   ->orderBy('client_name', 'ASC')
          //   ->distinct()->get();

          // if you selected sturday date then offholydays client will be show otherwise not

          $formattedDate = $selectedDate1->format('Y-m-d');
          $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

          if ($holidaydatecheck) {
            $clientIds = [29, 32, 33, 34];
          } else {
            // if not holidays then go hare
            $dayOfWeek = $selectedDate1->format('w');
            if ($selectedDate1->format('l') == 'Saturday') {
              $dayOfMonth = $selectedDate1->format('j');
              // Calculate which Saturday of the month it is
              $saturdayNumber = ceil($dayOfMonth / 7);
              // offholiday client name will be show on 2nd and 4rth sturday
              if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
                $clientIds = [29, 32, 33, 34];
              } else {
                $clientIds = [29, 32, 34];
              }
            } else {
              $clientIds = [29, 32, 34];
            }
          }
          $clients = DB::table('clients')
            ->whereIn('id', $clientIds)
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()
            ->get();

          $client = $clientss->merge($clients);

          foreach ($client as $clients) {
            echo "<option value='" . $clients->id . "'>" . $clients->client_name . '( ' . $clients->client_code . ' )' . "</option>";
          }
        } else {

          echo "<option>Select Client</option>";

          $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);
          $selectedDate1 = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);
          $clientss = DB::table('assignmentteammappings')
            ->leftjoin('assignmentmappings', 'assignmentmappings.id', 'assignmentteammappings.assignmentmapping_id')
            ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
            ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
            ->orwhere('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
            ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
            ->where(function ($query) use ($selectedDate) {
              $query->whereNull('otpverifydate')
                ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
            })
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()->get();
          // ->get();

          // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
          // $clients = DB::table('clients')
          //   ->whereIn('id', [29, 32, 33, 34])
          //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
          //   ->orderBy('client_name', 'ASC')
          //   ->distinct()->get();

          // $client = $clientss->merge($clients);



          $formattedDate = $selectedDate1->format('Y-m-d');
          $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

          if ($holidaydatecheck) {
            $clientIds = [29, 32, 33, 34];
          } else {
            // if not holidays then go hare
            $dayOfWeek = $selectedDate1->format('w');
            if ($selectedDate1->format('l') == 'Saturday') {
              $dayOfMonth = $selectedDate1->format('j');
              // Calculate which Saturday of the month it is
              $saturdayNumber = ceil($dayOfMonth / 7);
              // offholiday client name will be show on 2nd and 4rth sturday
              if (auth()->user()->role_id == 14) {
                if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
                  $clientIds = [29, 32, 33, 34];
                } else {
                  $clientIds = [29, 32, 34];
                }
              } else {
                if ($saturdayNumber == 1.0 || $saturdayNumber == 2.0 || $saturdayNumber == 3.0 || $saturdayNumber == 4.0 || $saturdayNumber == 5.0) {
                  $clientIds = [29, 32, 33, 34];
                }
              }
            } else {
              $clientIds = [29, 32, 34];
            }
          }
          $clients = DB::table('clients')
            ->whereIn('id', $clientIds)
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()
            ->get();

          $client = $clientss->merge($clients);

          foreach ($client as $clients) {
            echo "<option value='" . $clients->id . "'>" . $clients->client_name . '( ' . $clients->client_code . ' )' . "</option>";
          }
        }
      }

      if (isset($request->cid)) {
        if ($permotioncheck && auth()->user()->role_id == 13) {
          echo "<option>Select Assignment</option>";

          if ($request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34) {
            $clients = DB::table('clients')
              ->where('id', $request->cid)
              ->select('clients.client_name', 'clients.id', 'clients.client_code')
              ->orderBy('client_name', 'ASC')
              ->distinct()->get();

            $id = $clients[0]->id;
            $assignments = DB::table('assignmentbudgetings')->where('client_id', $id)
              ->leftJoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
              ->select('assignmentbudgetings.assignmentgenerate_id', 'assignments.assignment_name', 'assignments.assignmentname')
              ->orderBy('assignment_name');
          } else {
            $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->datepickers);

            $assignments = DB::table('assignmentbudgetings')
              ->where('assignmentbudgetings.client_id', $request->cid)
              ->leftJoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
              ->leftJoin('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
              ->where(function ($query) {
                $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                  ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
              })
              ->where(function ($query) use ($selectedDate) {
                $query->whereNull('otpverifydate')
                  ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
              })
              ->select('assignmentbudgetings.assignmentgenerate_id', 'assignments.assignment_name', 'assignmentbudgetings.assignmentname');

            $additionalAssignments = DB::table('assignmentbudgetings')
              ->join('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
              ->leftJoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
              ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
              ->where('assignmentbudgetings.client_id', $request->cid)
              ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
              ->where(function ($query) {
                $query->whereNull('assignmentteammappings.status')
                  ->orWhere('assignmentteammappings.status', '=', 1);
              })
              ->where(function ($query) use ($selectedDate) {
                $query->whereNull('otpverifydate')
                  ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
              })
              ->select('assignmentbudgetings.assignmentgenerate_id', 'assignments.assignment_name', 'assignmentbudgetings.assignmentname');

            $assignments = $assignments->union($additionalAssignments)->orderBy('assignment_name')->get();
            // dd($assignments);
          }

          foreach ($assignments as $sub) {
            echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . '/' . $sub->assignmentgenerate_id . ' )' . "</option>";
          }
        }

        // 22222222
        elseif (auth()->user()->role_id == 13) {

          echo "<option>Select Assignment</option>";
          if ($request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34) {
            $clients = DB::table('clients')
              // ->whereIn('id', [29, 32, 33, 34])
              ->where('id', $request->cid)
              ->select('clients.client_name', 'clients.id', 'clients.client_code')
              ->orderBy('client_name', 'ASC')
              ->distinct()->get();
            // dd($clients);
            $id = $clients[0]->id;
            foreach (DB::table('assignmentbudgetings')->where('client_id', $id)
              ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
              ->orderBy('assignment_name')->get() as $sub) {
              echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . '/' . $sub->assignmentgenerate_id . ' )' . "</option>";
            }
          } else {
            // dd('hi 3');

            $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->datepickers);

            foreach (DB::table('assignmentbudgetings')
              ->where('assignmentbudgetings.client_id', $request->cid)
              ->leftJoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
              ->leftJoin('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
              ->where(function ($query) {
                $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                  ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
              })
              ->where(function ($query) use ($selectedDate) {
                $query->whereNull('otpverifydate')
                  ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
              })
              ->orderBy('assignment_name')->get() as $sub) {
              echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . '/' . $sub->assignmentgenerate_id . ' )' . "</option>";
            }
          }
        } else {

          echo "<option>Select Assignment</option>";

          if ($request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34) {
            $clients = DB::table('clients')
              // ->whereIn('id', [29, 32, 33, 34])
              ->where('id', $request->cid)
              ->select('clients.client_name', 'clients.id', 'clients.client_code')
              ->orderBy('client_name', 'ASC')
              ->distinct()->get();
            // dd($clients);
            $id = $clients[0]->id;
            foreach (DB::table('assignmentbudgetings')->where('client_id', $id)
              ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
              ->orderBy('assignment_name')->get() as $sub) {
              echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . '/' . $sub->assignmentgenerate_id . ' )' . "</option>";
            }
          } else {
            //  i have add this code after kartic bindal problem 
            $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->datepickers);

            foreach (DB::table('assignmentbudgetings')
              ->join('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
              ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
              ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
              ->where('assignmentbudgetings.client_id', $request->cid)
              ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
              //  ->where('assignmentteammappings.status', '!=', 0)
              // ->whereNull('assignmentteammappings.status')
              ->where(function ($query) {
                $query->whereNull('assignmentteammappings.status')
                  ->orWhere('assignmentteammappings.status', '=', 1);
              })
              ->where(function ($query) use ($selectedDate) {
                $query->whereNull('otpverifydate')
                  //   ->orWhere('otpverifydate', '>=', $selectedDate);
                  // // ->orWhere('otpverifydate', '>=', $selectedDate);
                  ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
              })
              ->orderBy('assignment_name')->get() as $sub) {
              echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . '/' . $sub->assignmentgenerate_id . ' )' . "</option>";
            }
          }
        }
      }

      if (isset($request->assignment)) {
        // dd($request->assignment);
        if (auth()->user()->role_id == 11) {
          echo "<option value=''>Select Partner</option>";
          foreach (DB::table('assignmentmappings')

            ->leftjoin('teammembers', 'teammembers.id', 'assignmentmappings.leadpartner')
            ->leftjoin('teammembers as team', 'team.id', 'assignmentmappings.otherpartner')
            ->where('assignmentmappings.assignmentgenerate_id', $request->assignment)
            ->select('team.team_member as team_member', 'team.id', 'teammembers.id', 'teammembers.team_member')
            ->get() as $subs) {
            echo "<option value='" . $subs->id . "'>" . $subs->team_member . "</option>";
          }
        } elseif ($permotioncheck && auth()->user()->role_id == 13) {
          echo "<option value=''>Select Partner</option>";
          // dd($request->assignment);
          $partnerafter = DB::table('assignmentmappings')
            ->leftJoin('teammembers', 'teammembers.id', 'assignmentmappings.leadpartner')
            ->where('assignmentmappings.assignmentgenerate_id', $request->assignment)
            ->select('teammembers.id', 'teammembers.team_member');

          $partnerbefore = DB::table('assignmentmappings')
            ->leftJoin('teammembers', 'teammembers.id', 'assignmentmappings.leadpartner')
            ->leftJoin('teammembers as team', 'team.id', 'assignmentmappings.otherpartner')
            ->where('assignmentmappings.assignmentgenerate_id', $request->assignment)
            ->select('teammembers.id', 'teammembers.team_member');

          $partnerresult = $partnerafter->union($partnerbefore)->get();
          foreach ($partnerresult as $subs) {
            echo "<option value='" . $subs->id . "'>" . $subs->team_member . "</option>";
          }
        } elseif (auth()->user()->role_id == 13) {
          echo "<option value=''>Select Partner</option>";
          foreach (DB::table('teammembers')
            ->where('id', auth()->user()->teammember_id)
            ->select('teammembers.id', 'teammembers.team_member')
            ->get() as $subs) {
            echo "<option value='" . $subs->id . "'>" . $subs->team_member . "</option>";
          }
        } else {

          echo "<option value=''>Select Partner</option>";
          foreach (DB::table('assignmentmappings')

            ->leftjoin('teammembers', 'teammembers.id', 'assignmentmappings.leadpartner')
            ->leftjoin('teammembers as team', 'team.id', 'assignmentmappings.otherpartner')
            ->where('assignmentmappings.assignmentgenerate_id', $request->assignment)
            ->select('team.team_member as team_member', 'team.id', 'teammembers.id', 'teammembers.team_member')
            ->get() as $subs) {
            echo "<option value='" . $subs->id . "'>" . $subs->team_member . "</option>";
          }
        }
      }
    } else {
      return view('backEnd.timesheet.create', compact('client', 'teammember', 'assignment', 'partner', 'timesheetrejectData'));
    }
  }




################################################################################################################################
app\Http\Controllers\TimesheetController.php


  public function adminsearchtimesheet(Request $request)
  {

    if ($request->ajax()) {
      echo "<option value='null'>Select Assignment</option>";
      foreach (DB::table('assignmentbudgetings')
        ->where('assignmentbudgetings.client_id', $request->cid)
        ->leftJoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftJoin('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
        ->orderBy('assignment_name')->get() as $sub) {
        echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . ' )' . '( ' . $sub->assignmentgenerate_id . ' )' . "</option>";
      }
    } else {
      // Get all input from form
      $startDate = $request->input('startdate', null);
      $endDate = $request->input('enddate', null);
      $teamId = $request->input('teamid', null);
      $teammemberId = $request->input('teammemberId', null);
      // $year = $request->input('year', null);
      $clientId = $request->input('clientId', null);
      $assignmentIddummy = $request->input('assignmentId', null);

      if ($assignmentIddummy == 'null') {
        $assignmentId = null;
      } else {
        $assignmentId =  $assignmentIddummy;
      }
      // dd($assignmentId);
      $teammembers = DB::table('teammembers')
        ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
        ->where('teammembers.status', 1)
        ->whereIn('teammembers.role_id', [14, 15, 13, 11])
        ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
        ->orderBy('team_member', 'ASC')
        ->get();

      $clientsname = DB::table('clients')
        ->whereIn('status', [0, 1])
        ->select('id', 'client_name', 'client_code')
        ->orderBy('client_name', 'ASC')
        ->get();

      $assignmentsname = DB::table('timesheetusers')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->whereNotNull('assignmentbudgetings.assignmentname')
        ->select('timesheetusers.*', 'assignmentbudgetings.assignmentname')
        ->orderBy('assignmentname', 'Asc')
        ->distinct('assignmentname')
        ->get();

      if (auth()->user()->role_id == 11 || auth()->user()->role_id == 13) {

        $timesheetData = DB::table('timesheetusers')
          ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
          // When startDate and endDate exist then run 'when' clause
          ->when($startDate && $endDate && $teammemberId, function ($query) use ($startDate, $endDate, $teammemberId) {
            // dd('teammemberId');
            return $query->where('timesheetusers.createdby', $teammemberId)
              ->where('timesheetusers.date', '>=', $startDate)
              ->where('timesheetusers.date', '<=', $endDate);
          })
          ->when($startDate && $endDate && $clientId, function ($query) use ($startDate, $endDate, $clientId) {
            // dd($clientId);
            return $query->where('timesheetusers.client_id', $clientId)
              ->where('timesheetusers.date', '>=', $startDate)
              ->where('timesheetusers.date', '<=', $endDate);
          })
          ->when($startDate && $endDate && $assignmentId, function ($query) use ($startDate, $endDate, $assignmentId) {
            // dd('assignmentId');
            return $query->where('timesheetusers.assignmentgenerate_id', $assignmentId)
              ->where('timesheetusers.date', '>=', $startDate)
              ->where('timesheetusers.date', '<=', $endDate);
          })
          ->when($startDate && $endDate && $teammemberId == null && $clientId == null && $assignmentId == null, function ($query) use ($startDate, $endDate) {
            // dd('year');
            return $query->where('timesheetusers.date', '>=', $startDate)
              ->where('timesheetusers.date', '<=', $endDate);
          })
          ->whereIn('timesheetusers.status', [1, 2, 3])
          ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
          ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
          ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
          ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'patnerid.id')
          ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
          ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'clients.client_code', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername', 'patnerid.staffcode as patnerstaffcode', 'assignmentbudgetings.assignmentname', 'teamrolehistory.newstaff_code')
          ->orderBy('date', 'DESC')
          ->get();

        $request->flash();
        return view('backEnd.timesheet.timesheetdownload', compact('timesheetData', 'teammembers', 'clientsname', 'assignmentsname', 'assignmentId'));
      }
    }
  }
  




################################################################################################################################
resources\views\backEnd\timesheet\timesheetdownload.blade.php

                                  @foreach ($timesheetData as $timesheetDatas)
                                      <tr>
                                          @if (Request::is('adminsearchtimesheet'))
                                              @php
                                                  $permotioncheck = DB::table('teamrolehistory')
                                                      ->where('teammember_id', $timesheetDatas->createdby)
                                                      ->first();

                                                  $datadate = Carbon\Carbon::createFromFormat(
                                                      'Y-m-d H:i:s',
                                                      $timesheetDatas->created_at,
                                                  );

                                                  $permotiondate = null;
                                                  if ($permotioncheck) {
                                                      $permotiondate = Carbon\Carbon::createFromFormat(
                                                          'Y-m-d H:i:s',
                                                          $permotioncheck->created_at,
                                                      );
                                                  }
                                              @endphp
                                          @endif
                                          <td style="display: none;">{{ $timesheetDatas->id }}</td>
                                          <td> {{ $timesheetDatas->team_member ?? '' }} </td>
                                          @if (Request::is('adminsearchtimesheet'))
                                              {{-- <td> {{ $timesheetDatas->staffcode ?? '' }} </td> --}}
                                              @if ($permotioncheck && $datadate->greaterThan($permotiondate))
                                                  <td>{{ $permotioncheck->newstaff_code }}</td>
                                              @else
                                                  <td>{{ $timesheetDatas->staffcode }}</td>
                                              @endif
                                          @endif
                                          <td> <span style="display: none;">
                                                  {{ date('Y-m-d', strtotime($timesheetDatas->date)) }}</span>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                          </td>
                                          <td>
                                              @if ($timesheetDatas->date != null)
                                                  {{ date('l', strtotime($timesheetDatas->date)) }}
                                              @endif
                                          </td>
                                          <td>{{ $timesheetDatas->client_name ?? '' }}
                                          </td>
                                          <td>{{ $timesheetDatas->client_code ?? '' }}
                                          </td>
                                          <td>
                                              {{ $timesheetDatas->assignment_name ?? '' }} (
                                              {{ $timesheetDatas->assignmentgenerate_id ?? '' }})
                                              @if ($timesheetDatas->assignmentname != null)
                                                  ({{ $timesheetDatas->assignmentname ?? '' }})
                                              @endif
                                          </td>
                                          <td> {{ $timesheetDatas->workitem ?? '' }}</td>
                                          <td>{{ $timesheetDatas->location ?? '' }} </td>
                                          <td> {{ $timesheetDatas->patnername ?? '' }} (
                                              {{ $timesheetDatas->newstaff_code ?? ($timesheetDatas->patnerstaffcode ?? '') }})
                                          </td>
                                          <td>{{ $timesheetDatas->hour ?? '' }}</td>
                                      </tr>
                                  @endforeach
								  




################################################################################################################################
app\Http\Controllers\TimesheetController.php
  public function searchingtimesheet(Request $request)
  {
    // dd($request);
    // Get all input from form
    $startDate = $request->input('startdate', null);
    $endDate = $request->input('enddate', null);
    $teamId = $request->input('teamid', null);
    $teammemberId = $request->input('teammemberId', null);
    // $year = $request->input('year', null);

    $teammembers = DB::table('teammembers')
      ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
      ->where('teammembers.status', 1)
      ->whereIn('teammembers.role_id', [14, 15, 13, 11])
      ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
      ->orderBy('team_member', 'ASC')
      ->get();

    // For patner
    if (auth()->user()->role_id == 13) {
      $query = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'patnerid.id')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        // ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'teammembers.team_member', 'patnerid.team_member as patnername', 'assignmentbudgetings.assignmentname')
        ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'clients.client_code', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername', 'patnerid.staffcode as patnerstaffcode', 'assignmentbudgetings.assignmentname', 'teamrolehistory.newstaff_code')
        ->orderBy('date', 'DESC');



      if ($startDate && $endDate && $teamId) {
        $query->where(function ($q) use ($startDate, $endDate, $teamId) {
          $q->where('timesheetusers.createdby', $teamId)
            ->where('timesheetusers.date', '>=', $startDate)
            ->where('timesheetusers.date', '<=', $endDate);
        });
      }

      $timesheetData = $query->get();
      // dd($timesheetData);
      $request->flash();
      return view('backEnd.timesheet.timesheetdownload', compact('timesheetData'));
    }
    // For staff and manager
    else {

      $query = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'patnerid.id')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        // ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'teammembers.team_member', 'patnerid.team_member as patnername', 'assignmentbudgetings.assignmentname')
        ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'clients.client_code', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername', 'patnerid.staffcode as patnerstaffcode', 'assignmentbudgetings.assignmentname', 'teamrolehistory.newstaff_code')
        ->orderBy('date', 'DESC');

      if ($startDate && $endDate && $teamId) {
        $query->where(function ($q) use ($startDate, $endDate, $teamId) {
          $q->where('timesheetusers.createdby', $teamId)
            ->where('timesheetusers.date', '>=', $startDate)
            ->where('timesheetusers.date', '<=', $endDate);
        });
      }
      $timesheetData = $query->get();
      // dd($timesheetData);

      $request->flash();
      return view('backEnd.timesheet.timesheetdownload', compact('timesheetData'));
    }
  }





################################################################################################################################
app\Http\Controllers\TimesheetController.php

  public function mytimesheetlist(Request $request, $teamid)
  {
    // dd($teamid);
    if (auth()->user()->role_id == 13) {

      $date = DB::table('timesheetreport')->where('id', $request->id)->first();
      $timesheetData = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->where('timesheetusers.createdby', $teamid)
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'patnerid.id')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        // ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'teammembers.team_member', 'patnerid.team_member as patnername', 'assignmentbudgetings.assignmentname')
        ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'clients.client_code', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername', 'patnerid.staffcode as patnerstaffcode', 'assignmentbudgetings.assignmentname', 'teamrolehistory.newstaff_code')
        ->orderBy('date', 'DESC')
        ->take(7)
        ->get();


      // dd($timesheetData);
    } else {
      $date = DB::table('timesheetreport')->where('id', $request->id)->first();
      $timesheetData = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->where('timesheetusers.createdby', $teamid)
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'patnerid.id')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        // ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'teammembers.team_member', 'patnerid.team_member as patnername', 'assignmentbudgetings.assignmentname')
        ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'clients.client_code', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername', 'patnerid.staffcode as patnerstaffcode', 'assignmentbudgetings.assignmentname', 'teamrolehistory.newstaff_code')
        ->orderBy('date', 'DESC')
        ->take(7)
        ->get();
    }
    return view('backEnd.timesheet.timesheetdownload', compact('timesheetData'));
  }





################################################################################################################################
resources\views\backEnd\timesheet\weeklylist.blade.php


                            @foreach ($timesheetData as $timesheetDatas)
                                <tr>
                                    @php

                                        $permotioncheck = DB::table('teamrolehistory')
                                            ->where('teammember_id', $timesheetDatas->createdby)
                                            ->first();

                                        $datadate = Carbon\Carbon::createFromFormat(
                                            'Y-m-d H:i:s',
                                            $timesheetDatas->created_at,
                                        );

                                        $permotiondate = null;
                                        if ($permotioncheck) {
                                            $permotiondate = Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $permotioncheck->created_at,
                                            );
                                        }

                                    @endphp
                                    <td style="display: none;">{{ $timesheetDatas->id }}</td>
                                    <td> {{ $timesheetDatas->team_member ?? '' }} </td>
                                    {{-- <td> {{ $timesheetDatas->staffcode ?? '' }} </td> --}}
                                    @if ($permotiondate && $datadate->greaterThan($permotiondate))
                                        <td>{{ $permotioncheck->newstaff_code }}</td>
                                    @else
                                        <td>{{ $timesheetDatas->staffcode }}</td>
                                    @endif
                                    <td> <span style="display: none;">
                                            {{ date('Y-m-d', strtotime($timesheetDatas->date)) }}</span>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                    </td>
                                    <td>
                                        @if ($timesheetDatas->date != null)
                                            {{ date('l', strtotime($timesheetDatas->date)) }}
                                        @endif
                                    </td>
                                    <td>{{ $timesheetDatas->client_name ?? '' }} ({{ $timesheetDatas->client_code ?? '' }})
                                    </td>
                                    <td>
                                        {{ $timesheetDatas->assignment_name ?? '' }} (
                                        {{ $timesheetDatas->assignmentgenerate_id ?? '' }})
                                        @if ($timesheetDatas->assignmentname != null)
                                            ({{ $timesheetDatas->assignmentname ?? '' }})
                                        @endif
                                    </td>
                                    <td> {{ $timesheetDatas->workitem ?? '' }}</td>
                                    <td>{{ $timesheetDatas->location ?? '' }} </td>
                                    <td> {{ $timesheetDatas->patnername ?? '' }}
                                        (
                                        {{ $timesheetDatas->newstaff_code ?? ($timesheetDatas->patnerstaffcodee ?? '') }})
                                    </td>
                                    <td>{{ $timesheetDatas->hour ?? '' }}</td>
                                    <td>
                                        @if ($timesheetDatas->status == 0)
                                            <span class="badge badge-pill badge-warning">Saved</span>
                                        @elseif ($timesheetDatas->status == 1 || $timesheetDatas->status == 3)
                                            <span class="badge badge-pill badge-danger">Submit</span>
                                        @else
                                            <span class="badge badge-pill badge-secondary">Rejected</span>
                                        @endif
                                    </td>
                                    @if (Auth::user()->role_id == 11 || Auth::user()->teammember_id != $timesheetDatas->createdby)
                                        <td>
                                            @if ($timesheetDatas->status == 2)
                                                <a href="  {{ url('/timesheet/reject/' . $timesheetDatas->id) }}"
                                                    onclick="return confirm('Are you sure you want to Reject this timesheet?');">
                                                    <button class="btn btn-danger" data-toggle="modal"
                                                        style="height: 16px; width: auto; border-radius: 7px; display: flex; align-items: center; justify-content: center;font-size: 11px;"
                                                        data-target="#requestModal" disabled>Reject</button>
                                                </a>
                                            @else
                                                <a href="  {{ url('/timesheet/reject/' . $timesheetDatas->id) }}"
                                                    onclick="return confirm('Are you sure you want to Reject this timesheet?');">
                                                    <button class="btn btn-danger" data-toggle="modal"
                                                        style="height: 16px; width: auto; border-radius: 7px; display: flex; align-items: center; justify-content: center;font-size: 11px;"
                                                        data-target="#requestModal">Reject</button>
                                                </a>
                                            @endif
                                        </td>
                                    @endif
                                </tr>
                            @endforeach





################################################################################################################################
app\Http\Controllers\TimesheetController.php


  public function weeklylist(Request $request)
  {
    // dd($request);
    if (auth()->user()->role_id == 13) {

      $date = DB::table('timesheetreport')->where('id', $request->id)->first();
      $timesheetData = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->where('timesheetusers.createdby', $request->teamid)
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->where('timesheetusers.date', '>=', $date->startdate)
        ->where('timesheetusers.date', '<=', $date->enddate)
        ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'patnerid.id')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        // ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername', 'assignmentbudgetings.assignmentname')
        ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'clients.client_code', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername', 'patnerid.staffcode as patnerstaffcodee', 'assignmentbudgetings.assignmentname', 'teamrolehistory.newstaff_code')
        ->orderBy('id', 'ASC')
        //   ->orderBy('date', 'DESC')
        ->get();
    } else {
      $date = DB::table('timesheetreport')->where('id', $request->id)->first();
      $timesheetData = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->where('timesheetusers.createdby', $request->teamid)
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->where('timesheetusers.date', '>=', $date->startdate)
        ->where('timesheetusers.date', '<=', $date->enddate)
        ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'patnerid.id')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'clients.client_code', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername', 'patnerid.staffcode as patnerstaffcodee', 'assignmentbudgetings.assignmentname', 'teamrolehistory.newstaff_code')
        ->orderBy('id', 'ASC')
        ->get();
      // dd($timesheetData);
    }
    return view('backEnd.timesheet.weeklylist', compact('timesheetData'));
  }
  

################################################################################################################################
resources\views\backEnd\timesheet\rejectedlist.blade.php

                                            @foreach ($client_id as $item)
                                                {{ $item->team_member ?? '' }} (
                                                {{ $item->newstaff_code ?? ($item->staffcode ?? '') }})
                                                @if ($item->team_member != null)
                                                    ,
                                                @endif
                                            @endforeach






################################################################################################################################
resources\views\backEnd\timesheet\rejectedlist.blade.php

    $client_id = DB::table('timesheetusers')
                                            ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
                                            ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
                                            ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.partner')
                                            ->leftJoin(
                                                'teamrolehistory',
                                                'teamrolehistory.teammember_id',
                                                '=',
                                                'teammembers.id',
                                            )
                                            ->where('timesheetusers.timesheetid', $timesheetDatas->timesheetid)
                                            ->select(
                                                'clients.client_name',
                                                'clients.client_code',
                                                'timesheetusers.hour',
                                                'timesheetusers.location',
                                                'timesheetusers.*',
                                                'assignments.assignment_name',
                                                'billable_status',
                                                'workitem',
                                                'teammembers.team_member',
                                                'teammembers.staffcode',
                                                'timesheetusers.timesheetid',
                                                'teamrolehistory.newstaff_code',
                                            )
                                            ->get();




################################################################################################################################
app\Http\Controllers\ApplyleaveController.php

  public function index()
  {

    $permotioncheck = DB::table('teamrolehistory')
      ->where('teammember_id', auth()->user()->teammember_id)->first();
    // dd($permotioncheck);
    $currentdate = date('Y-m-d');
    $currentYear = date('Y');
    $financialYearStart = $currentYear . '-04-01';
    $financialYearEnd = ($currentYear + 1) . '-03-31';

    $casualteam = DB::table('teammembers')->where('id', auth()->user()->teammember_id)->first();

    $birthday = DB::table('leavetypes')
      ->where('year', $currentYear)->where('name', 'Birthday/Religious Festival')->first();
    $Casual = DB::table('leavetypes')->where('year', $currentYear)->where('name', 'Casual Leave')->first();
    $Sick = DB::table('leavetypes')->where('year', $currentYear)->where('name', 'Sick Leave')->first();
    //  dd($casualteam);
    if ($casualteam->joining_date < $Casual->startdate) {

      $to = \Carbon\Carbon::createFromFormat('Y-m-d', $Casual->startdate);
    } else {
      $to = \Carbon\Carbon::createFromFormat('Y-m-d', $casualteam->joining_date);
    }




    $diff_in_months = $to->diffInMonths($currentdate) + 1;
    if (\Carbon\Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->diffInDays($currentdate) < 90) {
      $diff_in_months = 0;
    }
    //dd($diff_in_months);
    $teamdate = \Carbon\Carbon::createFromFormat('Y-m-d', $casualteam->joining_date);
    //   $currentdate = date('Y-m-d');
    $teammonthcount = $teamdate->diffInMonths($currentdate) + 1;
    if ($teamdate->diffInDays($currentdate) < 90) {
      $teammonthcount = 0;
    }

    if (auth()->user()->teammember_id == 434 || auth()->user()->teammember_id == 429) {
      $teammember = Teammember::with('role:id,rolename')
        ->whereNotNull('joining_date')
        ->get();




      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;

      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);

        $datess = [];
        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->where('startdate', '>=', $toDate)
          ->where('enddate', '<=', $toDate)->select('startdate')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }

        $countSick = array_diff($datess, $hdatess);
      }

      $countSick = DB::table('leaveapprove')
        ->where('year', $currentYear)->where('leavetype', $Sick->id)
        ->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');
      //  dd($countSick);
      $countCasual = DB::table('leaveapprove')
        ->where('year', $currentYear)->where('leavetype', $Casual->id)
        ->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');

      $countCasualafmnth = DB::table('leaveapprove')
        ->where('year', $currentYear)
        ->where('leavetype', $Casual->id)
        ->where('teammemberid', auth()->user()->teammember_id)
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addMonths(3))->sum('totaldays');

      $countbirthday = DB::table('leaveapprove')
        ->where('year', $currentYear)->where('leavetype', $birthday->id)
        ->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');

      //dd($countSick);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      // dd($totalcountCasual);
      //  dd($countCasualafmnth);
      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name')->get();
      // dd($applyleaveDatas);
      return view('backEnd.applyleave.teamapplication', compact(
        'teammember',
        'countCasualafmnth',
        'teammonthcount',
        'totalcountCasual',
        'teamapplyleaveDatas',
        'birthday',
        'countbirthday',
        'Casual',
        'Sick',
        'countSick',
        'countCasual'
      ));
    } elseif (auth()->user()->role_id == 11) {

      $teammember = Teammember::with('role:id,rolename')
        ->whereNotNull('joining_date')
        ->get();

      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;
      $datess = [];
      $hdatess = [];
      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();


        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $datess = array_unique($datess);
      }
      $countSick = count(array_diff($datess, $hdatess));


      $appliedCasual = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countCasual = 0;
      $casualDates = [];
      foreach ($appliedCasual as $CasualLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $casualDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $casualDates = array_unique($casualDates);
      }
      $countCasual = count(array_diff($casualDates, $hdatess));

      $appliedCasualafmnth = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addDays(90))
        ->get();

      $countCasualafmnth = 0;
      $CasualafmnthDates = [];
      foreach ($appliedCasualafmnth as $CasualafmnthLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $CasualafmnthDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $CasualafmnthDates = array_unique($CasualafmnthDates);
      }
      $countCasualafmnth = count(array_diff($CasualafmnthDates, $hdatess));





      $appliedbirthday = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $birthday->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();
      $countbirthday = 0;
      $birthdayDates = [];
      foreach ($appliedbirthday as $birthdayLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $birthdayDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $birthdayDates = array_unique($birthdayDates);
      }
      $countbirthday = count(array_diff($birthdayDates, $hdatess));

      //dd($diff_in_months);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      //  dd($diff_in_months);

      //  dd($countCasualafmnth);
      $leavetaken = DB::table('leaveapprove')
        ->where('year', '2023')->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');
      $myapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.createdby', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name')->latest()->get();
      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name')->get();

      $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
      $attendance = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $clInAttendance = 0;
      $slInAttendance = 0;
      //dd($attendance);
      foreach ($attendance as $item) {
        foreach ($columns as $column) {
          if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
            $clInAttendance++;
          }
          if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
            $slInAttendance++;
          }
        }
      }

      $role_id = auth()->user()->teammember_id;
      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'teammembers.emailid', 'roles.rolename', 'leavetypes.name')
        // ->take(7)
        ->get();

      $hasPendingRequests = $teamapplyleaveDatas->contains('status', 0);
      // dd($applyleaveDatas);
      return view('backEnd.applyleave.teamapplication', compact(
        'teammember',
        'countCasualafmnth',
        'teammonthcount',
        'totalcountCasual',
        'teamapplyleaveDatas',
        'birthday',
        'countbirthday',
        'Casual',
        'Sick',
        'countSick',
        'countCasual',
        'role_id',
        'clInAttendance',
        'slInAttendance',
        'hasPendingRequests',
      ));
    } elseif (auth()->user()->role_id == 18) {

      $role_id = auth()->user()->teammember_id;

      $teammember = Teammember::with('role:id,rolename')
        ->whereNotNull('joining_date')
        ->get();

      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;
      $datess = [];
      $hdatess = [];
      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();


        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $datess = array_unique($datess);
      }
      $countSick = count(array_diff($datess, $hdatess));


      $appliedCasual = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countCasual = 0;
      $casualDates = [];
      foreach ($appliedCasual as $CasualLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $casualDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $casualDates = array_unique($casualDates);
      }
      $countCasual = count(array_diff($casualDates, $hdatess));

      $appliedCasualafmnth = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addDays(90))
        ->get();

      $countCasualafmnth = 0;
      $CasualafmnthDates = [];
      foreach ($appliedCasualafmnth as $CasualafmnthLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $CasualafmnthDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $CasualafmnthDates = array_unique($CasualafmnthDates);
      }
      $countCasualafmnth = count(array_diff($CasualafmnthDates, $hdatess));





      $appliedbirthday = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $birthday->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();
      $countbirthday = 0;
      $birthdayDates = [];
      foreach ($appliedbirthday as $birthdayLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $birthdayDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $birthdayDates = array_unique($birthdayDates);
      }
      $countbirthday = count(array_diff($birthdayDates, $hdatess));

      //dd($diff_in_months);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      //  dd($diff_in_months);

      //  dd($countCasualafmnth);
      $leavetaken = DB::table('leaveapprove')
        ->where('year', '2023')->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');

      $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
      $attendance = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $clInAttendance = 0;
      $slInAttendance = 0;
      //dd($attendance);
      foreach ($attendance as $item) {
        foreach ($columns as $column) {
          if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
            $clInAttendance++;
          }
          if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
            $slInAttendance++;
          }
        }
      }
      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name')->latest()->get();

      return view('backEnd.applyleave.teamapplication', compact(
        'teammember',
        'countCasualafmnth',
        'teammonthcount',
        'totalcountCasual',
        'teamapplyleaveDatas',
        'birthday',
        'countbirthday',
        'Casual',
        'Sick',
        'countSick',
        'countCasual',
        'role_id',
        'clInAttendance',
        'slInAttendance',
      ));
    } elseif ($permotioncheck && auth()->user()->role_id == 13) {

      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;
      $datess = [];
      $hdatess = [];
      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();


        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $datess = array_unique($datess);
      }
      $countSick = count(array_diff($datess, $hdatess));


      $appliedCasual = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countCasual = 0;
      $casualDates = [];
      foreach ($appliedCasual as $CasualLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $casualDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $casualDates = array_unique($casualDates);
      }
      $countCasual = count(array_diff($casualDates, $hdatess));

      $appliedCasualafmnth = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addDays(90))
        ->get();

      $countCasualafmnth = 0;
      $CasualafmnthDates = [];
      foreach ($appliedCasualafmnth as $CasualafmnthLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $CasualafmnthDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $CasualafmnthDates = array_unique($CasualafmnthDates);
      }
      $countCasualafmnth = count(array_diff($CasualafmnthDates, $hdatess));

      $appliedbirthday = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $birthday->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();
      $countbirthday = 0;
      $birthdayDates = [];
      foreach ($appliedbirthday as $birthdayLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $birthdayDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $birthdayDates = array_unique($birthdayDates);
      }
      $countbirthday = count(array_diff($birthdayDates, $hdatess));

      //dd($diff_in_months);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      //  dd($diff_in_months);

      //  dd($countCasualafmnth);
      $leavetaken = DB::table('leaveapprove')
        ->where('year', '2023')->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');
      // $myapplyleaveDatas  = DB::table('applyleaves')
      //   ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
      //   ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
      //   ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
      //   ->where('applyleaves.createdby', auth()->user()->teammember_id)
      //   ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->latest()->get();



      $commonQuery = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.createdby', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name');

      $myapplyleaveDatasbefore = (clone $commonQuery)
        ->whereDate('applyleaves.created_at', '<', $permotioncheck->created_at)
        ->addSelect('teammembers.staffcode')
        ->get();

      $myapplyleaveDatasafter = (clone $commonQuery)
        ->leftJoin('teamrolehistory as createdby_history', 'createdby_history.teammember_id', '=', 'teammembers.id')
        ->whereDate('applyleaves.created_at', '>', $permotioncheck->created_at)
        ->addSelect('createdby_history.newstaff_code')
        ->get();
      $myapplyleaveDatas = $myapplyleaveDatasafter->merge($myapplyleaveDatasbefore);





      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->get();

      $hasPendingRequests = $teamapplyleaveDatas->contains('status', 0);


      $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
      $attendance = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $clInAttendance = 0;
      $slInAttendance = 0;
      //dd($attendance);
      foreach ($attendance as $item) {
        foreach ($columns as $column) {
          if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
            $clInAttendance++;
          }
          if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
            $slInAttendance++;
          }
        }
      }

      //Aproved leave jan to dec 
      $currentYear = date('Y');
      $approvedleavesvalue = DB::table('applyleaves')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 1)
        ->whereYear('from',  $currentYear)
        ->get();

      $leaveDurations = [];
      foreach ($approvedleavesvalue as $approvedleavesvalues) {
        $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

        $diff_in_days = $to->diffInDays($from) + 1;

        $holidaycount = DB::table('holidays')
          ->where('startdate', '>=', $approvedleavesvalues->from)
          ->where('enddate', '<=', $approvedleavesvalues->to)
          ->count();

        $leaveDurationcount = $diff_in_days - $holidaycount;
        $leaveDurations[] = $leaveDurationcount;
      }

      $approvedleavesvaluecount = array_sum($leaveDurations);
      // dd($approvedleavesvaluecount);
      //Aproved leave jan to dec end hare 

      // dd($applyleaveDatas);
      return view('backEnd.applyleave.index', compact('countCasualafmnth', 'leavetaken', 'teammonthcount', 'totalcountCasual', 'myapplyleaveDatas', 'teamapplyleaveDatas', 'birthday', 'countbirthday', 'Casual', 'Sick', 'countSick', 'countCasual', 'clInAttendance', 'slInAttendance', 'approvedleavesvaluecount', 'hasPendingRequests'));
    } else {


      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;
      $datess = [];
      $hdatess = [];
      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();


        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $datess = array_unique($datess);
      }
      $countSick = count(array_diff($datess, $hdatess));


      $appliedCasual = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countCasual = 0;
      $casualDates = [];
      foreach ($appliedCasual as $CasualLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $casualDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $casualDates = array_unique($casualDates);
      }
      $countCasual = count(array_diff($casualDates, $hdatess));

      $appliedCasualafmnth = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addDays(90))
        ->get();

      $countCasualafmnth = 0;
      $CasualafmnthDates = [];
      foreach ($appliedCasualafmnth as $CasualafmnthLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $CasualafmnthDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $CasualafmnthDates = array_unique($CasualafmnthDates);
      }
      $countCasualafmnth = count(array_diff($CasualafmnthDates, $hdatess));

      $appliedbirthday = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $birthday->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();
      $countbirthday = 0;
      $birthdayDates = [];
      foreach ($appliedbirthday as $birthdayLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $birthdayDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $birthdayDates = array_unique($birthdayDates);
      }
      $countbirthday = count(array_diff($birthdayDates, $hdatess));

      //dd($diff_in_months);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      //  dd($diff_in_months);

      //  dd($countCasualafmnth);
      $leavetaken = DB::table('leaveapprove')
        ->where('year', '2023')->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');
      $myapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.createdby', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->latest()->get();

      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->get();

      $hasPendingRequests = $teamapplyleaveDatas->contains('status', 0);


      $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
      $attendance = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $clInAttendance = 0;
      $slInAttendance = 0;
      //dd($attendance);
      foreach ($attendance as $item) {
        foreach ($columns as $column) {
          if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
            $clInAttendance++;
          }
          if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
            $slInAttendance++;
          }
        }
      }

      //Aproved leave jan to dec 
      $currentYear = date('Y');
      $approvedleavesvalue = DB::table('applyleaves')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 1)
        ->whereYear('from',  $currentYear)
        ->get();

      $leaveDurations = [];
      foreach ($approvedleavesvalue as $approvedleavesvalues) {
        $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

        $diff_in_days = $to->diffInDays($from) + 1;

        $holidaycount = DB::table('holidays')
          ->where('startdate', '>=', $approvedleavesvalues->from)
          ->where('enddate', '<=', $approvedleavesvalues->to)
          ->count();

        $leaveDurationcount = $diff_in_days - $holidaycount;
        $leaveDurations[] = $leaveDurationcount;
      }

      $approvedleavesvaluecount = array_sum($leaveDurations);
      // dd($approvedleavesvaluecount);
      //Aproved leave jan to dec end hare 

      // dd($applyleaveDatas);
      return view('backEnd.applyleave.index', compact('countCasualafmnth', 'leavetaken', 'teammonthcount', 'totalcountCasual', 'myapplyleaveDatas', 'teamapplyleaveDatas', 'birthday', 'countbirthday', 'Casual', 'Sick', 'countSick', 'countCasual', 'clInAttendance', 'slInAttendance', 'approvedleavesvaluecount', 'hasPendingRequests'));
    }
  }
  
  

################################################################################################################################
resources\views\backEnd\applyleave\index.blade.php
find text        <table id="example1" class="table display table-bordered table-striped table-hover">


                                      @foreach ($teamapplyleaveDatas as $applyleaveDatas)
                                          <tr>
                                              <td> <a href="{{ route('applyleave.show', $applyleaveDatas->id) }}">
                                                      {{ $applyleaveDatas->team_member ?? '' }}</a></td>
                                              <td>{{ $applyleaveDatas->staffcode }}</td>
                                              <td>

                                                  {{ $applyleaveDatas->name ?? '' }}<br>
                                                  @if ($applyleaveDatas->type == '0')
                                                      <b>Type :</b> <span>Birthday</span><br>
                                                      <span><b>Birthday Date :
                                                          </b>{{ date(
                                                              'F d,Y',
                                                              strtotime(
                                                                  App\Models\Teammember::select('dateofbirth')->where('id', $applyleaveDatas->createdby)->first()->dateofbirth,
                                                              ),
                                                          ) ?? '' }}</span>
                                                  @elseif($applyleaveDatas->type == '1')
                                                      <span>Religious Festival</span>
                                                  @endif
                                                  @if ($applyleaveDatas->examtype == '0')
                                                      <b>Exam Type :</b> <span>PCC</span>
                                                  @elseif($applyleaveDatas->examtype == '1')
                                                      <b>Exam Type :</b> <span>CA Final</span>
                                                  @elseif($applyleaveDatas->examtype == '2')
                                                      <b>Exam Type :</b> <span>B.Com</span>
                                                  @endif
                                                  @if ($applyleaveDatas->examtype == '3')
                                                      <b>Other :</b> <span>{{ $applyleaveDatas->otherexam ?? '' }}</span>
                                                  @endif
                                              </td>
                                              {{-- <td>{{ App\Models\Teammember::select('team_member')->where('id', $applyleaveDatas->approver)->first()->team_member ?? '' }}
                                                  ({{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $applyleaveDatas->approver)->first()->staffcode ?? '' }})
                                              </td> --}}
                                              @php
                                                  $approvelpartner = DB::table('teammembers')
                                                      ->leftJoin(
                                                          'teamrolehistory',
                                                          'teamrolehistory.teammember_id',
                                                          '=',
                                                          'teammembers.id',
                                                      )
                                                      ->where('teammembers.id', $applyleaveDatas->approver)
                                                      ->select(
                                                          'teammembers.team_member',
                                                          'teammembers.staffcode',
                                                          'teamrolehistory.newstaff_code',
                                                          'teamrolehistory.created_at',
                                                      )
                                                      ->first();

                                                  $datadate = Carbon\Carbon::createFromFormat(
                                                      'Y-m-d H:i:s',
                                                      $applyleaveDatas->created_at,
                                                  );

                                                  $permotiondate = null;
                                                  if ($approvelpartner) {
                                                      $permotiondate = Carbon\Carbon::createFromFormat(
                                                          'Y-m-d H:i:s',
                                                          $approvelpartner->created_at,
                                                      );
                                                  }
                                              @endphp


                                              <td>
                                                  {{ $approvelpartner->team_member ?? '' }}
                                                  @if ($approvelpartner && $datadate->greaterThan($permotiondate))
                                                      ({{ $approvelpartner->newstaff_code }})
                                                  @else
                                                      ( {{ $approvelpartner->staffcode }})
                                                  @endif
                                              </td>

                                              <td>{{ $applyleaveDatas->reasonleave ?? '' }} </td>

                                              <td>
                                                  {{ date('d-m-Y', strtotime($applyleaveDatas->from)) ?? '' }} to
                                                  {{ date('d-m-Y', strtotime($applyleaveDatas->to)) ?? '' }}
                                              </td>
                                              @php
                                                  $to = Carbon\Carbon::createFromFormat(
                                                      'Y-m-d',
                                                      $applyleaveDatas->to ?? '',
                                                  );
                                                  $from = Carbon\Carbon::createFromFormat(
                                                      'Y-m-d',
                                                      $applyleaveDatas->from,
                                                  );
                                                  $diff_in_days = $to->diffInDays($from) + 1;
                                                  $holidaycount = DB::table('holidays')
                                                      ->where('startdate', '>=', $applyleaveDatas->from)
                                                      ->where('enddate', '<=', $applyleaveDatas->to)
                                                      ->count();
                                              @endphp
                                              <td>{{ $diff_in_days - $holidaycount ?? '' }}</td>

                                              <td> {{ date('d-m-Y', strtotime($applyleaveDatas->created_at)) ?? '' }}</td>
                                              <td>
                                                  @if ($applyleaveDatas->status == 0)
                                                      <span class="badge badge-pill badge-warning">Created</span>
                                                  @elseif($applyleaveDatas->status == 1)
                                                      <span class="badge badge-success">Approved</span>
                                                  @elseif($applyleaveDatas->status == 2)
                                                      <span class="badge badge-danger">Rejected</span>
                                                  @endif
                                              </td>
                                              <td>
                                                  @if ($applyleaveDatas->status == 0)
                                                      <form method="post"
                                                          action="{{ route('applyleave.update', $applyleaveDatas->id) }}"
                                                          enctype="multipart/form-data" style="text-align: center;">
                                                          @method('PATCH')
                                                          @csrf
                                                          <input type="text" hidden id="example-date-input"
                                                              name="status" value="1" class="form-control"
                                                              placeholder="Enter Location">
                                                          <button type="submit" class="btn btn-success"
                                                              style="border-radius: 7px; font-size: 10px; padding: 5px;">
                                                              Approve</button>
                                                      </form>
                                                  @endif
                                              </td>
                                              <td style="text-align: center;">
                                                  @if ($applyleaveDatas->status == 0)
                                                      <button data-toggle="modal"
                                                          data-target="#exampleModal12{{ $loop->index }}"
                                                          class="btn btn-danger"
                                                          style="border-radius: 7px; font-size: 10px; padding: 5px; margin-bottom: 16px;">
                                                          Reject</button>
                                                  @endif
                                              </td>

                                              {{-- model box --}}
                                              {{-- <div class="modal fade" id="exampleModal12" tabindex="-1" role="dialog"
                                                aria-labelledby="exampleModalLabel4" aria-hidden="true"> --}}
                                              <div class="modal fade" id="exampleModal12{{ $loop->index }}"
                                                  tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel4"
                                                  aria-hidden="true">
                                                  <div class="modal-dialog" role="document">
                                                      <div class="modal-content">
                                                          <div class="modal-header" style="background:#37A000">
                                                              <h5 style="color: white" class="modal-title font-weight-600"
                                                                  id="exampleModalLabel1">Reason For
                                                                  Rejection</h5>
                                                              <button type="button" class="close" data-dismiss="modal"
                                                                  aria-label="Close">
                                                                  <span aria-hidden="true">&times;</span>
                                                              </button>
                                                          </div>
                                                          <form method="post"
                                                              action="{{ url('applyleave/update', $applyleaveDatas->id) }}"
                                                              enctype="multipart/form-data">
                                                              @csrf
                                                              <div class="modal-body">
                                                                  <div class="row row-sm">
                                                                      <div class="col-12">
                                                                          <div class="form-group">
                                                                              <textarea rows="6" name="remark" class="form-control" placeholder=""></textarea>
                                                                              <input hidden type="text"
                                                                                  id="example-date-input" name="status"
                                                                                  value="2" class="form-control"
                                                                                  placeholder="Enter Reason">
                                                                          </div>
                                                                      </div>
                                                                  </div>
                                                                  <button type="button" class="btn btn-danger"
                                                                      data-dismiss="modal">Close</button>
                                                                  <button type="submit" style="float: right"
                                                                      class="btn btn-success">Save </button>
                                                              </div>
                                                          </form>
                                                      </div>
                                                  </div>
                                              </div>

                                          </tr>
                                      @endforeach






################################################################################################################################
resources\views\backEnd\applyleave\index.blade.php



                                  <table id="examplee" class="table display table-bordered table-striped table-hover">
                                      <thead>
                                          <tr>
                                              <th>Date of Request</th>
                                              <th>Employee</th>
                                              <th>Staff Code</th>
                                              <th>Leave Type</th>
                                              <th>Approver</th>
                                              <th>Reason for Leave</th>
                                              <th>Leave Period</th>
                                              <th>Days</th>
                                              <th>Status</th>
                                              {{-- @if (auth()->user()->role_id != 13) --}}
                                              <th>Action</th>
                                              {{-- @endif --}}
                                          </tr>
                                      </thead>
                                      <tbody>

                                          @foreach ($myapplyleaveDatas as $applyleaveDatas)
                                              <tr>
                                                  {{-- @php
                                                      dd($applyleaveDatas);
                                                  @endphp --}}
                                                  <td>{{ date('F d,Y', strtotime($applyleaveDatas->created_at)) ?? '' }}
                                                  </td>
                                                  <td> <a href="{{ route('applyleave.show', $applyleaveDatas->id) }}">
                                                          {{ $applyleaveDatas->team_member ?? '' }}</a></td>
                                                  {{-- <td>{{ $applyleaveDatas->staffcode }}</td> --}}
                                                  <td>{{ $applyleaveDatas->newstaff_code ?? $applyleaveDatas->staffcode }}
                                                  </td>
                                                  <td>

                                                      {{ $applyleaveDatas->name ?? '' }}<br>
                                                      @if ($applyleaveDatas->type == '0')
                                                          <b>Type :</b> <span>Birthday</span><br>
                                                          <span><b>Birthday Date :
                                                              </b>{{ date(
                                                                  'F d,Y',
                                                                  strtotime(
                                                                      App\Models\Teammember::select('dateofbirth')->where('id', $applyleaveDatas->createdby)->first()->dateofbirth,
                                                                  ),
                                                              ) ?? '' }}</span>
                                                      @elseif($applyleaveDatas->type == '1')
                                                          <span>Religious Festival</span>
                                                      @endif
                                                      @if ($applyleaveDatas->examtype == '0')
                                                          <b>Exam Type :</b> <span>PCC</span>
                                                      @elseif($applyleaveDatas->examtype == '1')
                                                          <b>Exam Type :</b> <span>CA Final</span>
                                                      @elseif($applyleaveDatas->examtype == '2')
                                                          <b>Exam Type :</b> <span>B.Com</span>
                                                      @endif
                                                      @if ($applyleaveDatas->examtype == '3')
                                                          <b>Other :</b>
                                                          <span>{{ $applyleaveDatas->otherexam ?? '' }}</span>
                                                      @endif
                                                  </td>
                                                  <td>{{ App\Models\Teammember::select('team_member')->where('id', $applyleaveDatas->approver)->first()->team_member ?? '' }}
                                                      ({{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $applyleaveDatas->approver)->first()->staffcode ?? '' }})
                                                  </td>

                                                  <td>{{ $applyleaveDatas->reasonleave ?? '' }} </td>

                                                  <td>{{ date('F d,Y', strtotime($applyleaveDatas->from)) ?? '' }} -
                                                      {{ date('F d,Y', strtotime($applyleaveDatas->to)) ?? '' }}</td>
                                                  @php
                                                      $to = Carbon\Carbon::createFromFormat(
                                                          'Y-m-d',
                                                          $applyleaveDatas->to ?? '',
                                                      );
                                                      $from = Carbon\Carbon::createFromFormat(
                                                          'Y-m-d',
                                                          $applyleaveDatas->from,
                                                      );
                                                      $diff_in_days = $to->diffInDays($from) + 1;
                                                      $holidaycount = DB::table('holidays')
                                                          ->where('startdate', '>=', $applyleaveDatas->from)
                                                          ->where('enddate', '<=', $applyleaveDatas->to)
                                                          ->count();
                                                  @endphp
                                                  <td>{{ $diff_in_days - $holidaycount ?? '' }}</td>


                                                  <td>
                                                      @if ($applyleaveDatas->status == 0)
                                                          <span class="badge badge-pill badge-warning">Created</span>
                                                      @elseif($applyleaveDatas->status == 1)
                                                          <span class="badge badge-success">Approved</span>
                                                      @elseif($applyleaveDatas->status == 2)
                                                          <span class="badge badge-danger">Rejected</span>
                                                      @endif
                                                  </td>
                                                  <td>

                                                      @php
                                                          $currentDate = now()->format('Y-m-d');
                                                          $lastdate = $applyleaveDatas->to;
                                                      @endphp
                                                      @if ($lastdate >= $currentDate && $applyleaveDatas->status == 1)
                                                          {{-- @if (auth()->user()->role_id != 13) --}}
                                                          <button class="btn btn-danger" data-toggle="modal"
                                                              style="height: 16px; width: auto; border-radius: 7px; display: flex; align-items: center; justify-content: center;font-size: 11px;"
                                                              data-target="#requestModal{{ $applyleaveDatas->id }}">Request</button>
                                                          {{-- @endif --}}
                                                      @endif
                                                  </td>

                                              </tr>

                                              {{-- leaverequest pop up box open  --}}
                                              @if ($applyleaveDatas->leavetype == 11 || $applyleaveDatas->leavetype == 9)
                                                  <div class="modal fade" id="requestModal{{ $applyleaveDatas->id }}"
                                                      tabindex="-1" role="dialog" aria-labelledby="requestModalLabel"
                                                      aria-hidden="true">
                                                      <div class="modal-dialog" role="document">
                                                          <form method="post" action="{{ route('applyleaverequest') }}"
                                                              enctype="multipart/form-data">
                                                              @csrf
                                                              <div class="modal-content">
                                                                  <div class="modal-header">

                                                                      <h5 class="modal-title" id="requestModalLabel">Enter
                                                                          Request Details</h5>
                                                                      <button type="button" class="close"
                                                                          data-dismiss="modal" aria-label="Close">
                                                                          <span aria-hidden="true">&times;</span>
                                                                      </button>
                                                                  </div>
                                                                  <div class="modal-body">
                                                                      @if ($errors->any())
                                                                          <div class="">
                                                                              <ul>
                                                                                  @foreach ($errors->all() as $error)
                                                                                      <li class="text-danger">
                                                                                          {{ $error }}</li>
                                                                                  @endforeach
                                                                              </ul>
                                                                          </div>
                                                                      @endif

                                                                      <input type="hidden" name="applyleaveid"
                                                                          value="{{ $applyleaveDatas->id }}"
                                                                          class="form-control" placeholder="">
                                                                      <input type="hidden" name="createdby"
                                                                          value="{{ $applyleaveDatas->createdby }}"
                                                                          class="form-control" placeholder="">
                                                                      <input type="hidden" name="approver"
                                                                          value="{{ $applyleaveDatas->approver }}"
                                                                          class="form-control" placeholder="">
                                                                      <input type="hidden" name="status"
                                                                          value="{{ $applyleaveDatas->status }}"
                                                                          class="form-control" placeholder="">
                                                                      <input type="hidden" name="leavetype"
                                                                          value="{{ $applyleaveDatas->leavetype }}"
                                                                          class="form-control" placeholder="">
                                                                      <input type="hidden" name="from"
                                                                          value="{{ $applyleaveDatas->from }}"
                                                                          class="form-control" placeholder=""
                                                                          id="startdateleave">
                                                                      <input type="hidden" name="to"
                                                                          value="{{ $applyleaveDatas->to }}"
                                                                          class="form-control" placeholder=""
                                                                          id="enddateleave">

                                                                      <!-- Input fields for request details here -->
                                                                      <label for="">Reason:*</label>

                                                                      <input type="text" name="reason"
                                                                          class="form-control" placeholder="Enter Reason"
                                                                          required>
                                                                      <label for="">Select Date:*</label>
                                                                      <input type="date" name="date"
                                                                          class="form-control yearValidate" maxlength="10"
                                                                          required>
                                                                      {{-- validation for year --}}

                                                                      <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

                                                                      <script>
                                                                          $(document).ready(function() {
                                                                              $('.yearValidate').on('change', function() {
                                                                                  var leaveDate = $('.yearValidate');
                                                                                  //   alert(leaveDate);
                                                                                  var leaveDateValue = $('.yearValidate').val();
                                                                                  //   console.log(leaveDateValue);
                                                                                  var leaveDateGet = new Date(leaveDateValue);
                                                                                  var leaveyear = leaveDateGet.getFullYear();
                                                                                  // console.log(startyear);
                                                                                  var leaveyearLength = leaveyear.toString().length;
                                                                                  if (leaveyearLength > 4) {
                                                                                      alert('Enter four digits for the year');
                                                                                      leaveDate.val('');
                                                                                  }
                                                                              });
                                                                          });
                                                                      </script>

                                                                  </div>
                                                                  <div class="modal-footer">
                                                                      <button type="button" class="btn btn-secondary"
                                                                          data-dismiss="modal">Close</button>
                                                                      <button type="submit"
                                                                          class="btn btn-primary">Submit</button>
                                                                  </div>
                                                              </div>
                                                          </form>
                                                      </div>
                                                  </div>
                                              @endif
                                          @endforeach
                                      </tbody>
                                  </table>
								  
								  
								  


################################################################################################################################
resources\views\backEnd\applyleave\index.blade.php


  <script>
      $(document).ready(function() {
          //** status wise
          $('#status1').change(function() {
              var status1 = $(this).val();
              var employee1 = $('#employee1').val();
              var leave1 = $('#leave1').val();
              $.ajax({
                  type: 'GET',
                  url: '/filtering-applyleve',
                  data: {
                      status: status1,
                      employee: employee1,
                      leave: leave1
                  },
                  success: function(data) {
                      // Replace the table body with the filtered data
                      $('table tbody').html("");
                      // Clear the table body
                      if (data.length === 0) {
                          // If no data is found, display a "No data found" message
                          $('table tbody').append(
                              '<tr><td colspan="8" class="text-center">No data found</td></tr>'
                          );
                      } else {
                          $.each(data, function(index, item) {

                              // Create the URL dynamically
                              var url = '/applyleave/' + item.id;

                              var createdAt = new Date(item.created_at)
                                  .toLocaleDateString('en-GB', {
                                      day: '2-digit',
                                      month: '2-digit',
                                      year: 'numeric'
                                  });
                              var fromDate = new Date(item.from)
                                  .toLocaleDateString('en-GB', {
                                      day: '2-digit',
                                      month: '2-digit',
                                      year: 'numeric'
                                  });
                              var toDate = new Date(item.to)
                                  .toLocaleDateString('en-GB', {
                                      day: '2-digit',
                                      month: '2-digit',
                                      year: 'numeric'
                                  });

                              var holidays = Math.floor((new Date(item.to) -
                                  new Date(item.from)) / (24 * 60 * 60 *
                                  1000)) + 1;

                              // Add the rows to the table
                              $('table tbody').append('<tr>' +
                                  '<td><a href="' + url + '">' + item
                                  .team_member +
                                  '</a></td>' +
                                  '<td>' + item.staffcode + '</td>' +
                                  '<td>' + item.name + '</td>' +
                                  '<td>' + item.approvernames + ' (' + (item
                                      .newstaff_code ? item.newstaff_code : item
                                      .approverstaffcode) + ')</td>' +
                                  '<td>' + item.reasonleave + '</td>' +
                                  '<td>' + fromDate + ' to ' + toDate +
                                  '</td>' +
                                  '<td>' + holidays + '</td>' +
                                  '<td>' + createdAt + '</td>' +
                                  '<td>' + getStatusBadge(item.status) + '</td>' +
                                  '</tr>');
                          });



                          // Function to handle the status badge
                          function getStatusBadge(status) {
                              if (status == 0) {
                                  return '<span class="badge badge-pill badge-warning"><span style="display: none;">A</span>Created</span>';
                              } else if (status == 1) {
                                  return '<span class="badge badge-success"><span style="display: none;">B</span>Approved</span>';
                              } else if (status == 2) {
                                  return '<span class="badge badge-danger">Rejected</span>';
                              } else {
                                  return '';
                              }
                          }

                          //   remove pagination after filter
                          $('.paging_simple_numbers').remove();
                          $('.dataTables_info').remove();
                      }
                  }
              });
          });

          //** start date wise
          $('#start1').change(function() {
              var start1 = $(this).val();
              var end1 = $('#end1').val();
              var status1 = $('#status1').val();
              var employee1 = $('#employee1').val();
              var leave1 = $('#leave1').val();
              //  alert(start1);
              $.ajax({
                  type: 'GET',
                  url: '/filtering-applyleve',
                  data: {
                      end: end1,
                      start: start1,
                      status: status1,
                      employee: employee1,
                      leave: leave1
                  },
                  success: function(data) {
                      // Replace the table body with the filtered data
                      $('table tbody').html("");
                      // Clear the table body
                      if (data.length === 0) {
                          // If no data is found, display a "No data found" message
                          $('table tbody').append(
                              '<tr><td colspan="8" class="text-center">No data found</td></tr>'
                          );
                      } else {
                          $.each(data, function(index, item) {

                              // Create the URL dynamically
                              var url = '/applyleave/' + item.id;

                              var createdAt = new Date(item.created_at)
                                  .toLocaleDateString('en-GB', {
                                      day: '2-digit',
                                      month: '2-digit',
                                      year: 'numeric'
                                  });
                              var fromDate = new Date(item.from)
                                  .toLocaleDateString('en-GB', {
                                      day: '2-digit',
                                      month: '2-digit',
                                      year: 'numeric'
                                  });
                              var toDate = new Date(item.to)
                                  .toLocaleDateString('en-GB', {
                                      day: '2-digit',
                                      month: '2-digit',
                                      year: 'numeric'
                                  });

                              var holidays = Math.floor((new Date(item.to) -
                                  new Date(item.from)) / (24 * 60 * 60 *
                                  1000)) + 1;

                              // Add the rows to the table
                              $('table tbody').append('<tr>' +
                                  '<td><a href="' + url + '">' + item
                                  .team_member +
                                  '</a></td>' +
                                  '<td>' + item.staffcode + '</td>' +
                                  '<td>' + item.name + '</td>' +
                                  '<td>' + item.approvernames + ' (' + (item
                                      .newstaff_code ? item.newstaff_code : item
                                      .approverstaffcode) + ')</td>' +
                                  '<td>' + item.reasonleave + '</td>' +
                                  '<td>' + fromDate + ' to ' + toDate +
                                  '</td>' +
                                  '<td>' + holidays + '</td>' +
                                  '<td>' + createdAt + '</td>' +
                                  '<td>' + getStatusBadge(item.status) + '</td>' +
                                  '</tr>');
                          });

                          // Function to handle the status badge
                          function getStatusBadge(status) {
                              if (status == 0) {
                                  return '<span class="badge badge-pill badge-warning"><span style="display: none;">A</span>Created</span>';
                              } else if (status == 1) {
                                  return '<span class="badge badge-success"><span style="display: none;">B</span>Approved</span>';
                              } else if (status == 2) {
                                  return '<span class="badge badge-danger">Rejected</span>';
                              } else {
                                  return '';
                              }
                          }

                          //   remove pagination after filter
                          $('.paging_simple_numbers').remove();
                          $('.dataTables_info').remove();
                      }
                  }
              });
          });


          //** end date wise
          $('#end1').change(function() {
              var end1 = $(this).val();
              var start1 = $('#start1').val();
              var status1 = $('#status1').val();
              var employee1 = $('#employee1').val();
              var leave1 = $('#leave1').val();

              $.ajax({
                  type: 'GET',
                  url: '/filtering-applyleve',
                  data: {
                      end: end1,
                      start: start1,
                      status: status1,
                      employee: employee1,
                      leave: leave1
                  },
                  success: function(data) {
                      // Replace the table body with the filtered data
                      $('table tbody').html("");
                      // Clear the table body
                      if (data.length === 0) {
                          // If no data is found, display a "No data found" message
                          $('table tbody').append(
                              '<tr><td colspan="8" class="text-center">No data found</td></tr>'
                          );
                      } else {
                          $.each(data, function(index, item) {

                              // Create the URL dynamically
                              var url = '/applyleave/' + item.id;

                              var createdAt = new Date(item.created_at)
                                  .toLocaleDateString('en-GB', {
                                      day: '2-digit',
                                      month: '2-digit',
                                      year: 'numeric'
                                  });
                              var fromDate = new Date(item.from)
                                  .toLocaleDateString('en-GB', {
                                      day: '2-digit',
                                      month: '2-digit',
                                      year: 'numeric'
                                  });
                              var toDate = new Date(item.to)
                                  .toLocaleDateString('en-GB', {
                                      day: '2-digit',
                                      month: '2-digit',
                                      year: 'numeric'
                                  });

                              var holidays = Math.floor((new Date(item.to) -
                                  new Date(item.from)) / (24 * 60 * 60 *
                                  1000)) + 1;

                              // Add the rows to the table
                              $('table tbody').append('<tr>' +
                                  '<td><a href="' + url + '">' + item
                                  .team_member +
                                  '</a></td>' +
                                  '<td>' + item.staffcode + '</td>' +
                                  '<td>' + item.name + '</td>' +
                                  '<td>' + item.approvernames + ' (' + (item
                                      .newstaff_code ? item.newstaff_code : item
                                      .approverstaffcode) + ')</td>' +
                                  '<td>' + item.reasonleave + '</td>' +
                                  '<td>' + fromDate + ' to ' + toDate +
                                  '</td>' +
                                  '<td>' + holidays + '</td>' +
                                  '<td>' + createdAt + '</td>' +
                                  '<td>' + getStatusBadge(item.status) + '</td>' +
                                  '</tr>');
                          });

                          // Function to handle the status badge
                          function getStatusBadge(status) {
                              if (status == 0) {
                                  return '<span class="badge badge-pill badge-warning"><span style="display: none;">A</span>Created</span>';
                              } else if (status == 1) {
                                  return '<span class="badge badge-success"><span style="display: none;">B</span>Approved</span>';
                              } else if (status == 2) {
                                  return '<span class="badge badge-danger">Rejected</span>';
                              } else {
                                  return '';
                              }
                          }

                          //   remove pagination after filter
                          $('.paging_simple_numbers').remove();
                          $('.dataTables_info').remove();
                      }
                  }
              });
          });

          //   leave type wise
          $('#leave1').change(function() {
              var leave1 = $(this).val();
              var employee1 = $('#employee1').val();
              var status1 = $('#status1').val();
              $.ajax({
                  type: 'GET',
                  url: '/filtering-applyleve',
                  data: {
                      status: status1,
                      employee: employee1,
                      leave: leave1
                  },
                  success: function(data) {
                      // Replace the table body with the filtered data
                      $('table tbody').html("");
                      // Clear the table body
                      if (data.length === 0) {
                          // If no data is found, display a "No data found" message
                          $('table tbody').append(
                              '<tr><td colspan="8" class="text-center">No data found</td></tr>'
                          );
                      } else {
                          $.each(data, function(index, item) {

                              // Create the URL dynamically
                              var url = '/applyleave/' + item.id;

                              var createdAt = new Date(item.created_at)
                                  .toLocaleDateString('en-GB', {
                                      day: '2-digit',
                                      month: '2-digit',
                                      year: 'numeric'
                                  });
                              var fromDate = new Date(item.from)
                                  .toLocaleDateString('en-GB', {
                                      day: '2-digit',
                                      month: '2-digit',
                                      year: 'numeric'
                                  });
                              var toDate = new Date(item.to)
                                  .toLocaleDateString('en-GB', {
                                      day: '2-digit',
                                      month: '2-digit',
                                      year: 'numeric'
                                  });

                              var holidays = Math.floor((new Date(item.to) -
                                  new Date(item.from)) / (24 * 60 * 60 *
                                  1000)) + 1;

                              // Add the rows to the table
                              $('table tbody').append('<tr>' +
                                  '<td><a href="' + url + '">' + item
                                  .team_member +
                                  '</a></td>' +
                                  '<td>' + item.staffcode + '</td>' +
                                  '<td>' + item.name + '</td>' +
                                  '<td>' + item.approvernames + ' (' + (item
                                      .newstaff_code ? item.newstaff_code : item
                                      .approverstaffcode) + ')</td>' +
                                  '<td>' + item.reasonleave + '</td>' +
                                  '<td>' + fromDate + ' to ' + toDate +
                                  '</td>' +
                                  '<td>' + holidays + '</td>' +
                                  '<td>' + createdAt + '</td>' +
                                  '<td>' + getStatusBadge(item.status) + '</td>' +
                                  '</tr>');
                          });

                          // Function to handle the status badge
                          function getStatusBadge(status) {
                              if (status == 0) {
                                  return '<span class="badge badge-pill badge-warning"><span style="display: none;">A</span>Created</span>';
                              } else if (status == 1) {
                                  return '<span class="badge badge-success"><span style="display: none;">B</span>Approved</span>';
                              } else if (status == 2) {
                                  return '<span class="badge badge-danger">Rejected</span>';
                              } else {
                                  return '';
                              }
                          }

                          //   remove pagination after filter
                          $('.paging_simple_numbers').remove();
                          $('.dataTables_info').remove();
                      }
                  }
              });
          });

          //   team name wise
          $('#employee1').change(function() {
              var employee1 = $(this).val();
              var leave1 = $('#leave1').val();
              var status1 = $('#status1').val();

              $.ajax({
                  type: 'GET',
                  url: '/filtering-applyleve',
                  data: {
                      status: status1,
                      employee: employee1,
                      leave: leave1
                  },
                  success: function(data) {
                      // Replace the table body with the filtered data
                      $('table tbody').html("");
                      // Clear the table body
                      if (data.length === 0) {
                          // If no data is found, display a "No data found" message
                          $('table tbody').append(
                              '<tr><td colspan="8" class="text-center">No data found</td></tr>'
                          );
                      } else {
                          $.each(data, function(index, item) {

                              // Create the URL dynamically
                              var url = '/applyleave/' + item.id;

                              var createdAt = new Date(item.created_at)
                                  .toLocaleDateString('en-GB', {
                                      day: '2-digit',
                                      month: '2-digit',
                                      year: 'numeric'
                                  });
                              var fromDate = new Date(item.from)
                                  .toLocaleDateString('en-GB', {
                                      day: '2-digit',
                                      month: '2-digit',
                                      year: 'numeric'
                                  });
                              var toDate = new Date(item.to)
                                  .toLocaleDateString('en-GB', {
                                      day: '2-digit',
                                      month: '2-digit',
                                      year: 'numeric'
                                  });

                              var holidays = Math.floor((new Date(item.to) -
                                  new Date(item.from)) / (24 * 60 * 60 *
                                  1000)) + 1;

                              // Add the rows to the table
                              $('table tbody').append('<tr>' +
                                  '<td><a href="' + url + '">' + item
                                  .team_member +
                                  '</a></td>' +
                                  '<td>' + item.staffcode + '</td>' +
                                  '<td>' + item.name + '</td>' +
                                  //   '<td>' + item.approvernames + '</td>' +
                                  '<td>' + item.approvernames + ' (' + (item
                                      .newstaff_code ? item.newstaff_code : item
                                      .approverstaffcode) + ')</td>' +
                                  '<td>' + item.reasonleave + '</td>' +
                                  '<td>' + fromDate + ' to ' + toDate +
                                  '</td>' +
                                  '<td>' + holidays + '</td>' +
                                  '<td>' + createdAt + '</td>' +
                                  //  '<td>' + item.created_at + '</td>' +
                                  //  '<td>' + item.from + ' to ' + item.to +
                                  //  '</td>' +
                                  '<td>' + getStatusBadge(item.status) + '</td>' +
                                  '</tr>');
                          });



                          // Function to handle the status badge
                          function getStatusBadge(status) {
                              if (status == 0) {
                                  return '<span class="badge badge-pill badge-warning"><span style="display: none;">A</span>Created</span>';
                              } else if (status == 1) {
                                  return '<span class="badge badge-success"><span style="display: none;">B</span>Approved</span>';
                              } else if (status == 2) {
                                  return '<span class="badge badge-danger">Rejected</span>';
                              } else {
                                  return '';
                              }
                          }

                          //   remove pagination after filter
                          $('.paging_simple_numbers').remove();
                          $('.dataTables_info').remove();
                      }
                  }
              });
          });
          //shahid
      });
  </script>






################################################################################################################################
app\Http\Controllers\ApplyleaveController.php


  public function index()
  {

    $permotioncheck = DB::table('teamrolehistory')
      ->where('teammember_id', auth()->user()->teammember_id)->first();
    // dd($permotioncheck);
    $currentdate = date('Y-m-d');
    $currentYear = date('Y');
    $financialYearStart = $currentYear . '-04-01';
    $financialYearEnd = ($currentYear + 1) . '-03-31';

    $casualteam = DB::table('teammembers')->where('id', auth()->user()->teammember_id)->first();

    $birthday = DB::table('leavetypes')
      ->where('year', $currentYear)->where('name', 'Birthday/Religious Festival')->first();
    $Casual = DB::table('leavetypes')->where('year', $currentYear)->where('name', 'Casual Leave')->first();
    $Sick = DB::table('leavetypes')->where('year', $currentYear)->where('name', 'Sick Leave')->first();
    //  dd($casualteam);
    if ($casualteam->joining_date < $Casual->startdate) {

      $to = \Carbon\Carbon::createFromFormat('Y-m-d', $Casual->startdate);
    } else {
      $to = \Carbon\Carbon::createFromFormat('Y-m-d', $casualteam->joining_date);
    }




    $diff_in_months = $to->diffInMonths($currentdate) + 1;
    if (\Carbon\Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->diffInDays($currentdate) < 90) {
      $diff_in_months = 0;
    }
    //dd($diff_in_months);
    $teamdate = \Carbon\Carbon::createFromFormat('Y-m-d', $casualteam->joining_date);
    //   $currentdate = date('Y-m-d');
    $teammonthcount = $teamdate->diffInMonths($currentdate) + 1;
    if ($teamdate->diffInDays($currentdate) < 90) {
      $teammonthcount = 0;
    }

    if (auth()->user()->teammember_id == 434 || auth()->user()->teammember_id == 429) {
      $teammember = Teammember::with('role:id,rolename')
        ->whereNotNull('joining_date')
        ->get();




      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;

      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);

        $datess = [];
        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->where('startdate', '>=', $toDate)
          ->where('enddate', '<=', $toDate)->select('startdate')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }

        $countSick = array_diff($datess, $hdatess);
      }

      $countSick = DB::table('leaveapprove')
        ->where('year', $currentYear)->where('leavetype', $Sick->id)
        ->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');
      //  dd($countSick);
      $countCasual = DB::table('leaveapprove')
        ->where('year', $currentYear)->where('leavetype', $Casual->id)
        ->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');

      $countCasualafmnth = DB::table('leaveapprove')
        ->where('year', $currentYear)
        ->where('leavetype', $Casual->id)
        ->where('teammemberid', auth()->user()->teammember_id)
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addMonths(3))->sum('totaldays');

      $countbirthday = DB::table('leaveapprove')
        ->where('year', $currentYear)->where('leavetype', $birthday->id)
        ->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');

      //dd($countSick);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      // dd($totalcountCasual);
      //  dd($countCasualafmnth);
      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name')->get();
      // dd($applyleaveDatas);
      return view('backEnd.applyleave.teamapplication', compact(
        'teammember',
        'countCasualafmnth',
        'teammonthcount',
        'totalcountCasual',
        'teamapplyleaveDatas',
        'birthday',
        'countbirthday',
        'Casual',
        'Sick',
        'countSick',
        'countCasual'
      ));
    } elseif (auth()->user()->role_id == 11) {

      $teammember = Teammember::with('role:id,rolename')
        ->whereNotNull('joining_date')
        ->get();

      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;
      $datess = [];
      $hdatess = [];
      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();


        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $datess = array_unique($datess);
      }
      $countSick = count(array_diff($datess, $hdatess));


      $appliedCasual = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countCasual = 0;
      $casualDates = [];
      foreach ($appliedCasual as $CasualLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $casualDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $casualDates = array_unique($casualDates);
      }
      $countCasual = count(array_diff($casualDates, $hdatess));

      $appliedCasualafmnth = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addDays(90))
        ->get();

      $countCasualafmnth = 0;
      $CasualafmnthDates = [];
      foreach ($appliedCasualafmnth as $CasualafmnthLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $CasualafmnthDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $CasualafmnthDates = array_unique($CasualafmnthDates);
      }
      $countCasualafmnth = count(array_diff($CasualafmnthDates, $hdatess));





      $appliedbirthday = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $birthday->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();
      $countbirthday = 0;
      $birthdayDates = [];
      foreach ($appliedbirthday as $birthdayLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $birthdayDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $birthdayDates = array_unique($birthdayDates);
      }
      $countbirthday = count(array_diff($birthdayDates, $hdatess));

      //dd($diff_in_months);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      //  dd($diff_in_months);

      //  dd($countCasualafmnth);
      $leavetaken = DB::table('leaveapprove')
        ->where('year', '2023')->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');
      $myapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.createdby', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name')->latest()->get();

      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name')->get();

      $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
      $attendance = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $clInAttendance = 0;
      $slInAttendance = 0;
      //dd($attendance);
      foreach ($attendance as $item) {
        foreach ($columns as $column) {
          if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
            $clInAttendance++;
          }
          if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
            $slInAttendance++;
          }
        }
      }

      $role_id = auth()->user()->teammember_id;
      // this is going on view
      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftJoin('teamrolehistory', function ($join) {
          $join->on('teamrolehistory.teammember_id', '=', 'teammembers.id')
            ->on('teamrolehistory.created_at', '<', 'applyleaves.created_at');
        })
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'teammembers.emailid', 'roles.rolename', 'leavetypes.name', 'teamrolehistory.newstaff_code')
        // ->take(7)
        ->get();

      $hasPendingRequests = $teamapplyleaveDatas->contains('status', 0);
      // dd($applyleaveDatas);
      return view('backEnd.applyleave.teamapplication', compact(
        'teammember',
        'countCasualafmnth',
        'teammonthcount',
        'totalcountCasual',
        'teamapplyleaveDatas',
        'birthday',
        'countbirthday',
        'Casual',
        'Sick',
        'countSick',
        'countCasual',
        'role_id',
        'clInAttendance',
        'slInAttendance',
        'hasPendingRequests',
      ));
    } elseif (auth()->user()->role_id == 18) {

      $role_id = auth()->user()->teammember_id;

      $teammember = Teammember::with('role:id,rolename')
        ->whereNotNull('joining_date')
        ->get();

      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;
      $datess = [];
      $hdatess = [];
      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();


        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $datess = array_unique($datess);
      }
      $countSick = count(array_diff($datess, $hdatess));


      $appliedCasual = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countCasual = 0;
      $casualDates = [];
      foreach ($appliedCasual as $CasualLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $casualDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $casualDates = array_unique($casualDates);
      }
      $countCasual = count(array_diff($casualDates, $hdatess));

      $appliedCasualafmnth = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addDays(90))
        ->get();

      $countCasualafmnth = 0;
      $CasualafmnthDates = [];
      foreach ($appliedCasualafmnth as $CasualafmnthLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $CasualafmnthDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $CasualafmnthDates = array_unique($CasualafmnthDates);
      }
      $countCasualafmnth = count(array_diff($CasualafmnthDates, $hdatess));





      $appliedbirthday = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $birthday->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();
      $countbirthday = 0;
      $birthdayDates = [];
      foreach ($appliedbirthday as $birthdayLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $birthdayDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $birthdayDates = array_unique($birthdayDates);
      }
      $countbirthday = count(array_diff($birthdayDates, $hdatess));

      //dd($diff_in_months);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      //  dd($diff_in_months);

      //  dd($countCasualafmnth);
      $leavetaken = DB::table('leaveapprove')
        ->where('year', '2023')->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');

      $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
      $attendance = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $clInAttendance = 0;
      $slInAttendance = 0;
      //dd($attendance);
      foreach ($attendance as $item) {
        foreach ($columns as $column) {
          if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
            $clInAttendance++;
          }
          if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
            $slInAttendance++;
          }
        }
      }
      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name')->latest()->get();

      return view('backEnd.applyleave.teamapplication', compact(
        'teammember',
        'countCasualafmnth',
        'teammonthcount',
        'totalcountCasual',
        'teamapplyleaveDatas',
        'birthday',
        'countbirthday',
        'Casual',
        'Sick',
        'countSick',
        'countCasual',
        'role_id',
        'clInAttendance',
        'slInAttendance',
      ));
    } elseif ($permotioncheck && auth()->user()->role_id == 13) {

      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;
      $datess = [];
      $hdatess = [];
      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();


        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $datess = array_unique($datess);
      }
      $countSick = count(array_diff($datess, $hdatess));


      $appliedCasual = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countCasual = 0;
      $casualDates = [];
      foreach ($appliedCasual as $CasualLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $casualDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $casualDates = array_unique($casualDates);
      }
      $countCasual = count(array_diff($casualDates, $hdatess));

      $appliedCasualafmnth = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addDays(90))
        ->get();

      $countCasualafmnth = 0;
      $CasualafmnthDates = [];
      foreach ($appliedCasualafmnth as $CasualafmnthLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $CasualafmnthDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $CasualafmnthDates = array_unique($CasualafmnthDates);
      }
      $countCasualafmnth = count(array_diff($CasualafmnthDates, $hdatess));

      $appliedbirthday = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $birthday->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();
      $countbirthday = 0;
      $birthdayDates = [];
      foreach ($appliedbirthday as $birthdayLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $birthdayDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $birthdayDates = array_unique($birthdayDates);
      }
      $countbirthday = count(array_diff($birthdayDates, $hdatess));

      //dd($diff_in_months);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      //  dd($diff_in_months);

      //  dd($countCasualafmnth);
      $leavetaken = DB::table('leaveapprove')
        ->where('year', '2023')->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');
      // $myapplyleaveDatas  = DB::table('applyleaves')
      //   ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
      //   ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
      //   ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
      //   ->where('applyleaves.createdby', auth()->user()->teammember_id)
      //   ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->latest()->get();



      $commonQuery = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.createdby', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name');

      $myapplyleaveDatasbefore = (clone $commonQuery)
        ->whereDate('applyleaves.created_at', '<', $permotioncheck->created_at)
        ->addSelect('teammembers.staffcode')
        ->get();

      $myapplyleaveDatasafter = (clone $commonQuery)
        ->leftJoin('teamrolehistory as createdby_history', 'createdby_history.teammember_id', '=', 'teammembers.id')
        ->whereDate('applyleaves.created_at', '>', $permotioncheck->created_at)
        ->addSelect('createdby_history.newstaff_code')
        ->get();
      $myapplyleaveDatas = $myapplyleaveDatasafter->merge($myapplyleaveDatasbefore);





      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->get();

      $hasPendingRequests = $teamapplyleaveDatas->contains('status', 0);


      $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
      $attendance = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $clInAttendance = 0;
      $slInAttendance = 0;
      //dd($attendance);
      foreach ($attendance as $item) {
        foreach ($columns as $column) {
          if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
            $clInAttendance++;
          }
          if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
            $slInAttendance++;
          }
        }
      }

      //Aproved leave jan to dec 
      $currentYear = date('Y');
      $approvedleavesvalue = DB::table('applyleaves')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 1)
        ->whereYear('from',  $currentYear)
        ->get();

      $leaveDurations = [];
      foreach ($approvedleavesvalue as $approvedleavesvalues) {
        $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

        $diff_in_days = $to->diffInDays($from) + 1;

        $holidaycount = DB::table('holidays')
          ->where('startdate', '>=', $approvedleavesvalues->from)
          ->where('enddate', '<=', $approvedleavesvalues->to)
          ->count();

        $leaveDurationcount = $diff_in_days - $holidaycount;
        $leaveDurations[] = $leaveDurationcount;
      }

      $approvedleavesvaluecount = array_sum($leaveDurations);
      // dd($approvedleavesvaluecount);
      //Aproved leave jan to dec end hare 

      // dd($applyleaveDatas);
      return view('backEnd.applyleave.index', compact('countCasualafmnth', 'leavetaken', 'teammonthcount', 'totalcountCasual', 'myapplyleaveDatas', 'teamapplyleaveDatas', 'birthday', 'countbirthday', 'Casual', 'Sick', 'countSick', 'countCasual', 'clInAttendance', 'slInAttendance', 'approvedleavesvaluecount', 'hasPendingRequests'));
    } else {


      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;
      $datess = [];
      $hdatess = [];
      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();


        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $datess = array_unique($datess);
      }
      $countSick = count(array_diff($datess, $hdatess));


      $appliedCasual = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countCasual = 0;
      $casualDates = [];
      foreach ($appliedCasual as $CasualLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $casualDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $casualDates = array_unique($casualDates);
      }
      $countCasual = count(array_diff($casualDates, $hdatess));

      $appliedCasualafmnth = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addDays(90))
        ->get();

      $countCasualafmnth = 0;
      $CasualafmnthDates = [];
      foreach ($appliedCasualafmnth as $CasualafmnthLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $CasualafmnthDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $CasualafmnthDates = array_unique($CasualafmnthDates);
      }
      $countCasualafmnth = count(array_diff($CasualafmnthDates, $hdatess));

      $appliedbirthday = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $birthday->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();
      $countbirthday = 0;
      $birthdayDates = [];
      foreach ($appliedbirthday as $birthdayLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $birthdayDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $birthdayDates = array_unique($birthdayDates);
      }
      $countbirthday = count(array_diff($birthdayDates, $hdatess));

      //dd($diff_in_months);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      //  dd($diff_in_months);

      //  dd($countCasualafmnth);
      $leavetaken = DB::table('leaveapprove')
        ->where('year', '2023')->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');
      $myapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.createdby', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->latest()->get();

      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->get();

      $hasPendingRequests = $teamapplyleaveDatas->contains('status', 0);


      $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
      $attendance = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $clInAttendance = 0;
      $slInAttendance = 0;
      //dd($attendance);
      foreach ($attendance as $item) {
        foreach ($columns as $column) {
          if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
            $clInAttendance++;
          }
          if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
            $slInAttendance++;
          }
        }
      }

      //Aproved leave jan to dec 
      $currentYear = date('Y');
      $approvedleavesvalue = DB::table('applyleaves')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 1)
        ->whereYear('from',  $currentYear)
        ->get();

      $leaveDurations = [];
      foreach ($approvedleavesvalue as $approvedleavesvalues) {
        $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

        $diff_in_days = $to->diffInDays($from) + 1;

        $holidaycount = DB::table('holidays')
          ->where('startdate', '>=', $approvedleavesvalues->from)
          ->where('enddate', '<=', $approvedleavesvalues->to)
          ->count();

        $leaveDurationcount = $diff_in_days - $holidaycount;
        $leaveDurations[] = $leaveDurationcount;
      }

      $approvedleavesvaluecount = array_sum($leaveDurations);
      // dd($approvedleavesvaluecount);
      //Aproved leave jan to dec end hare 

      // dd($applyleaveDatas);
      return view('backEnd.applyleave.index', compact('countCasualafmnth', 'leavetaken', 'teammonthcount', 'totalcountCasual', 'myapplyleaveDatas', 'teamapplyleaveDatas', 'birthday', 'countbirthday', 'Casual', 'Sick', 'countSick', 'countCasual', 'clInAttendance', 'slInAttendance', 'approvedleavesvaluecount', 'hasPendingRequests'));
    }
  }





################################################################################################################################
resources\views\backEnd\applyleave\teamapplication.blade.php

                             @foreach ($teamapplyleaveDatas as $applyleaveDatas)
                                 <tr>
                                     <td style="display: none;">{{ $applyleaveDatas->id }}</td>
                                     <td> <a href="{{ route('applyleave.show', $applyleaveDatas->id) }}">
                                             {{ $applyleaveDatas->team_member ?? '' }}</a>
                                     </td>
                                     {{-- <td>{{ $applyleaveDatas->staffcode }}</td> --}}
                                     <td>{{ $applyleaveDatas->newstaff_code ?? ($applyleaveDatas->staffcode ?? '') }}</td>
                                     <td>{{ date('d-m-Y', strtotime($applyleaveDatas->created_at)) ?? '' }}</td>
                                     <td class="columnSize">
                                         @if ($applyleaveDatas->status == 0)
                                             <span class="badge badge-pill badge-warning"><span
                                                     style="display: none;">A</span>Created</span>
                                         @elseif($applyleaveDatas->status == 1)
                                             <span class="badge badge-success"><span
                                                     style="display: none;">B</span>Approved</span>
                                         @elseif($applyleaveDatas->status == 2)
                                             <span class="badge badge-danger">Rejected</span>
                                         @endif
                                     </td>

                                     <td>

                                         {{ $applyleaveDatas->name ?? '' }}<br>
                                         @if ($applyleaveDatas->type == '0')
                                             <b>Type :</b> <span>Birthday</span><br>
                                             <span><b>Birthday Date :
                                                 </b>{{ date(
                                                     'F d,Y',
                                                     strtotime(
                                                         App\Models\Teammember::select('dateofbirth')->where('id', $applyleaveDatas->createdby)->first()->dateofbirth,
                                                     ),
                                                 ) ?? '' }}</span>
                                         @elseif($applyleaveDatas->type == '1')
                                             <span>Religious Festival</span>
                                         @endif
                                     </td>
                                     <td>{{ date('d-m-Y', strtotime($applyleaveDatas->from)) ?? '' }} -
                                         {{ date('d-m-Y', strtotime($applyleaveDatas->to)) ?? '' }}</td>
                                     @php
                                         $to = Carbon\Carbon::createFromFormat('Y-m-d', $applyleaveDatas->to ?? '');
                                         $from = Carbon\Carbon::createFromFormat('Y-m-d', $applyleaveDatas->from);
                                         $diff_in_days = $to->diffInDays($from) + 1;
                                         $holidaycount = DB::table('holidays')
                                             ->where('startdate', '>=', $applyleaveDatas->from)
                                             ->where('enddate', '<=', $applyleaveDatas->to)
                                             ->count();
                                     @endphp
                                     <td>{{ $diff_in_days - $holidaycount ?? '' }}</td>

                                     @php
                                         $approvelpartner = DB::table('teammembers')
                                             ->leftJoin(
                                                 'teamrolehistory',
                                                 'teamrolehistory.teammember_id',
                                                 '=',
                                                 'teammembers.id',
                                             )
                                             ->where('teammembers.id', $applyleaveDatas->approver)
                                             ->select(
                                                 'teammembers.team_member',
                                                 'teammembers.staffcode',
                                                 'teamrolehistory.newstaff_code',
                                                 'teamrolehistory.created_at',
                                             )
                                             ->first();

                                         $datadate = Carbon\Carbon::createFromFormat(
                                             'Y-m-d H:i:s',
                                             $applyleaveDatas->created_at,
                                         );

                                         $permotiondate = null;
                                         if ($approvelpartner->created_at) {
                                             $permotiondate = Carbon\Carbon::createFromFormat(
                                                 'Y-m-d H:i:s',
                                                 $approvelpartner->created_at,
                                             );
                                         }
                                     @endphp


                                     <td>
                                         {{ $approvelpartner->team_member ?? '' }}
                                         @if ($permotiondate && $datadate->greaterThan($permotiondate))
                                             ({{ $approvelpartner->newstaff_code }})
                                         @else
                                             ( {{ $approvelpartner->staffcode }})
                                         @endif
                                     </td>
                                     <td>
                                         <div style="font-size: 15px; width: 7rem;text-wrap: wrap;">
                                             {{ $applyleaveDatas->reasonleave ?? '' }}
                                         </div>
                                     </td>
                                     <td>
                                         @if ($applyleaveDatas->status == 0)
                                             <form method="post"
                                                 action="{{ route('applyleave.update', $applyleaveDatas->id) }}"
                                                 enctype="multipart/form-data" style="text-align: center;">
                                                 @method('PATCH')
                                                 @csrf
                                                 <input type="text" hidden id="example-date-input" name="status"
                                                     value="1" class="form-control" placeholder="Enter Location">
                                                 <button type="submit" class="btn btn-success"
                                                     style="border-radius: 7px; font-size: 10px; padding: 5px;">
                                                     Approve</button>
                                             </form>
                                         @endif
                                     </td>
                                     <td style="text-align: center;">
                                         @if ($applyleaveDatas->status == 0)
                                             <button data-toggle="modal" data-target="#exampleModal12{{ $loop->index }}"
                                                 class="btn btn-danger"
                                                 style="border-radius: 7px; font-size: 10px; padding: 5px; margin-bottom: 16px;">
                                                 Reject</button>
                                         @endif
                                     </td>

                                     {{-- model box --}}
                                     <div class="modal fade" id="exampleModal12{{ $loop->index }}" tabindex="-1"
                                         role="dialog" aria-labelledby="exampleModalLabel4" aria-hidden="true">
                                         <div class="modal-dialog" role="document">
                                             <div class="modal-content">
                                                 <div class="modal-header" style="background:#37A000">
                                                     <h5 style="color: white" class="modal-title font-weight-600"
                                                         id="exampleModalLabel1">Reason For
                                                         Rejection</h5>
                                                     <button type="button" class="close" data-dismiss="modal"
                                                         aria-label="Close">
                                                         <span aria-hidden="true">&times;</span>
                                                     </button>
                                                 </div>
                                                 <form method="post"
                                                     action="{{ url('applyleave/update', $applyleaveDatas->id) }}"
                                                     enctype="multipart/form-data">
                                                     @csrf
                                                     <div class="modal-body">
                                                         <div class="row row-sm">
                                                             <div class="col-12">
                                                                 <div class="form-group">
                                                                     <textarea rows="6" name="remark" class="form-control" placeholder=""></textarea>
                                                                     <input hidden type="text" id="example-date-input"
                                                                         name="status" value="2"
                                                                         class="form-control" placeholder="Enter Reason">
                                                                 </div>
                                                             </div>
                                                         </div>
                                                         <button type="button" class="btn btn-danger"
                                                             data-dismiss="modal">Close</button>
                                                         <button type="submit" style="float: right"
                                                             class="btn btn-success">Save </button>
                                                     </div>
                                                 </form>
                                             </div>
                                         </div>
                                     </div>
                                 </tr>
                             @endforeach
							 


################################################################################################################################
resources\views\backEnd\applyleave\teamapplication.blade.php

                                      @foreach ($teamapplyleaveDatas as $applyleaveDatas)
                                             @if (!in_array($applyleaveDatas->emailid, $displayedValues))
                                                 <option value="{{ $applyleaveDatas->createdby }}">
                                                     {{ $applyleaveDatas->team_member }}
                                                     ({{ $applyleaveDatas->newstaff_code ?? ($applyleaveDatas->staffcode ?? '') }})
                                                 </option>
                                                 @php
                                                     $displayedValues[] = $applyleaveDatas->emailid;
                                                 @endphp
                                             @endif
                                         @endforeach




################################################################################################################################
app\Http\Controllers\ApplyleaveController.php


  public function filterDataAdmin(Request $request)
  {
    $teamname = $request->input('employee');
    $leavetype = $request->input('leave');
    $startdate = $request->input('start');
    $enddate = $request->input('end');
    $statusdata = $request->input('status');
    $startperioddata = $request->input('startperiod');
    $endperioddata = $request->input('endperiod');

    $query = DB::table('applyleaves')
      ->leftJoin('leavetypes', 'leavetypes.id', '=', 'applyleaves.leavetype')
      ->leftJoin('teammembers', 'teammembers.id', '=', 'applyleaves.createdby')
      ->leftJoin('teamrolehistory as teamrolehistoryteam', function ($join) {
        $join->on('teamrolehistoryteam.teammember_id', '=', 'applyleaves.createdby')
          ->on('teamrolehistoryteam.created_at', '<', 'applyleaves.created_at');
      })
      ->leftJoin('teammembers as approvername', 'approvername.id', '=', 'applyleaves.approver')
      ->leftJoin('teamrolehistory', function ($join) {
        $join->on('teamrolehistory.teammember_id', '=', 'approvername.id')
          ->on('teamrolehistory.created_at', '<', 'applyleaves.created_at');
      })
      ->leftJoin('roles', 'roles.id', '=', 'teammembers.role_id')
      ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name', 'approvername.team_member as approvernames', 'approvername.staffcode as approverstaffcode', 'teamrolehistory.newstaff_code', 'teamrolehistoryteam.newstaff_code as teamnewstaffcode');

    if (auth()->user()->role_id == 13) {
      $query->where('applyleaves.approver', auth()->user()->teammember_id);
    }

    // For admin
    if ($teamname) {
      $query->where('applyleaves.createdby', $teamname);
    }

    if ($leavetype) {
      $query->where('applyleaves.leavetype', $leavetype);
    }

    if ($statusdata !== null) {
      $query->where('applyleaves.status', $statusdata);
    }

    if ($startdate && $enddate) {
      $query->whereBetween('applyleaves.created_at', [$startdate, $enddate]);
    }

    if ($startperioddata && $endperioddata) {
      $query->whereBetween('applyleaves.from', [$startperioddata, $endperioddata]);
    }

    $filteredData = $query->get();
  

    return response()->json($filteredData);
  }





################################################################################################################################
resources\views\backEnd\applyleave\teamapplication.blade.php


 <script>
     $(document).ready(function() {
         // Common function to render table rows
         function renderTableRows(data) {
             $('table tbody').html("");
             $('#clickExcell').show();

             if (data.length === 0) {
                 $('table tbody').append('<tr><td colspan="8" class="text-center">No data found</td></tr>');
             } else {
                 $.each(data, function(index, item) {
                     var url = '/applyleave/' + item.id;
                     var createdAt = formatDate(item.created_at);
                     var fromDate = formatDate(item.from);
                     var toDate = formatDate(item.to);
                     var holidays = Math.floor((new Date(item.to) - new Date(item.from)) / (24 * 60 *
                         60 * 1000)) + 1;

                     $('table tbody').append('<tr>' +
                         '<td><a href="' + url + '">' + item.team_member + '</a></td>' +
                         //  '<td>' + item.staffcode + '</td>' +
                         '<td>' + (item.teamnewstaffcode ? item.teamnewstaffcode : item.staffcode) +
                         '</td>' +
                         '<td>' + createdAt + '</td>' +
                         '<td>' + getStatusBadge(item.status) + '</td>' +
                         '<td>' + item.name + '</td>' +
                         '<td>' + fromDate + ' to ' + toDate + '</td>' +
                         '<td>' + holidays + '</td>' +
                         //  '<td>' + item.approvernames + '</td>' +
                         '<td>' + item.approvernames + ' (' + (item
                             .newstaff_code ? item.newstaff_code : item
                             .approverstaffcode) + ')</td>' +
                         '<td style="width: 7rem;text-wrap: wrap;">' + item.reasonleave + '</td>' +
                         '</tr>');
                 });
             }
         }

         // Common function to export data to Excel
         function exportToExcel(data) {
             const filteredData = data.map(item => {
                 const holidays = Math.floor((new Date(item.to) - new Date(item.from)) / (24 * 60 * 60 *
                     1000)) + 1;
                 const createdAt = formatDate(item.created_at);
                 const fromDate = formatDate(item.from);
                 const toDate = formatDate(item.to);

                 return {
                     Employee: item.team_member,
                     Staff_code: item.staffcode,
                     Date_of_Request: createdAt,
                     status: getStatusText(item.status),
                     Leave_Type: item.name,
                     from: fromDate,
                     to: toDate,
                     Days: holidays,
                     Approver: item.approvernames,
                     Reason_for_Leave: item.reasonleave
                 };
             });

             const ws = XLSX.utils.json_to_sheet(filteredData);
             const headerCellStyle = {
                 font: {
                     bold: true
                 }
             };

             ws['!cols'] = [{
                     wch: 15
                 },
                 {
                     wch: 20
                 },
                 {
                     wch: 15
                 },
                 {
                     wch: 20
                 },
                 {
                     wch: 15
                 },
                 {
                     wch: 15
                 },
                 {
                     wch: 20
                 },
                 {
                     wch: 20
                 },
                 {
                     wch: 20
                 },
                 {
                     wch: 30
                 }
             ];

             Object.keys(ws).filter(key => key.startsWith('A')).forEach(key => {
                 ws[key].s = headerCellStyle;
             });

             const wb = XLSX.utils.book_new();
             XLSX.utils.book_append_sheet(wb, ws, "FilteredData");
             const excelBuffer = XLSX.write(wb, {
                 bookType: "xlsx",
                 type: "array"
             });
             const dataBlob = new Blob([excelBuffer], {
                 type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
             });
             saveAs(dataBlob, "Apply_Report_Filter_List.xlsx");
         }

         // Common function to format date
         function formatDate(dateString) {
             return new Date(dateString).toLocaleDateString('en-GB', {
                 day: '2-digit',
                 month: '2-digit',
                 year: 'numeric'
             });
         }

         // Common function to get status text
         function getStatusText(status) {
             return status === 0 ? 'Created' : status === 1 ? 'Approved' : status === 2 ? 'Rejected' : '';
         }

         // Common function to get status badge
         function getStatusBadge(status) {
             if (status === 0) {
                 return '<span class="badge badge-pill badge-warning"><span style="display: none;">A</span>Created</span>';
             } else if (status === 1) {
                 return '<span class="badge badge-success"><span style="display: none;">B</span>Approved</span>';
             } else if (status === 2) {
                 return '<span class="badge badge-danger">Rejected</span>';
             } else {
                 return '';
             }
         }

         // Function to handle status change
         function handleStatusChange() {
             var endperiod1 = $('#endperiod1').val();
             var startperiod1 = $('#startperiod1').val();
             var employee1 = $('#employee1').val();
             var leave1 = $('#leave1').val();
             var status1 = $('#status1').val();
             var end1 = $('#end1').val();
             var start1 = $('#start1').val();
             $('#clickExcell').hide();

             $.ajax({
                 type: 'GET',
                 url: '/filtering-applyleve',
                 data: {
                     end: end1,
                     start: start1,
                     startperiod: startperiod1,
                     endperiod: endperiod1,
                     status: status1,
                     employee: employee1,
                     leave: leave1
                 },
                 success: function(data) {
                     renderTableRows(data);
                     $('.paging_simple_numbers').remove();
                     $('.dataTables_info').remove();

                     // Remove previus attachment on download button 
                     $('#clickExcell').off('click');

                     if (data.length > 0) {
                         $('#clickExcell').on('click', function() {
                             exportToExcel(data);
                         });
                     }
                     $('#clickExcell').show();
                 }
             });
         }

         // Function to handle leave type change
         function handleLeaveTypeChange() {
             var endperiod1 = $('#endperiod1').val();
             var startperiod1 = $('#startperiod1').val();
             var employee1 = $('#employee1').val();
             var leave1 = $('#leave1').val();
             var status1 = $('#status1').val();
             var end1 = $('#end1').val();
             var start1 = $('#start1').val();
             $('#clickExcell').hide();

             $.ajax({
                 type: 'GET',
                 url: '/filtering-applyleve',
                 data: {
                     end: end1,
                     start: start1,
                     startperiod: startperiod1,
                     endperiod: endperiod1,
                     status: status1,
                     employee: employee1,
                     leave: leave1
                 },
                 success: function(data) {
                     renderTableRows(data);
                     $('.paging_simple_numbers').remove();
                     $('.dataTables_info').remove();
                     // Remove previus attachment on download button 
                     $('#clickExcell').off('click');
                     if (data.length > 0) {
                         $('#clickExcell').on('click', function() {
                             exportToExcel(data);
                         });
                     }
                     $('#clickExcell').show();
                 }
             });
         }

         // Function to handle employee change
         function handleEmployeeChange() {
             var endperiod1 = $('#endperiod1').val();
             var startperiod1 = $('#startperiod1').val();
             var employee1 = $('#employee1').val();
             var leave1 = $('#leave1').val();
             var status1 = $('#status1').val();
             var end1 = $('#end1').val();
             var start1 = $('#start1').val();
             $('#clickExcell').hide();


             $.ajax({
                 type: 'GET',
                 url: '/filtering-applyleve',
                 data: {
                     end: end1,
                     start: start1,
                     startperiod: startperiod1,
                     endperiod: endperiod1,
                     status: status1,
                     employee: employee1,
                     leave: leave1
                 },
                 success: function(data) {
                     renderTableRows(data);
                     $('.paging_simple_numbers').remove();
                     $('.dataTables_info').remove();
                     // Remove previus attachment on download button 
                     $('#clickExcell').off('click');
                     if (data.length > 0) {
                         $('#clickExcell').on('click', function() {
                             exportToExcel(data);
                         });
                     }
                     $('#clickExcell').show();
                 }
             });
         }

         // Function to handle leave period end date change
         function handleleaveperiodendChange() {
             var endperiod1 = $('#endperiod1').val();
             var startperiod1 = $('#startperiod1').val();
             var employee1 = $('#employee1').val();
             var leave1 = $('#leave1').val();
             var status1 = $('#status1').val();
             var end1 = $('#end1').val();
             var start1 = $('#start1').val();
             $('#clickExcell').hide();

             $.ajax({
                 type: 'GET',
                 url: '/filtering-applyleve',
                 data: {
                     end: end1,
                     start: start1,
                     startperiod: startperiod1,
                     endperiod: endperiod1,
                     status: status1,
                     employee: employee1,
                     leave: leave1
                 },
                 success: function(data) {
                     renderTableRows(data);
                     $('.paging_simple_numbers').remove();
                     $('.dataTables_info').remove();
                     // Remove previus attachment on download button 
                     $('#clickExcell').off('click');
                     if (data.length > 0) {
                         $('#clickExcell').on('click', function() {
                             exportToExcel(data);
                         });
                     }
                     $('#clickExcell').show();
                 }
             });
         }

         //  end Request Date end date wise
         function handleEndRequestDateChange() {
             var endperiod1 = $('#endperiod1').val();
             var startperiod1 = $('#startperiod1').val();
             var employee1 = $('#employee1').val();
             var leave1 = $('#leave1').val();
             var status1 = $('#status1').val();
             var end1 = $('#end1').val();
             var start1 = $('#start1').val();
             $('#clickExcell').hide();


             $.ajax({
                 type: 'GET',
                 url: '/filtering-applyleve',
                 data: {
                     end: end1,
                     start: start1,
                     startperiod: startperiod1,
                     endperiod: endperiod1,
                     status: status1,
                     employee: employee1,
                     leave: leave1
                 },
                 success: function(data) {
                     renderTableRows(data);
                     $('.paging_simple_numbers').remove();
                     $('.dataTables_info').remove();
                     $('#clickExcell').off('click');
                     if (data.length > 0) {
                         $('#clickExcell').on('click', function() {
                             exportToExcel(data);
                         });
                     }
                     $('#clickExcell').show();
                 }
             });
         }

         // Event handlers
         $('#employee1').change(handleEmployeeChange);
         $('#leave1').change(handleLeaveTypeChange);
         $('#status1').change(handleStatusChange);
         $('#end1').change(handleEndRequestDateChange);
         $('#endperiod1').change(handleleaveperiodendChange);
     });
 </script>
 
 


################################################################################################################################
resources\views\backEnd\applyleave\teamapplication.blade.php

                             @foreach ($teamapplyleaveDatas as $applyleaveDatas)
                                 <tr>
                                     <td style="display: none;">{{ $applyleaveDatas->id }}</td>
                                     <td> <a href="{{ route('applyleave.show', $applyleaveDatas->id) }}">
                                             {{ $applyleaveDatas->team_member ?? '' }}</a>
                                     </td>
                                     {{-- <td>{{ $applyleaveDatas->staffcode }}</td> --}}
                                     <td>{{ $applyleaveDatas->newstaff_code ?? ($applyleaveDatas->staffcode ?? '') }}</td>
                                     <td>{{ date('d-m-Y', strtotime($applyleaveDatas->created_at)) ?? '' }}</td>
                                     <td class="columnSize">
                                         @if ($applyleaveDatas->status == 0)
                                             <span class="badge badge-pill badge-warning"><span
                                                     style="display: none;">A</span>Created</span>
                                         @elseif($applyleaveDatas->status == 1)
                                             <span class="badge badge-success"><span
                                                     style="display: none;">B</span>Approved</span>
                                         @elseif($applyleaveDatas->status == 2)
                                             <span class="badge badge-danger">Rejected</span>
                                         @endif
                                     </td>

                                     <td>

                                         {{ $applyleaveDatas->name ?? '' }}<br>
                                         @if ($applyleaveDatas->type == '0')
                                             <b>Type :</b> <span>Birthday</span><br>
                                             <span><b>Birthday Date :
                                                 </b>{{ date(
                                                     'F d,Y',
                                                     strtotime(
                                                         App\Models\Teammember::select('dateofbirth')->where('id', $applyleaveDatas->createdby)->first()->dateofbirth,
                                                     ),
                                                 ) ?? '' }}</span>
                                         @elseif($applyleaveDatas->type == '1')
                                             <span>Religious Festival</span>
                                         @endif
                                     </td>
                                     <td>{{ date('d-m-Y', strtotime($applyleaveDatas->from)) ?? '' }} -
                                         {{ date('d-m-Y', strtotime($applyleaveDatas->to)) ?? '' }}</td>
                                     @php
                                         $to = Carbon\Carbon::createFromFormat('Y-m-d', $applyleaveDatas->to ?? '');
                                         $from = Carbon\Carbon::createFromFormat('Y-m-d', $applyleaveDatas->from);
                                         $diff_in_days = $to->diffInDays($from) + 1;
                                         $holidaycount = DB::table('holidays')
                                             ->where('startdate', '>=', $applyleaveDatas->from)
                                             ->where('enddate', '<=', $applyleaveDatas->to)
                                             ->count();
                                     @endphp
                                     <td>{{ $diff_in_days - $holidaycount ?? '' }}</td>

                                     @php
                                         $approvelpartner = DB::table('teammembers')
                                             ->leftJoin(
                                                 'teamrolehistory',
                                                 'teamrolehistory.teammember_id',
                                                 '=',
                                                 'teammembers.id',
                                             )
                                             ->where('teammembers.id', $applyleaveDatas->approver)
                                             ->select(
                                                 'teammembers.team_member',
                                                 'teammembers.staffcode',
                                                 'teamrolehistory.newstaff_code',
                                                 'teamrolehistory.created_at',
                                             )
                                             ->first();

                                         $datadate = Carbon\Carbon::createFromFormat(
                                             'Y-m-d H:i:s',
                                             $applyleaveDatas->created_at,
                                         );

                                         $permotiondate = null;
                                         if ($approvelpartner->created_at) {
                                             $permotiondate = Carbon\Carbon::createFromFormat(
                                                 'Y-m-d H:i:s',
                                                 $approvelpartner->created_at,
                                             );
                                         }
                                     @endphp


                                     <td>
                                         {{ $approvelpartner->team_member ?? '' }}
                                         @if ($permotiondate && $datadate->greaterThan($permotiondate))
                                             ({{ $approvelpartner->newstaff_code }})
                                         @else
                                             ( {{ $approvelpartner->staffcode }})
                                         @endif
                                     </td>
                                     <td>
                                         <div style="font-size: 15px; width: 7rem;text-wrap: wrap;">
                                             {{ $applyleaveDatas->reasonleave ?? '' }}
                                         </div>
                                     </td>
                                     <td>
                                         @if ($applyleaveDatas->status == 0)
                                             <form method="post"
                                                 action="{{ route('applyleave.update', $applyleaveDatas->id) }}"
                                                 enctype="multipart/form-data" style="text-align: center;">
                                                 @method('PATCH')
                                                 @csrf
                                                 <input type="text" hidden id="example-date-input" name="status"
                                                     value="1" class="form-control" placeholder="Enter Location">
                                                 <button type="submit" class="btn btn-success"
                                                     style="border-radius: 7px; font-size: 10px; padding: 5px;">
                                                     Approve</button>
                                             </form>
                                         @endif
                                     </td>
                                     <td style="text-align: center;">
                                         @if ($applyleaveDatas->status == 0)
                                             <button data-toggle="modal" data-target="#exampleModal12{{ $loop->index }}"
                                                 class="btn btn-danger"
                                                 style="border-radius: 7px; font-size: 10px; padding: 5px; margin-bottom: 16px;">
                                                 Reject</button>
                                         @endif
                                     </td>

                                     {{-- model box --}}
                                     <div class="modal fade" id="exampleModal12{{ $loop->index }}" tabindex="-1"
                                         role="dialog" aria-labelledby="exampleModalLabel4" aria-hidden="true">
                                         <div class="modal-dialog" role="document">
                                             <div class="modal-content">
                                                 <div class="modal-header" style="background:#37A000">
                                                     <h5 style="color: white" class="modal-title font-weight-600"
                                                         id="exampleModalLabel1">Reason For
                                                         Rejection</h5>
                                                     <button type="button" class="close" data-dismiss="modal"
                                                         aria-label="Close">
                                                         <span aria-hidden="true">&times;</span>
                                                     </button>
                                                 </div>
                                                 <form method="post"
                                                     action="{{ url('applyleave/update', $applyleaveDatas->id) }}"
                                                     enctype="multipart/form-data">
                                                     @csrf
                                                     <div class="modal-body">
                                                         <div class="row row-sm">
                                                             <div class="col-12">
                                                                 <div class="form-group">
                                                                     <textarea rows="6" name="remark" class="form-control" placeholder=""></textarea>
                                                                     <input hidden type="text" id="example-date-input"
                                                                         name="status" value="2"
                                                                         class="form-control" placeholder="Enter Reason">
                                                                 </div>
                                                             </div>
                                                         </div>
                                                         <button type="button" class="btn btn-danger"
                                                             data-dismiss="modal">Close</button>
                                                         <button type="submit" style="float: right"
                                                             class="btn btn-success">Save </button>
                                                     </div>
                                                 </form>
                                             </div>
                                         </div>
                                     </div>
                                 </tr>
                             @endforeach







################################################################################################################################
resources\views\backEnd\applyleave\teamapplication.blade.php


                                     <select class="language form-control" id="employee1" name="employee">
                                         <option value="">Please Select One</option>
                                         @php
                                             $displayedValues = [];
                                         @endphp
                                         @foreach ($teamapplyleaveDatas as $applyleaveDatas)
                                             @if (!in_array($applyleaveDatas->emailid, $displayedValues))
                                                 <option value="{{ $applyleaveDatas->createdby }}">
                                                     {{ $applyleaveDatas->team_member }}
                                                     ({{ $applyleaveDatas->newstaff_code ?? ($applyleaveDatas->staffcode ?? '') }})
                                                 </option>
                                                 @php
                                                     $displayedValues[] = $applyleaveDatas->emailid;
                                                 @endphp
                                             @endif
                                         @endforeach
                                     </select>
									 
									 

################################################################################################################################
resources\views\backEnd\applyleave\teamapplication.blade.php

 <script>
     $(document).ready(function() {
         // Common function to render table rows
         function renderTableRows(data) {
             $('table tbody').html("");
             $('#clickExcell').show();

             if (data.length === 0) {
                 $('table tbody').append('<tr><td colspan="8" class="text-center">No data found</td></tr>');
             } else {
                 $.each(data, function(index, item) {
                     var url = '/applyleave/' + item.id;
                     var createdAt = formatDate(item.created_at);
                     var fromDate = formatDate(item.from);
                     var toDate = formatDate(item.to);
                     var holidays = Math.floor((new Date(item.to) - new Date(item.from)) / (24 * 60 *
                         60 * 1000)) + 1;

                     $('table tbody').append('<tr>' +
                         '<td><a href="' + url + '">' + item.team_member + '</a></td>' +
                         //  '<td>' + item.staffcode + '</td>' +
                         '<td>' + (item.teamnewstaffcode ? item.teamnewstaffcode : item.staffcode) +
                         '</td>' +
                         '<td>' + createdAt + '</td>' +
                         '<td>' + getStatusBadge(item.status) + '</td>' +
                         '<td>' + item.name + '</td>' +
                         '<td>' + fromDate + ' to ' + toDate + '</td>' +
                         '<td>' + holidays + '</td>' +
                         //  '<td>' + item.approvernames + '</td>' +
                         '<td>' + item.approvernames + ' (' + (item
                             .newstaff_code ? item.newstaff_code : item
                             .approverstaffcode) + ')</td>' +
                         '<td style="width: 7rem;text-wrap: wrap;">' + item.reasonleave + '</td>' +
                         '</tr>');
                 });
             }
         }

         // Common function to export data to Excel
         function exportToExcel(data) {
             const filteredData = data.map(item => {
                 const holidays = Math.floor((new Date(item.to) - new Date(item.from)) / (24 * 60 * 60 *
                     1000)) + 1;
                 const createdAt = formatDate(item.created_at);
                 const fromDate = formatDate(item.from);
                 const toDate = formatDate(item.to);

                 return {
                     Employee: item.team_member,
                     Staff_code: item.teamnewstaffcode ? item.teamnewstaffcode : item.staffcode,
                     Date_of_Request: createdAt,
                     status: getStatusText(item.status),
                     Leave_Type: item.name,
                     from: fromDate,
                     to: toDate,
                     Days: holidays,
                     Approver: item.approvernames,
                     Reason_for_Leave: item.reasonleave
                 };
             });

             const ws = XLSX.utils.json_to_sheet(filteredData);
             const headerCellStyle = {
                 font: {
                     bold: true
                 }
             };

             ws['!cols'] = [{
                     wch: 15
                 },
                 {
                     wch: 20
                 },
                 {
                     wch: 15
                 },
                 {
                     wch: 20
                 },
                 {
                     wch: 15
                 },
                 {
                     wch: 15
                 },
                 {
                     wch: 20
                 },
                 {
                     wch: 20
                 },
                 {
                     wch: 20
                 },
                 {
                     wch: 30
                 }
             ];

             Object.keys(ws).filter(key => key.startsWith('A')).forEach(key => {
                 ws[key].s = headerCellStyle;
             });

             const wb = XLSX.utils.book_new();
             XLSX.utils.book_append_sheet(wb, ws, "FilteredData");
             const excelBuffer = XLSX.write(wb, {
                 bookType: "xlsx",
                 type: "array"
             });
             const dataBlob = new Blob([excelBuffer], {
                 type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
             });
             saveAs(dataBlob, "Apply_Report_Filter_List.xlsx");
         }

         // Common function to format date
         function formatDate(dateString) {
             return new Date(dateString).toLocaleDateString('en-GB', {
                 day: '2-digit',
                 month: '2-digit',
                 year: 'numeric'
             });
         }

         // Common function to get status text
         function getStatusText(status) {
             return status === 0 ? 'Created' : status === 1 ? 'Approved' : status === 2 ? 'Rejected' : '';
         }

         // Common function to get status badge
         function getStatusBadge(status) {
             if (status === 0) {
                 return '<span class="badge badge-pill badge-warning"><span style="display: none;">A</span>Created</span>';
             } else if (status === 1) {
                 return '<span class="badge badge-success"><span style="display: none;">B</span>Approved</span>';
             } else if (status === 2) {
                 return '<span class="badge badge-danger">Rejected</span>';
             } else {
                 return '';
             }
         }

         // Function to handle status change
         function handleStatusChange() {
             var endperiod1 = $('#endperiod1').val();
             var startperiod1 = $('#startperiod1').val();
             var employee1 = $('#employee1').val();
             var leave1 = $('#leave1').val();
             var status1 = $('#status1').val();
             var end1 = $('#end1').val();
             var start1 = $('#start1').val();
             $('#clickExcell').hide();

             $.ajax({
                 type: 'GET',
                 url: '/filtering-applyleve',
                 data: {
                     end: end1,
                     start: start1,
                     startperiod: startperiod1,
                     endperiod: endperiod1,
                     status: status1,
                     employee: employee1,
                     leave: leave1
                 },
                 success: function(data) {
                     renderTableRows(data);
                     $('.paging_simple_numbers').remove();
                     $('.dataTables_info').remove();

                     // Remove previus attachment on download button 
                     $('#clickExcell').off('click');

                     if (data.length > 0) {
                         $('#clickExcell').on('click', function() {
                             exportToExcel(data);
                         });
                     }
                     $('#clickExcell').show();
                 }
             });
         }

         // Function to handle leave type change
         function handleLeaveTypeChange() {
             var endperiod1 = $('#endperiod1').val();
             var startperiod1 = $('#startperiod1').val();
             var employee1 = $('#employee1').val();
             var leave1 = $('#leave1').val();
             var status1 = $('#status1').val();
             var end1 = $('#end1').val();
             var start1 = $('#start1').val();
             $('#clickExcell').hide();

             $.ajax({
                 type: 'GET',
                 url: '/filtering-applyleve',
                 data: {
                     end: end1,
                     start: start1,
                     startperiod: startperiod1,
                     endperiod: endperiod1,
                     status: status1,
                     employee: employee1,
                     leave: leave1
                 },
                 success: function(data) {
                     renderTableRows(data);
                     $('.paging_simple_numbers').remove();
                     $('.dataTables_info').remove();
                     // Remove previus attachment on download button 
                     $('#clickExcell').off('click');
                     if (data.length > 0) {
                         $('#clickExcell').on('click', function() {
                             exportToExcel(data);
                         });
                     }
                     $('#clickExcell').show();
                 }
             });
         }

         // Function to handle employee change
         function handleEmployeeChange() {
             var endperiod1 = $('#endperiod1').val();
             var startperiod1 = $('#startperiod1').val();
             var employee1 = $('#employee1').val();
             var leave1 = $('#leave1').val();
             var status1 = $('#status1').val();
             var end1 = $('#end1').val();
             var start1 = $('#start1').val();
             $('#clickExcell').hide();


             $.ajax({
                 type: 'GET',
                 url: '/filtering-applyleve',
                 data: {
                     end: end1,
                     start: start1,
                     startperiod: startperiod1,
                     endperiod: endperiod1,
                     status: status1,
                     employee: employee1,
                     leave: leave1
                 },
                 success: function(data) {
                     renderTableRows(data);
                     $('.paging_simple_numbers').remove();
                     $('.dataTables_info').remove();
                     // Remove previus attachment on download button 
                     $('#clickExcell').off('click');
                     if (data.length > 0) {
                         $('#clickExcell').on('click', function() {
                             exportToExcel(data);
                         });
                     }
                     $('#clickExcell').show();
                 }
             });
         }

         // Function to handle leave period end date change
         function handleleaveperiodendChange() {
             var endperiod1 = $('#endperiod1').val();
             var startperiod1 = $('#startperiod1').val();
             var employee1 = $('#employee1').val();
             var leave1 = $('#leave1').val();
             var status1 = $('#status1').val();
             var end1 = $('#end1').val();
             var start1 = $('#start1').val();
             $('#clickExcell').hide();

             $.ajax({
                 type: 'GET',
                 url: '/filtering-applyleve',
                 data: {
                     end: end1,
                     start: start1,
                     startperiod: startperiod1,
                     endperiod: endperiod1,
                     status: status1,
                     employee: employee1,
                     leave: leave1
                 },
                 success: function(data) {
                     renderTableRows(data);
                     $('.paging_simple_numbers').remove();
                     $('.dataTables_info').remove();
                     // Remove previus attachment on download button 
                     $('#clickExcell').off('click');
                     if (data.length > 0) {
                         $('#clickExcell').on('click', function() {
                             exportToExcel(data);
                         });
                     }
                     $('#clickExcell').show();
                 }
             });
         }

         //  end Request Date end date wise
         function handleEndRequestDateChange() {
             var endperiod1 = $('#endperiod1').val();
             var startperiod1 = $('#startperiod1').val();
             var employee1 = $('#employee1').val();
             var leave1 = $('#leave1').val();
             var status1 = $('#status1').val();
             var end1 = $('#end1').val();
             var start1 = $('#start1').val();
             $('#clickExcell').hide();


             $.ajax({
                 type: 'GET',
                 url: '/filtering-applyleve',
                 data: {
                     end: end1,
                     start: start1,
                     startperiod: startperiod1,
                     endperiod: endperiod1,
                     status: status1,
                     employee: employee1,
                     leave: leave1
                 },
                 success: function(data) {
                     renderTableRows(data);
                     $('.paging_simple_numbers').remove();
                     $('.dataTables_info').remove();
                     $('#clickExcell').off('click');
                     if (data.length > 0) {
                         $('#clickExcell').on('click', function() {
                             exportToExcel(data);
                         });
                     }
                     $('#clickExcell').show();
                 }
             });
         }

         // Event handlers
         $('#employee1').change(handleEmployeeChange);
         $('#leave1').change(handleLeaveTypeChange);
         $('#status1').change(handleStatusChange);
         $('#end1').change(handleEndRequestDateChange);
         $('#endperiod1').change(handleleaveperiodendChange);
     });
 </script>




bugs
26-07-24  updated on vsalocal,vsademo,vsalive

222222222222222222222222222222222222222
resources\views\backEnd\applyleave\index.blade.php


  @php
                                                  $approvelpartner = DB::table('teammembers')
                                                      ->leftJoin(
                                                          'teamrolehistory',
                                                          'teamrolehistory.teammember_id',
                                                          '=',
                                                          'teammembers.id',
                                                      )
                                                      ->where('teammembers.id', $applyleaveDatas->approver)
                                                      ->select(
                                                          'teammembers.team_member',
                                                          'teammembers.staffcode',
                                                          'teamrolehistory.newstaff_code',
                                                          'teamrolehistory.created_at',
                                                      )
                                                      ->first();

                                                  $datadate = Carbon\Carbon::createFromFormat(
                                                      'Y-m-d H:i:s',
                                                      $applyleaveDatas->created_at,
                                                  );

                                                  $permotiondate = null;
                                                  if ($approvelpartner->created_at) {
                                                      $permotiondate = Carbon\Carbon::createFromFormat(
                                                          'Y-m-d H:i:s',
                                                          $approvelpartner->created_at,
                                                      );
                                                  }
                                              @endphp


                                              <td>
                                                  {{ $approvelpartner->team_member ?? '' }}
                                                  @if ($permotiondate && $datadate->greaterThan($permotiondate))
                                                      ({{ $approvelpartner->newstaff_code }})
                                                  @else
                                                      ( {{ $approvelpartner->staffcode }})
                                                  @endif
                                              </td>



22222222222222222222222222222222222
resources\views\backEnd\applyleave\openindex.blade.php            

                                                  @foreach ($teamapplyleaveDatas as $applyleaveDatas)
                                          <tr>
                                              <td> <a href="{{ route('applyleave.show', $applyleaveDatas->id) }}">
                                                      {{ $applyleaveDatas->team_member ?? '' }}</a></td>
                                              <td>{{ $applyleaveDatas->staffcode ?? '' }}</td>
                                              <td>

                                                  {{ $applyleaveDatas->name ?? '' }}<br>
                                                  @if ($applyleaveDatas->type == '0')
                                                      <b>Type :</b> <span>Birthday</span><br>
                                                      <span><b>Birthday Date :
                                                          </b>{{ date(
                                                              'F d,Y',
                                                              strtotime(
                                                                  App\Models\Teammember::select('dateofbirth')->where('id', $applyleaveDatas->createdby)->first()->dateofbirth,
                                                              ),
                                                          ) ?? '' }}</span>
                                                  @elseif($applyleaveDatas->type == '1')
                                                      <span>Religious Festival</span>
                                                  @endif
                                                  @if ($applyleaveDatas->examtype == '0')
                                                      <b>Exam Type :</b> <span>PCC</span>
                                                  @elseif($applyleaveDatas->examtype == '1')
                                                      <b>Exam Type :</b> <span>CA Final</span>
                                                  @elseif($applyleaveDatas->examtype == '2')
                                                      <b>Exam Type :</b> <span>B.Com</span>
                                                  @endif
                                                  @if ($applyleaveDatas->examtype == '3')
                                                      <b>Other :</b> <span>{{ $applyleaveDatas->otherexam ?? '' }}</span>
                                                  @endif
                                              </td>
                                              {{-- <td>{{ App\Models\Teammember::select('team_member')->where('id', $applyleaveDatas->approver)->first()->team_member ?? '' }}
                                                  ({{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $applyleaveDatas->approver)->first()->staffcode ?? '' }})
                                              </td> --}}
                                              @php
                                                  $approvelpartner = DB::table('teammembers')
                                                      ->leftJoin(
                                                          'teamrolehistory',
                                                          'teamrolehistory.teammember_id',
                                                          '=',
                                                          'teammembers.id',
                                                      )
                                                      ->where('teammembers.id', $applyleaveDatas->approver)
                                                      ->select(
                                                          'teammembers.team_member',
                                                          'teammembers.staffcode',
                                                          'teamrolehistory.newstaff_code',
                                                          'teamrolehistory.created_at',
                                                      )
                                                      ->first();

                                                  $datadate = Carbon\Carbon::createFromFormat(
                                                      'Y-m-d H:i:s',
                                                      $applyleaveDatas->created_at,
                                                  );

                                                  $permotiondate = null;
                                                  if ($approvelpartner->created_at) {
                                                      $permotiondate = Carbon\Carbon::createFromFormat(
                                                          'Y-m-d H:i:s',
                                                          $approvelpartner->created_at,
                                                      );
                                                  }
                                              @endphp

                                              <td>
                                                  {{ $approvelpartner->team_member ?? '' }}
                                                  @if ($permotiondate && $datadate->greaterThan($permotiondate))
                                                      ({{ $approvelpartner->newstaff_code }})
                                                  @else
                                                      ( {{ $approvelpartner->staffcode }})
                                                  @endif
                                              </td>


                                              <td>{{ $applyleaveDatas->reasonleave ?? '' }} </td>

                                              <td>
                                                  {{ date('d-m-Y', strtotime($applyleaveDatas->from)) ?? '' }} to
                                                  {{ date('d-m-Y', strtotime($applyleaveDatas->to)) ?? '' }}
                                              </td>
                                              @php
                                                  $to = Carbon\Carbon::createFromFormat(
                                                      'Y-m-d',
                                                      $applyleaveDatas->to ?? '',
                                                  );
                                                  $from = Carbon\Carbon::createFromFormat(
                                                      'Y-m-d',
                                                      $applyleaveDatas->from,
                                                  );
                                                  $diff_in_days = $to->diffInDays($from) + 1;
                                                  $holidaycount = DB::table('holidays')
                                                      ->where('startdate', '>=', $applyleaveDatas->from)
                                                      ->where('enddate', '<=', $applyleaveDatas->to)
                                                      ->count();
                                              @endphp
                                              <td>{{ $diff_in_days - $holidaycount ?? '' }}</td>
                                              <td> {{ date('d-m-Y', strtotime($applyleaveDatas->created_at)) ?? '' }}</td>
                                              <td>
                                                  @if ($applyleaveDatas->status == 0)
                                                      <span class="badge badge-pill badge-warning">Created</span>
                                                  @elseif($applyleaveDatas->status == 1)
                                                      <span class="badge badge-success">Approved</span>
                                                  @elseif($applyleaveDatas->status == 2)
                                                      <span class="badge badge-danger">Rejected</span>
                                                  @endif
                                              </td>
                                              <td>
                                                  @if ($applyleaveDatas->status == 0)
                                                      <form method="post"
                                                          action="{{ route('applyleave.update', $applyleaveDatas->id) }}"
                                                          enctype="multipart/form-data" style="text-align: center;">
                                                          @method('PATCH')
                                                          @csrf
                                                          <input type="text" hidden id="example-date-input"
                                                              name="status" value="1" class="form-control"
                                                              placeholder="Enter Location">
                                                          <button type="submit" class="btn btn-success"
                                                              style="border-radius: 7px; font-size: 10px; padding: 5px;">
                                                              Approve</button>
                                                      </form>
                                                  @endif
                                              </td>
                                              <td style="text-align: center;">
                                                  @if ($applyleaveDatas->status == 0)
                                                      <button data-toggle="modal"
                                                          data-target="#exampleModal12{{ $loop->index }}"
                                                          class="btn btn-danger"
                                                          style="border-radius: 7px; font-size: 10px; padding: 5px; margin-bottom: 16px;">
                                                          Reject</button>
                                                  @endif
                                              </td>

                                              <!-- model box / pop up box  -->
                                              <div class="modal fade" id="exampleModal12{{ $loop->index }}"
                                                  tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel4"
                                                  aria-hidden="true">
                                                  <div class="modal-dialog" role="document">
                                                      <div class="modal-content">
                                                          <div class="modal-header" style="background:#37A000">
                                                              <h5 style="color: white" class="modal-title font-weight-600"
                                                                  id="exampleModalLabel1">Reason For
                                                                  Rejection</h5>
                                                              <button type="button" class="close" data-dismiss="modal"
                                                                  aria-label="Close">
                                                                  <span aria-hidden="true">&times;</span>
                                                              </button>
                                                          </div>
                                                          <form method="post"
                                                              action="{{ url('applyleave/update', $applyleaveDatas->id) }}"
                                                              enctype="multipart/form-data">
                                                              @csrf
                                                              <div class="modal-body">
                                                                  <div class="row row-sm">
                                                                      <div class="col-12">
                                                                          <div class="form-group">
                                                                              <textarea rows="6" name="remark" class="form-control" placeholder=""></textarea>
                                                                              <input hidden type="text"
                                                                                  id="example-date-input" name="status"
                                                                                  value="2" class="form-control"
                                                                                  placeholder="Enter Reason">
                                                                          </div>
                                                                      </div>
                                                                  </div>
                                                                  <button type="button" class="btn btn-danger"
                                                                      data-dismiss="modal">Close</button>
                                                                  <button type="submit" style="float: right"
                                                                      class="btn btn-success">Save </button>
                                                              </div>
                                                          </form>
                                                      </div>
                                                  </div>
                                              </div>

                                          </tr>
                                      @endforeach







2222222222222222222222222222222222222
                                    resources\views\backEnd\applyleave\openindex.blade.php

                                                                            @foreach ($teamapplyleaveDatas as $applyleaveDatas)
                                          <tr>
                                              <td> <a href="{{ route('applyleave.show', $applyleaveDatas->id) }}">
                                                      {{ $applyleaveDatas->team_member ?? '' }}</a></td>
                                              <td>{{ $applyleaveDatas->staffcode ?? '' }}</td>
                                              <td>

                                                  {{ $applyleaveDatas->name ?? '' }}<br>
                                                  @if ($applyleaveDatas->type == '0')
                                                      <b>Type :</b> <span>Birthday</span><br>
                                                      <span><b>Birthday Date :
                                                          </b>{{ date(
                                                              'F d,Y',
                                                              strtotime(
                                                                  App\Models\Teammember::select('dateofbirth')->where('id', $applyleaveDatas->createdby)->first()->dateofbirth,
                                                              ),
                                                          ) ?? '' }}</span>
                                                  @elseif($applyleaveDatas->type == '1')
                                                      <span>Religious Festival</span>
                                                  @endif
                                                  @if ($applyleaveDatas->examtype == '0')
                                                      <b>Exam Type :</b> <span>PCC</span>
                                                  @elseif($applyleaveDatas->examtype == '1')
                                                      <b>Exam Type :</b> <span>CA Final</span>
                                                  @elseif($applyleaveDatas->examtype == '2')
                                                      <b>Exam Type :</b> <span>B.Com</span>
                                                  @endif
                                                  @if ($applyleaveDatas->examtype == '3')
                                                      <b>Other :</b> <span>{{ $applyleaveDatas->otherexam ?? '' }}</span>
                                                  @endif
                                              </td>
                                              {{-- <td>{{ App\Models\Teammember::select('team_member')->where('id', $applyleaveDatas->approver)->first()->team_member ?? '' }}
                                                  ({{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $applyleaveDatas->approver)->first()->staffcode ?? '' }})
                                              </td> --}}
                                              @php
                                                  $approvelpartner = DB::table('teammembers')
                                                      ->leftJoin(
                                                          'teamrolehistory',
                                                          'teamrolehistory.teammember_id',
                                                          '=',
                                                          'teammembers.id',
                                                      )
                                                      ->where('teammembers.id', $applyleaveDatas->approver)
                                                      ->select(
                                                          'teammembers.team_member',
                                                          'teammembers.staffcode',
                                                          'teamrolehistory.newstaff_code',
                                                          'teamrolehistory.created_at',
                                                      )
                                                      ->first();

                                                  $datadate = Carbon\Carbon::createFromFormat(
                                                      'Y-m-d H:i:s',
                                                      $applyleaveDatas->created_at,
                                                  );

                                                  $permotiondate = null;
                                                  if ($approvelpartner->created_at) {
                                                      $permotiondate = Carbon\Carbon::createFromFormat(
                                                          'Y-m-d H:i:s',
                                                          $approvelpartner->created_at,
                                                      );
                                                  }
                                              @endphp

                                              <td>
                                                  {{ $approvelpartner->team_member ?? '' }}
                                                  @if ($permotiondate && $datadate->greaterThan($permotiondate))
                                                      ({{ $approvelpartner->newstaff_code }})
                                                  @else
                                                      ( {{ $approvelpartner->staffcode }})
                                                  @endif
                                              </td>


                                              <td>{{ $applyleaveDatas->reasonleave ?? '' }} </td>

                                              <td>
                                                  {{ date('d-m-Y', strtotime($applyleaveDatas->from)) ?? '' }} to
                                                  {{ date('d-m-Y', strtotime($applyleaveDatas->to)) ?? '' }}
                                              </td>
                                              @php
                                                  $to = Carbon\Carbon::createFromFormat(
                                                      'Y-m-d',
                                                      $applyleaveDatas->to ?? '',
                                                  );
                                                  $from = Carbon\Carbon::createFromFormat(
                                                      'Y-m-d',
                                                      $applyleaveDatas->from,
                                                  );
                                                  $diff_in_days = $to->diffInDays($from) + 1;
                                                  $holidaycount = DB::table('holidays')
                                                      ->where('startdate', '>=', $applyleaveDatas->from)
                                                      ->where('enddate', '<=', $applyleaveDatas->to)
                                                      ->count();
                                              @endphp
                                              <td>{{ $diff_in_days - $holidaycount ?? '' }}</td>
                                              <td> {{ date('d-m-Y', strtotime($applyleaveDatas->created_at)) ?? '' }}</td>
                                              <td>
                                                  @if ($applyleaveDatas->status == 0)
                                                      <span class="badge badge-pill badge-warning">Created</span>
                                                  @elseif($applyleaveDatas->status == 1)
                                                      <span class="badge badge-success">Approved</span>
                                                  @elseif($applyleaveDatas->status == 2)
                                                      <span class="badge badge-danger">Rejected</span>
                                                  @endif
                                              </td>
                                              <td>
                                                  @if ($applyleaveDatas->status == 0)
                                                      <form method="post"
                                                          action="{{ route('applyleave.update', $applyleaveDatas->id) }}"
                                                          enctype="multipart/form-data" style="text-align: center;">
                                                          @method('PATCH')
                                                          @csrf
                                                          <input type="text" hidden id="example-date-input"
                                                              name="status" value="1" class="form-control"
                                                              placeholder="Enter Location">
                                                          <button type="submit" class="btn btn-success"
                                                              style="border-radius: 7px; font-size: 10px; padding: 5px;">
                                                              Approve</button>
                                                      </form>
                                                  @endif
                                              </td>
                                              <td style="text-align: center;">
                                                  @if ($applyleaveDatas->status == 0)
                                                      <button data-toggle="modal"
                                                          data-target="#exampleModal12{{ $loop->index }}"
                                                          class="btn btn-danger"
                                                          style="border-radius: 7px; font-size: 10px; padding: 5px; margin-bottom: 16px;">
                                                          Reject</button>
                                                  @endif
                                              </td>

                                              <!-- model box / pop up box  -->
                                              <div class="modal fade" id="exampleModal12{{ $loop->index }}"
                                                  tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel4"
                                                  aria-hidden="true">
                                                  <div class="modal-dialog" role="document">
                                                      <div class="modal-content">
                                                          <div class="modal-header" style="background:#37A000">
                                                              <h5 style="color: white" class="modal-title font-weight-600"
                                                                  id="exampleModalLabel1">Reason For
                                                                  Rejection</h5>
                                                              <button type="button" class="close" data-dismiss="modal"
                                                                  aria-label="Close">
                                                                  <span aria-hidden="true">&times;</span>
                                                              </button>
                                                          </div>
                                                          <form method="post"
                                                              action="{{ url('applyleave/update', $applyleaveDatas->id) }}"
                                                              enctype="multipart/form-data">
                                                              @csrf
                                                              <div class="modal-body">
                                                                  <div class="row row-sm">
                                                                      <div class="col-12">
                                                                          <div class="form-group">
                                                                              <textarea rows="6" name="remark" class="form-control" placeholder=""></textarea>
                                                                              <input hidden type="text"
                                                                                  id="example-date-input" name="status"
                                                                                  value="2" class="form-control"
                                                                                  placeholder="Enter Reason">
                                                                          </div>
                                                                      </div>
                                                                  </div>
                                                                  <button type="button" class="btn btn-danger"
                                                                      data-dismiss="modal">Close</button>
                                                                  <button type="submit" style="float: right"
                                                                      class="btn btn-success">Save </button>
                                                              </div>
                                                          </form>
                                                      </div>
                                                  </div>
                                              </div>

                                          </tr>
                                      @endforeach
									  
									  

                                      22222222222222222222222222222222
                                      resources\views\backEnd\applyleave\teamapplication.blade.php



                             @foreach ($teamapplyleaveDatas as $applyleaveDatas)
                                 <tr>
                                     <td style="display: none;">{{ $applyleaveDatas->id }}</td>
                                     <td> <a href="{{ route('applyleave.show', $applyleaveDatas->id) }}">
                                             {{ $applyleaveDatas->team_member ?? '' }}</a>
                                     </td>
                                     {{-- <td>{{ $applyleaveDatas->staffcode }}</td> --}}
                                     <td>{{ $applyleaveDatas->newstaff_code ?? ($applyleaveDatas->staffcode ?? '') }}</td>
                                     <td>{{ date('d-m-Y', strtotime($applyleaveDatas->created_at)) ?? '' }}</td>
                                     <td class="columnSize">
                                         @if ($applyleaveDatas->status == 0)
                                             <span class="badge badge-pill badge-warning"><span
                                                     style="display: none;">A</span>Created</span>
                                         @elseif($applyleaveDatas->status == 1)
                                             <span class="badge badge-success"><span
                                                     style="display: none;">B</span>Approved</span>
                                         @elseif($applyleaveDatas->status == 2)
                                             <span class="badge badge-danger">Rejected</span>
                                         @endif
                                     </td>

                                     <td>

                                         {{ $applyleaveDatas->name ?? '' }}<br>
                                         @if ($applyleaveDatas->type == '0')
                                             <b>Type :</b> <span>Birthday</span><br>
                                             <span><b>Birthday Date :
                                                 </b>{{ date(
                                                     'F d,Y',
                                                     strtotime(
                                                         App\Models\Teammember::select('dateofbirth')->where('id', $applyleaveDatas->createdby)->first()->dateofbirth,
                                                     ),
                                                 ) ?? '' }}</span>
                                         @elseif($applyleaveDatas->type == '1')
                                             <span>Religious Festival</span>
                                         @endif
                                     </td>
                                     <td>{{ date('d-m-Y', strtotime($applyleaveDatas->from)) ?? '' }} -
                                         {{ date('d-m-Y', strtotime($applyleaveDatas->to)) ?? '' }}</td>
                                     @php
                                         $to = Carbon\Carbon::createFromFormat('Y-m-d', $applyleaveDatas->to ?? '');
                                         $from = Carbon\Carbon::createFromFormat('Y-m-d', $applyleaveDatas->from);
                                         $diff_in_days = $to->diffInDays($from) + 1;
                                         $holidaycount = DB::table('holidays')
                                             ->where('startdate', '>=', $applyleaveDatas->from)
                                             ->where('enddate', '<=', $applyleaveDatas->to)
                                             ->count();
                                     @endphp
                                     <td>{{ $diff_in_days - $holidaycount ?? '' }}</td>

                                     @php
                                         $approvelpartner = DB::table('teammembers')
                                             ->leftJoin(
                                                 'teamrolehistory',
                                                 'teamrolehistory.teammember_id',
                                                 '=',
                                                 'teammembers.id',
                                             )
                                             ->where('teammembers.id', $applyleaveDatas->approver)
                                             ->select(
                                                 'teammembers.team_member',
                                                 'teammembers.staffcode',
                                                 'teamrolehistory.newstaff_code',
                                                 'teamrolehistory.created_at',
                                             )
                                             ->first();

                                         $datadate = Carbon\Carbon::createFromFormat(
                                             'Y-m-d H:i:s',
                                             $applyleaveDatas->created_at,
                                         );

                                         $permotiondate = null;
                                         if ($approvelpartner->created_at) {
                                             $permotiondate = Carbon\Carbon::createFromFormat(
                                                 'Y-m-d H:i:s',
                                                 $approvelpartner->created_at,
                                             );
                                         }
                                     @endphp


                                     <td>
                                         {{ $approvelpartner->team_member ?? '' }}
                                         @if ($permotiondate && $datadate->greaterThan($permotiondate))
                                             ({{ $approvelpartner->newstaff_code }})
                                         @else
                                             ( {{ $approvelpartner->staffcode }})
                                         @endif
                                     </td>
                                     <td>
                                         <div style="font-size: 15px; width: 7rem;text-wrap: wrap;">
                                             {{ $applyleaveDatas->reasonleave ?? '' }}
                                         </div>
                                     </td>
                                     <td>
                                         @if ($applyleaveDatas->status == 0)
                                             <form method="post"
                                                 action="{{ route('applyleave.update', $applyleaveDatas->id) }}"
                                                 enctype="multipart/form-data" style="text-align: center;">
                                                 @method('PATCH')
                                                 @csrf
                                                 <input type="text" hidden id="example-date-input" name="status"
                                                     value="1" class="form-control" placeholder="Enter Location">
                                                 <button type="submit" class="btn btn-success"
                                                     style="border-radius: 7px; font-size: 10px; padding: 5px;">
                                                     Approve</button>
                                             </form>
                                         @endif
                                     </td>
                                     <td style="text-align: center;">
                                         @if ($applyleaveDatas->status == 0)
                                             <button data-toggle="modal" data-target="#exampleModal12{{ $loop->index }}"
                                                 class="btn btn-danger"
                                                 style="border-radius: 7px; font-size: 10px; padding: 5px; margin-bottom: 16px;">
                                                 Reject</button>
                                         @endif
                                     </td>

                                     {{-- model box --}}
                                     <div class="modal fade" id="exampleModal12{{ $loop->index }}" tabindex="-1"
                                         role="dialog" aria-labelledby="exampleModalLabel4" aria-hidden="true">
                                         <div class="modal-dialog" role="document">
                                             <div class="modal-content">
                                                 <div class="modal-header" style="background:#37A000">
                                                     <h5 style="color: white" class="modal-title font-weight-600"
                                                         id="exampleModalLabel1">Reason For
                                                         Rejection</h5>
                                                     <button type="button" class="close" data-dismiss="modal"
                                                         aria-label="Close">
                                                         <span aria-hidden="true">&times;</span>
                                                     </button>
                                                 </div>
                                                 <form method="post"
                                                     action="{{ url('applyleave/update', $applyleaveDatas->id) }}"
                                                     enctype="multipart/form-data">
                                                     @csrf
                                                     <div class="modal-body">
                                                         <div class="row row-sm">
                                                             <div class="col-12">
                                                                 <div class="form-group">
                                                                     <textarea rows="6" name="remark" class="form-control" placeholder=""></textarea>
                                                                     <input hidden type="text" id="example-date-input"
                                                                         name="status" value="2"
                                                                         class="form-control" placeholder="Enter Reason">
                                                                 </div>
                                                             </div>
                                                         </div>
                                                         <button type="button" class="btn btn-danger"
                                                             data-dismiss="modal">Close</button>
                                                         <button type="submit" style="float: right"
                                                             class="btn btn-success">Save </button>
                                                     </div>
                                                 </form>
                                             </div>
                                         </div>
                                     </div>
                                 </tr>
                             @endforeach
							 
							 
							 
                                                22222222222222222222222222222222
resources\views\backEnd\applyleave\index.blade.php

                                                                          @foreach ($teamapplyleaveDatas as $applyleaveDatas)
                                          <tr>
                                              <td> <a href="{{ route('applyleave.show', $applyleaveDatas->id) }}">
                                                      {{ $applyleaveDatas->team_member ?? '' }}</a></td>
                                              <td>{{ $applyleaveDatas->staffcode }}</td>
                                              <td>

                                                  {{ $applyleaveDatas->name ?? '' }}<br>
                                                  @if ($applyleaveDatas->type == '0')
                                                      <b>Type :</b> <span>Birthday</span><br>
                                                      <span><b>Birthday Date :
                                                          </b>{{ date(
                                                              'F d,Y',
                                                              strtotime(
                                                                  App\Models\Teammember::select('dateofbirth')->where('id', $applyleaveDatas->createdby)->first()->dateofbirth,
                                                              ),
                                                          ) ?? '' }}</span>
                                                  @elseif($applyleaveDatas->type == '1')
                                                      <span>Religious Festival</span>
                                                  @endif
                                                  @if ($applyleaveDatas->examtype == '0')
                                                      <b>Exam Type :</b> <span>PCC</span>
                                                  @elseif($applyleaveDatas->examtype == '1')
                                                      <b>Exam Type :</b> <span>CA Final</span>
                                                  @elseif($applyleaveDatas->examtype == '2')
                                                      <b>Exam Type :</b> <span>B.Com</span>
                                                  @endif
                                                  @if ($applyleaveDatas->examtype == '3')
                                                      <b>Other :</b> <span>{{ $applyleaveDatas->otherexam ?? '' }}</span>
                                                  @endif
                                              </td>
                                              {{-- <td>{{ App\Models\Teammember::select('team_member')->where('id', $applyleaveDatas->approver)->first()->team_member ?? '' }}
                                                  ({{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $applyleaveDatas->approver)->first()->staffcode ?? '' }})
                                              </td> --}}

                                              {{-- @php
                                                  $approvelpartner = DB::table('teammembers')
                                                      ->leftJoin(
                                                          'teamrolehistory',
                                                          'teamrolehistory.teammember_id',
                                                          '=',
                                                          'teammembers.id',
                                                      )
                                                      ->where('teammembers.id', $applyleaveDatas->approver)
                                                      ->select(
                                                          'teammembers.team_member',
                                                          'teammembers.staffcode',
                                                          'teamrolehistory.newstaff_code',
                                                          'teamrolehistory.created_at',
                                                      )
                                                      ->first();

                                                  $datadate = Carbon\Carbon::createFromFormat(
                                                      'Y-m-d H:i:s',
                                                      $applyleaveDatas->created_at,
                                                  );

                                                  $permotiondate = null;
                                                  if ($approvelpartner) {
                                                      $permotiondate = Carbon\Carbon::createFromFormat(
                                                          'Y-m-d H:i:s',
                                                          $approvelpartner->created_at,
                                                      );
                                                  }
                                              @endphp


                                              <td>
                                                  {{ $approvelpartner->team_member ?? '' }}
                                                  @if ($approvelpartner && $datadate->greaterThan($permotiondate))
                                                      ({{ $approvelpartner->newstaff_code }})
                                                  @else
                                                      ( {{ $approvelpartner->staffcode }})
                                                  @endif
                                              </td> --}}

                                              @php
                                                  $approvelpartner = DB::table('teammembers')
                                                      ->leftJoin(
                                                          'teamrolehistory',
                                                          'teamrolehistory.teammember_id',
                                                          '=',
                                                          'teammembers.id',
                                                      )
                                                      ->where('teammembers.id', $applyleaveDatas->approver)
                                                      ->select(
                                                          'teammembers.team_member',
                                                          'teammembers.staffcode',
                                                          'teamrolehistory.newstaff_code',
                                                          'teamrolehistory.created_at',
                                                      )
                                                      ->first();

                                                  $datadate = Carbon\Carbon::createFromFormat(
                                                      'Y-m-d H:i:s',
                                                      $applyleaveDatas->created_at,
                                                  );

                                                  $permotiondate = null;
                                                  if ($approvelpartner->created_at) {
                                                      $permotiondate = Carbon\Carbon::createFromFormat(
                                                          'Y-m-d H:i:s',
                                                          $approvelpartner->created_at,
                                                      );
                                                  }

                                              @endphp


                                              <td>
                                                  {{ $approvelpartner->team_member ?? '' }}
                                                  @if ($permotiondate && $datadate->greaterThan($permotiondate))
                                                      ({{ $approvelpartner->newstaff_code }})
                                                  @else
                                                      ( {{ $approvelpartner->staffcode }})
                                                  @endif
                                              </td>


                                              <td>{{ $applyleaveDatas->reasonleave ?? '' }} </td>

                                              <td>
                                                  {{ date('d-m-Y', strtotime($applyleaveDatas->from)) ?? '' }} to
                                                  {{ date('d-m-Y', strtotime($applyleaveDatas->to)) ?? '' }}
                                              </td>
                                              @php
                                                  $to = Carbon\Carbon::createFromFormat(
                                                      'Y-m-d',
                                                      $applyleaveDatas->to ?? '',
                                                  );
                                                  $from = Carbon\Carbon::createFromFormat(
                                                      'Y-m-d',
                                                      $applyleaveDatas->from,
                                                  );
                                                  $diff_in_days = $to->diffInDays($from) + 1;
                                                  $holidaycount = DB::table('holidays')
                                                      ->where('startdate', '>=', $applyleaveDatas->from)
                                                      ->where('enddate', '<=', $applyleaveDatas->to)
                                                      ->count();
                                              @endphp
                                              <td>{{ $diff_in_days - $holidaycount ?? '' }}</td>

                                              <td> {{ date('d-m-Y', strtotime($applyleaveDatas->created_at)) ?? '' }}</td>
                                              <td>
                                                  @if ($applyleaveDatas->status == 0)
                                                      <span class="badge badge-pill badge-warning">Created</span>
                                                  @elseif($applyleaveDatas->status == 1)
                                                      <span class="badge badge-success">Approved</span>
                                                  @elseif($applyleaveDatas->status == 2)
                                                      <span class="badge badge-danger">Rejected</span>
                                                  @endif
                                              </td>
                                              <td>
                                                  @if ($applyleaveDatas->status == 0)
                                                      <form method="post"
                                                          action="{{ route('applyleave.update', $applyleaveDatas->id) }}"
                                                          enctype="multipart/form-data" style="text-align: center;">
                                                          @method('PATCH')
                                                          @csrf
                                                          <input type="text" hidden id="example-date-input"
                                                              name="status" value="1" class="form-control"
                                                              placeholder="Enter Location">
                                                          <button type="submit" class="btn btn-success"
                                                              style="border-radius: 7px; font-size: 10px; padding: 5px;">
                                                              Approve</button>
                                                      </form>
                                                  @endif
                                              </td>
                                              <td style="text-align: center;">
                                                  @if ($applyleaveDatas->status == 0)
                                                      <button data-toggle="modal"
                                                          data-target="#exampleModal12{{ $loop->index }}"
                                                          class="btn btn-danger"
                                                          style="border-radius: 7px; font-size: 10px; padding: 5px; margin-bottom: 16px;">
                                                          Reject</button>
                                                  @endif
                                              </td>

                                              {{-- model box --}}
                                              {{-- <div class="modal fade" id="exampleModal12" tabindex="-1" role="dialog"
                                                aria-labelledby="exampleModalLabel4" aria-hidden="true"> --}}
                                              <div class="modal fade" id="exampleModal12{{ $loop->index }}"
                                                  tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel4"
                                                  aria-hidden="true">
                                                  <div class="modal-dialog" role="document">
                                                      <div class="modal-content">
                                                          <div class="modal-header" style="background:#37A000">
                                                              <h5 style="color: white" class="modal-title font-weight-600"
                                                                  id="exampleModalLabel1">Reason For
                                                                  Rejection</h5>
                                                              <button type="button" class="close" data-dismiss="modal"
                                                                  aria-label="Close">
                                                                  <span aria-hidden="true">&times;</span>
                                                              </button>
                                                          </div>
                                                          <form method="post"
                                                              action="{{ url('applyleave/update', $applyleaveDatas->id) }}"
                                                              enctype="multipart/form-data">
                                                              @csrf
                                                              <div class="modal-body">
                                                                  <div class="row row-sm">
                                                                      <div class="col-12">
                                                                          <div class="form-group">
                                                                              <textarea rows="6" name="remark" class="form-control" placeholder=""></textarea>
                                                                              <input hidden type="text"
                                                                                  id="example-date-input" name="status"
                                                                                  value="2" class="form-control"
                                                                                  placeholder="Enter Reason">
                                                                          </div>
                                                                      </div>
                                                                  </div>
                                                                  <button type="button" class="btn btn-danger"
                                                                      data-dismiss="modal">Close</button>
                                                                  <button type="submit" style="float: right"
                                                                      class="btn btn-success">Save </button>
                                                              </div>
                                                          </form>
                                                      </div>
                                                  </div>
                                              </div>

                                          </tr>
                                      @endforeach
									  
									  



                                                22222222222222222222222222222222
                                  app\Http\Controllers\PromotionandrejoiningController.php
    public function permotionandrejoinstore(Request $request)
    {

        $checkrole = DB::table('teammembers')
            ->where('id', $request->employeeid)
            ->select('id', 'role_id', 'staffcode', 'staffcodenumber')
            ->first();

        if ($checkrole->role_id != $request->designationtype) {
            if ($checkrole->role_id < $request->designationtype) {

                $role = '';
                if ($request->designationtype == 11) {
                    $role = "super admin";
                } elseif ($request->designationtype == 12) {
                    $role = "admin";
                } elseif ($request->designationtype == 13) {
                    $role = "partner";
                } elseif ($request->designationtype == 14) {
                    $role = "manager";
                } elseif ($request->designationtype == 15) {
                    $role = "staff";
                }
                $output = array('msg' => 'You can not pormote on this post "' . $role . '".');
                return back()->with('statuss', $output);
            }

            $maxStaffcodeTeammembers = DB::table('teammembers')
                ->where('role_id', $request->designationtype)
                ->max('staffcodenumber');

            $maxStaffcodeTeamRoleHistory = DB::table('teamrolehistory')
                ->where('roleid_new', $request->designationtype)
                ->max('new_staffcodenumber');

            $getlateststaffcode = max($maxStaffcodeTeammembers, $maxStaffcodeTeamRoleHistory);


            if ($request->designationtype == 13) {
                if ($getlateststaffcode == null) {
                    $newstaffcode = '10001';
                } else {
                    $newstaffcode = $getlateststaffcode + 1;
                }
                $newstaffcoderesult = 'P' . $newstaffcode;
                $staffcode = $newstaffcode;
            }
            if ($request->designationtype == 14) {
                if ($getlateststaffcode == null) {
                    $newstaffcode = '20001';
                } else {
                    $newstaffcode = $getlateststaffcode + 1;
                }
                $newstaffcoderesult = 'M' . $newstaffcode;
                $staffcode = $newstaffcode;
            }

            DB::table('teammembers')
                ->where('id', $request->employeeid)
                ->update([
                    'role_id' => $request->designationtype,
                    'staffcodenumber' => $staffcode,
                ]);

            DB::table('users')
                ->where('teammember_id', $request->employeeid)
                ->update([
                    'role_id' => $request->designationtype,
                ]);

            DB::table('teamrolehistory')->insert([
                'teammember_id' => $request->employeeid,
                'roleid_old' => $checkrole->role_id,
                'roleid_new' => $request->designationtype,
                'oldstaff_code' =>  $checkrole->staffcode,
                'newstaff_code' => $newstaffcoderesult,
                'old_staffcodenumber' => $checkrole->staffcodenumber,
                'new_staffcodenumber' => $staffcode,
                //hare goes to created date 
                'promotion_date' => now(),
                //hare goes to pormotion date from form
                'created_at' => Carbon::createFromFormat('Y-m-d', $request->promotion_date)->toDateTimeString(),
                'updated_at' => now(),
            ]);
        } else {
            $role = '';
            if ($checkrole->role_id == 11) {
                $role = "super admin";
            } elseif ($checkrole->role_id == 12) {
                $role = "admin";
            } elseif ($checkrole->role_id == 13) {
                $role = "partner";
            } elseif ($checkrole->role_id == 14) {
                $role = "manager";
            } elseif ($checkrole->role_id == 15) {
                $role = "staff";
            }
            $output = array('msg' => 'You are already on this post "' . $role . '".');
            return back()->with('statuss', $output);
        }

        $output = array('msg' => 'Pormotion Successfully Done');
        return back()->with('success', $output);
    }
	


                                                22222222222222222222222222222222
                                      resources\views\backEnd\applyleave\teamapplication.blade.php


27-07-24 baki updated on vsalocal,vsademo,vsalive
################################################################################################################################
app\Http\Controllers\ClientController.php

    public function viewClient($id)
    {
        if (auth()->user()->role_id == 11 || auth()->user()->role_id == 13) {
            $clientList =  DB::table('clients')
                ->leftjoin('states', 'states.id', 'clients.c_state')
                ->where('clients.id', $id)->select('clients.*', 'states.statename')->first();
            $clientcontactList =  Clientcontact::where('client_id', $id)->get();
            // dd($clientcontactList);
            $clientassignment =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->where('assignmentbudgetings.client_id', $id)
                ->select(
                    'assignmentmappings.*',
                    'assignmentbudgetings.duedate',
                    'assignmentbudgetings.assignmentname',
                    'assignmentbudgetings.status',
                    'assignments.assignment_name',
                    'clients.client_code',
                    'clients.client_name'
                )->distinct()->get();

            $clientfileDatas = DB::table('clientdocuments')
                ->leftjoin('users', 'users.id', 'clientdocuments.created_by')
                ->leftjoin('clients', 'clients.id', 'clientdocuments.client_id')
                ->leftjoin('teammembers', 'teammembers.id', 'users.teammember_id')
                ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
                ->where('clientdocuments.client_id', $id)
                ->select('clientdocuments.*', 'teammembers.team_member', 'roles.rolename', 'clients.client_name')->get();

            if (auth()->user()->teammember_id == 214) {
                $clientfile  =  DB::table('clientfolders')
                    ->where('createdby', '214')
                    ->where('client_id', $id)->get();
            } else {
                $clientfile  =  DB::table('clientfolders')
                    ->where('client_id', $id)->get();
            }


            $clientlogin  =  DB::table('clientlogs')
                ->leftjoin('clientlogins', 'clientlogins.id', 'clientlogs.clientlogin_id')
                ->where('clientlogs.client_id', $id)
                ->select('clientlogs.*', 'clientlogins.name', 'clientlogins.email')->get();
        } else {


            $clientList =  DB::table('clients')
                ->leftjoin('states', 'states.id', 'clients.c_state')
                ->where('clients.id', $id)->select('clients.*', 'states.statename')->first();
            $clientcontactList =  Clientcontact::where('client_id', $id)->get();

            // dd(auth()->user()->teammember_id);
            $clientassignment =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->where('assignmentbudgetings.client_id', $id)
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
                ->select(
                    'assignmentmappings.*',
                    'assignmentbudgetings.duedate',
                    'assignmentbudgetings.assignmentname',
                    'assignmentbudgetings.status',
                    'assignments.assignment_name',
                    'clients.client_code',
                    'clients.client_name'
                )->distinct()->get();

            $clientfileDatas = DB::table('clientdocuments')
                ->leftjoin('users', 'users.id', 'clientdocuments.created_by')
                ->leftjoin('clients', 'clients.id', 'clientdocuments.client_id')
                ->leftjoin('teammembers', 'teammembers.id', 'users.teammember_id')
                ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
                ->where('clientdocuments.client_id', $id)
                ->select('clientdocuments.*', 'teammembers.team_member', 'roles.rolename', 'clients.client_name')->get();

            if (auth()->user()->teammember_id == 214) {
                $clientfile  =  DB::table('clientfolders')
                    ->where('createdby', '214')
                    ->where('client_id', $id)->get();
            } else {
                $clientfile  =  DB::table('clientfolders')
                    ->where('client_id', $id)->get();
            }


            $clientlogin  =  DB::table('clientlogs')
                ->leftjoin('clientlogins', 'clientlogins.id', 'clientlogs.clientlogin_id')
                ->where('clientlogs.client_id', $id)
                ->select('clientlogs.*', 'clientlogins.name', 'clientlogins.email')->get();
        }
        return view('backEnd.clientlist', compact('id', 'clientlogin', 'clientfile', 'clientcontactList', 'clientList', 'clientassignment', 'clientfileDatas'));
    }




################################################################################################################################
resources\views\backEnd\assignmentmapping\yearwisepartnerlist.blade.php



                                    @foreach ($otherassigned as $assignmentmappingDatas)
                                        <tr>

                                            <td> <a
                                                    href="{{ url('/viewassignment/' . $assignmentmappingDatas->assignmentgenerate_id) }}">{{ $assignmentmappingDatas->assignmentgenerate_id }}</a>
                                            </td>
                                            <td>
                                                {{ $assignmentmappingDatas->assignment_name }} @if ($assignmentmappingDatas->assignmentname != null)
                                                    ({{ $assignmentmappingDatas->assignmentname }})
                                                @endif
                                            </td>
                                            <td> {{ $assignmentmappingDatas->client_name }}</td>
                                            <td> {{ $assignmentmappingDatas->client_code }}</td>
                                            <td>
                                                @if ($assignmentmappingDatas->duedate != null)
                                                    {{ date('d-m-Y', strtotime($assignmentmappingDatas->duedate)) }}
                                                @endif
                                            </td>
                                            <td>
                                                @if ($assignmentmappingDatas->periodend != null)
                                                    {{ date('d-m-Y', strtotime($assignmentmappingDatas->periodend)) }}
                                                @endif
                                            </td>
                                            {{-- <td>{{ App\Models\Teammember::select('team_member')->where('id', $assignmentmappingDatas->leadpartner)->first()->team_member ?? '' }}
                                                ({{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $assignmentmappingDatas->leadpartner)->first()->staffcode ?? '' }})
                                            </td>
                                            <td>{{ App\Models\Teammember::select('team_member')->where('id', $assignmentmappingDatas->otherpartner)->first()->team_member ?? '' }}
                                                ({{ App\Models\Teammember::select('team_member', 'staffcode')->where('id', $assignmentmappingDatas->otherpartner)->first()->staffcode ?? '' }})
                                            </td> --}}
                                            @php
                                                $leadpartner = DB::table('teammembers')
                                                    ->leftJoin(
                                                        'teamrolehistory',
                                                        'teamrolehistory.teammember_id',
                                                        '=',
                                                        'teammembers.id',
                                                    )
                                                    ->where('teammembers.id', $assignmentmappingDatas->leadpartner)
                                                    ->select(
                                                        'teammembers.team_member',
                                                        'teammembers.staffcode',
                                                        'teamrolehistory.newstaff_code',
                                                    )
                                                    ->first();

                                                $otherPartner = DB::table('teammembers')
                                                    ->leftJoin(
                                                        'teamrolehistory',
                                                        'teamrolehistory.teammember_id',
                                                        '=',
                                                        'teammembers.id',
                                                    )
                                                    ->where('teammembers.id', $assignmentmappingDatas->otherpartner)
                                                    ->select(
                                                        'teammembers.team_member',
                                                        'teammembers.staffcode',
                                                        'teamrolehistory.newstaff_code',
                                                    )
                                                    ->first();
                                            @endphp
                                            <td>
                                                {{ $leadpartner->team_member ?? '' }}
                                                @if ($leadpartner && $leadpartner->team_member)
                                                    ({{ $leadpartner->newstaff_code ?? ($leadpartner->staffcode ?? '') }})
                                                @endif
                                            </td>
                                            <td>
                                                {{ $otherPartner->team_member ?? '' }}
                                                @if ($otherPartner && $otherPartner->team_member)
                                                    ({{ $otherPartner->newstaff_code ?? ($otherPartner->staffcode ?? '') }})
                                                @endif
                                            </td>
                                            <td>
                                                @foreach (DB::table('assignmentmappings')->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')->where('assignmentmappings.id', $assignmentmappingDatas->id)->get() as $sub)
                                                    @if ($sub->profilepic == null)
                                                        <a class="avatar avatar-xs" data-toggle="tooltip"
                                                            title="{{ $sub->team_member }} ({{ $sub->staffcode }})">
                                                            <img src="{{ url('backEnd/image/dummy.png') }}"
                                                                class="avatar-img rounded-circle" alt="...">
                                                        @else
                                                            <a class="avatar avatar-xs" data-toggle="tooltip"
                                                                title="{{ $sub->team_member }} ({{ $sub->staffcode }})">
                                                                <img src="{{ asset('backEnd/image/teammember/profilepic/' . $sub->profilepic) }}"
                                                                    class="avatar-img rounded-circle" alt="...">
                                                    @endif
                                                @endforeach
                                            </td>
                                            @if (auth()->user()->role_id != 15 && Auth::user()->role_id != 11)
                                                <td>
                                                    <a href="{{ url('/assignmentlist/' . $assignmentmappingDatas->assignmentgenerate_id) }}"
                                                        class="btn btn-info-soft btn-sm"><i class="far fa-edit"></i></a>
                                                </td>
                                            @endif
                                        </tr>
                                    @endforeach
									
									

################################################################################################################################
app\Http\Controllers\TimesheetController.php

  public function show(Request $request)
  {
    if ($request->method() === 'POST') {

      $dropdownYears = DB::table('timesheets')
        ->where('created_by', auth()->user()->teammember_id)
        ->select(DB::raw('YEAR(date) as year'))
        ->distinct()->orderBy('year', 'DESC')->pluck('year');

      $dropdownMonths = DB::table('timesheets')
        ->where('created_by', auth()->user()->teammember_id)
        ->distinct()
        ->pluck('month');


      $month = $request->month;
      $year = $request->year;


      $getauth =  DB::table('timesheets')
        ->where('created_by', auth()->user()->teammember_id)
        ->orderby('id', 'desc')->first();

      //   dd($getauth);
      $client = Client::select('id', 'client_name')->get();
      $timesheetData =  $timesheetData = DB::table('timesheets')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheets.created_by')
        ->where('timesheets.created_by', auth()->user()->teammember_id)
        ->where('timesheets.month', $month)
        ->whereRaw('YEAR(timesheets.date) = ?', [$year])
        ->select('timesheets.*', 'teammembers.team_member', 'teammembers.staffcode')->orderBy('id', 'DESC')->paginate(100);
      $partner = Teammember::where('role_id', '=', 13)->where('status', '=', 1)->with('title')->get();
      $timesheetrequest = DB::table('timesheetrequests')->where('createdby', auth()->user()->teammember_id)->orderBy('id', 'DESC')->first();

      if ($getauth  == null) {
        return view('backEnd.timesheet.firstindex', compact('timesheetData', 'getauth', 'client', 'partner'));
      } else {
        return view('backEnd.timesheet.index', compact(
          'timesheetData',
          'getauth',
          'client',
          'partner',
          'timesheetrequest',
          'dropdownYears',
          'dropdownMonths',
          'month',
          'year',
        ));
      }
    }

    $result = DB::table('timesheetusers')->select(DB::raw('YEAR(date) as year'))
      ->distinct()->orderBy('year', 'DESC')->limit(5)->get();
    $years = $result->pluck('year');

    if (auth()->user()->teammember_id == 23) {
      $teammember = DB::table('teammembers')->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('teammembers.role_id', '15')
        ->select('teammembers.id', 'teammembers.team_member', 'roles.rolename')->distinct()->get();
      //  dd($teammember);
      $month = DB::table('timesheets')
        ->select('timesheets.month')->distinct()->get();


      $timesheetData = DB::table('timesheets')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheets.created_by')
        ->where('timesheets.created_by', $request->teammember)->where('timesheets.month', $request->month)
        ->whereYear('timesheets.date', '=', $request->year)
        ->select('timesheets.*', 'teammembers.team_member', 'teammembers.staffcode')->get();
    }

    // elseif (auth()->user()->role_id == 11 || auth()->user()->role_id == 18) {
    //   $teammember = DB::table('teammembers')->leftjoin('roles', 'roles.id', 'teammembers.role_id')
    //     ->select('teammembers.id', 'teammembers.team_member', 'roles.rolename')->distinct()->get();
    //   //  dd($teammember);
    //   $month = DB::table('timesheets')
    //     ->select('timesheets.month')->distinct()->get();

    //   $timesheetData = DB::table('timesheets')
    //     ->leftjoin('teammembers', 'teammembers.id', 'timesheets.created_by')
    //     ->where('timesheets.created_by', $request->teammember)->where('timesheets.month', $request->month)
    //     ->whereYear('timesheets.date', '=', $request->year)
    //     ->select('timesheets.*', 'teammembers.team_member')->get();
    // } 
    elseif (auth()->user()->role_id == 11 || auth()->user()->role_id == 18) {
      $teammember = DB::table('teammembers')->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->select('teammembers.id', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename')->distinct()->get();
      //  dd($teammember);
      $month = DB::table('timesheets')
        ->select('timesheets.month')->distinct()->get();

      $timesheetData = DB::table('timesheets')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheets.created_by')
        ->where('timesheets.created_by', $request->teammember)->where('timesheets.month', $request->month)
        ->whereYear('timesheets.date', '=', $request->year)
        ->select('timesheets.*', 'teammembers.team_member', 'teammembers.staffcode')->get();
    } elseif (auth()->user()->role_id == 13) {
      $teammember = DB::table('timesheets')
        ->leftjoin('timesheetusers', 'timesheetusers.timesheetid', 'timesheets.id')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheets.created_by')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('timesheetusers.partner', auth()->user()->teammember_id)
        ->select('teammembers.id', 'teammembers.team_member', 'roles.rolename')->distinct()->get();
      //  dd($teammember);
      $month = DB::table('timesheets')
        ->select('timesheets.month')->distinct()->get();

      $timesheetData = DB::table('timesheets')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheets.created_by')
        ->where('timesheets.created_by', $request->teammember)->where('timesheets.month', $request->month)
        ->whereYear('timesheets.date', '=', $request->year)
        ->select('timesheets.*', 'teammembers.team_member', 'teammembers.staffcode')->get();
    }
    return view('backEnd.timesheet.hrindex', compact('timesheetData', 'teammember', 'month', 'years'));
  }
  




################################################################################################################################
resources\views\backEnd\timesheet\index.blade.php

                                @foreach ($timesheetData as $timesheetDatas)
                                    <tr>
                                        @php
                                            $timeid = DB::table('timesheetusers')
                                                ->where('timesheetusers.id', $timesheetDatas->id)
                                                ->first();

                                            // $client_id = DB::table('timesheetusers')
                                            //     ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
                                            //     ->leftjoin(
                                            //         'assignmentbudgetings',
                                            //         'assignmentbudgetings.assignment_id',
                                            //         'timesheetusers.assignment_id',
                                            //     )
                                            //     ->leftjoin(
                                            //         'assignments',
                                            //         'assignments.id',
                                            //         'timesheetusers.assignment_id',
                                            //     )
                                            //     ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.partner')
                                            //     ->leftJoin('teamrolehistory', function ($join) {
                                            //         $join
                                            //             ->on('teamrolehistory.teammember_id', '=', 'teammembers.id')
                                            //             ->on(
                                            //                 'teamrolehistory.created_at',
                                            //                 '<',
                                            //                 'timesheetusers.created_at',
                                            //             );
                                            //     })
                                            //     ->where('timesheetusers.id', $timesheetDatas->id)
                                            //     ->select(
                                            //         'clients.client_name',
                                            //         'clients.client_code',
                                            //         'timesheetusers.hour',
                                            //         'timesheetusers.location',
                                            //         'timesheetusers.status',
                                            //         'assignments.assignment_name',
                                            //         'billable_status',
                                            //         'workitem',
                                            //         'teammembers.team_member',
                                            //         'teammembers.staffcode',
                                            //         'teamrolehistory.newstaff_code',
                                            //         'assignmentbudgetings.assignmentname',
                                            //         'assignmentbudgetings.assignmentgenerate_id',
                                            //     )
                                            //     ->first();

                                            $client_id = DB::table('timesheetusers')
                                                ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
                                                ->leftjoin(
                                                    'assignmentbudgetings',
                                                    'assignmentbudgetings.assignment_id',
                                                    'timesheetusers.assignment_id',
                                                )
                                                ->leftjoin(
                                                    'assignments',
                                                    'assignments.id',
                                                    'timesheetusers.assignment_id',
                                                )
                                                ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.partner')
                                                ->where('timesheetusers.id', $timesheetDatas->id)
                                                ->select(
                                                    'clients.client_name',
                                                    'clients.client_code',
                                                    'timesheetusers.hour',
                                                    'timesheetusers.location',
                                                    'timesheetusers.status',
                                                    'assignments.assignment_name',
                                                    'billable_status',
                                                    'workitem',
                                                    'teammembers.team_member',
                                                    'teammembers.staffcode',
                                                    'assignmentbudgetings.assignmentname',
                                                    'assignmentbudgetings.assignmentgenerate_id',
                                                    'assignmentbudgetings.created_at',
                                                )
                                                ->first();

                                            $permotioncheck = DB::table('teamrolehistory')
                                                ->where('teammember_id', auth()->user()->teammember_id)
                                                ->first();

                                            $datadate = Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $client_id->created_at,
                                            );

                                            $permotiondate = null;
                                            if ($permotioncheck) {
                                                $permotiondate = Carbon\Carbon::createFromFormat(
                                                    'Y-m-d H:i:s',
                                                    $permotioncheck->created_at,
                                                );
                                            }

                                            $total = DB::table('timesheetusers')

                                                ->where('timesheetusers.timesheetid', $timesheetDatas->timesheetid)
                                                ->sum('hour');
                                            //	dd($total);
                                            $dates = date('l', strtotime($timesheetDatas->date));

                                        @endphp
                                        <td style="display: none;">{{ $timesheetDatas->id }}</td>
                                        <td>
                                            @if ($client_id->status == 0)
                                                <span class="badge badge-pill badge-warning">saved</span>
                                            @else
                                                <span class="badge badge-pill badge-danger">submit</span>
                                            @endif
                                        </td>

                                        @php

                                            $date = $timesheetDatas->date;

                                            $leaves = DB::table('applyleaves')
                                                ->where('applyleaves.createdby', auth()->user()->teammember_id)
                                                ->where('status', '!=', 2)
                                                ->select('applyleaves.from', 'applyleaves.to')
                                                ->get();

                                            $leavesWithinRange = $leaves->filter(function ($leave) use ($date) {
                                                return $leave->from <= $date && $leave->to >= $date;
                                            });

                                            //dd($leavesWithinRange);

                                        @endphp

                                        <td> <span style="display: none;">
                                                {{ date('Y-m-d', strtotime($timesheetDatas->date)) }}</span>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                        </td>

                                        <td>
                                            @if ($timesheetDatas->date != null)
                                                {{ $dates ?? '' }}
                                            @endif
                                        </td>


                                        <td>
                                            {{ $client_id->client_name ?? '' }}
                                            @if (count((array) $client_id->client_name) > 1)
                                                ,
                                            @endif
                                        </td>
                                        <td>
                                            {{ $client_id->client_code ?? '' }}
                                            @if (count((array) $client_id->client_code) > 1)
                                                ,
                                            @endif
                                        </td>

                                        <td>

                                            {{ $client_id->assignment_name ?? '' }} (
                                            {{ $client_id->assignmentgenerate_id ?? '' }})
                                            @if ($timesheetDatas->assignmentname != null)
                                                ({{ $timesheetDatas->assignmentname ?? '' }})
                                            @endif
                                            @if (count((array) $client_id->assignment_name) > 1)
                                                ,
                                            @endif
                                        </td>
                                        <td>
                                            {{ $client_id->workitem ?? '' }}
                                            @if (count((array) $client_id->workitem) > 1)
                                                ,
                                            @endif
                                        </td>

                                        <td>
                                            {{ $client_id->location ?? '' }}
                                            @if (count((array) $client_id->location) > 1)
                                                ,
                                            @endif
                                        </td>

                                        {{-- <td>
                                            {{ $client_id->team_member ?? '' }} (
                                            {{ $client_id->newstaff_code ?? ($client_id->staffcode ?? '') }})
                                            @if (count((array) $client_id->team_member) > 1)
                                                ,
                                            @endif
                                        </td> --}}





                                        <td>
                                            {{ $client_id->team_member ?? '' }}
                                            @if ($permotioncheck && $datadate->greaterThan($permotiondate))
                                                ( {{ $permotioncheck->newstaff_code }})
                                            @else
                                                ( {{ $client_id->staffcode ?? '' }})
                                            @endif
                                            @if (count((array) $client_id->team_member) > 1)
                                                ,
                                            @endif
                                        </td>



                                        <td>
                                            {{ $client_id->hour ?? '' }}
                                            @if (count((array) $client_id->hour) > 1)
                                                ,
                                            @endif
                                        </td>
                                        <td>{{ $total }}</td>
                                        <td>
                                            @if ($client_id->status == 0)
                                                @if ($leavesWithinRange->isEmpty())
                                                    <a href="{{ url('/timesheet/destroy/' . $timesheetDatas->timesheetid) }}"
                                                        onclick="return confirm('Are you sure you want to delete this item?');"
                                                        class="btn btn-danger-soft btn-sm"><i
                                                            class="far fa-trash-alt"></i></a>
                                                @endif
                                            @else
                                                delete blocked
                                            @endif
                                        </td>
                                    </tr>
                                @endforeach
								



################################################################################################################################

app\Http\Controllers\TimesheetController.php


  public function create(Request $request)
  {

    $permotioncheck = DB::table('teamrolehistory')
      ->where('teammember_id', auth()->user()->teammember_id)->first();
    $partner = Teammember::where('role_id', '=', 13)->where('status', '=', 1)->with('title')->get();
    $teammember = Teammember::where('role_id', '!=', 11)->with('title', 'role')->get();
    if (auth()->user()->role_id == 11) {
      $client = Client::where('status', 1)->select('id', 'client_name', 'client_code')->orderBy('client_name', 'ASC')->get();
      $timesheetrejectData = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 2)
        ->first();
    } elseif ($permotioncheck && auth()->user()->role_id == 13) {
      $timesheetrejectData = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 2)
        ->first();

      $clientssbefore = DB::table('assignmentteammappings')
        ->leftjoin('assignmentmappings', 'assignmentmappings.id', 'assignmentteammappings.assignmentmapping_id')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->orwhere('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
        // i have add this line becouse manager contain it but staff not contain it so basically after add this code no contain staff and manager 
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->where('assignmentbudgetings.status', 1)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()->get();

      $clientssafter = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->where(function ($query) {
          $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
            ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
        })
        ->where('assignmentbudgetings.status', 1)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()->get();

      // // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
      // $clients = DB::table('clients')
      //   ->whereIn('id', [29, 32, 33, 34])
      //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
      //   ->orderBy('client_name', 'ASC')
      //   ->distinct()->get();
      // $client = $clientss->merge($clients);

      $selectedDate1 = new \DateTime();
      $formattedDate = $selectedDate1->format('Y-m-d');
      $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

      if ($holidaydatecheck) {
        $clientIds = [29, 32, 33, 34];
      } else {
        // if not holidays then go hare
        $dayOfWeek = $selectedDate1->format('w');
        if ($selectedDate1->format('l') == 'Saturday') {
          $dayOfMonth = $selectedDate1->format('j');
          // Calculate which Saturday of the month it is
          $saturdayNumber = ceil($dayOfMonth / 7);
          // offholiday client name will be show on 2nd and 4rth sturday
          if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
            $clientIds = [29, 32, 33, 34];
          } else {
            $clientIds = [29, 32, 34];
          }
        } else {
          $clientIds = [29, 32, 34];
        }
      }

      $clients = DB::table('clients')
        ->whereIn('id', $clientIds)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()
        ->get();

      $client = $clientssafter->merge($clientssbefore)->merge($clients);
    } elseif (auth()->user()->role_id == 13) {
      $timesheetrejectData = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 2)
        ->first();

      $clientss = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->where(function ($query) {
          $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
            ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
        })
        ->where('assignmentbudgetings.status', 1)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()->get();

      // // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
      // $clients = DB::table('clients')
      //   ->whereIn('id', [29, 32, 33, 34])
      //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
      //   ->orderBy('client_name', 'ASC')
      //   ->distinct()->get();
      // $client = $clientss->merge($clients);

      $selectedDate1 = new \DateTime();
      $formattedDate = $selectedDate1->format('Y-m-d');
      $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

      if ($holidaydatecheck) {
        $clientIds = [29, 32, 33, 34];
      } else {
        // if not holidays then go hare
        $dayOfWeek = $selectedDate1->format('w');
        if ($selectedDate1->format('l') == 'Saturday') {
          $dayOfMonth = $selectedDate1->format('j');
          // Calculate which Saturday of the month it is
          $saturdayNumber = ceil($dayOfMonth / 7);
          // offholiday client name will be show on 2nd and 4rth sturday
          if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
            $clientIds = [29, 32, 33, 34];
          } else {
            $clientIds = [29, 32, 34];
          }
        } else {
          $clientIds = [29, 32, 34];
        }
      }


      $clients = DB::table('clients')
        ->whereIn('id', $clientIds)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()
        ->get();

      $client = $clientss->merge($clients);
    } else {
      $timesheetrejectData = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 2)
        ->first();

      $clientss = DB::table('assignmentteammappings')
        ->leftjoin('assignmentmappings', 'assignmentmappings.id', 'assignmentteammappings.assignmentmapping_id')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->orwhere('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
        // i have add this line becouse manager contain it but staff not contain it so basically after add this code no contain staff and manager 
        ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
        ->where('assignmentbudgetings.status', 1)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()->get();

      // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
      // $clients = DB::table('clients')
      //   ->whereIn('id', [29, 32, 33, 34])
      //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
      //   ->orderBy('client_name', 'ASC')
      //   ->distinct()->get();

      // $client = $clientss->merge($clients);

      $selectedDate1 = new \DateTime();
      $formattedDate = $selectedDate1->format('Y-m-d');
      $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

      if ($holidaydatecheck) {
        $clientIds = [29, 32, 33, 34];
      } else {
        // if not holidays then go hare
        $dayOfWeek = $selectedDate1->format('w');
        if ($selectedDate1->format('l') == 'Saturday') {
          $dayOfMonth = $selectedDate1->format('j');
          // Calculate which Saturday of the month it is
          $saturdayNumber = ceil($dayOfMonth / 7);
          // offholiday client name will be show on 2nd and 4rth sturday
          if (auth()->user()->role_id == 14) {
            if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
              $clientIds = [29, 32, 33, 34];
            } else {
              $clientIds = [29, 32, 34];
            }
          } else {
            if ($saturdayNumber == 1.0 || $saturdayNumber == 2.0 || $saturdayNumber == 3.0 || $saturdayNumber == 4.0 || $saturdayNumber == 5.0) {
              $clientIds = [29, 32, 33, 34];
            }
          }
        } else {
          $clientIds = [29, 32, 34];
        }
      }
      $clients = DB::table('clients')
        ->whereIn('id', $clientIds)
        ->select('clients.client_name', 'clients.id', 'clients.client_code')
        ->orderBy('client_name', 'ASC')
        ->distinct()
        ->get();

      $client = $clientss->merge($clients);
    }
    $assignment = Assignment::select('id', 'assignment_name')->get();
    if ($request->ajax()) {
      // dd($request);
      if (isset($request->timesheetdate)) {
        if ($permotioncheck && auth()->user()->role_id == 13) {
          echo "<option>Select Client</option>";

          $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);
          $selectedDate1 = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);


          $clientssbefore = DB::table('assignmentteammappings')
            ->leftjoin('assignmentmappings', 'assignmentmappings.id', 'assignmentteammappings.assignmentmapping_id')
            ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
            ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
            ->orwhere('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
            ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
            ->where(function ($query) use ($selectedDate) {
              $query->whereNull('otpverifydate')
                ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
            })
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()->get();

          $clientssafter = DB::table('assignmentmappings')
            ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
            ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
            ->where(function ($query) {
              $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
            })
            ->where(function ($query) use ($selectedDate) {
              $query->whereNull('otpverifydate')
                ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
            })
            // ->whereNotNull('clients.client_name')
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()->get();

          // // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
          // $clients = DB::table('clients')
          //   ->whereIn('id', [29, 32, 33, 34])
          //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
          //   ->orderBy('client_name', 'ASC')
          //   ->distinct()->get();

          // if you selected sturday date then offholydays client will be show otherwise not

          $formattedDate = $selectedDate1->format('Y-m-d');
          $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

          if ($holidaydatecheck) {
            $clientIds = [29, 32, 33, 34];
          } else {
            // if not holidays then go hare
            $dayOfWeek = $selectedDate1->format('w');
            if ($selectedDate1->format('l') == 'Saturday') {
              $dayOfMonth = $selectedDate1->format('j');
              // Calculate which Saturday of the month it is
              $saturdayNumber = ceil($dayOfMonth / 7);
              // offholiday client name will be show on 2nd and 4rth sturday
              if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
                $clientIds = [29, 32, 33, 34];
              } else {
                $clientIds = [29, 32, 34];
              }
            } else {
              $clientIds = [29, 32, 34];
            }
          }
          $clients = DB::table('clients')
            ->whereIn('id', $clientIds)
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()
            ->get();

          // $client = $clientss->merge($clients);
          $client = $clientssafter->merge($clientssbefore)->merge($clients);
          foreach ($client as $clients) {
            echo "<option value='" . $clients->id . "'>" . $clients->client_name . '( ' . $clients->client_code . ' )' . "</option>";
          }
        } elseif (auth()->user()->role_id == 13) {
          echo "<option>Select Client</option>";

          $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);
          $selectedDate1 = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);

          $clientss = DB::table('assignmentmappings')
            ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
            ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
            ->where(function ($query) {
              $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
            })
            ->where(function ($query) use ($selectedDate) {
              $query->whereNull('otpverifydate')
                ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
            })
            // ->whereNotNull('clients.client_name')
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()->get();

          // // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
          // $clients = DB::table('clients')
          //   ->whereIn('id', [29, 32, 33, 34])
          //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
          //   ->orderBy('client_name', 'ASC')
          //   ->distinct()->get();

          // if you selected sturday date then offholydays client will be show otherwise not

          $formattedDate = $selectedDate1->format('Y-m-d');
          $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

          if ($holidaydatecheck) {
            $clientIds = [29, 32, 33, 34];
          } else {
            // if not holidays then go hare
            $dayOfWeek = $selectedDate1->format('w');
            if ($selectedDate1->format('l') == 'Saturday') {
              $dayOfMonth = $selectedDate1->format('j');
              // Calculate which Saturday of the month it is
              $saturdayNumber = ceil($dayOfMonth / 7);
              // offholiday client name will be show on 2nd and 4rth sturday
              if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
                $clientIds = [29, 32, 33, 34];
              } else {
                $clientIds = [29, 32, 34];
              }
            } else {
              $clientIds = [29, 32, 34];
            }
          }
          $clients = DB::table('clients')
            ->whereIn('id', $clientIds)
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()
            ->get();

          $client = $clientss->merge($clients);

          foreach ($client as $clients) {
            echo "<option value='" . $clients->id . "'>" . $clients->client_name . '( ' . $clients->client_code . ' )' . "</option>";
          }
        } else {

          echo "<option>Select Client</option>";

          $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);
          $selectedDate1 = \DateTime::createFromFormat('d-m-Y', $request->timesheetdate);
          $clientss = DB::table('assignmentteammappings')
            ->leftjoin('assignmentmappings', 'assignmentmappings.id', 'assignmentteammappings.assignmentmapping_id')
            ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
            ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
            ->orwhere('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
            ->whereNotIn('assignmentbudgetings.assignmentname', ['Unallocated', 'Official Travel', 'Off/Holiday', 'Seminar/Conference/Post Qualification Course'])
            ->where(function ($query) use ($selectedDate) {
              $query->whereNull('otpverifydate')
                ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
            })
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()->get();
          // ->get();

          // done default $clients in ajax if need then $clientss add in ajax target $request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34
          // $clients = DB::table('clients')
          //   ->whereIn('id', [29, 32, 33, 34])
          //   ->select('clients.client_name', 'clients.id', 'clients.client_code')
          //   ->orderBy('client_name', 'ASC')
          //   ->distinct()->get();

          // $client = $clientss->merge($clients);



          $formattedDate = $selectedDate1->format('Y-m-d');
          $holidaydatecheck = DB::table('holidays')->where('startdate', $formattedDate)->select('holidayname')->first();

          if ($holidaydatecheck) {
            $clientIds = [29, 32, 33, 34];
          } else {
            // if not holidays then go hare
            $dayOfWeek = $selectedDate1->format('w');
            if ($selectedDate1->format('l') == 'Saturday') {
              $dayOfMonth = $selectedDate1->format('j');
              // Calculate which Saturday of the month it is
              $saturdayNumber = ceil($dayOfMonth / 7);
              // offholiday client name will be show on 2nd and 4rth sturday
              if (auth()->user()->role_id == 14) {
                if ($saturdayNumber == 2.0 || $saturdayNumber == 4.0) {
                  $clientIds = [29, 32, 33, 34];
                } else {
                  $clientIds = [29, 32, 34];
                }
              } else {
                if ($saturdayNumber == 1.0 || $saturdayNumber == 2.0 || $saturdayNumber == 3.0 || $saturdayNumber == 4.0 || $saturdayNumber == 5.0) {
                  $clientIds = [29, 32, 33, 34];
                }
              }
            } else {
              $clientIds = [29, 32, 34];
            }
          }
          $clients = DB::table('clients')
            ->whereIn('id', $clientIds)
            ->select('clients.client_name', 'clients.id', 'clients.client_code')
            ->orderBy('client_name', 'ASC')
            ->distinct()
            ->get();

          $client = $clientss->merge($clients);

          foreach ($client as $clients) {
            echo "<option value='" . $clients->id . "'>" . $clients->client_name . '( ' . $clients->client_code . ' )' . "</option>";
          }
        }
      }

      if (isset($request->cid)) {
        if ($permotioncheck && auth()->user()->role_id == 13) {
          echo "<option>Select Assignment</option>";

          if ($request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34) {
            $clients = DB::table('clients')
              ->where('id', $request->cid)
              ->select('clients.client_name', 'clients.id', 'clients.client_code')
              ->orderBy('client_name', 'ASC')
              ->distinct()->get();

            $id = $clients[0]->id;
            $assignments = DB::table('assignmentbudgetings')->where('client_id', $id)
              ->leftJoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
              ->select('assignmentbudgetings.assignmentgenerate_id', 'assignments.assignment_name', 'assignments.assignmentname')
              ->orderBy('assignment_name');
          } else {
            $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->datepickers);

            $assignments = DB::table('assignmentbudgetings')
              ->where('assignmentbudgetings.client_id', $request->cid)
              ->leftJoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
              ->leftJoin('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
              ->where(function ($query) {
                $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                  ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
              })
              ->where(function ($query) use ($selectedDate) {
                $query->whereNull('otpverifydate')
                  ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
              })
              ->select('assignmentbudgetings.assignmentgenerate_id', 'assignments.assignment_name', 'assignmentbudgetings.assignmentname');

            $additionalAssignments = DB::table('assignmentbudgetings')
              ->join('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
              ->leftJoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
              ->leftJoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
              ->where('assignmentbudgetings.client_id', $request->cid)
              ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
              ->where(function ($query) {
                $query->whereNull('assignmentteammappings.status')
                  ->orWhere('assignmentteammappings.status', '=', 1);
              })
              ->where(function ($query) use ($selectedDate) {
                $query->whereNull('otpverifydate')
                  ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
              })
              ->select('assignmentbudgetings.assignmentgenerate_id', 'assignments.assignment_name', 'assignmentbudgetings.assignmentname');

            $assignments = $assignments->union($additionalAssignments)->orderBy('assignment_name')->get();
            // dd($assignments);
          }

          foreach ($assignments as $sub) {
            echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . '/' . $sub->assignmentgenerate_id . ' )' . "</option>";
          }
        }

        // 22222222
        elseif (auth()->user()->role_id == 13) {

          echo "<option>Select Assignment</option>";
          if ($request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34) {
            $clients = DB::table('clients')
              // ->whereIn('id', [29, 32, 33, 34])
              ->where('id', $request->cid)
              ->select('clients.client_name', 'clients.id', 'clients.client_code')
              ->orderBy('client_name', 'ASC')
              ->distinct()->get();
            // dd($clients);
            $id = $clients[0]->id;
            foreach (DB::table('assignmentbudgetings')->where('client_id', $id)
              ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
              ->orderBy('assignment_name')->get() as $sub) {
              echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . '/' . $sub->assignmentgenerate_id . ' )' . "</option>";
            }
          } else {
            // dd('hi 3');

            $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->datepickers);

            foreach (DB::table('assignmentbudgetings')
              ->where('assignmentbudgetings.client_id', $request->cid)
              ->leftJoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
              ->leftJoin('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
              ->where(function ($query) {
                $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                  ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
              })
              ->where(function ($query) use ($selectedDate) {
                $query->whereNull('otpverifydate')
                  ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
              })
              ->orderBy('assignment_name')->get() as $sub) {
              echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . '/' . $sub->assignmentgenerate_id . ' )' . "</option>";
            }
          }
        } else {

          echo "<option>Select Assignment</option>";

          if ($request->cid == 29 || $request->cid == 32 || $request->cid == 33 || $request->cid == 34) {
            $clients = DB::table('clients')
              // ->whereIn('id', [29, 32, 33, 34])
              ->where('id', $request->cid)
              ->select('clients.client_name', 'clients.id', 'clients.client_code')
              ->orderBy('client_name', 'ASC')
              ->distinct()->get();
            // dd($clients);
            $id = $clients[0]->id;
            foreach (DB::table('assignmentbudgetings')->where('client_id', $id)
              ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
              ->orderBy('assignment_name')->get() as $sub) {
              echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . '/' . $sub->assignmentgenerate_id . ' )' . "</option>";
            }
          } else {
            //  i have add this code after kartic bindal problem 
            $selectedDate = \DateTime::createFromFormat('d-m-Y', $request->datepickers);

            foreach (DB::table('assignmentbudgetings')
              ->join('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
              ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
              ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
              ->where('assignmentbudgetings.client_id', $request->cid)
              ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
              //  ->where('assignmentteammappings.status', '!=', 0)
              // ->whereNull('assignmentteammappings.status')
              ->where(function ($query) {
                $query->whereNull('assignmentteammappings.status')
                  ->orWhere('assignmentteammappings.status', '=', 1);
              })
              ->where(function ($query) use ($selectedDate) {
                $query->whereNull('otpverifydate')
                  //   ->orWhere('otpverifydate', '>=', $selectedDate);
                  // // ->orWhere('otpverifydate', '>=', $selectedDate);
                  ->orWhere('otpverifydate', '>=', $selectedDate->modify('-1 day'));
              })
              ->orderBy('assignment_name')->get() as $sub) {
              echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . '/' . $sub->assignmentgenerate_id . ' )' . "</option>";
            }
          }
        }
      }

      if (isset($request->assignment)) {
        // dd($request->assignment);
        if (auth()->user()->role_id == 11) {
          echo "<option value=''>Select Partner</option>";
          foreach (DB::table('assignmentmappings')

            ->leftjoin('teammembers', 'teammembers.id', 'assignmentmappings.leadpartner')
            ->leftjoin('teammembers as team', 'team.id', 'assignmentmappings.otherpartner')
            ->where('assignmentmappings.assignmentgenerate_id', $request->assignment)
            ->select('team.team_member as team_member', 'team.id', 'teammembers.id', 'teammembers.team_member')
            ->get() as $subs) {
            echo "<option value='" . $subs->id . "'>" . $subs->team_member . "</option>";
          }
        } elseif ($permotioncheck && auth()->user()->role_id == 13) {
          echo "<option value=''>Select Partner</option>";
          // dd($request->assignment);
          $partnerbefore = DB::table('assignmentmappings')
            ->leftJoin('teammembers', 'teammembers.id', 'assignmentmappings.leadpartner')
            ->leftJoin('teammembers as team', 'team.id', 'assignmentmappings.otherpartner')
            ->where('assignmentmappings.assignmentgenerate_id', $request->assignment)
            ->select('teammembers.id', 'teammembers.team_member');

          // $partnerafter = DB::table('assignmentmappings')
          //   ->leftJoin('teammembers', 'teammembers.id', 'assignmentmappings.leadpartner')
          //   ->where('assignmentmappings.assignmentgenerate_id', $request->assignment)
          //   ->select('teammembers.id', 'teammembers.team_member');

          $partnerafter = DB::table('assignmentmappings')
            ->leftJoin('teammembers as leadpartner', 'leadpartner.id', '=', 'assignmentmappings.leadpartner')
            ->leftJoin('teammembers as otherpartner', 'otherpartner.id', '=', 'assignmentmappings.otherpartner')
            ->where('assignmentmappings.assignmentgenerate_id', $request->assignment)
            ->where(function ($query) {
              $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
            })
            ->select(DB::raw("
          CASE
              WHEN assignmentmappings.leadpartner = " . auth()->user()->teammember_id . " THEN leadpartner.id
              WHEN assignmentmappings.otherpartner = " . auth()->user()->teammember_id . " THEN otherpartner.id
          END as id,
          CASE
              WHEN assignmentmappings.leadpartner = " . auth()->user()->teammember_id . " THEN leadpartner.team_member
              WHEN assignmentmappings.otherpartner = " . auth()->user()->teammember_id . " THEN otherpartner.team_member
          END as team_member
      "));

          $partnerresult = $partnerafter->union($partnerbefore)->get();
          foreach ($partnerresult as $subs) {
            echo "<option value='" . $subs->id . "'>" . $subs->team_member . "</option>";
          }
        } elseif (auth()->user()->role_id == 13) {
          echo "<option value=''>Select Partner</option>";
          foreach (DB::table('teammembers')
            ->where('id', auth()->user()->teammember_id)
            ->select('teammembers.id', 'teammembers.team_member')
            ->get() as $subs) {
            echo "<option value='" . $subs->id . "'>" . $subs->team_member . "</option>";
          }
        } else {

          echo "<option value=''>Select Partner</option>";
          foreach (DB::table('assignmentmappings')

            ->leftjoin('teammembers', 'teammembers.id', 'assignmentmappings.leadpartner')
            ->leftjoin('teammembers as team', 'team.id', 'assignmentmappings.otherpartner')
            ->where('assignmentmappings.assignmentgenerate_id', $request->assignment)
            ->select('team.team_member as team_member', 'team.id', 'teammembers.id', 'teammembers.team_member')
            ->get() as $subs) {
            echo "<option value='" . $subs->id . "'>" . $subs->team_member . "</option>";
          }
        }
      }
    } else {
      return view('backEnd.timesheet.create', compact('client', 'teammember', 'assignment', 'partner', 'timesheetrejectData'));
    }
  }
  
  


29-07-24 updated on vsalocal,vsademo,vsalive
22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php

  public function weeklylist(Request $request)
  {
    // dd($request);
    if (auth()->user()->role_id == 13) {

      $date = DB::table('timesheetreport')->where('id', $request->id)->first();
      $timesheetData = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->where('timesheetusers.createdby', $request->teamid)
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->where('timesheetusers.date', '>=', $date->startdate)
        ->where('timesheetusers.date', '<=', $date->enddate)
        ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'patnerid.id')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        // ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername', 'assignmentbudgetings.assignmentname')
        ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'clients.client_code', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername', 'patnerid.staffcode as patnerstaffcodee', 'assignmentbudgetings.assignmentname', 'teamrolehistory.newstaff_code', 'assignmentbudgetings.created_at as assignmentcreated')
        ->orderBy('id', 'ASC')
        //   ->orderBy('date', 'DESC')
        ->get();
    } else {
      $date = DB::table('timesheetreport')->where('id', $request->id)->first();
      $timesheetData = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->where('timesheetusers.createdby', $request->teamid)
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->where('timesheetusers.date', '>=', $date->startdate)
        ->where('timesheetusers.date', '<=', $date->enddate)
        ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'patnerid.id')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'clients.client_code', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername', 'patnerid.staffcode as patnerstaffcodee', 'assignmentbudgetings.assignmentname', 'teamrolehistory.newstaff_code', 'assignmentbudgetings.created_at as assignmentcreated')
        ->orderBy('id', 'ASC')
        ->get();
      // dd($timesheetData);
    }
    return view('backEnd.timesheet.weeklylist', compact('timesheetData'));
  }




################################################################################################################################
resources\views\backEnd\timesheet\weeklylist.blade.php


                            @foreach ($timesheetData as $timesheetDatas)
                                <tr>
                                    @php
                                        // dd($timesheetDatas);
                                        $permotioncheck = DB::table('teamrolehistory')
                                            ->where('teammember_id', $timesheetDatas->createdby)
                                            ->first();

                                        $datadate = Carbon\Carbon::createFromFormat(
                                            'Y-m-d H:i:s',
                                            $timesheetDatas->assignmentcreated,
                                        );

                                        $permotiondate = null;
                                        if ($permotioncheck) {
                                            $permotiondate = Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $permotioncheck->created_at,
                                            );
                                        }

                                    @endphp
                                    {{-- @php

                                        $permotioncheck = DB::table('teamrolehistory')
                                            ->where('teammember_id', $timesheetDatas->createdby)
                                            ->first();

                                        $datadate = Carbon\Carbon::createFromFormat(
                                            'Y-m-d H:i:s',
                                            $timesheetDatas->created_at,
                                        );

                                        $permotiondate = null;
                                        if ($permotioncheck) {
                                            $permotiondate = Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $permotioncheck->created_at,
                                            );
                                        }

                                    @endphp --}}
                                    <td style="display: none;">{{ $timesheetDatas->id }}</td>
                                    <td> {{ $timesheetDatas->team_member ?? '' }} </td>
                                    {{-- <td> {{ $timesheetDatas->staffcode ?? '' }} </td> --}}
                                    @if ($permotiondate && $datadate->greaterThan($permotiondate))
                                        <td>{{ $permotioncheck->newstaff_code }}</td>
                                    @else
                                        <td>{{ $timesheetDatas->staffcode }}</td>
                                    @endif
                                    <td> <span style="display: none;">
                                            {{ date('Y-m-d', strtotime($timesheetDatas->date)) }}</span>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                    </td>
                                    <td>
                                        @if ($timesheetDatas->date != null)
                                            {{ date('l', strtotime($timesheetDatas->date)) }}
                                        @endif
                                    </td>
                                    <td>{{ $timesheetDatas->client_name ?? '' }} ({{ $timesheetDatas->client_code ?? '' }})
                                    </td>
                                    <td>
                                        {{ $timesheetDatas->assignment_name ?? '' }} (
                                        {{ $timesheetDatas->assignmentgenerate_id ?? '' }})
                                        @if ($timesheetDatas->assignmentname != null)
                                            ({{ $timesheetDatas->assignmentname ?? '' }})
                                        @endif
                                    </td>
                                    <td> {{ $timesheetDatas->workitem ?? '' }}</td>
                                    <td>{{ $timesheetDatas->location ?? '' }} </td>
                                    <td> {{ $timesheetDatas->patnername ?? '' }}
                                        {{-- ({{ $timesheetDatas->newstaff_code ?? ($timesheetDatas->patnerstaffcodee ?? '') }}) --}}
                                        @if ($permotiondate && $datadate->greaterThan($permotiondate))
                                            ( {{ $timesheetDatas->newstaff_code }})
                                        @else
                                            ( {{ $timesheetDatas->patnerstaffcodee ?? '' }})
                                        @endif
                                    </td>
                                    {{-- <td> {{ $timesheetDatas->patnername ?? '' }}
                                        (
                                        {{ $timesheetDatas->newstaff_code ?? ($timesheetDatas->patnerstaffcodee ?? '') }})
                                    </td> --}}
                                    <td>{{ $timesheetDatas->hour ?? '' }}</td>
                                    <td>
                                        @if ($timesheetDatas->status == 0)
                                            <span class="badge badge-pill badge-warning">Saved</span>
                                        @elseif ($timesheetDatas->status == 1 || $timesheetDatas->status == 3)
                                            <span class="badge badge-pill badge-danger">Submit</span>
                                        @else
                                            <span class="badge badge-pill badge-secondary">Rejected</span>
                                        @endif
                                    </td>
                                    @if (Auth::user()->role_id == 11 || Auth::user()->teammember_id != $timesheetDatas->createdby)
                                        <td>
                                            @if ($timesheetDatas->status == 2)
                                                <a href="  {{ url('/timesheet/reject/' . $timesheetDatas->id) }}"
                                                    onclick="return confirm('Are you sure you want to Reject this timesheet?');">
                                                    <button class="btn btn-danger" data-toggle="modal"
                                                        style="height: 16px; width: auto; border-radius: 7px; display: flex; align-items: center; justify-content: center;font-size: 11px;"
                                                        data-target="#requestModal" disabled>Reject</button>
                                                </a>
                                            @else
                                                <a href="  {{ url('/timesheet/reject/' . $timesheetDatas->id) }}"
                                                    onclick="return confirm('Are you sure you want to Reject this timesheet?');">
                                                    <button class="btn btn-danger" data-toggle="modal"
                                                        style="height: 16px; width: auto; border-radius: 7px; display: flex; align-items: center; justify-content: center;font-size: 11px;"
                                                        data-target="#requestModal">Reject</button>
                                                </a>
                                            @endif
                                        </td>
                                    @endif
                                </tr>
                            @endforeach
							



30-04-24
################################################################################################################################
resources\views\backEnd\timesheet\rejectedlist.blade.php


                            @foreach ($timesheetData as $timesheetDatas)
                                <tr>

                                    @php
                                        $timeid = DB::table('timesheetusers')
                                            ->where('timesheetusers.timesheetid', $timesheetDatas->timesheetid)
                                            ->first();

                                        $client_id = DB::table('timesheetusers')
                                            ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
                                            ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
                                            ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.partner')
                                            ->leftJoin(
                                                'teamrolehistory',
                                                'teamrolehistory.teammember_id',
                                                '=',
                                                'teammembers.id',
                                            )
                                            ->where('timesheetusers.timesheetid', $timesheetDatas->timesheetid)
                                            ->select(
                                                'clients.client_name',
                                                'clients.client_code',
                                                'timesheetusers.hour',
                                                'timesheetusers.location',
                                                'timesheetusers.*',
                                                'assignments.assignment_name',
                                                'billable_status',
                                                'workitem',
                                                'teammembers.team_member',
                                                'teammembers.staffcode',
                                                'timesheetusers.timesheetid',
                                                'teamrolehistory.newstaff_code',
                                            )
                                            ->get();
                                        // dd($client_id);
                                        $total = DB::table('timesheetusers')

                                            ->where('timesheetusers.timesheetid', $timesheetDatas->timesheetid)
                                            ->sum('hour');

                                        $dates = date('l', strtotime($timesheetDatas->date));

                                        $assignmentcheck = DB::table('assignmentbudgetings')
                                            ->where('assignmentgenerate_id', $timesheetDatas->assignmentgenerate_id)
                                            ->first();

                                        $permotioncheck = DB::table('teamrolehistory')
                                            ->where('teammember_id', $timesheetDatas->createdby)
                                            ->first();

                                        //shshid client
                                        // $datadate = Carbon\Carbon::createFromFormat('Y-m-d', $timesheetDatas->date);
                                        $datadate = Carbon\Carbon::createFromFormat(
                                            'Y-m-d H:i:s',
                                            $assignmentcheck->created_at,
                                        );

                                        $permotiondate = null;
                                        if ($permotioncheck) {
                                            $permotiondate = Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $permotioncheck->created_at,
                                            );
                                        }

                                    @endphp


                                    <td style="display: none;">{{ $timesheetDatas->id }}</td>

                                    <td>
                                        {{ $timesheetDatas->team_member ?? '' }} </td>
                                    @if ($permotioncheck && $datadate->greaterThan($permotiondate))
                                        <td>{{ $permotioncheck->newstaff_code }}</td>
                                    @else
                                        <td>{{ $timesheetDatas->staffcode }}</td>
                                    @endif
                                    <td>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                    </td>
                                    <td>
                                        @if ($timesheetDatas->date != null)
                                            {{ $dates ?? '' }}
                                        @endif
                                    </td>
                                    <span style="font-size: 13px;">
                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->client_name ?? '' }} ({{ $item->client_code ?? '' }})
                                                @if ($item->client_name != 0)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>
                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->assignment_name ?? '' }}
                                                ({{ $item->assignmentgenerate_id ?? '' }})
                                                @if ($item->assignment_name != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>

                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->workitem ?? '' }}@if ($item->workitem != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>

                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->location ?? '' }}@if ($item->location != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>
                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->team_member ?? '' }}
                                                @if ($permotioncheck && $datadate->greaterThan($permotiondate))
                                                    ({{ $item->newstaff_code }})
                                                @else
                                                    ({{ $item->staffcode ?? '' }})
                                                @endif
                                                @if ($item->team_member != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>
                                        <td>{{ $total }}</td>
                                        <td>
                                            {{-- @php
                                                dd($client_id);
                                            @endphp --}}
                                            @foreach ($client_id as $item)
                                                @if ($item->status == 0)
                                                    <span class="badge badge-pill badge-warning">saved</span>
                                                @elseif ($item->status == 1)
                                                    <span class="badge badge-pill badge-danger">submit</span>
                                                @elseif ($item->status == 3)
                                                    <span class="badge badge-pill badge-info">Submitted</span>
                                                @else
                                                    <span class="badge badge-pill badge-secondary">Rejected</span>
                                                @endif
                                            @endforeach
                                        </td>

                                        @if (Auth::user()->role_id == 13 || Auth::user()->role_id == 14 || Auth::user()->role_id == 15)
                                            <td>
                                                @foreach ($client_id as $item)
                                                    @if ($item->status == 2)
                                                        <a href="{{ url('/timesheetreject/edit/' . $item->timesheetid) }}"
                                                            class="btn btn-info-soft btn-sm"><i class="far fa-edit"></i></a>
                                                    @endif
                                                @endforeach
                                            </td>
                                        @endif

                                </tr>
                                <div class="modal fade" id="exampleModal12" tabindex="-1" role="dialog"
                                    aria-labelledby="exampleModalLabel4" aria-hidden="true">
                                    <div class="modal-dialog" role="document">
                                        <div class="modal-content">
                                            <form id="detailsForm" method="post" action="{{ url('/timesheet/submit') }}"
                                                enctype="multipart/form-data" style="margin-bottom: 0px;">
                                                @csrf
                                                <div class="modal-header" style="background:#37A000;color:white; m-5">
                                                    <h5 class="modal-title font-weight-600" id="exampleModalLabel4">Update
                                                        Timesheet</h5>
                                                    <div>
                                                        <ul>
                                                            @foreach ($errors->all() as $e)
                                                                <li style="color:red;">{{ $e }}</li>
                                                            @endforeach
                                                        </ul>
                                                    </div>
                                                    <button style="color: white" type="button" class="close"
                                                        data-dismiss="modal" aria-label="Close">
                                                        <span aria-hidden="true">&times;</span>
                                                    </button>
                                                </div>
                                                <div class="modal-body">

                                                    <div class="row row-sm">
                                                        {{-- <label for="name" class="col-sm-3 col-form-label font-weight-600">Name :</label> --}}
                                                        <div class="col-sm-12">
                                                            <input type="text" readonly id="teamname"
                                                                class="form-control" placeholder="Enter Name">
                                                            <input hidden class="form-control" id="timesheetid"
                                                                name="timesheetid" type="text">
                                                        </div>
                                                    </div>

                                                    <br>
                                                    @php

                                                        $clientlist = DB::table('clients')
                                                            ->select('clients.client_name', 'clients.id')
                                                            ->get();
                                                        $partner = DB::table('teammembers')
                                                            ->select('teammembers.team_member', 'teammembers.id')
                                                            ->get();
                                                        // dd($partner);
                                                        $assignmentlist = DB::table('assignments')
                                                            ->select('assignments.assignment_name', 'assignments.id')
                                                            ->get();
                                                    @endphp
                                                    <br>

                                                    <div class="row row-sm">
                                                        {{-- <label for="name" class="col-sm-3 col-form-label font-weight-600">Name :</label> --}}
                                                        <div class="col-sm-6">
                                                            <label for="">Select Client</label>
                                                            <select class="form-control" name="client_id" id="client_id">
                                                                <option value="">Select Client</option>
                                                                @foreach ($clientlist as $city)
                                                                    <option value="{{ $city->id }}">
                                                                        {{ $city->client_name }}</option>
                                                                @endforeach
                                                            </select>
                                                        </div>
                                                        {{-- <label for="name" class="col-sm-3 col-form-label font-weight-600">Name :</label> --}}
                                                        <div class="col-sm-6">
                                                            <label for="">Select Assignment</label>
                                                            <select class="form-control" name="assignment_id"
                                                                id="assignment_id">
                                                                <option value="">Select Assignment</option>
                                                                @foreach ($assignmentlist as $assignmentlistData)
                                                                    <option value="{{ $assignmentlistData->id }}">
                                                                        {{ $assignmentlistData->assignment_name }}</option>
                                                                @endforeach
                                                            </select>
                                                        </div>
                                                    </div>

                                                    <br>

                                                    <div class="row row-sm">
                                                        {{-- <label for="name" class="col-sm-3 col-form-label font-weight-600">Name :</label> --}}
                                                        <div class="col-sm-6">
                                                            <label for="">Select Partner</label>
                                                            <select class="form-control" name="partner" id="partner">
                                                                <option value="">Select Partner</option>
                                                                @foreach ($partner as $partnerData)
                                                                    <option value="{{ $partnerData->id }}">
                                                                        {{ $partnerData->team_member }}</option>
                                                                @endforeach
                                                            </select>
                                                        </div>
                                                        <div class="col-sm-6">
                                                            <label for="">Employee Name</label>
                                                            <input required type="text" name="workitem" id="workitem"
                                                                class="form-control" placeholder="Enter Employee Name">
                                                        </div>
                                                    </div>
                                                    <br>
                                                    <div class="row row-sm">
                                                        <div class="col-sm-6">
                                                            <label for="">Location</label>
                                                            <input required type="text" name="location" id="location"
                                                                class="form-control" placeholder="Enter Location">
                                                        </div>
                                                        <div class="col-sm-6">
                                                            <label for="">Work Item</label>
                                                            <input required type="text" name="totalhour"
                                                                id="totalhour" class="form-control"
                                                                placeholder="Enter Name">
                                                        </div>
                                                    </div>
                                                    <br>
                                                    <div class="row row-sm">
                                                        <div class="col-sm-6">
                                                            <label for="">Total Hour</label>
                                                            <input required type="text" name="location" id="location"
                                                                class="form-control" placeholder="Enter Location">
                                                        </div>
                                                    </div>
                                                    <br>

                                                    <div class="modal-footer">
                                                        <button type="button" class="btn btn-danger"
                                                            data-dismiss="modal">Close</button>
                                                        <button type="submit" class="btn btn-success">Submit</button>
                                                    </div>
                                            </form>

                                        </div>
                                    </div>
                                </div>



                                {{-- 2222222222222222222 --}}
                            @endforeach
							
							


################################################################################################################################
resources\views\backEnd\timesheet\timesheetdownload.blade.php


                                                      @if (Request::is('adminsearchtimesheet') || Request::is('mytimesheetlist/*') || Request::is('searchingtimesheet'))
                          <table id="examplee" class="table display table-bordered table-striped table-hover">
                              <thead>
                                  <tr>
                                      <th style="display: none;">id</th>
                                      <th>Employee Name</th>
                                      {{-- @if (Request::is('adminsearchtimesheet')) --}}
                                      <th>Employee Code</th>
                                      {{-- @endif --}}
                                      <th>Date</th>
                                      <th>Day</th>
                                      <th>Client Name</th>
                                      <th>Client Code</th>
                                      <th>Assignment Name</th>
                                      <th>Work Item</th>
                                      <th>Location</th>
                                      <th>Partner</th>
                                      <th>Hour</th>
                                  </tr>
                              </thead>
                              <tbody>
                                  @foreach ($timesheetData as $timesheetDatas)
                                      <tr>
                                          {{-- @if (Request::is('adminsearchtimesheet')) --}}
                                          @php

                                              $permotioncheck = DB::table('teamrolehistory')
                                                  ->where('teammember_id', $timesheetDatas->createdby)
                                                  ->first();
                                              //shshid client
                                              $datadate = Carbon\Carbon::createFromFormat(
                                                  'Y-m-d H:i:s',
                                                  $timesheetDatas->assignmentcreateddate,
                                              );

                                              $permotiondate = null;
                                              if ($permotioncheck) {
                                                  $permotiondate = Carbon\Carbon::createFromFormat(
                                                      'Y-m-d H:i:s',
                                                      $permotioncheck->created_at,
                                                  );
                                              }
                                          @endphp
                                          {{-- @endif --}}
                                          <td style="display: none;">{{ $timesheetDatas->id }}</td>
                                          <td> {{ $timesheetDatas->team_member ?? '' }} </td>
                                          {{-- @if (Request::is('adminsearchtimesheet')) --}}
                                          {{-- <td> {{ $timesheetDatas->staffcode ?? '' }} </td> --}}
                                          @if ($permotioncheck && $datadate->greaterThan($permotiondate))
                                              <td>{{ $permotioncheck->newstaff_code }}</td>
                                          @else
                                              <td>{{ $timesheetDatas->staffcode }}</td>
                                          @endif
                                          {{-- @endif --}}
                                          <td> <span style="display: none;">
                                                  {{ date('Y-m-d', strtotime($timesheetDatas->date)) }}</span>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                          </td>
                                          <td>
                                              @if ($timesheetDatas->date != null)
                                                  {{ date('l', strtotime($timesheetDatas->date)) }}
                                              @endif
                                          </td>
                                          <td>{{ $timesheetDatas->client_name ?? '' }}
                                          </td>
                                          <td>{{ $timesheetDatas->client_code ?? '' }}
                                          </td>
                                          <td>
                                              {{ $timesheetDatas->assignment_name ?? '' }} (
                                              {{ $timesheetDatas->assignmentgenerate_id ?? '' }})
                                              @if ($timesheetDatas->assignmentname != null)
                                                  ({{ $timesheetDatas->assignmentname ?? '' }})
                                              @endif
                                          </td>
                                          <td> {{ $timesheetDatas->workitem ?? '' }}</td>
                                          <td>{{ $timesheetDatas->location ?? '' }} </td>
                                          <td> {{ $timesheetDatas->patnername ?? '' }}
                                              @if ($permotioncheck && $datadate->greaterThan($permotiondate))
                                                  ({{ $timesheetDatas->newstaff_code }})
                                              @else
                                                  ({{ $timesheetDatas->patnerstaffcode ?? '' }})
                                              @endif
                                          </td>
                                          <td>{{ $timesheetDatas->hour ?? '' }}</td>
                                      </tr>
                                  @endforeach
                              </tbody>
                          </table>
                      @endif
					  
					  
					  
222222222222222222222222222222222222222222222222222222222222222222222222	same abov file me 



  <script>
      $(document).ready(function() {
                  $('#examplee').DataTable({
                          dom: 'Bfrtip',
                          "order": [],
                          searching: false,
                          @if (Auth::user()->role_id == 11 ||
                                  Request::is('adminsearchtimesheet') ||
                                  (Auth::user()->role_id == 13 && Request::is('admintimesheetlist')))
                              columnDefs: [{
                                  targets: [1, 2, 4, 5, 6, 7, 8, 9],
                                  orderable: false
                              }],
                          @else
                              columnDefs: [{
                                  targets: [1, 2, 4, 5, 6, 7, 8, 9],
                                  orderable: false
                              }],
                          @endif
                          buttons: [{
                                  extend: 'excelHtml5',
                                  filename: 'Timesheet_Download',

                                  //   remove extra date from column
                                  exportOptions: {
                                      columns: ':visible',
                                      format: {
                                          body: function(data, row, column, node) {
                                              // it should be column number 2
                                              @if (Auth::user()->role_id == 11 ||
                                                      Request::is('adminsearchtimesheet') ||
                                                      (Auth::user()->role_id == 13 && Request::is('admintimesheetlist')))
                                                  if (column === 2) {
                                                  @else
                                                      if (column === 2) {
                                                      @endif
                                                      // If the data is a date, extract the date without HTML tags
                                                      var cleanedText = $(data).text().trim();
                                                      var dateParts = cleanedText.split(
                                                          '-');
                                                      // Assuming the date format is yyyy-mm-dd
                                                      if (dateParts.length === 3) {
                                                          return dateParts[2] + '-' + dateParts[1] + '-' +
                                                              dateParts[0];
                                                      }
                                                  }
                                                  return data;
                                              }
                                          }
                                      },

                                      //   set width in excell
                                      customize: function(xlsx) {
                                          var sheet = xlsx.xl.worksheets['sheet1.xml'];

                                          // set column width
                                          $('col', sheet).eq(0).attr('width', 15);
                                          $('col', sheet).eq(1).attr('width', 15);
                                          $('col', sheet).eq(3).attr('width', 30);
                                          $('col', sheet).eq(4).attr('width', 30);
                                          $('col', sheet).eq(5).attr('width', 30);
                                          $('col', sheet).eq(6).attr('width', 30);
                                          $('col', sheet).eq(7).attr('width', 30);

                                          // remove extra spaces
                                          $('c', sheet).each(function() {
                                              var originalText = $(this).find('is t').text();
                                              var cleanedText = originalText.replace(/\s+/g, ' ')
                                                  .trim();
                                              $(this).find('is t').text(cleanedText);
                                          });
                                      }
                                  },
                                  'colvis'
                              ]
                          });
                  });
  </script>		  
					  




################################################################################################################################
app\Http\Controllers\TimesheetController.php

  public function mytimesheetlist(Request $request, $teamid)
  {
    // dd($teamid);
    if (auth()->user()->role_id == 13) {

      $date = DB::table('timesheetreport')->where('id', $request->id)->first();
      $timesheetData = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->where('timesheetusers.createdby', $teamid)
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'patnerid.id')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        // ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'teammembers.team_member', 'patnerid.team_member as patnername', 'assignmentbudgetings.assignmentname')
        ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'clients.client_code', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername', 'patnerid.staffcode as patnerstaffcode', 'assignmentbudgetings.assignmentname', 'teamrolehistory.newstaff_code', 'assignmentbudgetings.created_at as assignmentcreateddate')
        ->orderBy('date', 'DESC')
        ->take(7)
        ->get();


      // dd($timesheetData);
    } else {
      $date = DB::table('timesheetreport')->where('id', $request->id)->first();
      $timesheetData = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->where('timesheetusers.createdby', $teamid)
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'patnerid.id')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        // ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'teammembers.team_member', 'patnerid.team_member as patnername', 'assignmentbudgetings.assignmentname')
        ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'clients.client_code', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername', 'patnerid.staffcode as patnerstaffcode', 'assignmentbudgetings.assignmentname', 'teamrolehistory.newstaff_code', 'assignmentbudgetings.created_at as assignmentcreateddate')
        ->orderBy('date', 'DESC')
        ->take(7)
        ->get();
    }
    return view('backEnd.timesheet.timesheetdownload', compact('timesheetData'));
  }




################################################################################################################################
app\Http\Controllers\TimesheetController.php

  public function searchingtimesheet(Request $request)
  {
    // dd($request);
    // Get all input from form
    $startDate = $request->input('startdate', null);
    $endDate = $request->input('enddate', null);
    $teamId = $request->input('teamid', null);
    $teammemberId = $request->input('teammemberId', null);
    // $year = $request->input('year', null);

    $teammembers = DB::table('teammembers')
      ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
      ->where('teammembers.status', 1)
      ->whereIn('teammembers.role_id', [14, 15, 13, 11])
      ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
      ->orderBy('team_member', 'ASC')
      ->get();

    // For patner
    if (auth()->user()->role_id == 13) {
      $query = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'patnerid.id')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        // ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'teammembers.team_member', 'patnerid.team_member as patnername', 'assignmentbudgetings.assignmentname')
        ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'clients.client_code', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername', 'patnerid.staffcode as patnerstaffcode', 'assignmentbudgetings.assignmentname', 'teamrolehistory.newstaff_code', 'assignmentbudgetings.created_at as assignmentcreateddate')
        ->orderBy('date', 'DESC');



      if ($startDate && $endDate && $teamId) {
        $query->where(function ($q) use ($startDate, $endDate, $teamId) {
          $q->where('timesheetusers.createdby', $teamId)
            ->where('timesheetusers.date', '>=', $startDate)
            ->where('timesheetusers.date', '<=', $endDate);
        });
      }

      $timesheetData = $query->get();
      // dd($timesheetData);
      $request->flash();
      return view('backEnd.timesheet.timesheetdownload', compact('timesheetData'));
    }
    // For staff and manager
    else {

      $query = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
        ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
        ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
        ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'patnerid.id')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        // ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'teammembers.team_member', 'patnerid.team_member as patnername', 'assignmentbudgetings.assignmentname')
        ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'clients.client_code', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername', 'patnerid.staffcode as patnerstaffcode', 'assignmentbudgetings.assignmentname', 'teamrolehistory.newstaff_code', 'assignmentbudgetings.created_at as assignmentcreateddate')
        ->orderBy('date', 'DESC');

      if ($startDate && $endDate && $teamId) {
        $query->where(function ($q) use ($startDate, $endDate, $teamId) {
          $q->where('timesheetusers.createdby', $teamId)
            ->where('timesheetusers.date', '>=', $startDate)
            ->where('timesheetusers.date', '<=', $endDate);
        });
      }
      $timesheetData = $query->get();
      // dd($timesheetData);

      $request->flash();
      return view('backEnd.timesheet.timesheetdownload', compact('timesheetData'));
    }
  }
  
  

################################################################################################################################
app\Http\Controllers\TimesheetController.php


  public function adminsearchtimesheet(Request $request)
  {

    if ($request->ajax()) {
      echo "<option value='null'>Select Assignment</option>";
      foreach (DB::table('assignmentbudgetings')
        ->where('assignmentbudgetings.client_id', $request->cid)
        ->leftJoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftJoin('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
        ->orderBy('assignment_name')->get() as $sub) {
        echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name . '( ' . $sub->assignmentname . ' )' . '( ' . $sub->assignmentgenerate_id . ' )' . "</option>";
      }
    } else {
      // Get all input from form
      $startDate = $request->input('startdate', null);
      $endDate = $request->input('enddate', null);
      $teamId = $request->input('teamid', null);
      $teammemberId = $request->input('teammemberId', null);
      // $year = $request->input('year', null);
      $clientId = $request->input('clientId', null);
      $assignmentIddummy = $request->input('assignmentId', null);

      if ($assignmentIddummy == 'null') {
        $assignmentId = null;
      } else {
        $assignmentId =  $assignmentIddummy;
      }
      // dd($assignmentId);
      $teammembers = DB::table('teammembers')
        ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
        ->where('teammembers.status', 1)
        ->whereIn('teammembers.role_id', [14, 15, 13, 11])
        ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
        ->orderBy('team_member', 'ASC')
        ->get();

      $clientsname = DB::table('clients')
        ->whereIn('status', [0, 1])
        ->select('id', 'client_name', 'client_code')
        ->orderBy('client_name', 'ASC')
        ->get();

      $assignmentsname = DB::table('timesheetusers')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->whereIn('timesheetusers.status', [1, 2, 3])
        ->whereNotNull('assignmentbudgetings.assignmentname')
        ->select('timesheetusers.*', 'assignmentbudgetings.assignmentname')
        ->orderBy('assignmentname', 'Asc')
        ->distinct('assignmentname')
        ->get();

      if (auth()->user()->role_id == 11 || auth()->user()->role_id == 13) {

        $timesheetData = DB::table('timesheetusers')
          ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
          // When startDate and endDate exist then run 'when' clause
          ->when($startDate && $endDate && $teammemberId, function ($query) use ($startDate, $endDate, $teammemberId) {
            // dd('teammemberId');
            return $query->where('timesheetusers.createdby', $teammemberId)
              ->where('timesheetusers.date', '>=', $startDate)
              ->where('timesheetusers.date', '<=', $endDate);
          })
          ->when($startDate && $endDate && $clientId, function ($query) use ($startDate, $endDate, $clientId) {
            // dd($clientId);
            return $query->where('timesheetusers.client_id', $clientId)
              ->where('timesheetusers.date', '>=', $startDate)
              ->where('timesheetusers.date', '<=', $endDate);
          })
          ->when($startDate && $endDate && $assignmentId, function ($query) use ($startDate, $endDate, $assignmentId) {
            // dd('assignmentId');
            return $query->where('timesheetusers.assignmentgenerate_id', $assignmentId)
              ->where('timesheetusers.date', '>=', $startDate)
              ->where('timesheetusers.date', '<=', $endDate);
          })
          ->when($startDate && $endDate && $teammemberId == null && $clientId == null && $assignmentId == null, function ($query) use ($startDate, $endDate) {
            // dd('year');
            return $query->where('timesheetusers.date', '>=', $startDate)
              ->where('timesheetusers.date', '<=', $endDate);
          })
          ->whereIn('timesheetusers.status', [1, 2, 3])
          ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
          ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
          ->leftjoin('teammembers as patnerid', 'patnerid.id', 'timesheetusers.partner')
          ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'patnerid.id')
          ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
          ->select('timesheetusers.*', 'assignments.assignment_name', 'clients.client_name', 'clients.client_code', 'teammembers.team_member', 'teammembers.staffcode', 'patnerid.team_member as patnername', 'patnerid.staffcode as patnerstaffcode', 'assignmentbudgetings.assignmentname', 'teamrolehistory.newstaff_code', 'assignmentbudgetings.created_at as assignmentcreateddate')
          ->orderBy('date', 'DESC')
          ->get();

        $request->flash();
        return view('backEnd.timesheet.timesheetdownload', compact('timesheetData', 'teammembers', 'clientsname', 'assignmentsname', 'assignmentId'));
      }
    }
  }




rejoining start hare
222222222222222222222222222222222222222222222222222222222222222222222222
Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php

    public function permotionandrejoin()
    {
        if (auth()->user()->role_id == 11 or auth()->user()->role_id == 12) {
            // $teammemberlist = Teammember::where('status', '0')->get();
            $teammembers = DB::table('teammembers')
                ->leftJoin(
                    'teamrolehistory',
                    'teamrolehistory.teammember_id',
                    '=',
                    'teammembers.id',
                )
                ->where('teammembers.status', 1)
                ->whereIn('teammembers.role_id', [14, 15, 13, 11])
                ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
                ->orderBy('teammembers.team_member', 'ASC')
                ->get();

            $teamroles = DB::table('roles')
                ->whereNotIn('id', [16, 17, 18, 19, 20])
                ->select('id', 'rolename', 'created_at')
                ->latest()
                ->get();

            $inactiveteammembers = DB::table('teammembers')
                ->leftJoin(
                    'teamrolehistory',
                    'teamrolehistory.teammember_id',
                    '=',
                    'teammembers.id',
                )
                ->where('teammembers.status', 0)
                ->whereIn('teammembers.role_id', [14, 15, 13, 11])
                ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
                ->orderBy('teammembers.team_member', 'ASC')
                ->get();

            return view('backEnd.applyleave.permotionandrejoin', compact('teammembers', 'teamroles', 'inactiveteammembers'));
        }
        abort(403, ' you have no permission to access this page ');
    }




Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\applyleave\permotionandrejoin.blade.php

                <div class="tab-content" id="pills-tabContent">
                    <div class="tab-pane fade show active" id="pills-home" role="tabpanel" aria-labelledby="pills-home-tab">
                        <form method="post" action="{{ url('permotionandrejoinstore') }}" enctype="multipart/form-data">
                            @csrf
                            <div class="row row-sm mt-3" style="margin: 14px;">
                                <div class="col-4">
                                    <div class="form-group">
                                        <label class="font-weight-600">Employee Name</label>
                                        <select required class="language form-control" name="employeeid">
                                            <option value="">Please Select One</option>
                                            @php
                                                $displayedValues = [];
                                            @endphp
                                            @foreach ($teammembers as $teammember)
                                                @if (!in_array($teammember->staffcode, $displayedValues))
                                                    {{-- <option value="{{ $teammember->id }}"> --}}
                                                    <option value="{{ $teammember->id }}"
                                                        {{ old('teammemberId') == $teammember->id ? 'selected' : '' }}>
                                                        {{ $teammember->team_member }} (
                                                        {{ $teammember->newstaff_code ?? ($teammember->staffcode ?? '') }})
                                                    </option>
                                                    @php
                                                        $displayedValues[] = $teammember->staffcode;
                                                    @endphp
                                                @endif
                                            @endforeach
                                        </select>
                                    </div>

                                </div>
                                <div class="col-4">
                                    <div class="form-group">
                                        <label class="font-weight-600">Promotion Date</label>
                                        <input required type="date" name="promotion_date" value=""
                                            class="form-control" placeholder="Enter Promotion Date">
                                        {{-- {{ $teammember->joining_date ?? '' }} --}}
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="form-group">
                                        <label class="font-weight-600">Designation</label>
                                        <select required class="language form-control" name="designationtype">
                                            <option value="">Please Select One</option>
                                            @foreach ($teamroles as $teamrole)
                                                <option value="{{ $teamrole->id }}">
                                                    {{ $teamrole->rolename }}
                                                </option>
                                            @endforeach
                                        </select>
                                    </div>

                                </div>
                            </div>
                            <div class="row row-sm mt-3" style="margin: 14px;">
                                <div class="col-12">
                                    <div class="form-group">
                                        <button type="submit" class="btn btn-success" style="float:right"> Submit</button>
                                        <a class="btn btn-secondary" href="{{ url('home') }}">
                                            Back</a>

                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="tab-pane fade" id="pills-user" role="tabpanel" aria-labelledby="pills-user-tab">
                        <div class="table-responsive">
                            <form method="post" action="{{ url('rejoinstore') }}" enctype="multipart/form-data">
                                @csrf
                                <div class="row row-sm" style="margin: 14px;">
                                    <div class="col-4">
                                        <div class="form-group">
                                            <label class="font-weight-600">Employee Name</label>
                                            <select required class="language form-control" name="employeeid">
                                                <option value="">Please Select One</option>
                                                @php
                                                    $displayedValues = [];
                                                @endphp
                                                @foreach ($inactiveteammembers as $teammember)
                                                    @if (!in_array($teammember->staffcode, $displayedValues))
                                                        <option value="{{ $teammember->id }}"
                                                            {{ old('teammemberId') == $teammember->id ? 'selected' : '' }}>
                                                            {{ $teammember->team_member }} (
                                                            {{ $teammember->newstaff_code ?? ($teammember->staffcode ?? '') }})
                                                        </option>
                                                        @php
                                                            $displayedValues[] = $teammember->staffcode;
                                                        @endphp
                                                    @endif
                                                @endforeach
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-4">
                                        <div class="form-group">
                                            <label class="font-weight-600">Rejoining Date</label>
                                            <input required type="date" name="rejoining_date" value=""
                                                class="form-control" placeholder="Enter Rejoining Date">
                                        </div>
                                    </div>
                                    <div class="col-4">
                                        <div class="form-group">
                                            <label class="font-weight-600">Designation</label>
                                            <input type="checkbox" id="enableDesignation" style="margin-left: 10px;"
                                                title="You want to change designation then please click on check box">
                                            <select required class="language form-control" name="designationtype"
                                                id="designationSelect" disabled>
                                                <option value="">Please Select One</option>
                                                @foreach ($teamroles as $teamrole)
                                                    <option value="{{ $teamrole->id }}">
                                                        {{ $teamrole->rolename }}
                                                    </option>
                                                @endforeach
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="row row-sm mt-3" style="margin: 14px;">
                                    <div class="col-12">
                                        <div class="form-group">
                                            <button type="submit" class="btn btn-success"
                                                style="float:right">Submit</button>
                                            <a class="btn btn-secondary" href="{{ url('home') }}">Back</a>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>

                </div>





Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
add this code 
resources\views\backEnd\applyleave\permotionandrejoin.blade.php


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function() {
        $('#enableDesignation').on('change', function() {
            $('#designationSelect').prop('disabled', !this.checked);
        });
    });
</script>




Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php

    public function rejoinstore(Request $request)
    {
        $checkrole = DB::table('teammembers')
            ->where('id', $request->employeeid)
            ->select('id', 'role_id', 'staffcode', 'staffcodenumber')
            ->first();

        // if user designation change then
        if ($checkrole && $request->employeeid && $request->rejoining_date && $request->designationtype) {
            if ($checkrole->role_id != $request->designationtype) {
                $maxStaffcodeTeammembers = DB::table('teammembers')
                    ->where('role_id', $request->designationtype)
                    ->max('staffcodenumber');

                $maxStaffcodeTeamRoleHistory = DB::table('teamrolehistory')
                    ->where('roleid_new', $request->designationtype)
                    ->max('new_staffcodenumber');

                $getlateststaffcode = max($maxStaffcodeTeammembers, $maxStaffcodeTeamRoleHistory);


                if ($request->designationtype == 13) {
                    if ($getlateststaffcode == null) {
                        $newstaffcode = '10001';
                    } else {
                        $newstaffcode = $getlateststaffcode + 1;
                    }
                    $newstaffcoderesult = 'P' . $newstaffcode;
                    $staffcode = $newstaffcode;
                }
                if ($request->designationtype == 14) {
                    if ($getlateststaffcode == null) {
                        $newstaffcode = '20001';
                    } else {
                        $newstaffcode = $getlateststaffcode + 1;
                    }
                    $newstaffcoderesult = 'M' . $newstaffcode;
                    $staffcode = $newstaffcode;
                }

                DB::table('teammembers')
                    ->where('id', $request->employeeid)
                    ->update([
                        'role_id' => $request->designationtype,
                        'staffcodenumber' => $staffcode,
                        'status' => 1,
                    ]);

                DB::table('users')
                    ->where('teammember_id', $request->employeeid)
                    ->update([
                        'role_id' => $request->designationtype,
                        'status' => 1,
                    ]);

                DB::table('teamrolehistory')->insert([
                    'teammember_id' => $request->employeeid,
                    'roleid_old' => $checkrole->role_id,
                    'roleid_new' => $request->designationtype,
                    'oldstaff_code' =>  $checkrole->staffcode,
                    'newstaff_code' => $newstaffcoderesult,
                    'old_staffcodenumber' => $checkrole->staffcodenumber,
                    'new_staffcodenumber' => $staffcode,
                    'rejoiningdate' => date('Y-m-d', strtotime($request->rejoining_date)),
                    'rejointimesheetstatus' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ]);
            } else {
                $role = '';
                if ($checkrole->role_id == 11) {
                    $role = "super admin";
                } elseif ($checkrole->role_id == 12) {
                    $role = "admin";
                } elseif ($checkrole->role_id == 13) {
                    $role = "partner";
                } elseif ($checkrole->role_id == 14) {
                    $role = "manager";
                } elseif ($checkrole->role_id == 15) {
                    $role = "staff";
                }
                $output = array('msg' => 'The User allready on this post.You can not select "' . $role . '".');
                return back()->with('statuss', $output);
            }
        }
        // if user designation not chnge
        else {
            dd($checkrole, 1);
        }

        $output = array('msg' => 'Rejoining Successfully Done');
        return back()->with('success', $output);
    }







Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php


   public function store(Request $request)
  {

    try {
      $Newteammeber = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->first();


      // $Newteammeberjoining_date = DB::table('teammembers')
      //   ->where('id', auth()->user()->teammember_id)
      //   ->select('joining_date', 'rejoining_date')
      //   ->first();


      $Newteammeberjoining_date = DB::table('teammembers')
        ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
        ->where('teammembers.id', auth()->user()->teammember_id)
        ->select('teammembers.team_member', 'teammembers.staffcode', 'teammembers.joining_date', 'teamrolehistory.newstaff_code', 'teamrolehistory.rejoiningdate')
        ->first();

      $joining_date = date('d-m-Y', strtotime($Newteammeberjoining_date->joining_date));
      if ($Newteammeberjoining_date->rejoiningdate != null) {
        $rejoining_date = date('d-m-Y', strtotime($Newteammeberjoining_date->rejoiningdate));
        $rejoiningDateformate = Carbon::parse($rejoining_date);
      } else {
        $rejoining_date = $Newteammeberjoining_date->rejoiningdate;
      }

      $requestDate = Carbon::parse($request->date);
      $joiningDate = Carbon::parse($joining_date);


      if ($Newteammeber == null || $rejoining_date != null) {

        if ($rejoining_date != null && $requestDate < $rejoiningDateformate) {
          $output = array('msg' => 'You can not fill timesheet before Rejoining date :' . $rejoining_date);
          return redirect('timesheet')->with('success', $output);
        }

        if ($requestDate < $joiningDate) {
          $output = array('msg' => 'You can not fill timesheet before joining date :' . $joining_date);
          return redirect('timesheet')->with('success', $output);
        }

        if ($Newteammeber == null) {
          // Get previuse sunday from joining date
          $joining_timestamp = strtotime($joining_date);
          $day_of_week = date('w', $joining_timestamp);
          $days_to_subtract = $day_of_week;
          $previous_sunday_timestamp = strtotime("-$days_to_subtract days", $joining_timestamp);

          $previous_sunday_date = date('d-m-Y', $previous_sunday_timestamp);
          // Get all dates beetween two dates 
          $startDate = Carbon::parse($previous_sunday_date);
          $endDate = Carbon::parse($joining_date);
          $period = CarbonPeriod::create($startDate, $endDate);
        }
        //this code related rejoining teammember 
        else {
          $joining_timestamp = strtotime($rejoining_date);
          $day_of_week = date('w', $joining_timestamp);
          $days_to_subtract = $day_of_week;
          $previous_sunday_timestamp = strtotime("-$days_to_subtract days", $joining_timestamp);
          $previous_sunday_date = date('d-m-Y', $previous_sunday_timestamp);
          // Get all dates beetween two dates 
          $startDate = Carbon::parse($previous_sunday_date);
          $endDate = Carbon::parse($rejoining_date);
          $period = CarbonPeriod::create($startDate, $endDate);
        }

        // store all date in $result vairable
        $result = [];
        foreach ($period as $key => $date) {
          if ($key !== 0 && $key !== count($period) - 1) {
            $result[] = $date->toDateString();
          }
        }
        // return $result;
        // dd('yes', $result);
        foreach ($result as $date) {
          $prevcheck = DB::table('timesheets')->where('date', $date)
            ->where('created_by', auth()->user()->teammember_id)
            ->first();

          if (($Newteammeber == null && $prevcheck == null) || ($rejoining_date != null && $prevcheck == null)) {
            $id = DB::table('timesheets')->insertGetId(
              [
                'created_by' => auth()->user()->teammember_id,
                'month'     =>   date('F', strtotime($date)),
                'date'     =>    date('Y-m-d', strtotime($date)),
                'created_at'          =>     date('Y-m-d H:i:s'),
              ]
            );
            DB::table('timesheetusers')->insert([
              'date'     =>   date('Y-m-d', strtotime($date)),
              'client_id'     =>     29,
              'workitem'     =>     'NA',
              'location'     =>     'NA',
              //   'billable_status'     =>     $request->billable_status[$i],
              'timesheetid'     =>     $id,
              'date'     =>     date('Y-m-d', strtotime($date)),
              'hour'     =>     0,
              'totalhour' =>      0,
              'assignment_id'     =>     213,
              'partner'     =>     887,
              'createdby' => auth()->user()->teammember_id,
              'created_at'          =>     date('Y-m-d H:i:s'),
              'updated_at'              =>    date('Y-m-d H:i:s'),
            ]);
          }
        }
      }

      if ($requestDate >= $joiningDate) {

        if ($rejoining_date != null && $requestDate < $rejoiningDateformate) {
          // dd('hi', 1);
          $output = array('msg' => 'You can not fill timesheet before Rejoining date :' . $rejoining_date);
          return redirect('timesheet')->with('success', $output);
        }
        // dd('hi', 0);

        $data = $request->except(['_token', 'teammember_id', 'amount']);

        //	if ($request->date < '11-09-2023') {
        //dd('hi');
        // $output = array('msg' => 'Please fill timesheet from 11/09/2023, Monday onwards');
        //  return back()->with('success', $output);
        //   }

        //die;
        //? dd(date('w', strtotime($request->date))); // 4
        // check allready submited
        if (date('w', strtotime($request->date)) == 0) {
          $previousSaturday = date('Y-m-d', strtotime('-1 day', strtotime($request->date)));
          $previousSaturdayFilled = DB::table('timesheetusers')
            ->where('createdby', auth()->user()->teammember_id)
            ->where('date', $previousSaturday)
            ->where('status', 1)
            ->first();
          // dd('hi1', $previousSaturdayFilled);
          if ($previousSaturdayFilled != null) {
            $output = array('msg' => 'You already submitted for this week');
            return back()->with('success', $output);
          }
        }

        // check hour
        $hours = $request->input('totalhour');
        if (!is_numeric($hours) || $hours > 12) {
          $output = array('msg' => 'The total hours cannot be greater than 12');
          return back()->with('success', $output);
        }
        // dd(auth()->user()->teammember_id);
        //? dd(date('Y-m-d', strtotime($request->date))); "2023-11-30"
        $previouschck = DB::table('timesheetusers')
          ->where('createdby', auth()->user()->teammember_id)
          ->where('date', date('Y-m-d', strtotime($request->date)))
          ->where('status', 1)
          ->first();

        if ($previouschck != null) {
          //dd('hi');
          $output = array('msg' => 'You already submitted for this week');
          return back()->with('success', $output);
        }

        $previoussavechck = DB::table('timesheetusers')
          ->where('createdby', auth()->user()->teammember_id)
          ->where('date', date('Y-m-d', strtotime($request->date)))
          ->where('status', 0)
          ->first();

        if ($previoussavechck != null) {
          //dd('hi');
          $output = array('msg' => 'You already submitted for this date');
          return back()->with('success', $output);
        }



        $currentDate = Carbon::now()->format('d-m-Y');
        //dd($currentHour);
        if ($currentDate == $request->date && Carbon::now()->hour < 18) {
          //   //dd('hi');
          $output = array('msg' => 'You can only fill today timesheet after 6:00 pm');
          return back()->with('success', $output);
        }


        $leaves = DB::table('applyleaves')
          ->where('applyleaves.createdby', auth()->user()->teammember_id)
          ->where('status', '!=', 2)
          ->select('applyleaves.from', 'applyleaves.to')
          ->get();
        // dd('hi 1', $leaves);
        foreach ($leaves as $leave) {
          //Convert each data from table to Y-m-d format to compare
          $days = CarbonPeriod::create(
            date('Y-m-d', strtotime($leave->from)),
            date('Y-m-d', strtotime($leave->to))
          );

          foreach ($days as $day) {
            $leavess[] = $day->format('Y-m-d');
          }
        }
        // $currentday = date('Y-m-d', strtotime($request->date));// "2023-11-30"
        $currentday = date('Y-m-d', strtotime($request->date));
        // dd('hi 2', $currentday);
        // $ifcount=0;
        //  $elsecount=0;
        if (count($leaves) != 0) {

          //dd('if');
          foreach ($leavess as $leave) {
            // echo"<pre>";
            //  print_r($leave);

            if ($leave == $currentday) {
              //dd('if');
              // $ifcount=$ifcount+1;
              $output = array('msg' => 'You Have Leave for the Day (' . date('d-m-Y', strtotime($leave)) . ')');
              return redirect('timesheet')->with('statuss', $output);
            }
          }
        }

        // insert data in timesheet from request and get id 
        $id = DB::table('timesheets')->insertGetId(
          [
            'created_by' => auth()->user()->teammember_id,
            'month'     =>    date('F', strtotime($request->date)),
            'date'     =>    date('Y-m-d', strtotime($request->date)),
            'created_at'          =>     date('Y-m-d H:i:s'),
          ]
        );


        $count = count($request->assignment_id);

        // dd('hi 3', $count);
        for ($i = 0; $i < $count; $i++) {
          //dd($request->workitem[$i]);
          $assignment =  DB::table('assignmentmappings')->where('assignmentgenerate_id', $request->assignment_id[$i])->first();

          $a = DB::table('timesheetusers')->insert([
            'date'     =>     $request->date,
            'client_id'     =>     $request->client_id[$i],
            'assignmentgenerate_id'     =>     $request->assignment_id[$i],
            'workitem'     =>     $request->workitem[$i],
            'location'     =>     $request->location[$i],
            //   'billable_status'     =>     $request->billable_status[$i],
            'timesheetid'     =>     $id,
            'date'     =>     date('Y-m-d', strtotime($request->date)),
            'hour'     =>     $request->hour[$i],
            'totalhour' =>      $request->totalhour,
            'assignment_id'     =>     $assignment->assignment_id,
            'partner'     =>     $request->partner[$i],
            'createdby' => auth()->user()->teammember_id,
            'created_at'          =>     date('Y-m-d H:i:s'),
            'updated_at'              =>    date('Y-m-d H:i:s'),
          ]);

          if (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {
            // dd($request);
            $gettotalteamhour = DB::table('assignmentmappings')
              ->leftJoin(
                'assignmentteammappings',
                'assignmentteammappings.assignmentmapping_id',
                'assignmentmappings.id',
              )
              ->where(
                'assignmentmappings.assignmentgenerate_id',
                $request->assignment_id[$i]
              )
              ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
              ->first();

            if ($gettotalteamhour) {
              $gettotalteamhour = $gettotalteamhour->teamhour;
              // dd($gettotalteamhour);

              $finalresult =  $gettotalteamhour + $request->hour[$i];

              $totalteamhourupdate = DB::table('assignmentmappings')
                ->leftJoin(
                  'assignmentteammappings',
                  'assignmentteammappings.assignmentmapping_id',
                  'assignmentmappings.id',
                )
                ->where(
                  'assignmentmappings.assignmentgenerate_id',
                  $request->assignment_id[$i]
                )
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
                // ->get();
                ->update(['teamhour' =>  $finalresult]);
            }
          }

          if (auth()->user()->role_id == 13) {
            $assignmentdata = DB::table('assignmentmappings')
              ->where('assignmentgenerate_id', $request->assignment_id[$i])
              ->first();
            $finalresultleadpatner =  $assignmentdata->leadpartnerhour + $request->hour[$i];
            $finalresultotherpatner =  $assignmentdata->otherpartnerhour + $request->hour[$i];

            if ($assignmentdata->leadpartner == auth()->user()->teammember_id) {
              $update = DB::table('assignmentmappings')
                ->where('assignmentgenerate_id', $request->assignment_id[$i])
                ->where('leadpartner', auth()->user()->teammember_id)
                ->update(['leadpartnerhour' => $finalresultleadpatner]);
            }
            if ($assignmentdata->otherpartner == auth()->user()->teammember_id) {
              $update = DB::table('assignmentmappings')
                ->where('assignmentgenerate_id', $request->assignment_id[$i])
                ->where('otherpartner', auth()->user()->teammember_id)
                ->update(['otherpartnerhour' => $finalresultotherpatner]);
            }
          }
        }
      } else {
        // dd(auth()->user()->teammember_id);
        $output = array('msg' => 'You can not fill timesheet before Rejoining date :' . $joining_date);
        return redirect('timesheet')->with('success', $output);
      }

      //Attendance code

      $hdatess = date('Y-m-d', strtotime($request->date));
      $day =  DateTime::createFromFormat('Y-m-d', $hdatess)->format('d');      //
      $month =  DateTime::createFromFormat('Y-m-d', $hdatess)->format('F');   //
      $currentDate = new DateTime();
      $currentMonth = $currentDate->format('F');
      //dd($month);
      //   if ($currentDate->format('j') > 25) {
      //     $currentDate->modify('-1 month');
      //     $currentMonth = $currentDate->format('F');
      // }



      $dates = [
        '26' => 'twentysix',
        '27' => 'twentyseven',
        '28' => 'twentyeight',
        '29' => 'twentynine',
        '30' => 'thirty',
        '31' => 'thirtyone',
        '01' => 'one',
        '02' => 'two',
        '03' => 'three',
        '04' => 'four',
        '05' => 'five',
        '06' => 'six',
        '07' => 'seven',
        '08' => 'eight',
        '09' => 'nine',
        '10' => 'ten',
        '11' => 'eleven',
        '12' => 'twelve',
        '13' => 'thirteen',
        '14' => 'fourteen',
        '15' => 'fifteen',
        '16' => 'sixteen',
        '17' => 'seventeen',
        '18' => 'eighteen',
        '19' => 'ninghteen',
        '20' => 'twenty',
        '21' => 'twentyone',
        '22' => 'twentytwo',
        '23' => 'twentythree',
        '24' => 'twentyfour',
        '25' => 'twentyfive',
      ];



      if ($month != $currentMonth && $day > 25) {
        $dateTime = DateTime::createFromFormat('Y-m-d', $hdatess);
        $dateTime->modify('+1 month');
        $month = $dateTime->format('F');
      }
      if ($month != $currentMonth && $day < 25) {
        $dateTime = DateTime::createFromFormat('Y-m-d', $hdatess);
        $month = $dateTime->format('F');
      }
      if ($month == $currentMonth && $day > 25) {

        $dateTime = DateTime::createFromFormat('Y-m-d', $hdatess);
        $dateTime->modify('+1 month');
        $month = $dateTime->format('F');
      }

      //dd($month);


      $column = $dates[$day];

      $attendances = DB::table('attendances')->where('employee_name', auth()->user()->teammember_id)
        ->where('month', $month)->first();

      if ($attendances ==  null) {
        $teammember = DB::table('teammembers')->where('id', auth()->user()->teammember_id)->first();

        $a = DB::table('attendances')->insert([
          'employee_name'         =>     auth()->user()->teammember_id,
          'month'         =>    $month,
          'dateofjoining' =>   $teammember->joining_date,
          'created_at'          =>     date('Y-m-d H:i:s'),
          //   'exam_leave'      =>$value->date_total,
        ]);
        //dd($a);
      }


      //   dd($noofdaysaspertimesheet);

      $updatedtotalhour = $request->totalhour;
      if ($attendances != null && property_exists($attendances, $column)) {
        if ($attendances->$column != "LWP") {
          $updatedtotalhour = $request->totalhour + $attendances->$column;
        }
      }
      DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->where('month', $month)
        ->update([$column => $updatedtotalhour]);


      //end attendance


      $output = array('msg' => 'Create Successfully');
      if (auth()->user()->role_id == 14 || auth()->user()->role_id == 13 || auth()->user()->role_id == 15) {
        return redirect('timesheet/mylist')->with('success', $output);
      } else {
        return redirect('timesheet')->with('success', $output);
      }
    } catch (Exception $e) {
      DB::rollBack();
      Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
      report($e);
      $output = array('msg' => $e->getMessage());
      return back()->withErrors($output)->withInput();
    }
  }



Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetrequestController.php

     public function timesheetsubmission(Request $request)
    {
        try {

            $checksavetimesheet = DB::table('timesheetusers')
                ->where('createdby', auth()->user()->teammember_id)
                ->where('status', 0)
                ->first();

            if ($checksavetimesheet == null) {
                $output = array('msg' => "You have not saved any timesheets. Please save your timesheet.");
                return back()->with('statuss', $output);
            }

            $latesttimesheetreport =  DB::table('timesheetreport')
                ->where('teamid', auth()->user()->teammember_id)
                ->orderBy('id', 'desc')
                ->first();


            // $latesttimesheetreport is not null 
            if ($latesttimesheetreport !== null) {

                $timesheetreportenddate = Carbon::parse($latesttimesheetreport->enddate);

                // find next sturday 
                $nextSaturday = $timesheetreportenddate->copy()->next(Carbon::SATURDAY);
                $formattedNextSaturday = $nextSaturday->format('Y-m-d');
                $formattedNextSaturday1 = $timesheetreportenddate->format('d-m-Y');

                // find next week timesheet filled or not 
                $nextweektimesheet = DB::table('timesheetusers')
                    ->where('createdby', auth()->user()->teammember_id)
                    ->whereIn('status', [0, 1])
                    ->where('date', $formattedNextSaturday)
                    ->first();




                // Fetch the rejoining details for the current team member
                // $rejoiningcheck = DB::table('teammembers')
                //     ->where('id', auth()->user()->teammember_id)
                //     ->first();

                $rejoiningcheck = DB::table('teammembers')
                    ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
                    ->where('teammembers.id', auth()->user()->teammember_id)
                    ->select('teammembers.team_member', 'teammembers.staffcode', 'teammembers.joining_date', 'teamrolehistory.newstaff_code', 'teamrolehistory.rejoiningdate')
                    ->first();

                // Check if the rejoining date is set

                if ($rejoiningcheck->rejoiningdate != null) {
                    $rejoining = Carbon::parse($rejoiningcheck->rejoiningdate);
                    $nextweek = Carbon::parse($formattedNextSaturday);

                    // Check if the rejoining date is before next week's Saturday
                    if ($rejoining < $nextweek) {
                        $rejoiningchecktimesheet = DB::table('timesheetusers')
                            ->where('createdby', auth()->user()->teammember_id)
                            ->whereIn('status', [0, 1])
                            ->where('date', $formattedNextSaturday)
                            ->first();
                    } else {
                        $rejoiningchecktimesheet = 'filterd';
                    }
                } else {
                    $rejoiningchecktimesheet = 'filterd';
                }

                // Check if the next week's timesheet is not filled
                if (($nextweektimesheet == null && $rejoiningcheck->rejoiningdate == null) || ($rejoiningchecktimesheet == null && $rejoiningcheck->rejoiningdate != null)) {
                    $output = array('msg' => "Fill the Week timesheet After this week : $formattedNextSaturday1");
                    return back()->with('statuss', $output);
                } else {
                    $usertimesheetfirstdate =  DB::table('timesheets')
                        ->where('status', '0')
                        ->where('created_by', auth()->user()->teammember_id)->orderBy('date', 'ASC')->first();

                    $lastdate = Carbon::createFromFormat('Y-m-d', $usertimesheetfirstdate->date ?? '')->addDays(6);

                    if ($usertimesheetfirstdate) {

                        $firstDate = new DateTime($usertimesheetfirstdate->date);
                        $dayOfWeek = $firstDate->format('w');
                        $daysToAdd = 0;

                        if ($dayOfWeek !== '0') {
                            $daysToAdd = 7 - $dayOfWeek;
                        } else {
                            $output = array('msg' => 'Submit the timesheet from Monday to Sunday.');
                            return back()->with('success', $output);
                        }

                        if ($dayOfWeek > 0) {
                            $daysToSubtract = $dayOfWeek - 1;
                        } else {
                            $daysToSubtract = $dayOfWeek;
                        }

                        $upcomingSunday = (new DateTime($firstDate->format('Y-m-d')))->modify("+$daysToAdd days")->format('Y-m-d');

                        $presentWeekMonday = (new DateTime($firstDate->format('Y-m-d')))->modify("-$daysToSubtract days")->format('Y-m-d');
                    }




                    $get_six_Data = DB::table('timesheets')
                        ->where('status', '0')
                        ->where('created_by', auth()->user()->teammember_id)
                        ->whereBetween('date', [$firstDate->format('Y-m-d'), $upcomingSunday])
                        ->orderBy('date', 'ASC')
                        ->get();


                    $lastdate = $get_six_Data->max('date');


                    $retrievedDates = [];   //copy dates in retrievedDates array in datetime format

                    foreach ($get_six_Data as $entry) {
                        $date = new DateTime($entry->date);
                        $retrievedDates[] = $date->format('Y-m-d');
                    }

                    $expectedDates = [];   // will contain ALL the dates occurs b/w first day to upcoming sunday

                    $firstDate = new DateTime($presentWeekMonday);

                    $upcomingSundayDate = new DateTime($upcomingSunday);


                    // Clone $firstDate so that it is not modified
                    $currentDate = clone $firstDate;

                    while ($currentDate->format('Y-m-d') < $upcomingSundayDate->format('Y-m-d')) {  //excluding sunday
                        $expectedDates[] = $currentDate->format('Y-m-d');


                        $currentDate->modify("+1 day");
                    }

                    $missingDates = array_diff($expectedDates, $retrievedDates);

                    if (!empty($missingDates)) {
                        $missingDatesString = implode(', ', $missingDates);
                        // "2023-11-13, 2023-11-14"

                        $output = array('msg' => "Timesheet Submit Failed Missing dates: $missingDatesString");
                        return back()->with('success', $output);
                    } else {

                        foreach ($get_six_Data as $getsixdata) {
                            // dd('hi', $getsixdata);

                            // Convert the requested date to a Carbon instance
                            $requestedDate = Carbon::createFromFormat('Y-m-d', $getsixdata->date);


                            if (date('l', strtotime(date('d-m-Y', strtotime($getsixdata->date)))) == 'Monday') {

                                $previousMonday = $requestedDate->copy()->previous(Carbon::MONDAY);

                                // Find the nearest next Saturday to the requested date
                                $nextSaturday = $requestedDate->copy()->next(Carbon::SATURDAY);

                                // Format the dates in 'Y-m-d' format
                                $previousMondayFormatted = $getsixdata->date;
                                $nextSaturdayFormatted = $nextSaturday->format('Y-m-d');
                                $nextSaturdayFormatted = $lastdate;


                                $week =  date('d-m-Y', strtotime($previousMondayFormatted))  . ' to ' . date('d-m-Y', strtotime($nextSaturdayFormatted));

                                //------------------- Shahid's code start---------------------
                                $co = DB::table('timesheetusers')
                                    ->where('createdby', auth()->user()->teammember_id)
                                    ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                    ->select('partner', DB::raw('SUM(hour) as total_hours'), DB::raw('COUNT(DISTINCT timesheetid) as row_count'))
                                    ->groupBy('partner')
                                    ->get();


                                // dd($co);
                                foreach ($co as $codata) {
                                    DB::table('timesheetreport')->insert([
                                        'teamid'       =>     auth()->user()->teammember_id,
                                        'week'       =>     $week,
                                        'totaldays'       =>     $codata->row_count,
                                        'totaltime' =>  $codata->total_hours,
                                        'partnerid'  => $codata->partner,
                                        'startdate'  => $previousMondayFormatted,
                                        'enddate'  => $nextSaturdayFormatted,
                                        // 'created_at'                =>       date('y-m-d'),
                                        'created_at'                =>      date('y-m-d H:i:s'),
                                    ]);
                                }

                                $totaldays = DB::table('timesheetusers')
                                    ->where('createdby', auth()->user()->teammember_id)
                                    ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                    ->select('date')
                                    ->groupBy('date')
                                    ->get();

                                $totaldaysCount = $totaldays->count();
                                $latesttimesheetreport = DB::table('timesheetreport')
                                    ->where('teamid', auth()->user()->teammember_id)
                                    ->where('startdate', $previousMondayFormatted)
                                    ->first();

                                if ($latesttimesheetreport) {
                                    DB::table('timesheetreport')
                                        ->where('id', $latesttimesheetreport->id)
                                        ->update(['dayscount' => $totaldaysCount]);
                                }

                                // dd($co);
                            }



                            DB::table('timesheetusers')->where('timesheetid', $getsixdata->id)->update([
                                'status'         =>     1,
                                'updated_at'              =>    date('y-m-d'),
                            ]);
                            DB::table('timesheets')->where('id', $getsixdata->id)->update([
                                'status'         =>     1,
                                'updated_at'              =>    date('y-m-d'),
                            ]);
                        }
                    }


                    // $output = array('msg' => 'Timesheet Submit Successfully');
                    $output = array('msg' => "Timesheet Submit Successfully till " . Carbon::createFromFormat('Y-m-d', $previousMondayFormatted)->format('d-m-Y') . " to " . Carbon::createFromFormat('Y-m-d', $nextSaturdayFormatted)->format('d-m-Y'));

                    // $output = array('msg' => "Timesheet Submit Successfully till $previousMondayFormatted to $nextSaturdayFormatted ");
                    return back()->with('success', $output);
                }
            } else {

                // dd($latesttimesheetreport, 1);
                $usertimesheetfirstdate =  DB::table('timesheets')
                    ->where('status', '0')
                    ->where('created_by', auth()->user()->teammember_id)->orderBy('date', 'ASC')->first();
                $lastdate = Carbon::createFromFormat('Y-m-d', $usertimesheetfirstdate->date ?? '')->addDays(6);

                if ($usertimesheetfirstdate) {
                    $firstDate = new DateTime($usertimesheetfirstdate->date);
                    $dayOfWeek = $firstDate->format('w');
                    $daysToAdd = 0;

                    if ($dayOfWeek !== '0') {
                        $daysToAdd = 7 - $dayOfWeek;
                    } else {
                        $output = array('msg' => 'Submit the timesheet from Monday to Sunday.');
                        return back()->with('success', $output);
                    }

                    if ($dayOfWeek > 0) {
                        $daysToSubtract = $dayOfWeek - 1;
                    } else {
                        $daysToSubtract = $dayOfWeek;
                    }

                    $upcomingSunday = (new DateTime($firstDate->format('Y-m-d')))->modify("+$daysToAdd days")->format('Y-m-d');

                    $presentWeekMonday = (new DateTime($firstDate->format('Y-m-d')))->modify("-$daysToSubtract days")->format('Y-m-d');
                }



                $get_six_Data = DB::table('timesheets')
                    ->where('status', '0')
                    ->where('created_by', auth()->user()->teammember_id)
                    ->whereBetween('date', [$firstDate->format('Y-m-d'), $upcomingSunday])
                    ->orderBy('date', 'ASC')
                    ->get();

                $lastdate = $get_six_Data->max('date');


                $retrievedDates = [];   //copy dates in retrievedDates array in datetime format

                foreach ($get_six_Data as $entry) {
                    $date = new DateTime($entry->date);
                    $retrievedDates[] = $date->format('Y-m-d');
                }

                $expectedDates = [];   // will contain ALL the dates occurs b/w first day to upcoming sunday

                $firstDate = new DateTime($presentWeekMonday);

                $upcomingSundayDate = new DateTime($upcomingSunday);


                // Clone $firstDate so that it is not modified
                $currentDate = clone $firstDate;

                while ($currentDate->format('Y-m-d') < $upcomingSundayDate->format('Y-m-d')) {  //excluding sunday
                    $expectedDates[] = $currentDate->format('Y-m-d');


                    $currentDate->modify("+1 day");
                }

                $missingDates = array_diff($expectedDates, $retrievedDates);

                if (!empty($missingDates)) {
                    $missingDatesString = implode(', ', $missingDates);
                    // "2023-11-13, 2023-11-14"

                    $output = array('msg' => "Timesheet Submit Failed Missing dates: $missingDatesString");
                    return back()->with('success', $output);
                } else {

                    foreach ($get_six_Data as $getsixdata) {
                        // dd('hi', $getsixdata);

                        // Convert the requested date to a Carbon instance
                        $requestedDate = Carbon::createFromFormat('Y-m-d', $getsixdata->date);


                        if (date('l', strtotime(date('d-m-Y', strtotime($getsixdata->date)))) == 'Monday') {

                            $previousMonday = $requestedDate->copy()->previous(Carbon::MONDAY);

                            // Find the nearest next Saturday to the requested date
                            $nextSaturday = $requestedDate->copy()->next(Carbon::SATURDAY);

                            // Format the dates in 'Y-m-d' format
                            $previousMondayFormatted = $getsixdata->date;
                            $nextSaturdayFormatted = $nextSaturday->format('Y-m-d');
                            $nextSaturdayFormatted = $lastdate;


                            $week =  date('d-m-Y', strtotime($previousMondayFormatted))  . ' to ' . date('d-m-Y', strtotime($nextSaturdayFormatted));

                            $co = DB::table('timesheetusers')
                                ->where('createdby', auth()->user()->teammember_id)
                                ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                ->select('partner', DB::raw('SUM(hour) as total_hours'), DB::raw('COUNT(DISTINCT timesheetid) as row_count'))
                                ->groupBy('partner')
                                ->get();


                            // dd($co);
                            foreach ($co as $codata) {
                                DB::table('timesheetreport')->insert([
                                    'teamid'       =>     auth()->user()->teammember_id,
                                    'week'       =>     $week,
                                    'totaldays'       =>     $codata->row_count,
                                    'totaltime' =>  $codata->total_hours,
                                    'partnerid'  => $codata->partner,
                                    'startdate'  => $previousMondayFormatted,
                                    'enddate'  => $nextSaturdayFormatted,
                                    // 'created_at'                =>       date('y-m-d'),
                                    'created_at'                =>      date('y-m-d H:i:s'),
                                ]);
                            }

                            $totaldays = DB::table('timesheetusers')
                                ->where('createdby', auth()->user()->teammember_id)
                                ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                ->select('date')
                                ->groupBy('date')
                                ->get();

                            $totaldaysCount = $totaldays->count();
                            $latesttimesheetreport = DB::table('timesheetreport')
                                ->where('teamid', auth()->user()->teammember_id)
                                ->where('startdate', $previousMondayFormatted)
                                ->first();

                            if ($latesttimesheetreport) {
                                DB::table('timesheetreport')
                                    ->where('id', $latesttimesheetreport->id)
                                    ->update(['dayscount' => $totaldaysCount]);
                            }

                            // dd($co);
                        }



                        DB::table('timesheetusers')->where('timesheetid', $getsixdata->id)->update([
                            'status'         =>     1,
                            'updated_at'              =>    date('y-m-d'),
                        ]);
                        DB::table('timesheets')->where('id', $getsixdata->id)->update([
                            'status'         =>     1,
                            'updated_at'              =>    date('y-m-d'),
                        ]);
                    }
                }


                // $output = array('msg' => 'Timesheet Submit Successfully');
                $output = array('msg' => "Timesheet Submit Successfully till " . Carbon::createFromFormat('Y-m-d', $previousMondayFormatted)->format('d-m-Y') . " to " . Carbon::createFromFormat('Y-m-d', $nextSaturdayFormatted)->format('d-m-Y'));

                // $output = array('msg' => "Timesheet Submit Successfully till $previousMondayFormatted to $nextSaturdayFormatted ");
                return back()->with('success', $output);
            }
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }



Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php
    public function rejoinstore(Request $request)
    {

        $checkrole = DB::table('teammembers')
            ->where('id', $request->employeeid)
            ->select('id', 'role_id', 'staffcode', 'staffcodenumber')
            ->first();

        // if user designation change then
        if ($checkrole && $request->employeeid && $request->rejoining_date && $request->designationtype) {
            if ($checkrole->role_id < $request->designationtype) {
                $role = '';
                if ($request->designationtype == 11) {
                    $role = "super admin";
                } elseif ($request->designationtype == 12) {
                    $role = "admin";
                } elseif ($request->designationtype == 13) {
                    $role = "partner";
                } elseif ($request->designationtype == 14) {
                    $role = "manager";
                } elseif ($request->designationtype == 15) {
                    $role = "staff";
                }
                $output = array('msg' => 'You can not rejoin on this post "' . $role . '".');
                return back()->with('statuss', $output);
            }

            if ($checkrole->role_id != $request->designationtype) {
                $maxStaffcodeTeammembers = DB::table('teammembers')
                    ->where('role_id', $request->designationtype)
                    ->max('staffcodenumber');

                $maxStaffcodeTeamRoleHistory = DB::table('teamrolehistory')
                    ->where('roleid_new', $request->designationtype)
                    ->max('new_staffcodenumber');

                $getlateststaffcode = max($maxStaffcodeTeammembers, $maxStaffcodeTeamRoleHistory);


                if ($request->designationtype == 13) {
                    if ($getlateststaffcode == null) {
                        $newstaffcode = '10001';
                    } else {
                        $newstaffcode = $getlateststaffcode + 1;
                    }
                    $newstaffcoderesult = 'P' . $newstaffcode;
                    $staffcode = $newstaffcode;
                }
                if ($request->designationtype == 14) {
                    if ($getlateststaffcode == null) {
                        $newstaffcode = '20001';
                    } else {
                        $newstaffcode = $getlateststaffcode + 1;
                    }
                    $newstaffcoderesult = 'M' . $newstaffcode;
                    $staffcode = $newstaffcode;
                }

                DB::table('teammembers')
                    ->where('id', $request->employeeid)
                    ->update([
                        'role_id' => $request->designationtype,
                        'staffcodenumber' => $staffcode,
                        'status' => 1,
                    ]);

                DB::table('users')
                    ->where('teammember_id', $request->employeeid)
                    ->update([
                        'role_id' => $request->designationtype,
                        'status' => 1,
                    ]);

                DB::table('teamrolehistory')->insert([
                    'teammember_id' => $request->employeeid,
                    'roleid_old' => $checkrole->role_id,
                    'roleid_new' => $request->designationtype,
                    'oldstaff_code' =>  $checkrole->staffcode,
                    'newstaff_code' => $newstaffcoderesult,
                    'old_staffcodenumber' => $checkrole->staffcodenumber,
                    'new_staffcodenumber' => $staffcode,
                    'rejoiningdate' => date('Y-m-d', strtotime($request->rejoining_date)),
                    //hare goes to created date 
                    'rejoiningcreated' => now(),
                    'rejointimesheetstatus' => 1,
                    //hare goes to rejoining date from form becouse all condition apply on create column it is common column for pormotion and rejoining
                    'created_at' => Carbon::createFromFormat('Y-m-d', $request->rejoining_date)->toDateTimeString(),
                    'updated_at' => now(),
                ]);
            } else {
                $role = '';
                if ($checkrole->role_id == 11) {
                    $role = "super admin";
                } elseif ($checkrole->role_id == 12) {
                    $role = "admin";
                } elseif ($checkrole->role_id == 13) {
                    $role = "partner";
                } elseif ($checkrole->role_id == 14) {
                    $role = "manager";
                } elseif ($checkrole->role_id == 15) {
                    $role = "staff";
                }
                $output = array('msg' => 'The User allready on this post.You can not select "' . $role . '".');
                return back()->with('statuss', $output);
            }
        }
        // if user designation not chnge
        else {

            DB::table('teammembers')
                ->where('id', $request->employeeid)
                ->update([
                    'status' => 1,
                ]);

            DB::table('users')
                ->where('teammember_id', $request->employeeid)
                ->update([
                    'status' => 1,
                ]);

            DB::table('rejoiningsamepost')->insert([
                'teammember_id' => $request->employeeid,
                'rejoiningdate' => date('Y-m-d', strtotime($request->rejoining_date)),
                'created_at' => now(),
                'updated_at' => now(),
            ]);
        }

        $output = array('msg' => 'Rejoining Successfully Done');
        return back()->with('success', $output);
    }




Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetrequestController.php



    public function timesheetsubmission(Request $request)
    {
        try {



            $checksavetimesheet = DB::table('timesheetusers')
                ->where('createdby', auth()->user()->teammember_id)
                ->where('status', 0)
                ->first();

            if ($checksavetimesheet == null) {
                $output = array('msg' => "You have not saved any timesheets. Please save your timesheet.");
                return back()->with('statuss', $output);
            }

            $latesttimesheetreport =  DB::table('timesheetreport')
                ->where('teamid', auth()->user()->teammember_id)
                ->orderBy('id', 'desc')
                ->first();


            // $latesttimesheetreport is not null 
            if ($latesttimesheetreport !== null) {

                $timesheetreportenddate = Carbon::parse($latesttimesheetreport->enddate);

                // find next sturday 
                $nextSaturday = $timesheetreportenddate->copy()->next(Carbon::SATURDAY);
                $formattedNextSaturday = $nextSaturday->format('Y-m-d');
                $formattedNextSaturday1 = $timesheetreportenddate->format('d-m-Y');

                // find next week timesheet filled or not 
                $nextweektimesheet = DB::table('timesheetusers')
                    ->where('createdby', auth()->user()->teammember_id)
                    ->whereIn('status', [0, 1])
                    ->where('date', $formattedNextSaturday)
                    ->first();





                // Fetch the rejoining data
                $rejoiningcheck = DB::table('teammembers')
                    ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
                    ->leftJoin('rejoiningsamepost', 'rejoiningsamepost.teammember_id', '=', 'teammembers.id')
                    ->where('teammembers.id', auth()->user()->teammember_id)
                    ->select(
                        'teammembers.team_member',
                        'teammembers.staffcode',
                        'teammembers.joining_date',
                        'teamrolehistory.newstaff_code',
                        'teamrolehistory.rejoiningdate',
                        'rejoiningsamepost.rejoiningdate as samepostrejoiningdate'
                    )
                    ->first();



                // Initialize the variable
                $rejoiningchecktimesheet = null;

                // Check if any rejoining date is set
                $rejoiningDate = $rejoiningcheck->rejoiningdate ?? $rejoiningcheck->samepostrejoiningdate;

                // Check if the rejoining date is set
                if ($rejoiningDate) {
                    $rejoining = Carbon::parse($rejoiningDate);
                    $nextweek = Carbon::parse($formattedNextSaturday);

                    // Check if the rejoining date is before next week's Saturday
                    if ($rejoining < $nextweek) {
                        $rejoiningchecktimesheet = DB::table('timesheetusers')
                            ->where('createdby', auth()->user()->teammember_id)
                            ->whereIn('status', [0, 1])
                            ->where('date', $formattedNextSaturday)
                            ->first();
                    }
                }

                // Determine the next week's timesheet status


                if ($nextweektimesheet == null && $rejoiningchecktimesheet == null && $rejoiningDate == null) {
                    $output = array('msg' => "Fill the Week timesheet After this week: $formattedNextSaturday1");
                    return back()->with('statuss', $output);
                } else {
                    $usertimesheetfirstdate =  DB::table('timesheets')
                        ->where('status', '0')
                        ->where('created_by', auth()->user()->teammember_id)->orderBy('date', 'ASC')->first();

                    $lastdate = Carbon::createFromFormat('Y-m-d', $usertimesheetfirstdate->date ?? '')->addDays(6);

                    if ($usertimesheetfirstdate) {

                        $firstDate = new DateTime($usertimesheetfirstdate->date);
                        $dayOfWeek = $firstDate->format('w');
                        $daysToAdd = 0;

                        if ($dayOfWeek !== '0') {
                            $daysToAdd = 7 - $dayOfWeek;
                        } else {
                            $output = array('msg' => 'Submit the timesheet from Monday to Sunday.');
                            return back()->with('success', $output);
                        }

                        if ($dayOfWeek > 0) {
                            $daysToSubtract = $dayOfWeek - 1;
                        } else {
                            $daysToSubtract = $dayOfWeek;
                        }

                        $upcomingSunday = (new DateTime($firstDate->format('Y-m-d')))->modify("+$daysToAdd days")->format('Y-m-d');

                        $presentWeekMonday = (new DateTime($firstDate->format('Y-m-d')))->modify("-$daysToSubtract days")->format('Y-m-d');
                    }




                    $get_six_Data = DB::table('timesheets')
                        ->where('status', '0')
                        ->where('created_by', auth()->user()->teammember_id)
                        ->whereBetween('date', [$firstDate->format('Y-m-d'), $upcomingSunday])
                        ->orderBy('date', 'ASC')
                        ->get();


                    $lastdate = $get_six_Data->max('date');


                    $retrievedDates = [];   //copy dates in retrievedDates array in datetime format

                    foreach ($get_six_Data as $entry) {
                        $date = new DateTime($entry->date);
                        $retrievedDates[] = $date->format('Y-m-d');
                    }

                    $expectedDates = [];   // will contain ALL the dates occurs b/w first day to upcoming sunday

                    $firstDate = new DateTime($presentWeekMonday);

                    $upcomingSundayDate = new DateTime($upcomingSunday);


                    // Clone $firstDate so that it is not modified
                    $currentDate = clone $firstDate;

                    while ($currentDate->format('Y-m-d') < $upcomingSundayDate->format('Y-m-d')) {  //excluding sunday
                        $expectedDates[] = $currentDate->format('Y-m-d');


                        $currentDate->modify("+1 day");
                    }

                    $missingDates = array_diff($expectedDates, $retrievedDates);

                    if (!empty($missingDates)) {
                        $missingDatesString = implode(', ', $missingDates);
                        // "2023-11-13, 2023-11-14"

                        $output = array('msg' => "Timesheet Submit Failed Missing dates: $missingDatesString");
                        return back()->with('success', $output);
                    } else {

                        foreach ($get_six_Data as $getsixdata) {
                            // dd('hi', $getsixdata);

                            // Convert the requested date to a Carbon instance
                            $requestedDate = Carbon::createFromFormat('Y-m-d', $getsixdata->date);


                            if (date('l', strtotime(date('d-m-Y', strtotime($getsixdata->date)))) == 'Monday') {

                                $previousMonday = $requestedDate->copy()->previous(Carbon::MONDAY);

                                // Find the nearest next Saturday to the requested date
                                $nextSaturday = $requestedDate->copy()->next(Carbon::SATURDAY);

                                // Format the dates in 'Y-m-d' format
                                $previousMondayFormatted = $getsixdata->date;
                                $nextSaturdayFormatted = $nextSaturday->format('Y-m-d');
                                $nextSaturdayFormatted = $lastdate;


                                $week =  date('d-m-Y', strtotime($previousMondayFormatted))  . ' to ' . date('d-m-Y', strtotime($nextSaturdayFormatted));

                                //------------------- Shahid's code start---------------------
                                $co = DB::table('timesheetusers')
                                    ->where('createdby', auth()->user()->teammember_id)
                                    ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                    ->select('partner', DB::raw('SUM(hour) as total_hours'), DB::raw('COUNT(DISTINCT timesheetid) as row_count'))
                                    ->groupBy('partner')
                                    ->get();


                                // dd($co);
                                foreach ($co as $codata) {
                                    DB::table('timesheetreport')->insert([
                                        'teamid'       =>     auth()->user()->teammember_id,
                                        'week'       =>     $week,
                                        'totaldays'       =>     $codata->row_count,
                                        'totaltime' =>  $codata->total_hours,
                                        'partnerid'  => $codata->partner,
                                        'startdate'  => $previousMondayFormatted,
                                        'enddate'  => $nextSaturdayFormatted,
                                        // 'created_at'                =>       date('y-m-d'),
                                        'created_at'                =>      date('y-m-d H:i:s'),
                                    ]);
                                }

                                $totaldays = DB::table('timesheetusers')
                                    ->where('createdby', auth()->user()->teammember_id)
                                    ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                    ->select('date')
                                    ->groupBy('date')
                                    ->get();

                                $totaldaysCount = $totaldays->count();
                                $latesttimesheetreport = DB::table('timesheetreport')
                                    ->where('teamid', auth()->user()->teammember_id)
                                    ->where('startdate', $previousMondayFormatted)
                                    ->first();

                                if ($latesttimesheetreport) {
                                    DB::table('timesheetreport')
                                        ->where('id', $latesttimesheetreport->id)
                                        ->update(['dayscount' => $totaldaysCount]);
                                }

                                // dd($co);
                            }



                            DB::table('timesheetusers')->where('timesheetid', $getsixdata->id)->update([
                                'status'         =>     1,
                                'updated_at'              =>    date('y-m-d'),
                            ]);
                            DB::table('timesheets')->where('id', $getsixdata->id)->update([
                                'status'         =>     1,
                                'updated_at'              =>    date('y-m-d'),
                            ]);
                        }
                    }


                    // $output = array('msg' => 'Timesheet Submit Successfully');
                    $output = array('msg' => "Timesheet Submit Successfully till " . Carbon::createFromFormat('Y-m-d', $previousMondayFormatted)->format('d-m-Y') . " to " . Carbon::createFromFormat('Y-m-d', $nextSaturdayFormatted)->format('d-m-Y'));

                    // $output = array('msg' => "Timesheet Submit Successfully till $previousMondayFormatted to $nextSaturdayFormatted ");
                    return back()->with('success', $output);
                }
            } else {

                // dd($latesttimesheetreport, 1);
                $usertimesheetfirstdate =  DB::table('timesheets')
                    ->where('status', '0')
                    ->where('created_by', auth()->user()->teammember_id)->orderBy('date', 'ASC')->first();
                $lastdate = Carbon::createFromFormat('Y-m-d', $usertimesheetfirstdate->date ?? '')->addDays(6);

                if ($usertimesheetfirstdate) {
                    $firstDate = new DateTime($usertimesheetfirstdate->date);
                    $dayOfWeek = $firstDate->format('w');
                    $daysToAdd = 0;

                    if ($dayOfWeek !== '0') {
                        $daysToAdd = 7 - $dayOfWeek;
                    } else {
                        $output = array('msg' => 'Submit the timesheet from Monday to Sunday.');
                        return back()->with('success', $output);
                    }

                    if ($dayOfWeek > 0) {
                        $daysToSubtract = $dayOfWeek - 1;
                    } else {
                        $daysToSubtract = $dayOfWeek;
                    }

                    $upcomingSunday = (new DateTime($firstDate->format('Y-m-d')))->modify("+$daysToAdd days")->format('Y-m-d');

                    $presentWeekMonday = (new DateTime($firstDate->format('Y-m-d')))->modify("-$daysToSubtract days")->format('Y-m-d');
                }



                $get_six_Data = DB::table('timesheets')
                    ->where('status', '0')
                    ->where('created_by', auth()->user()->teammember_id)
                    ->whereBetween('date', [$firstDate->format('Y-m-d'), $upcomingSunday])
                    ->orderBy('date', 'ASC')
                    ->get();

                $lastdate = $get_six_Data->max('date');


                $retrievedDates = [];   //copy dates in retrievedDates array in datetime format

                foreach ($get_six_Data as $entry) {
                    $date = new DateTime($entry->date);
                    $retrievedDates[] = $date->format('Y-m-d');
                }

                $expectedDates = [];   // will contain ALL the dates occurs b/w first day to upcoming sunday

                $firstDate = new DateTime($presentWeekMonday);

                $upcomingSundayDate = new DateTime($upcomingSunday);


                // Clone $firstDate so that it is not modified
                $currentDate = clone $firstDate;

                while ($currentDate->format('Y-m-d') < $upcomingSundayDate->format('Y-m-d')) {  //excluding sunday
                    $expectedDates[] = $currentDate->format('Y-m-d');


                    $currentDate->modify("+1 day");
                }

                $missingDates = array_diff($expectedDates, $retrievedDates);

                if (!empty($missingDates)) {
                    $missingDatesString = implode(', ', $missingDates);
                    // "2023-11-13, 2023-11-14"

                    $output = array('msg' => "Timesheet Submit Failed Missing dates: $missingDatesString");
                    return back()->with('success', $output);
                } else {

                    foreach ($get_six_Data as $getsixdata) {
                        // dd('hi', $getsixdata);

                        // Convert the requested date to a Carbon instance
                        $requestedDate = Carbon::createFromFormat('Y-m-d', $getsixdata->date);


                        if (date('l', strtotime(date('d-m-Y', strtotime($getsixdata->date)))) == 'Monday') {

                            $previousMonday = $requestedDate->copy()->previous(Carbon::MONDAY);

                            // Find the nearest next Saturday to the requested date
                            $nextSaturday = $requestedDate->copy()->next(Carbon::SATURDAY);

                            // Format the dates in 'Y-m-d' format
                            $previousMondayFormatted = $getsixdata->date;
                            $nextSaturdayFormatted = $nextSaturday->format('Y-m-d');
                            $nextSaturdayFormatted = $lastdate;


                            $week =  date('d-m-Y', strtotime($previousMondayFormatted))  . ' to ' . date('d-m-Y', strtotime($nextSaturdayFormatted));

                            $co = DB::table('timesheetusers')
                                ->where('createdby', auth()->user()->teammember_id)
                                ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                ->select('partner', DB::raw('SUM(hour) as total_hours'), DB::raw('COUNT(DISTINCT timesheetid) as row_count'))
                                ->groupBy('partner')
                                ->get();


                            // dd($co);
                            foreach ($co as $codata) {
                                DB::table('timesheetreport')->insert([
                                    'teamid'       =>     auth()->user()->teammember_id,
                                    'week'       =>     $week,
                                    'totaldays'       =>     $codata->row_count,
                                    'totaltime' =>  $codata->total_hours,
                                    'partnerid'  => $codata->partner,
                                    'startdate'  => $previousMondayFormatted,
                                    'enddate'  => $nextSaturdayFormatted,
                                    // 'created_at'                =>       date('y-m-d'),
                                    'created_at'                =>      date('y-m-d H:i:s'),
                                ]);
                            }

                            $totaldays = DB::table('timesheetusers')
                                ->where('createdby', auth()->user()->teammember_id)
                                ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                ->select('date')
                                ->groupBy('date')
                                ->get();

                            $totaldaysCount = $totaldays->count();
                            $latesttimesheetreport = DB::table('timesheetreport')
                                ->where('teamid', auth()->user()->teammember_id)
                                ->where('startdate', $previousMondayFormatted)
                                ->first();

                            if ($latesttimesheetreport) {
                                DB::table('timesheetreport')
                                    ->where('id', $latesttimesheetreport->id)
                                    ->update(['dayscount' => $totaldaysCount]);
                            }

                            // dd($co);
                        }



                        DB::table('timesheetusers')->where('timesheetid', $getsixdata->id)->update([
                            'status'         =>     1,
                            'updated_at'              =>    date('y-m-d'),
                        ]);
                        DB::table('timesheets')->where('id', $getsixdata->id)->update([
                            'status'         =>     1,
                            'updated_at'              =>    date('y-m-d'),
                        ]);
                    }
                }


                // $output = array('msg' => 'Timesheet Submit Successfully');
                $output = array('msg' => "Timesheet Submit Successfully till " . Carbon::createFromFormat('Y-m-d', $previousMondayFormatted)->format('d-m-Y') . " to " . Carbon::createFromFormat('Y-m-d', $nextSaturdayFormatted)->format('d-m-Y'));

                // $output = array('msg' => "Timesheet Submit Successfully till $previousMondayFormatted to $nextSaturdayFormatted ");
                return back()->with('success', $output);
            }
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }





promotion start hare   upload above code on vsademo
################################################################################################################################
app\Http\Controllers\ApplyleaveController.php

  public function index()
  {

    $permotioncheck = DB::table('teamrolehistory')
      ->where('teammember_id', auth()->user()->teammember_id)->first();
    // dd($permotioncheck);
    $currentdate = date('Y-m-d');
    $currentYear = date('Y');
    $financialYearStart = $currentYear . '-04-01';
    $financialYearEnd = ($currentYear + 1) . '-03-31';

    $casualteam = DB::table('teammembers')->where('id', auth()->user()->teammember_id)->first();

    $birthday = DB::table('leavetypes')
      ->where('year', $currentYear)->where('name', 'Birthday/Religious Festival')->first();
    $Casual = DB::table('leavetypes')->where('year', $currentYear)->where('name', 'Casual Leave')->first();
    $Sick = DB::table('leavetypes')->where('year', $currentYear)->where('name', 'Sick Leave')->first();
    //  dd($casualteam);
    if ($casualteam->joining_date < $Casual->startdate) {

      $to = \Carbon\Carbon::createFromFormat('Y-m-d', $Casual->startdate);
    } else {
      $to = \Carbon\Carbon::createFromFormat('Y-m-d', $casualteam->joining_date);
    }




    $diff_in_months = $to->diffInMonths($currentdate) + 1;
    if (\Carbon\Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->diffInDays($currentdate) < 90) {
      $diff_in_months = 0;
    }
    //dd($diff_in_months);
    $teamdate = \Carbon\Carbon::createFromFormat('Y-m-d', $casualteam->joining_date);
    //   $currentdate = date('Y-m-d');
    $teammonthcount = $teamdate->diffInMonths($currentdate) + 1;
    if ($teamdate->diffInDays($currentdate) < 90) {
      $teammonthcount = 0;
    }

    if (auth()->user()->teammember_id == 434 || auth()->user()->teammember_id == 429) {
      $teammember = Teammember::with('role:id,rolename')
        ->whereNotNull('joining_date')
        ->get();




      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;

      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);

        $datess = [];
        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->where('startdate', '>=', $toDate)
          ->where('enddate', '<=', $toDate)->select('startdate')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }

        $countSick = array_diff($datess, $hdatess);
      }

      $countSick = DB::table('leaveapprove')
        ->where('year', $currentYear)->where('leavetype', $Sick->id)
        ->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');
      //  dd($countSick);
      $countCasual = DB::table('leaveapprove')
        ->where('year', $currentYear)->where('leavetype', $Casual->id)
        ->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');

      $countCasualafmnth = DB::table('leaveapprove')
        ->where('year', $currentYear)
        ->where('leavetype', $Casual->id)
        ->where('teammemberid', auth()->user()->teammember_id)
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addMonths(3))->sum('totaldays');

      $countbirthday = DB::table('leaveapprove')
        ->where('year', $currentYear)->where('leavetype', $birthday->id)
        ->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');

      //dd($countSick);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      // dd($totalcountCasual);
      //  dd($countCasualafmnth);
      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name')->get();
      // dd($applyleaveDatas);
      return view('backEnd.applyleave.teamapplication', compact(
        'teammember',
        'countCasualafmnth',
        'teammonthcount',
        'totalcountCasual',
        'teamapplyleaveDatas',
        'birthday',
        'countbirthday',
        'Casual',
        'Sick',
        'countSick',
        'countCasual'
      ));
    } elseif (auth()->user()->role_id == 11) {

      $teammember = Teammember::with('role:id,rolename')
        ->whereNotNull('joining_date')
        ->get();

      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;
      $datess = [];
      $hdatess = [];
      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();


        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $datess = array_unique($datess);
      }
      $countSick = count(array_diff($datess, $hdatess));


      $appliedCasual = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countCasual = 0;
      $casualDates = [];
      foreach ($appliedCasual as $CasualLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $casualDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $casualDates = array_unique($casualDates);
      }
      $countCasual = count(array_diff($casualDates, $hdatess));

      $appliedCasualafmnth = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addDays(90))
        ->get();

      $countCasualafmnth = 0;
      $CasualafmnthDates = [];
      foreach ($appliedCasualafmnth as $CasualafmnthLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $CasualafmnthDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $CasualafmnthDates = array_unique($CasualafmnthDates);
      }
      $countCasualafmnth = count(array_diff($CasualafmnthDates, $hdatess));





      $appliedbirthday = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $birthday->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();
      $countbirthday = 0;
      $birthdayDates = [];
      foreach ($appliedbirthday as $birthdayLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $birthdayDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $birthdayDates = array_unique($birthdayDates);
      }
      $countbirthday = count(array_diff($birthdayDates, $hdatess));

      //dd($diff_in_months);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      //  dd($diff_in_months);

      //  dd($countCasualafmnth);
      $leavetaken = DB::table('leaveapprove')
        ->where('year', '2023')->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');
      $myapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.createdby', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name')->latest()->get();

      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name')->get();

      $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
      $attendance = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $clInAttendance = 0;
      $slInAttendance = 0;
      //dd($attendance);
      foreach ($attendance as $item) {
        foreach ($columns as $column) {
          if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
            $clInAttendance++;
          }
          if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
            $slInAttendance++;
          }
        }
      }

      $role_id = auth()->user()->teammember_id;
      // this is going on view
      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftJoin('teamrolehistory', function ($join) {
          $join->on('teamrolehistory.teammember_id', '=', 'teammembers.id')
            ->on('teamrolehistory.created_at', '<', 'applyleaves.created_at');
        })
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'teammembers.emailid', 'roles.rolename', 'leavetypes.name', 'teamrolehistory.newstaff_code')
        // ->take(7)
        ->get();

      $hasPendingRequests = $teamapplyleaveDatas->contains('status', 0);
      // dd($applyleaveDatas);
      return view('backEnd.applyleave.teamapplication', compact(
        'teammember',
        'countCasualafmnth',
        'teammonthcount',
        'totalcountCasual',
        'teamapplyleaveDatas',
        'birthday',
        'countbirthday',
        'Casual',
        'Sick',
        'countSick',
        'countCasual',
        'role_id',
        'clInAttendance',
        'slInAttendance',
        'hasPendingRequests',
      ));
    } elseif (auth()->user()->role_id == 18) {

      $role_id = auth()->user()->teammember_id;

      $teammember = Teammember::with('role:id,rolename')
        ->whereNotNull('joining_date')
        ->get();

      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;
      $datess = [];
      $hdatess = [];
      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();


        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $datess = array_unique($datess);
      }
      $countSick = count(array_diff($datess, $hdatess));


      $appliedCasual = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countCasual = 0;
      $casualDates = [];
      foreach ($appliedCasual as $CasualLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $casualDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $casualDates = array_unique($casualDates);
      }
      $countCasual = count(array_diff($casualDates, $hdatess));

      $appliedCasualafmnth = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addDays(90))
        ->get();

      $countCasualafmnth = 0;
      $CasualafmnthDates = [];
      foreach ($appliedCasualafmnth as $CasualafmnthLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $CasualafmnthDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $CasualafmnthDates = array_unique($CasualafmnthDates);
      }
      $countCasualafmnth = count(array_diff($CasualafmnthDates, $hdatess));





      $appliedbirthday = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $birthday->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();
      $countbirthday = 0;
      $birthdayDates = [];
      foreach ($appliedbirthday as $birthdayLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $birthdayDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $birthdayDates = array_unique($birthdayDates);
      }
      $countbirthday = count(array_diff($birthdayDates, $hdatess));

      //dd($diff_in_months);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      //  dd($diff_in_months);

      //  dd($countCasualafmnth);
      $leavetaken = DB::table('leaveapprove')
        ->where('year', '2023')->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');

      $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
      $attendance = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $clInAttendance = 0;
      $slInAttendance = 0;
      //dd($attendance);
      foreach ($attendance as $item) {
        foreach ($columns as $column) {
          if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
            $clInAttendance++;
          }
          if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
            $slInAttendance++;
          }
        }
      }
      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name')->latest()->get();

      return view('backEnd.applyleave.teamapplication', compact(
        'teammember',
        'countCasualafmnth',
        'teammonthcount',
        'totalcountCasual',
        'teamapplyleaveDatas',
        'birthday',
        'countbirthday',
        'Casual',
        'Sick',
        'countSick',
        'countCasual',
        'role_id',
        'clInAttendance',
        'slInAttendance',
      ));
    } elseif ($permotioncheck && auth()->user()->role_id == 13) {

      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;
      $datess = [];
      $hdatess = [];
      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();


        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $datess = array_unique($datess);
      }
      $countSick = count(array_diff($datess, $hdatess));


      $appliedCasual = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countCasual = 0;
      $casualDates = [];
      foreach ($appliedCasual as $CasualLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $casualDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $casualDates = array_unique($casualDates);
      }
      $countCasual = count(array_diff($casualDates, $hdatess));

      $appliedCasualafmnth = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addDays(90))
        ->get();

      $countCasualafmnth = 0;
      $CasualafmnthDates = [];
      foreach ($appliedCasualafmnth as $CasualafmnthLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $CasualafmnthDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $CasualafmnthDates = array_unique($CasualafmnthDates);
      }
      $countCasualafmnth = count(array_diff($CasualafmnthDates, $hdatess));

      $appliedbirthday = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $birthday->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();
      $countbirthday = 0;
      $birthdayDates = [];
      foreach ($appliedbirthday as $birthdayLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $birthdayDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $birthdayDates = array_unique($birthdayDates);
      }
      $countbirthday = count(array_diff($birthdayDates, $hdatess));

      //dd($diff_in_months);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      //  dd($diff_in_months);

      //  dd($countCasualafmnth);
      $leavetaken = DB::table('leaveapprove')
        ->where('year', '2023')->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');
      // $myapplyleaveDatas  = DB::table('applyleaves')
      //   ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
      //   ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
      //   ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
      //   ->where('applyleaves.createdby', auth()->user()->teammember_id)
      //   ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->latest()->get();



      $commonQuery = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.createdby', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name');

      $myapplyleaveDatasbefore = (clone $commonQuery)
        ->whereDate('applyleaves.created_at', '<', $permotioncheck->created_at)
        ->addSelect('teammembers.staffcode')
        ->get();

      $myapplyleaveDatasafter = (clone $commonQuery)
        ->leftJoin('teamrolehistory as createdby_history', 'createdby_history.teammember_id', '=', 'teammembers.id')
        ->whereDate('applyleaves.created_at', '>', $permotioncheck->created_at)
        ->addSelect('createdby_history.newstaff_code')
        ->get();
      $myapplyleaveDatas = $myapplyleaveDatasafter->merge($myapplyleaveDatasbefore);





      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->get();

      $hasPendingRequests = $teamapplyleaveDatas->contains('status', 0);


      $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
      $attendance = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $clInAttendance = 0;
      $slInAttendance = 0;
      //dd($attendance);
      foreach ($attendance as $item) {
        foreach ($columns as $column) {
          if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
            $clInAttendance++;
          }
          if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
            $slInAttendance++;
          }
        }
      }

      //Aproved leave jan to dec 
      $currentYear = date('Y');
      $approvedleavesvalue = DB::table('applyleaves')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 1)
        ->whereYear('from',  $currentYear)
        ->get();

      $leaveDurations = [];
      foreach ($approvedleavesvalue as $approvedleavesvalues) {
        $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

        $diff_in_days = $to->diffInDays($from) + 1;

        $holidaycount = DB::table('holidays')
          ->where('startdate', '>=', $approvedleavesvalues->from)
          ->where('enddate', '<=', $approvedleavesvalues->to)
          ->count();

        $leaveDurationcount = $diff_in_days - $holidaycount;
        $leaveDurations[] = $leaveDurationcount;
      }

      $approvedleavesvaluecount = array_sum($leaveDurations);
      // dd($approvedleavesvaluecount);
      //Aproved leave jan to dec end hare 

      // dd($applyleaveDatas);
      return view('backEnd.applyleave.index', compact('countCasualafmnth', 'leavetaken', 'teammonthcount', 'totalcountCasual', 'myapplyleaveDatas', 'teamapplyleaveDatas', 'birthday', 'countbirthday', 'Casual', 'Sick', 'countSick', 'countCasual', 'clInAttendance', 'slInAttendance', 'approvedleavesvaluecount', 'hasPendingRequests'));
    }
    // elseif ($permotioncheck && auth()->user()->role_id == 14) {

    //   $appliedSick = DB::table('applyleaves')
    //     ->where('status', '!=', '2')
    //     ->where('leavetype', $Sick->id)
    //     ->where('createdby', auth()->user()->teammember_id)
    //     ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
    //     ->get();

    //   $countSick = 0;
    //   $datess = [];
    //   $hdatess = [];
    //   foreach ($appliedSick as $sickLeave) {
    //     $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
    //     $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
    //     $period = CarbonPeriod::create($fromDate, $toDate);


    //     foreach ($period as $date) {
    //       $datess[] = $date->format('Y-m-d');
    //     }

    //     $getholidays = DB::table('holidays')->get();


    //     foreach ($getholidays as $date) {
    //       $hdatess[] = date('Y-m-d', strtotime($date->startdate));
    //     }
    //     $datess = array_unique($datess);
    //   }
    //   $countSick = count(array_diff($datess, $hdatess));


    //   $appliedCasual = DB::table('applyleaves')
    //     ->where('status', '!=', '2')
    //     ->where('leavetype', $Casual->id)
    //     ->where('createdby', auth()->user()->teammember_id)
    //     ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
    //     ->get();

    //   $countCasual = 0;
    //   $casualDates = [];
    //   foreach ($appliedCasual as $CasualLeave) {

    //     $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
    //     $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
    //     $period = CarbonPeriod::create($fromDate, $toDate);


    //     foreach ($period as $date) {
    //       $casualDates[] = $date->format('Y-m-d');
    //     }

    //     $getholidays = DB::table('holidays')->get();

    //     $hdatess = [];
    //     foreach ($getholidays as $date) {
    //       $hdatess[] = date('Y-m-d', strtotime($date->startdate));
    //     }
    //     $casualDates = array_unique($casualDates);
    //   }
    //   $countCasual = count(array_diff($casualDates, $hdatess));

    //   $appliedCasualafmnth = DB::table('applyleaves')
    //     ->where('status', '!=', '2')
    //     ->where('leavetype', $Casual->id)
    //     ->where('createdby', auth()->user()->teammember_id)
    //     ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
    //     ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addDays(90))
    //     ->get();

    //   $countCasualafmnth = 0;
    //   $CasualafmnthDates = [];
    //   foreach ($appliedCasualafmnth as $CasualafmnthLeave) {

    //     $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->from);
    //     $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->to);
    //     $period = CarbonPeriod::create($fromDate, $toDate);


    //     foreach ($period as $date) {
    //       $CasualafmnthDates[] = $date->format('Y-m-d');
    //     }

    //     $getholidays = DB::table('holidays')->get();

    //     $hdatess = [];
    //     foreach ($getholidays as $date) {
    //       $hdatess[] = date('Y-m-d', strtotime($date->startdate));
    //     }
    //     $CasualafmnthDates = array_unique($CasualafmnthDates);
    //   }
    //   $countCasualafmnth = count(array_diff($CasualafmnthDates, $hdatess));

    //   $appliedbirthday = DB::table('applyleaves')
    //     ->where('status', '!=', '2')
    //     ->where('leavetype', $birthday->id)
    //     ->where('createdby', auth()->user()->teammember_id)
    //     ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
    //     ->get();
    //   $countbirthday = 0;
    //   $birthdayDates = [];
    //   foreach ($appliedbirthday as $birthdayLeave) {

    //     $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->from);
    //     $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->to);
    //     $period = CarbonPeriod::create($fromDate, $toDate);


    //     foreach ($period as $date) {
    //       $birthdayDates[] = $date->format('Y-m-d');
    //     }

    //     $getholidays = DB::table('holidays')->get();

    //     $hdatess = [];
    //     foreach ($getholidays as $date) {
    //       $hdatess[] = date('Y-m-d', strtotime($date->startdate));
    //     }
    //     $birthdayDates = array_unique($birthdayDates);
    //   }
    //   $countbirthday = count(array_diff($birthdayDates, $hdatess));

    //   //dd($diff_in_months);
    //   $totalcountCasual = $Casual->noofdays * $diff_in_months;
    //   //  dd($diff_in_months);

    //   //  dd($countCasualafmnth);
    //   $leavetaken = DB::table('leaveapprove')
    //     ->where('year', '2023')->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');
    //   // $myapplyleaveDatas  = DB::table('applyleaves')
    //   //   ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
    //   //   ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
    //   //   ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
    //   //   ->where('applyleaves.createdby', auth()->user()->teammember_id)
    //   //   ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->latest()->get();



    //   $commonQuery = DB::table('applyleaves')
    //     ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
    //     ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
    //     ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
    //     ->where('applyleaves.createdby', auth()->user()->teammember_id)
    //     ->select('applyleaves.*', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name');

    //   $myapplyleaveDatasbefore = (clone $commonQuery)
    //     ->whereDate('applyleaves.created_at', '<', $permotioncheck->created_at)
    //     ->addSelect('teammembers.staffcode')
    //     ->get();

    //   $myapplyleaveDatasafter = (clone $commonQuery)
    //     ->leftJoin('teamrolehistory as createdby_history', 'createdby_history.teammember_id', '=', 'teammembers.id')
    //     ->whereDate('applyleaves.created_at', '>', $permotioncheck->created_at)
    //     ->addSelect('createdby_history.newstaff_code')
    //     ->get();
    //   $myapplyleaveDatas = $myapplyleaveDatasafter->merge($myapplyleaveDatasbefore);





    //   $teamapplyleaveDatas  = DB::table('applyleaves')
    //     ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
    //     ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
    //     ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
    //     ->where('applyleaves.approver', auth()->user()->teammember_id)
    //     ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->get();

    //   $hasPendingRequests = $teamapplyleaveDatas->contains('status', 0);


    //   $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
    //   $attendance = DB::table('attendances')
    //     ->where('employee_name', auth()->user()->teammember_id)
    //     ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
    //     ->get();

    //   $clInAttendance = 0;
    //   $slInAttendance = 0;
    //   //dd($attendance);
    //   foreach ($attendance as $item) {
    //     foreach ($columns as $column) {
    //       if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
    //         $clInAttendance++;
    //       }
    //       if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
    //         $slInAttendance++;
    //       }
    //     }
    //   }

    //   //Aproved leave jan to dec 
    //   $currentYear = date('Y');
    //   $approvedleavesvalue = DB::table('applyleaves')
    //     ->where('createdby', auth()->user()->teammember_id)
    //     ->where('status', 1)
    //     ->whereYear('from',  $currentYear)
    //     ->get();

    //   $leaveDurations = [];
    //   foreach ($approvedleavesvalue as $approvedleavesvalues) {
    //     $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
    //     $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

    //     $diff_in_days = $to->diffInDays($from) + 1;

    //     $holidaycount = DB::table('holidays')
    //       ->where('startdate', '>=', $approvedleavesvalues->from)
    //       ->where('enddate', '<=', $approvedleavesvalues->to)
    //       ->count();

    //     $leaveDurationcount = $diff_in_days - $holidaycount;
    //     $leaveDurations[] = $leaveDurationcount;
    //   }

    //   $approvedleavesvaluecount = array_sum($leaveDurations);
    //   // dd($approvedleavesvaluecount);
    //   //Aproved leave jan to dec end hare 

    //   // dd($applyleaveDatas);
    //   return view('backEnd.applyleave.index', compact('countCasualafmnth', 'leavetaken', 'teammonthcount', 'totalcountCasual', 'myapplyleaveDatas', 'teamapplyleaveDatas', 'birthday', 'countbirthday', 'Casual', 'Sick', 'countSick', 'countCasual', 'clInAttendance', 'slInAttendance', 'approvedleavesvaluecount', 'hasPendingRequests'));
    // } 
    else {
      $appliedSick = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Sick->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countSick = 0;
      $datess = [];
      $hdatess = [];
      foreach ($appliedSick as $sickLeave) {
        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();


        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $datess = array_unique($datess);
      }
      $countSick = count(array_diff($datess, $hdatess));


      $appliedCasual = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $countCasual = 0;
      $casualDates = [];
      foreach ($appliedCasual as $CasualLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $casualDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $casualDates = array_unique($casualDates);
      }
      $countCasual = count(array_diff($casualDates, $hdatess));

      $appliedCasualafmnth = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $Casual->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->where('created_at', '>', Carbon::createFromFormat('Y-m-d', $casualteam->joining_date)->addDays(90))
        ->get();

      $countCasualafmnth = 0;
      $CasualafmnthDates = [];
      foreach ($appliedCasualafmnth as $CasualafmnthLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualafmnthLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $CasualafmnthDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $CasualafmnthDates = array_unique($CasualafmnthDates);
      }
      $countCasualafmnth = count(array_diff($CasualafmnthDates, $hdatess));

      $appliedbirthday = DB::table('applyleaves')
        ->where('status', '!=', '2')
        ->where('leavetype', $birthday->id)
        ->where('createdby', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();
      $countbirthday = 0;
      $birthdayDates = [];
      foreach ($appliedbirthday as $birthdayLeave) {

        $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->from);
        $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $birthdayLeave->to);
        $period = CarbonPeriod::create($fromDate, $toDate);


        foreach ($period as $date) {
          $birthdayDates[] = $date->format('Y-m-d');
        }

        $getholidays = DB::table('holidays')->get();

        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }
        $birthdayDates = array_unique($birthdayDates);
      }
      $countbirthday = count(array_diff($birthdayDates, $hdatess));

      //dd($diff_in_months);
      $totalcountCasual = $Casual->noofdays * $diff_in_months;
      //  dd($diff_in_months);

      //  dd($countCasualafmnth);
      $leavetaken = DB::table('leaveapprove')
        ->where('year', '2023')->where('teammemberid', auth()->user()->teammember_id)->sum('totaldays');
      $myapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftJoin('teamrolehistory', function ($join) {
          $join->on('teamrolehistory.teammember_id', '=', 'teammembers.id')
            ->on('teamrolehistory.created_at', '<', 'applyleaves.created_at');
        })
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.createdby', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teamrolehistory.newstaff_code', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->latest()->get();


      $teamapplyleaveDatas  = DB::table('applyleaves')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('applyleaves.approver', auth()->user()->teammember_id)
        ->select('applyleaves.*', 'teammembers.team_member', 'teammembers.staffcode', 'roles.rolename', 'leavetypes.name')->get();

      $hasPendingRequests = $teamapplyleaveDatas->contains('status', 0);


      $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
      $attendance = DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
        ->get();

      $clInAttendance = 0;
      $slInAttendance = 0;
      //dd($attendance);
      foreach ($attendance as $item) {
        foreach ($columns as $column) {
          if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
            $clInAttendance++;
          }
          if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
            $slInAttendance++;
          }
        }
      }

      //Aproved leave jan to dec 
      $currentYear = date('Y');
      $approvedleavesvalue = DB::table('applyleaves')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 1)
        ->whereYear('from',  $currentYear)
        ->get();

      $leaveDurations = [];
      foreach ($approvedleavesvalue as $approvedleavesvalues) {
        $to = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $approvedleavesvalues->from);

        $diff_in_days = $to->diffInDays($from) + 1;

        $holidaycount = DB::table('holidays')
          ->where('startdate', '>=', $approvedleavesvalues->from)
          ->where('enddate', '<=', $approvedleavesvalues->to)
          ->count();

        $leaveDurationcount = $diff_in_days - $holidaycount;
        $leaveDurations[] = $leaveDurationcount;
      }

      $approvedleavesvaluecount = array_sum($leaveDurations);
      // dd($approvedleavesvaluecount);
      //Aproved leave jan to dec end hare 

      // dd($applyleaveDatas);
      return view('backEnd.applyleave.index', compact('countCasualafmnth', 'leavetaken', 'teammonthcount', 'totalcountCasual', 'myapplyleaveDatas', 'teamapplyleaveDatas', 'birthday', 'countbirthday', 'Casual', 'Sick', 'countSick', 'countCasual', 'clInAttendance', 'slInAttendance', 'approvedleavesvaluecount', 'hasPendingRequests'));
    }
  }






################################################################################################################################
app\Http\Controllers\ApplyleaveController.php

  public function examleaverequestlist()
  {

    $permotioncheck = DB::table('teamrolehistory')
      ->where('teammember_id', auth()->user()->teammember_id)->first();

    if (auth()->user()->role_id == 11) {
      $timesheetrequestsDatas = DB::table('leaverequest')
        ->leftjoin('teammembers', 'teammembers.id', 'leaverequest.approver')
        ->leftjoin('teammembers as createdby', 'createdby.id', 'leaverequest.createdby')
        ->leftjoin('applyleaves', 'applyleaves.id', 'leaverequest.applyleaveid')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        // ->where('createdby.id', auth()->user()->teammember_id)
        ->select(
          'leaverequest.*',
          'teammembers.team_member',
          'teammembers.staffcode',
          'applyleaves.leavetype',
          'leavetypes.name',
          'createdby.team_member as createdbyauth',
          'createdby.staffcode as teamstaffcode'
        )->get();

      $hasPendingRequests = $timesheetrequestsDatas->contains('status', 0);

      return view('backEnd.applyleave.adminrevertleave', compact(
        'timesheetrequestsDatas',
        'hasPendingRequests'

      ));
    } elseif ($permotioncheck && auth()->user()->role_id == 13) {
      $timesheetrequestsDatas = DB::table('leaverequest')
        ->leftjoin('teammembers', 'teammembers.id', 'leaverequest.approver')
        ->leftjoin('teammembers as createdby', 'createdby.id', 'leaverequest.createdby')
        ->leftJoin('teamrolehistory as createdby_history', 'createdby_history.teammember_id', '=', 'createdby.id')
        ->leftjoin('applyleaves', 'applyleaves.id', 'leaverequest.applyleaveid')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->where('createdby.id', auth()->user()->teammember_id)
        ->select(
          'leaverequest.*',
          'teammembers.team_member',
          'teammembers.staffcode',
          'applyleaves.leavetype',
          'leavetypes.name',
          'createdby.team_member as createdbyauth',
          'createdby.staffcode as teamstaffcode',
          'createdby_history.newstaff_code'
        )->get();

      $myteamtimesheetrequestsDatas = DB::table('leaverequest')
        ->leftjoin('teammembers', 'teammembers.id', 'leaverequest.approver')
        ->leftjoin('teammembers as createdby', 'createdby.id', 'leaverequest.createdby')
        ->leftjoin('applyleaves', 'applyleaves.id', 'leaverequest.applyleaveid')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->where('leaverequest.approver', auth()->user()->teammember_id)
        ->select(
          'leaverequest.*',
          'teammembers.team_member',
          'teammembers.staffcode',
          'applyleaves.leavetype',
          'leavetypes.name',
          'createdby.team_member as createdbyauth',
          'createdby.staffcode as teamstaffcode'
        )->get();

      $hasPendingRequests = $myteamtimesheetrequestsDatas->contains('status', 0);

      return view('backEnd.applyleave.examrequestlist', compact('timesheetrequestsDatas', 'myteamtimesheetrequestsDatas', 'hasPendingRequests'));
    } else {

      // die;

      $timesheetrequestsDatas = DB::table('leaverequest')
        ->leftjoin('teammembers', 'teammembers.id', 'leaverequest.approver')
        ->leftjoin('teammembers as createdby', 'createdby.id', 'leaverequest.createdby')
        ->leftJoin('teamrolehistory as createdby_history', 'createdby_history.teammember_id', '=', 'createdby.id')
        ->leftjoin('applyleaves', 'applyleaves.id', 'leaverequest.applyleaveid')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->where('createdby.id', auth()->user()->teammember_id)
        ->select(
          'leaverequest.*',
          'teammembers.team_member',
          'teammembers.staffcode',
          'applyleaves.leavetype',
          'leavetypes.name',
          'createdby.team_member as createdbyauth',
          'createdby.staffcode as teamstaffcode',
          'createdby_history.newstaff_code',
        )->get();


      $myteamtimesheetrequestsDatas = DB::table('leaverequest')
        ->leftjoin('teammembers', 'teammembers.id', 'leaverequest.approver')
        ->leftjoin('teammembers as createdby', 'createdby.id', 'leaverequest.createdby')
        ->leftjoin('applyleaves', 'applyleaves.id', 'leaverequest.applyleaveid')
        ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
        ->where('leaverequest.approver', auth()->user()->teammember_id)
        ->select(
          'leaverequest.*',
          'teammembers.team_member',
          'teammembers.staffcode',
          'applyleaves.leavetype',
          'leavetypes.name',
          'createdby.team_member as createdbyauth',
          'createdby.staffcode as teamstaffcode'
        )->get();

      $hasPendingRequests = $myteamtimesheetrequestsDatas->contains('status', 0);

      return view('backEnd.applyleave.examrequestlist', compact('timesheetrequestsDatas', 'myteamtimesheetrequestsDatas', 'hasPendingRequests'));
    }
  }




################################################################################################################################
resources\views\backEnd\timesheet\index.blade.php


                                @foreach ($timesheetData as $timesheetDatas)
                                    <tr>
                                        @php

                                            $timeid = DB::table('timesheetusers')
                                                ->where('timesheetusers.id', $timesheetDatas->id)
                                                ->first();

                                            // $client_id = DB::table('timesheetusers')
                                            //     ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
                                            //     ->leftjoin(
                                            //         'assignmentbudgetings',
                                            //         'assignmentbudgetings.assignment_id',
                                            //         'timesheetusers.assignment_id',
                                            //     )
                                            //     ->leftjoin(
                                            //         'assignments',
                                            //         'assignments.id',
                                            //         'timesheetusers.assignment_id',
                                            //     )
                                            //     ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.partner')
                                            //     ->leftJoin('teamrolehistory', function ($join) {
                                            //         $join
                                            //             ->on('teamrolehistory.teammember_id', '=', 'teammembers.id')
                                            //             ->on(
                                            //                 'teamrolehistory.created_at',
                                            //                 '<',
                                            //                 'timesheetusers.created_at',
                                            //             );
                                            //     })
                                            //     ->where('timesheetusers.id', $timesheetDatas->id)
                                            //     ->select(
                                            //         'clients.client_name',
                                            //         'clients.client_code',
                                            //         'timesheetusers.hour',
                                            //         'timesheetusers.location',
                                            //         'timesheetusers.status',
                                            //         'assignments.assignment_name',
                                            //         'billable_status',
                                            //         'workitem',
                                            //         'teammembers.team_member',
                                            //         'teammembers.staffcode',
                                            //         'teamrolehistory.newstaff_code',
                                            //         'assignmentbudgetings.assignmentname',
                                            //         'assignmentbudgetings.assignmentgenerate_id',
                                            //     )
                                            //     ->first();

                                            $client_id = DB::table('timesheetusers')
                                                ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
                                                ->leftjoin(
                                                    'assignmentbudgetings',
                                                    'assignmentbudgetings.assignment_id',
                                                    'timesheetusers.assignment_id',
                                                )
                                                ->leftjoin(
                                                    'assignments',
                                                    'assignments.id',
                                                    'timesheetusers.assignment_id',
                                                )
                                                ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.partner')
                                                ->where('timesheetusers.id', $timesheetDatas->id)
                                                ->select(
                                                    'clients.client_name',
                                                    'clients.client_code',
                                                    'timesheetusers.hour',
                                                    'timesheetusers.location',
                                                    'timesheetusers.status',
                                                    'assignments.assignment_name',
                                                    'billable_status',
                                                    'workitem',
                                                    'teammembers.team_member',
                                                    'teammembers.staffcode',
                                                    'assignmentbudgetings.assignmentname',
                                                    'assignmentbudgetings.assignmentgenerate_id',
                                                    'assignmentbudgetings.created_at',
                                                )
                                                ->first();
                                            if (auth()->user()->role_id == 13 || auth()->user()->role_id == 11) {
                                                $permotioncheck = DB::table('teamrolehistory')
                                                    ->where('teammember_id', auth()->user()->teammember_id)
                                                    ->first();
                                                // dd($permotioncheck);
                                                //shshid client
                                                $datadate = Carbon\Carbon::createFromFormat(
                                                    'Y-m-d H:i:s',
                                                    $client_id->created_at,
                                                );

                                                $permotiondate = null;
                                                if ($permotioncheck) {
                                                    $permotiondate = Carbon\Carbon::createFromFormat(
                                                        'Y-m-d H:i:s',
                                                        $permotioncheck->created_at,
                                                    );
                                                }
                                            } else {
                                                $permotioncheck = null;
                                            }

                                            $total = DB::table('timesheetusers')

                                                ->where('timesheetusers.timesheetid', $timesheetDatas->timesheetid)
                                                ->sum('hour');
                                            //	dd($total);
                                            $dates = date('l', strtotime($timesheetDatas->date));

                                        @endphp
                                        <td style="display: none;">{{ $timesheetDatas->id }}</td>
                                        <td>
                                            @if ($client_id->status == 0)
                                                <span class="badge badge-pill badge-warning">saved</span>
                                            @else
                                                <span class="badge badge-pill badge-danger">submit</span>
                                            @endif
                                        </td>

                                        @php

                                            $date = $timesheetDatas->date;

                                            $leaves = DB::table('applyleaves')
                                                ->where('applyleaves.createdby', auth()->user()->teammember_id)
                                                ->where('status', '!=', 2)
                                                ->select('applyleaves.from', 'applyleaves.to')
                                                ->get();

                                            $leavesWithinRange = $leaves->filter(function ($leave) use ($date) {
                                                return $leave->from <= $date && $leave->to >= $date;
                                            });

                                            //dd($leavesWithinRange);

                                        @endphp

                                        <td> <span style="display: none;">
                                                {{ date('Y-m-d', strtotime($timesheetDatas->date)) }}</span>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                        </td>

                                        <td>
                                            @if ($timesheetDatas->date != null)
                                                {{ $dates ?? '' }}
                                            @endif
                                        </td>


                                        <td>
                                            {{ $client_id->client_name ?? '' }}
                                            @if (count((array) $client_id->client_name) > 1)
                                                ,
                                            @endif
                                        </td>
                                        <td>
                                            {{ $client_id->client_code ?? '' }}
                                            @if (count((array) $client_id->client_code) > 1)
                                                ,
                                            @endif
                                        </td>

                                        <td>

                                            {{ $client_id->assignment_name ?? '' }} (
                                            {{ $client_id->assignmentgenerate_id ?? '' }})
                                            @if ($timesheetDatas->assignmentname != null)
                                                ({{ $timesheetDatas->assignmentname ?? '' }})
                                            @endif
                                            @if (count((array) $client_id->assignment_name) > 1)
                                                ,
                                            @endif
                                        </td>
                                        <td>
                                            {{ $client_id->workitem ?? '' }}
                                            @if (count((array) $client_id->workitem) > 1)
                                                ,
                                            @endif
                                        </td>

                                        <td>
                                            {{ $client_id->location ?? '' }}
                                            @if (count((array) $client_id->location) > 1)
                                                ,
                                            @endif
                                        </td>

                                        {{-- <td>
                                            {{ $client_id->team_member ?? '' }} (
                                            {{ $client_id->newstaff_code ?? ($client_id->staffcode ?? '') }})
                                            @if (count((array) $client_id->team_member) > 1)
                                                ,
                                            @endif
                                        </td> --}}





                                        <td>
                                            {{ $client_id->team_member ?? '' }}
                                            @if ($permotioncheck && $datadate->greaterThan($permotiondate))
                                                ( {{ $permotioncheck->newstaff_code }})
                                            @else
                                                ( {{ $client_id->staffcode ?? '' }})
                                            @endif
                                            @if (count((array) $client_id->team_member) > 1)
                                                ,
                                            @endif
                                        </td>



                                        <td>
                                            {{ $client_id->hour ?? '' }}
                                            @if (count((array) $client_id->hour) > 1)
                                                ,
                                            @endif
                                        </td>
                                        <td>{{ $total }}</td>
                                        <td>
                                            @if ($client_id->status == 0)
                                                @if ($leavesWithinRange->isEmpty())
                                                    <a href="{{ url('/timesheet/destroy/' . $timesheetDatas->timesheetid) }}"
                                                        onclick="return confirm('Are you sure you want to delete this item?');"
                                                        class="btn btn-danger-soft btn-sm"><i
                                                            class="far fa-trash-alt"></i></a>
                                                @endif
                                            @else
                                                delete blocked
                                            @endif
                                        </td>
                                    </tr>
                                @endforeach
								

################################################################################################################################
app\Http\Controllers\TimesheetController.php


  public function timesheet_teamlist()
  {

    if (auth()->user()->role_id == 13) {
      // get all partner
      // dd('hi');
      $partner = Teammember::where('role_id', '=', 13)->where('status', '=', 1)->with('title')
        ->orderBy('team_member', 'asc')->get();

      $get_datess = DB::table('timesheetreport')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetreport.teamid')
        ->leftjoin('teammembers as partners', 'partners.id', 'timesheetreport.partnerid')
        ->where('timesheetreport.partnerid', auth()->user()->teammember_id)
        // ->whereJsonContains('timesheetreport.partnerid', auth()->user()->teammember_id)
        ->select('timesheetreport.*', 'teammembers.team_member', 'teammembers.staffcode', 'partners.team_member as partnername')
        ->latest()->get();

      // For permission
      $permissiontimesheet = DB::table('timesheetreport')
        ->where('timesheetreport.teamid', auth()->user()->teammember_id)
        ->first();
      // dd($get_datess);
    } else {

      $partner = Teammember::where('role_id', '=', 13)->where('status', '=', 1)->with('title')
        ->orderBy('team_member', 'asc')->get();
      $get_datess = DB::table('timesheetreport')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetreport.teamid')
        ->leftJoin('teamrolehistory', function ($join) {
          $join->on('teamrolehistory.teammember_id', '=', 'teammembers.id')
            ->on('teamrolehistory.created_at', '<', 'timesheetreport.created_at');
        })
        ->leftjoin('teammembers as partners', 'partners.id', 'timesheetreport.partnerid')
        ->where('timesheetreport.teamid', auth()->user()->teammember_id)
        // ->select('timesheetreport.*', 'teammembers.team_member', 'teammembers.staffcode', 'partners.team_member as partnername')
        ->select('timesheetreport.*', 'teamrolehistory.newstaff_code', 'teammembers.team_member', 'partners.team_member as partnername', 'teammembers.staffcode')
        ->latest()->get();

      // For permission working 
      $permissiontimesheet = DB::table('timesheetreport')
        ->where('timesheetreport.teamid', auth()->user()->teammember_id)
        ->first();
    }

    $groupedData = $get_datess->groupBy(function ($item) {
      return $item->team_member . '|' . $item->week;
    })->map(function ($group) {
      $firstItem = $group->first();

      return (object)[
        'id' => $firstItem->id,
        'teamid' => $firstItem->teamid,
        'week' => $firstItem->week,
        'totaldays' => $group->sum('totaldays'),
        'totaltime' => $group->sum('totaltime'),
        'startdate' => $firstItem->startdate,
        'enddate' => $firstItem->enddate,
        'partnername' => $firstItem->partnername,
        'created_at' => $firstItem->created_at,
        'team_member' => $firstItem->team_member,
        'partnerid' => $firstItem->partnerid,
        'staffcode' => $firstItem->newstaff_code ?? $firstItem->staffcode,
      ];
    });

    $get_date = collect($groupedData->values());


    return view('backEnd.timesheet.myteamindex', compact('get_date', 'partner', 'permissiontimesheet'));
  }
  
  


################################################################################################################################
app\Http\Controllers\PromotionandrejoiningController.php


    public function permotionandrejoinstore(Request $request)
    {
        // vishal agerwal promotion date 8-07-2024
        $checkrole = DB::table('teammembers')
            ->where('id', $request->employeeid)
            ->select('id', 'role_id', 'staffcode', 'staffcodenumber')
            ->first();

        $pormotioncheck = DB::table('teamrolehistory')
            ->where('teammember_id', $request->employeeid)
            ->first();

        if ($pormotioncheck) {
            $output = array('msg' => 'The user has already been promoted.');
            return back()->with('statuss', $output);
        }

        if ($checkrole->role_id != $request->designationtype) {
            if ($checkrole->role_id < $request->designationtype) {

                $role = '';
                if ($request->designationtype == 11) {
                    $role = "super admin";
                } elseif ($request->designationtype == 12) {
                    $role = "admin";
                } elseif ($request->designationtype == 13) {
                    $role = "partner";
                } elseif ($request->designationtype == 14) {
                    $role = "manager";
                } elseif ($request->designationtype == 15) {
                    $role = "staff";
                }
                $output = array('msg' => 'You can not pormote on this post "' . $role . '".');
                return back()->with('statuss', $output);
            }

            $maxStaffcodeTeammembers = DB::table('teammembers')
                ->where('role_id', $request->designationtype)
                ->max('staffcodenumber');

            $maxStaffcodeTeamRoleHistory = DB::table('teamrolehistory')
                ->where('roleid_new', $request->designationtype)
                ->max('new_staffcodenumber');

            $getlateststaffcode = max($maxStaffcodeTeammembers, $maxStaffcodeTeamRoleHistory);


            if ($request->designationtype == 13) {
                if ($getlateststaffcode == null) {
                    $newstaffcode = '10001';
                } else {
                    $newstaffcode = $getlateststaffcode + 1;
                }
                $newstaffcoderesult = 'P' . $newstaffcode;
                $staffcode = $newstaffcode;
            }
            if ($request->designationtype == 14) {
                if ($getlateststaffcode == null) {
                    $newstaffcode = '20001';
                } else {
                    $newstaffcode = $getlateststaffcode + 1;
                }
                $newstaffcoderesult = 'M' . $newstaffcode;
                $staffcode = $newstaffcode;
            }
            // dd($checkrole->role_id);
            DB::table('teammembers')
                ->where('id', $request->employeeid)
                ->update([
                    'role_id' => $request->designationtype,
                    'staffcodenumber' => $staffcode,
                ]);

            DB::table('users')
                ->where('teammember_id', $request->employeeid)
                ->update([
                    'role_id' => $request->designationtype,
                ]);

            DB::table('teamrolehistory')->insert([
                'teammember_id' => $request->employeeid,
                'roleid_old' => $checkrole->role_id,
                'roleid_new' => $request->designationtype,
                'oldstaff_code' =>  $checkrole->staffcode,
                'newstaff_code' => $newstaffcoderesult,
                'old_staffcodenumber' => $checkrole->staffcodenumber,
                'new_staffcodenumber' => $staffcode,
                //hare goes to pormotion date from form
                'promotion_date' => date('Y-m-d', strtotime($request->promotion_date)),
                //hare goes to created date 
                'promotioncreated' => now(),
                //hare goes to pormotion date from form becouse all condition apply on create column it is common column for pormotion and rejoining
                'created_at' => Carbon::createFromFormat('Y-m-d', $request->promotion_date)->toDateTimeString(),
                'updated_at' => now(),
            ]);
        } else {
            $role = '';
            if ($checkrole->role_id == 11) {
                $role = "super admin";
            } elseif ($checkrole->role_id == 12) {
                $role = "admin";
            } elseif ($checkrole->role_id == 13) {
                $role = "partner";
            } elseif ($checkrole->role_id == 14) {
                $role = "manager";
            } elseif ($checkrole->role_id == 15) {
                $role = "staff";
            }
            $output = array('msg' => 'You are already on this post "' . $role . '".');
            return back()->with('statuss', $output);
        }

        $output = array('msg' => 'Pormotion Successfully Done');
        return back()->with('success', $output);
    }
	
	


################################################################################################################################
app\Http\Controllers\PromotionandrejoiningController.php

    public function rejoinstore(Request $request)
    {
        $checkrole = DB::table('teammembers')
            ->where('id', $request->employeeid)
            ->select('id', 'role_id', 'staffcode', 'staffcodenumber')
            ->first();

        $rejoiningcheckanotherpost = DB::table('teamrolehistory')
            ->where('teammember_id', $request->employeeid)
            ->first();

        $rejoiningchecksamepost = DB::table('rejoiningsamepost')
            ->where('teammember_id', $request->employeeid)
            ->first();


        if ($rejoiningcheckanotherpost ||  $rejoiningchecksamepost) {
            $output = array('msg' => 'The user has already been rejoined.');
            return back()->with('statuss', $output);
        }

        // if user designation change then
        if ($checkrole && $request->employeeid && $request->rejoining_date && $request->designationtype) {

            if ($checkrole->role_id < $request->designationtype) {
                $role = '';
                if ($request->designationtype == 11) {
                    $role = "super admin";
                } elseif ($request->designationtype == 12) {
                    $role = "admin";
                } elseif ($request->designationtype == 13) {
                    $role = "partner";
                } elseif ($request->designationtype == 14) {
                    $role = "manager";
                } elseif ($request->designationtype == 15) {
                    $role = "staff";
                }
                $output = array('msg' => 'You can not rejoin on this post "' . $role . '".');
                return back()->with('statuss', $output);
            }

            if ($checkrole->role_id != $request->designationtype) {
                $maxStaffcodeTeammembers = DB::table('teammembers')
                    ->where('role_id', $request->designationtype)
                    ->max('staffcodenumber');

                $maxStaffcodeTeamRoleHistory = DB::table('teamrolehistory')
                    ->where('roleid_new', $request->designationtype)
                    ->max('new_staffcodenumber');

                $getlateststaffcode = max($maxStaffcodeTeammembers, $maxStaffcodeTeamRoleHistory);


                if ($request->designationtype == 13) {
                    if ($getlateststaffcode == null) {
                        $newstaffcode = '10001';
                    } else {
                        $newstaffcode = $getlateststaffcode + 1;
                    }
                    $newstaffcoderesult = 'P' . $newstaffcode;
                    $staffcode = $newstaffcode;
                }
                if ($request->designationtype == 14) {
                    if ($getlateststaffcode == null) {
                        $newstaffcode = '20001';
                    } else {
                        $newstaffcode = $getlateststaffcode + 1;
                    }
                    $newstaffcoderesult = 'M' . $newstaffcode;
                    $staffcode = $newstaffcode;
                }



                DB::table('teammembers')
                    ->where('id', $request->employeeid)
                    ->update([
                        'role_id' => $request->designationtype,
                        'staffcodenumber' => $staffcode,
                        'status' => 1,
                    ]);

                DB::table('users')
                    ->where('teammember_id', $request->employeeid)
                    ->update([
                        'role_id' => $request->designationtype,
                        'status' => 1,
                    ]);

                DB::table('teamrolehistory')->insert([
                    'teammember_id' => $request->employeeid,
                    'roleid_old' => $checkrole->role_id,
                    'roleid_new' => $request->designationtype,
                    'oldstaff_code' =>  $checkrole->staffcode,
                    'newstaff_code' => $newstaffcoderesult,
                    'old_staffcodenumber' => $checkrole->staffcodenumber,
                    'new_staffcodenumber' => $staffcode,
                    'rejoiningdate' => date('Y-m-d', strtotime($request->rejoining_date)),
                    //hare goes to created date 
                    'rejoiningcreated' => now(),
                    'rejointimesheetstatus' => 1,
                    //hare goes to rejoining date from form becouse all condition apply on create column it is common column for pormotion and rejoining
                    'created_at' => Carbon::createFromFormat('Y-m-d', $request->rejoining_date)->toDateTimeString(),
                    'updated_at' => now(),
                ]);
            } else {
                $role = '';
                if ($checkrole->role_id == 11) {
                    $role = "super admin";
                } elseif ($checkrole->role_id == 12) {
                    $role = "admin";
                } elseif ($checkrole->role_id == 13) {
                    $role = "partner";
                } elseif ($checkrole->role_id == 14) {
                    $role = "manager";
                } elseif ($checkrole->role_id == 15) {
                    $role = "staff";
                }
                $output = array('msg' => 'The User allready on this post.You can not select "' . $role . '".');
                return back()->with('statuss', $output);
            }
        }
        // if user designation not chnge
        else {

            DB::table('teammembers')
                ->where('id', $request->employeeid)
                ->update([
                    'status' => 1,
                ]);

            DB::table('users')
                ->where('teammember_id', $request->employeeid)
                ->update([
                    'status' => 1,
                ]);

            DB::table('rejoiningsamepost')->insert([
                'teammember_id' => $request->employeeid,
                'rejoiningdate' => date('Y-m-d', strtotime($request->rejoining_date)),
                'created_at' => now(),
                'updated_at' => now(),
            ]);
        }

        $output = array('msg' => 'Rejoining Successfully Done');
        return back()->with('success', $output);
    }



222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\index.blade.php


                                @foreach ($timesheetData as $timesheetDatas)
                                    <tr>
                                        @php

                                            $timeid = DB::table('timesheetusers')
                                                ->where('timesheetusers.id', $timesheetDatas->id)
                                                ->first();

                                            $client_id = DB::table('timesheetusers')
                                                ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
                                                ->leftjoin(
                                                    'assignmentbudgetings',
                                                    'assignmentbudgetings.assignment_id',
                                                    'timesheetusers.assignment_id',
                                                )
                                                ->leftjoin(
                                                    'assignments',
                                                    'assignments.id',
                                                    'timesheetusers.assignment_id',
                                                )
                                                ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.partner')
                                                ->where('timesheetusers.id', $timesheetDatas->id)
                                                ->select(
                                                    'clients.client_name',
                                                    'clients.client_code',
                                                    'timesheetusers.hour',
                                                    'timesheetusers.location',
                                                    'timesheetusers.status',
                                                    'assignments.assignment_name',
                                                    'billable_status',
                                                    'workitem',
                                                    'teammembers.team_member',
                                                    'teammembers.staffcode',
                                                    'assignmentbudgetings.assignmentname',
                                                    'assignmentbudgetings.assignmentgenerate_id',
                                                    'assignmentbudgetings.created_at',
                                                )
                                                ->first();

                                            $permotioncheck = null;
                                            $datadate = $client_id->created_at
                                                ? Carbon\Carbon::createFromFormat('Y-m-d H:i:s', $client_id->created_at)
                                                : null;
                                            $permotiondate = null;

                                            if (auth()->user()->role_id == 13 || auth()->user()->role_id == 11) {
                                                $permotioncheck = DB::table('teamrolehistory')
                                                    ->where('teammember_id', auth()->user()->teammember_id)
                                                    ->first();

                                                if ($permotioncheck) {
                                                    $permotiondate = Carbon\Carbon::createFromFormat(
                                                        'Y-m-d H:i:s',
                                                        $permotioncheck->created_at,
                                                    );
                                                }
                                            }

                                            $total = DB::table('timesheetusers')

                                                ->where('timesheetusers.timesheetid', $timesheetDatas->timesheetid)
                                                ->sum('hour');
                                            //	dd($total);
                                            $dates = date('l', strtotime($timesheetDatas->date));

                                        @endphp
                                        <td style="display: none;">{{ $timesheetDatas->id }}</td>
                                        <td>
                                            @if ($client_id->status == 0)
                                                <span class="badge badge-pill badge-warning">saved</span>
                                            @else
                                                <span class="badge badge-pill badge-danger">submit</span>
                                            @endif
                                        </td>

                                        @php

                                            $date = $timesheetDatas->date;

                                            $leaves = DB::table('applyleaves')
                                                ->where('applyleaves.createdby', auth()->user()->teammember_id)
                                                ->where('status', '!=', 2)
                                                ->select('applyleaves.from', 'applyleaves.to')
                                                ->get();

                                            $leavesWithinRange = $leaves->filter(function ($leave) use ($date) {
                                                return $leave->from <= $date && $leave->to >= $date;
                                            });

                                            //dd($leavesWithinRange);

                                        @endphp

                                        <td> <span style="display: none;">
                                                {{ date('Y-m-d', strtotime($timesheetDatas->date)) }}</span>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                        </td>

                                        <td>
                                            @if ($timesheetDatas->date != null)
                                                {{ $dates ?? '' }}
                                            @endif
                                        </td>


                                        <td>
                                            {{ $client_id->client_name ?? '' }}
                                            @if (count((array) $client_id->client_name) > 1)
                                                ,
                                            @endif
                                        </td>
                                        <td>
                                            {{ $client_id->client_code ?? '' }}
                                            @if (count((array) $client_id->client_code) > 1)
                                                ,
                                            @endif
                                        </td>

                                        <td>

                                            {{ $client_id->assignment_name ?? '' }} (
                                            {{ $client_id->assignmentgenerate_id ?? '' }})
                                            @if ($timesheetDatas->assignmentname != null)
                                                ({{ $timesheetDatas->assignmentname ?? '' }})
                                            @endif
                                            @if (count((array) $client_id->assignment_name) > 1)
                                                ,
                                            @endif
                                        </td>
                                        <td>
                                            {{ $client_id->workitem ?? '' }}
                                            @if (count((array) $client_id->workitem) > 1)
                                                ,
                                            @endif
                                        </td>

                                        <td>
                                            {{ $client_id->location ?? '' }}
                                            @if (count((array) $client_id->location) > 1)
                                                ,
                                            @endif
                                        </td>

                                        <td>
                                            {{ $client_id->team_member ?? '' }}
                                            @if ($permotioncheck && $datadate && $datadate->greaterThan($permotiondate))
                                                ({{ $permotioncheck->newstaff_code }})
                                            @else
                                                ({{ $client_id->staffcode ?? '' }})
                                            @endif
                                            @if (count((array) $client_id->team_member) > 1)
                                                ,
                                            @endif
                                        </td>

                                        <td>
                                            {{ $client_id->hour ?? '' }}
                                            @if (count((array) $client_id->hour) > 1)
                                                ,
                                            @endif
                                        </td>
                                        <td>{{ $total }}</td>
                                        <td>
                                            @if ($client_id->status == 0)
                                                @if ($leavesWithinRange->isEmpty())
                                                    <a href="{{ url('/timesheet/destroy/' . $timesheetDatas->timesheetid) }}"
                                                        onclick="return confirm('Are you sure you want to delete this item?');"
                                                        class="btn btn-danger-soft btn-sm"><i
                                                            class="far fa-trash-alt"></i></a>
                                                @endif
                                            @else
                                                delete blocked
                                            @endif
                                        </td>
                                    </tr>
                                @endforeach
								
	

02-08-24 bugs updated on vsalocal,vsademo,vsalive
222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php

  public function store(Request $request)
  {

    $request->validate([
      'leavetype' => "required",
      'to' => "required",
      'from' => "required",
    ]);

    $skipaftertrue = false;
    $from = Carbon::createFromFormat('Y-m-d', $request->from);
    // $from = Carbon::createFromFormat('Y-m-d', '2024-03-11');
    $to = Carbon::createFromFormat('Y-m-d', $request->to ?? '');
    // software created date 
    $softwarermaked = Carbon::createFromFormat('Y-m-d', '2023-09-11');

    // timesheetreport latest submitted date 
    $latesttimesheetsubmitted = DB::table('timesheetreport')
      ->where('teamid', auth()->user()->teammember_id)
      ->latest()
      ->first();

    $pormotionandrejoiningdata = DB::table('teammembers')
      ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
      ->leftJoin('rejoiningsamepost', 'rejoiningsamepost.teammember_id', '=', 'teammembers.id')
      ->where('teammembers.id', auth()->user()->teammember_id)
      ->select(
        'teammembers.team_member',
        'teammembers.staffcode',
        'teammembers.joining_date',
        'teamrolehistory.newstaff_code',
        'teamrolehistory.rejoiningdate',
        'rejoiningsamepost.rejoiningdate as samepostrejoiningdate'
      )
      ->first();

    // $joining_date = $pormotionandrejoiningdata->joining_date ? Carbon::parse($pormotionandrejoiningdata->joining_date) : null;
    $rejoining_date = null;
    if ($pormotionandrejoiningdata) {
      $rejoining_date = $pormotionandrejoiningdata->rejoiningdate ?? $pormotionandrejoiningdata->samepostrejoiningdate;
      $rejoiningDateformate = $rejoining_date ? Carbon::parse($rejoining_date) : null;
    }
    // dd($rejoiningDateformate);
    if ($rejoiningDateformate && $from->lessThan($rejoiningDateformate)) {
      $output = ['msg' => 'You cannot apply leave before the rejoining date: ' . $rejoiningDateformate->format('d-m-Y')];
      return back()->with('statuss', $output);
    }

    // if ($joining_date && $from->lessThan($joining_date)) {
    //   $output = ['msg' => 'You cannot fill timesheet before the joining date: ' . $joining_date->format('d-m-Y')];
    //   return redirect('timesheet/mylist')->with('statuss', $output);
    // }

    // $latesttimesheetsubmittedformate = Carbon::createFromFormat('Y-m-d', $latesttimesheetsubmitted->enddate);
    $latesttimesheetsubmittedformate = null;
    if ($latesttimesheetsubmitted) {
      $latesttimesheetsubmittedformate = $latesttimesheetsubmitted->enddate
        ? Carbon::createFromFormat('Y-m-d', $latesttimesheetsubmitted->enddate)
        : null;
    }

    // Check if the from date is in the past
    if ($latesttimesheetsubmittedformate && $latesttimesheetsubmittedformate->greaterThan($from)) {

      // Check if the from date is in the past
      if ($softwarermaked->greaterThan($from)) {
        $output = ['msg' => 'You cannot apply leave before 11-09-2023'];
        return back()->with('statuss', $output);
      }

      $rejectedtimesheet = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 2)
        ->first();


      $rejectedtimesheetformate = null;
      if ($rejectedtimesheet) {
        $rejectedtimesheetformate = Carbon::createFromFormat('Y-m-d', $rejectedtimesheet->date);
      }

      if ($rejectedtimesheetformate && $rejectedtimesheetformate->isSameDay($from)) {

        // Update total hour
        $timesheetdelete = DB::table('timesheetusers')->where('timesheetid', $rejectedtimesheet->timesheetid)->first();
        if (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {

          $gettotalteamhour = DB::table('assignmentmappings')
            ->leftJoin(
              'assignmentteammappings',
              'assignmentteammappings.assignmentmapping_id',
              'assignmentmappings.id',
            )
            ->where(
              'assignmentmappings.assignmentgenerate_id',
              $timesheetdelete->assignmentgenerate_id
            )
            ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
            ->first();

          if ($gettotalteamhour) {
            // dd($gettotalteamhour);
            $gettotalteamhour = $gettotalteamhour->teamhour;
            $finalresult =  $gettotalteamhour - $timesheetdelete->hour;

            $totalteamhourupdate = DB::table('assignmentmappings')
              ->leftJoin(
                'assignmentteammappings',
                'assignmentteammappings.assignmentmapping_id',
                'assignmentmappings.id',
              )
              ->where(
                'assignmentmappings.assignmentgenerate_id',
                $timesheetdelete->assignmentgenerate_id
              )
              ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
              // ->get();
              ->update(['teamhour' =>  $finalresult]);
          }
        }

        if (auth()->user()->role_id == 13) {
          $assignmentdata = DB::table('assignmentmappings')
            ->where('assignmentgenerate_id', $timesheetdelete->assignmentgenerate_id)
            ->first();

          $finalresultleadpatner =  $assignmentdata->leadpartnerhour - $timesheetdelete->hour;
          $finalresultotherpatner =  $assignmentdata->otherpartnerhour - $timesheetdelete->hour;

          if ($assignmentdata->leadpartner == auth()->user()->teammember_id) {
            $update2 = DB::table('assignmentmappings')
              ->where('assignmentgenerate_id', $timesheetdelete->assignmentgenerate_id)
              ->where('leadpartner', auth()->user()->teammember_id)
              ->update(['leadpartnerhour' => $finalresultleadpatner]);
          }
          if ($assignmentdata->otherpartner == auth()->user()->teammember_id) {
            $update2 = DB::table('assignmentmappings')
              ->where('assignmentgenerate_id', $timesheetdelete->assignmentgenerate_id)
              ->where('otherpartner', auth()->user()->teammember_id)
              ->update(['otherpartnerhour' => $finalresultotherpatner]);
          }
        }
        // Update total hour end 

        DB::table('timesheets')->where('id', $rejectedtimesheet->timesheetid)->update([
          'status'   => 3,
        ]);

        if ($request->leavetype == 9) {
          DB::table('timesheetusers')->where('id', $rejectedtimesheet->id)->update([
            'status'   => 3,
            'client_id'     =>    134,
            'workitem'     =>     $request->reasonleave,
            'assignmentgenerate_id' => null,
            'location'     =>     '',
            'hour'     =>     0,
            'totalhour' =>      0,
            'assignment_id'     =>     215,
            'partner'     =>     887,
          ]);
        } else {
          DB::table('timesheetusers')->where('id', $rejectedtimesheet->id)->update([
            'status'   => 3,
            'client_id'     =>    134,
            'assignmentgenerate_id' => null,
            'workitem'     =>     $request->reasonleave,
            'location'     =>     '',
            'hour'     =>     0,
            'totalhour' =>      0,
            'assignment_id'     =>     214,
            'partner'     =>     887,
          ]);
        }

        $id = DB::table('applyleaves')->insertGetId([
          'leavetype'         =>     $request->leavetype,
          'type'         =>     $request->type,
          'examtype'         =>     $request->examtype,
          'otherexam'         =>     $request->otherexam,
          'from'         =>     $request->from,
          'to'         =>     $request->to,
          'reasonleave'         =>     $request->reasonleave,
          'approver'         =>     $request->approver,
          'status'         =>    1,
          'createdby'         =>     auth()->user()->teammember_id,
          'created_at'          =>    date('Y-m-d H:i:s'),
          'updated_at'              =>    date('Y-m-d H:i:s'),
        ]);

        $output = array('msg' => 'Create Successfully');
        return back()->with('success', $output);
      } else {
        $output = ['msg' => 'You cannot apply leave before Submitted timesheet date'];
        return back()->with('statuss', $output);
      }
    }

    if ($latesttimesheetsubmittedformate == null) {
      // Check if the from date is in the past
      if ($softwarermaked->greaterThan($from)) {
        $output = ['msg' => 'You cannot apply leave before 11-09-2023'];
        return back()->with('statuss', $output);
      }
    }

    if ($from->equalTo($to) && $from->dayOfWeek === Carbon::SUNDAY) {
      $output = ['msg' => 'You cannot apply leave for Sunday'];
      return back()->with('statuss', $output);
    }
    // timesheetcheck 
    $timesheetcheck = DB::table('timesheets')
      ->where('created_by', auth()->user()->teammember_id)
      ->select('date')
      ->get();
    if (count($timesheetcheck) != 0) {
      foreach ($timesheetcheck as $timesheetchecks) {
        $leaveDates = CarbonPeriod::create(
          date('Y-m-d', strtotime($request->from)),
          date('Y-m-d', strtotime($request->to))
        );

        foreach ($leaveDates as $leaveDate) {
          if ($leaveDate->format('Y-m-d') == $timesheetchecks->date) {
            $output = array('msg' => 'You Have already filled timesheet for the Day (' . date('d-m-Y', strtotime($leaveDate)) . ')');
            return back()->with('statuss', $output);
          }
        }
      }
    }
    //dd('hi');

    //duplicate leave check
    $leaves = DB::table('applyleaves')
      ->where('applyleaves.createdby', auth()->user()->teammember_id)
      ->where('status', '!=', 2)
      ->select('applyleaves.from', 'applyleaves.to')
      ->get();

    $leaveDates = [];
    foreach ($leaves as $leave) {
      $days = CarbonPeriod::create(
        date('Y-m-d', strtotime($leave->from)),
        date('Y-m-d', strtotime($leave->to))
      );

      foreach ($days as $day) {
        $leaveDates[] = $day->format('Y-m-d');
      }
    }

    $currentDay = date('Y-m-d', strtotime($request->from));
    $lastDay = date('Y-m-d', strtotime($request->to));

    if (count($leaves) != 0) {
      foreach ($leaveDates as $leaveDate) {
        if ($leaveDate >= $currentDay && $leaveDate <= $lastDay) {
          $output = array('msg' => 'You Have Leave for the Day (' . date('d-m-Y', strtotime($leaveDate)) . ')');
          return back()->with('statuss', $output);
        }
      }
    }

    $currentdate = date('Y-m-d');
    $currentYear = date('Y');
    $financialYearStart = $currentYear . '-04-01';
    $financialYearEnd = ($currentYear + 1) . '-03-31';

    $teammember = DB::table('teammembers')->where('id', auth()->user()->teammember_id)->first();


    try {

      $currentDate = Carbon::now();
      $day = $currentDate->day;
      $currentYear = $currentDate->year;



      //birthday-festival leave 
      if ($request->leavetype == 8) {
        $to = Carbon::createFromFormat('Y-m-d', $request->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $request->from);
        $diff_in_days = $to->diffInDays($from) + 1;


        $financialYearStart = $currentYear . '-04-01';
        $financialYearEnd = ($currentYear + 1) . '-03-31';

        $count = DB::table('applyleaves')
          ->where('status', '!=', '2')
          ->where('leavetype', $request->leavetype)
          ->where('createdby', auth()->user()->teammember_id)
          ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
          ->first();


        $teammember = DB::table('teammembers')
          ->where('id', auth()->user()->teammember_id)
          ->first();

        $requestedDate = date('F d', strtotime($request->to));
        $birthdayDate = date('F d', strtotime($teammember->dateofbirth));

        if ($request->type == 0) {
          if ($request->to != $request->from) {

            $output = ['msg' => 'You can take only one day birthday leave'];
            return back()->with('success', $output);
          }
          if ($requestedDate != $birthdayDate) {

            $output = ['msg' => 'Your request for the birthday date is wrong'];
            return back()->with('success', $output);
          }
          if ($diff_in_days < 2 && $count != null) {
            $output = ['msg' => 'You have already taken a birthday leave'];
            return back()->with('success', $output);
          }
        } elseif ($request->type == 1) {
          if ($diff_in_days < 2) {
            if ($count != null) {
              $output = ['msg' => 'You have already taken a festival leave'];
              return back()->with('success', $output);
            }
          } else {
            $output = ['msg' => 'You can take only one day festival leave'];
            return back()->with('success', $output);
          }
        }


        $columnMappings = [
          '26' => 'twentysix',
          '27' => 'twentyseven',
          '28' => 'twentyeight',
          '29' => 'twentynine',
          '30' => 'thirty',
          '31' => 'thirtyone',
          '01' => 'one',
          '02' => 'two',
          '03' => 'three',
          '04' => 'four',
          '05' => 'five',
          '06' => 'six',
          '07' => 'seven',
          '08' => 'eight',
          '09' => 'nine',
          '10' => 'ten',
          '11' => 'eleven',
          '12' => 'twelve',
          '13' => 'thirteen',
          '14' => 'fourteen',
          '15' => 'fifteen',
          '16' => 'sixteen',
          '17' => 'seventeen',
          '18' => 'eighteen',
          '19' => 'ninghteen',
          '20' => 'twenty',
          '21' => 'twentyone',
          '22' => 'twentytwo',
          '23' => 'twentythree',
          '24' => 'twentyfour',
          '25' => 'twentyfive',
        ];

        $requestedDay = date('d', strtotime($request->to));
        $requestedDay = date('d', strtotime($request->to));
        $requestedMonth = $from->format('F');
        if (isset($columnMappings[$requestedDay])) {
          $columnName = $columnMappings[$requestedDay];
          if (in_array($requestedDay, ['26', '27', '28', '29', '30', '31'])) {
            $requestedMonth = $from->copy()->addMonth()->format('F');
          }
          DB::table('attendances')
            ->updateOrInsert(
              [
                'employee_name' => auth()->user()->teammember_id,
                'month' => $requestedMonth
              ],
              [
                $columnName => 'BL/C',
                'birthday_religious' => DB::raw('COALESCE(birthday_religious, 0) + 1'),
                'created_at' => now(),
                'updated_at' => now()
              ],
              [
                'created_at' => now()
              ]
            );
        }
      } elseif ($request->leavetype == 9) {



        $to = Carbon::createFromFormat('Y-m-d', $request->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $request->from);
        $requestdays = $to->diffInDays($from) + 1;



        $period = CarbonPeriod::create($request->from, $request->to);
        $datess = [];
        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');

          //  dd($date->format('Y-m-d'));
          $id = DB::table('timesheets')->insertGetId(
            [
              'created_by' => auth()->user()->teammember_id,
              'month'     =>     date('F', strtotime($date->format('Y-m-d'))),
              'date'     =>    $date->format('Y-m-d'),
              'created_at'          =>     date('Y-m-d H:i:s'),
            ]
          );
          $a = DB::table('timesheetusers')->insert([
            'date'     =>    $date->format('Y-m-d'),
            'client_id'     =>    134,
            'workitem'     =>     $request->reasonleave,
            'location'     =>     '',
            //   'billable_status'     =>     $request->billable_status[$i],
            'timesheetid'     =>     $id,
            'date'     =>    $date->format('Y-m-d'),
            'hour'     =>     0,
            'totalhour' =>      0,
            'assignment_id'     =>     215,
            'partner'     =>     887,
            // adding approver in patner section 
            // 'partner'     =>     $request->approver,
            'createdby' => auth()->user()->teammember_id,
            'created_at'          =>     date('Y-m-d H:i:s'),
            'updated_at'              =>    date('Y-m-d H:i:s'),
          ]);
        }


        $getholidays = DB::table('holidays')->where('startdate', '>=', $request->from)
          ->where('enddate', '<=', $request->to)->select('startdate')->get();



        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }


        $cl_leave = array_diff($datess, $hdatess);


        $cl_leave_total = count($cl_leave);

        $lstatus = "CL/C";

        if ($teammember->joining_date < $financialYearStart) {

          $startDate = \Carbon\Carbon::createFromFormat('Y-m-d', $financialYearStart);
        } else {

          $startDate = \Carbon\Carbon::createFromFormat('Y-m-d', $teammember->joining_date);
        }




        $diff_in_months = $startDate->diffInMonths($currentdate) + 1;


        $totalcountCasual = 1.5 * $diff_in_months;
        if (\Carbon\Carbon::parse($teammember->joining_date)->diffInDays($currentdate) <= 90) {
          $totalcountCasual = 0;
        }
        $teamdate = \Carbon\Carbon::createFromFormat('Y-m-d', $teammember->joining_date);
        $teammonthcount = $teamdate->diffInMonths($currentdate) + 1;


        $columnMappings = [
          '26' => 'twentysix',
          '27' => 'twentyseven',
          '28' => 'twentyeight',
          '29' => 'twentynine',
          '30' => 'thirty',
          '31' => 'thirtyone',
          '01' => 'one',
          '02' => 'two',
          '03' => 'three',
          '04' => 'four',
          '05' => 'five',
          '06' => 'six',
          '07' => 'seven',
          '08' => 'eight',
          '09' => 'nine',
          '10' => 'ten',
          '11' => 'eleven',
          '12' => 'twelve',
          '13' => 'thirteen',
          '14' => 'fourteen',
          '15' => 'fifteen',
          '16' => 'sixteen',
          '17' => 'seventeen',
          '18' => 'eighteen',
          '19' => 'ninghteen',
          '20' => 'twenty',
          '21' => 'twentyone',
          '22' => 'twentytwo',
          '23' => 'twentythree',
          '24' => 'twentyfour',
          '25' => 'twentyfive',
        ];

        foreach ($cl_leave as $requestedDate) {
          $day = date('d', strtotime($requestedDate));
          $requestedMonth = date('F', strtotime($requestedDate));


          if ($day >= 26 && $day <= 31) {
            $requestedDateTime = new DateTime($requestedDate);



            $requestedDateTime->modify('first day of next month');
            $requestedMonth = $requestedDateTime->format('F');
          }

          $appliedCasual = DB::table('applyleaves')
            ->where('status', '!=', '2')
            ->where('leavetype', $request->leavetype)
            ->where('createdby', auth()->user()->teammember_id)
            ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
            ->get();
          //dd($appliedCasual);


          $countCasual = 0;
          $casualDates = [];
          $holidaydates = [];
          foreach ($appliedCasual as $CasualLeave) {

            $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
            $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
            $period = CarbonPeriod::create($fromDate, $toDate);



            foreach ($period as $date) {
              $casualDates[] = $date->format('Y-m-d');

              //dd($date->format('Y-m-d'));


            }

            $getholidays = DB::table('holidays')->get();


            foreach ($getholidays as $date) {
              $holidaydates[] = date('Y-m-d', strtotime($date->startdate));
            }
            $casualDates = array_unique($casualDates);
          }

          //    die;

          $attendanceRecord = DB::table('attendances')
            ->where('employee_name', auth()->user()->teammember_id)
            ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
            ->get();
          $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
          $clInAttendance = 0;
          foreach ($attendanceRecord as $item) {
            foreach ($columns as $column) {
              if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
                $clInAttendance++;
              }
            }
          }

          if ($clInAttendance >= $totalcountCasual || $totalcountCasual - $clInAttendance == 0.5) {

            $lstatus = 'LWP';
          }

          $attendanceUpdateData = [];
          $attendances = DB::table('attendances')->where('employee_name', auth()->user()->teammember_id)
            ->where('month', $requestedMonth)->first();

          if ($attendances == null) {
            if ($lstatus == 'CL/C') {
              $attendanceData = [
                'employee_name' => auth()->user()->teammember_id,
                'month' => $requestedMonth,
                'casual_leave' => 1,
                'created_at' => Carbon::now(),
              ];
            } else {
              $attendanceData = [
                'employee_name' => auth()->user()->teammember_id,
                'month' => $requestedMonth,
                'lwp' => 1,
                'created_at' => Carbon::now(),
              ];
            }


            DB::table('attendances')->insert($attendanceData);
          } else {
            if ($lstatus == 'CL/C') {
              DB::table('attendances')
                ->where('employee_name', auth()->user()->teammember_id)
                ->where('month', $requestedMonth)
                ->update(['casual_leave' => DB::raw('COALESCE(casual_leave, 0) + 1')]);
            } else {
              DB::table('attendances')
                ->where('employee_name', auth()->user()->teammember_id)
                ->where('month', $requestedMonth)
                ->update(['lwp' => DB::raw('COALESCE(lwp, 0) + 1')]);
            }
          }

          $column = $columnMappings[$day] ?? null;
          if ($column !== null) {
            $attendanceUpdateData[$column] = $lstatus;
          }


          //Update the attendance data for the current date
          DB::table('attendances')->where('employee_name', auth()->user()->teammember_id)
            ->where('month', $requestedMonth)->update($attendanceUpdateData);
        }
      }
      // Casual leave end

      elseif ($request->leavetype == 10) {

        $sick = DB::table('leavetypes')->where('name', 'Sick Leave')->where('year', $currentYear)->first();

        //      $availableleave = $sick->noofdays - $takeleavecount ;
        //  dd($availableleave);
        $to = Carbon::createFromFormat('Y-m-d', $request->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $request->from);
        $requestdays = $to->diffInDays($from) + 1;





        $period = CarbonPeriod::create($request->from, $request->to);
        $datess = [];
        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }
        // dd($datess);
        // Convert the period to an array of dates
        // $dates = $period->toArray();

        $getholidays = DB::table('holidays')->where('startdate', '>=', $request->from)
          ->where('enddate', '<=', $request->to)->select('startdate')->get();

        if (count($getholidays) != 0) {
          foreach ($getholidays as $date) {
            $hdatess[] = date('Y-m-d', strtotime($date->startdate));
          }
        } else {
          $hdatess[] = 0;
        }
        //dd($hdatess);

        $sl_leave = array_diff($datess, $hdatess);
        $sl_leave_total = count(array_diff($datess, $hdatess));

        $lstatus = "SL/C";


        $columnMappings = [
          '26' => 'twentysix',
          '27' => 'twentyseven',
          '28' => 'twentyeight',
          '29' => 'twentynine',
          '30' => 'thirty',
          '31' => 'thirtyone',
          '01' => 'one',
          '02' => 'two',
          '03' => 'three',
          '04' => 'four',
          '05' => 'five',
          '06' => 'six',
          '07' => 'seven',
          '08' => 'eight',
          '09' => 'nine',
          '10' => 'ten',
          '11' => 'eleven',
          '12' => 'twelve',
          '13' => 'thirteen',
          '14' => 'fourteen',
          '15' => 'fifteen',
          '16' => 'sixteen',
          '17' => 'seventeen',
          '18' => 'eighteen',
          '19' => 'ninghteen',
          '20' => 'twenty',
          '21' => 'twentyone',
          '22' => 'twentytwo',
          '23' => 'twentythree',
          '24' => 'twentyfour',
          '25' => 'twentyfive',
        ];
        foreach ($sl_leave as $requestedDate) {


          $day = date('d', strtotime($requestedDate));
          $requestedMonth = date('F', strtotime($requestedDate));

          if ($day >= 26 && $day <= 31) {
            $requestedDateTime = new DateTime($requestedDate);
            $requestedDateTime->modify('first day of next month');
            $requestedMonth = $requestedDateTime->format('F');
          }

          $appliedSick = DB::table('applyleaves')
            ->where('status', '!=', '2')
            ->where('leavetype', $request->leavetype)
            ->where('createdby', auth()->user()->teammember_id)
            ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
            ->get();

          $countSick = 0;
          $sickDates = [];
          $holidaydates = [];
          foreach ($appliedSick as $sickLeave) {

            $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
            $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
            $period = CarbonPeriod::create($fromDate, $toDate);


            foreach ($period as $date) {
              $sickDates[] = $date->format('Y-m-d');
            }

            $getholidays = DB::table('holidays')->get();


            foreach ($getholidays as $date) {
              $holidaydates[] = date('Y-m-d', strtotime($date->startdate));
            }
            $sickDates = array_unique($sickDates);
          }


          $attendanceRecord = DB::table('attendances')
            ->where('employee_name', auth()->user()->teammember_id)
            ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
            ->get();
          $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
          $slInAttendance = 0;
          foreach ($attendanceRecord as $item) {
            foreach ($columns as $column) {
              if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
                $slInAttendance++;
              }
            }
          }

          if ($slInAttendance >= $sick->noofdays) {

            $lstatus = 'LWP';
          }

          $attendanceUpdateData = [];
          $attendances = DB::table('attendances')
            ->where('employee_name', auth()->user()->teammember_id)
            ->where('month', $requestedMonth)
            ->first();

          $attendanceData = [
            'employee_name' => auth()->user()->teammember_id,
            'month' => $requestedMonth,
            'created_at' => Carbon::now()
          ];

          if ($lstatus == 'SL/C') {
            $attendanceData['sick_leave'] = 1;
          } else {
            $attendanceData['lwp'] = 1;
          }

          if ($attendances == null) {
            DB::table('attendances')->insert($attendanceData);
          } else {
            if ($lstatus == 'SL/C') {
              DB::table('attendances')
                ->where('employee_name', auth()->user()->teammember_id)
                ->where('month', $requestedMonth)
                ->update(['sick_leave' => DB::raw('COALESCE(sick_leave, 0) + 1')]);
            } else {
              DB::table('attendances')
                ->where('employee_name', auth()->user()->teammember_id)
                ->where('month', $requestedMonth)
                ->update(['lwp' => DB::raw('COALESCE(lwp, 0) + 1')]);
            }
          }


          $column = $columnMappings[$day] ?? null;
          if ($column !== null) {
            $attendanceUpdateData[$column] = $lstatus;
          }

          //Update the attendance data for the current date
          DB::table('attendances')->where('employee_name', auth()->user()->teammember_id)
            ->where('month', $requestedMonth)->update($attendanceUpdateData);
        }
      } elseif ($request->leavetype == 11) {
        $to = Carbon::createFromFormat('Y-m-d', $request->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $request->from);
        $requestdays = $to->diffInDays($from) + 1;





        $period = CarbonPeriod::create($request->from, $request->to);
        $datess = [];
        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }
        // dd($datess);
        // Convert the period to an array of dates
        // $dates = $period->toArray();

        $getholidays = DB::table('holidays')->where('startdate', '>=', $request->from)
          ->where('enddate', '<=', $request->to)->select('startdate')->get();
        if (count($getholidays) != 0) {
          foreach ($getholidays as $date) {
            $hdatess[] = date('Y-m-d', strtotime($date->startdate));
          }
        } else {
          $hdatess[] = 0;
        }


        $exam_leave = array_diff($datess, $hdatess);
        $exam_leave_total = count(array_diff($datess, $hdatess));

        $lstatus = "EL/C";




        $columnMappings = [
          '26' => 'twentysix',
          '27' => 'twentyseven',
          '28' => 'twentyeight',
          '29' => 'twentynine',
          '30' => 'thirty',
          '31' => 'thirtyone',
          '01' => 'one',
          '02' => 'two',
          '03' => 'three',
          '04' => 'four',
          '05' => 'five',
          '06' => 'six',
          '07' => 'seven',
          '08' => 'eight',
          '09' => 'nine',
          '10' => 'ten',
          '11' => 'eleven',
          '12' => 'twelve',
          '13' => 'thirteen',
          '14' => 'fourteen',
          '15' => 'fifteen',
          '16' => 'sixteen',
          '17' => 'seventeen',
          '18' => 'eighteen',
          '19' => 'ninghteen',
          '20' => 'twenty',
          '21' => 'twentyone',
          '22' => 'twentytwo',
          '23' => 'twentythree',
          '24' => 'twentyfour',
          '25' => 'twentyfive',
        ];

        foreach ($exam_leave as $exam_leave) {

          $day = date('d', strtotime($exam_leave));
          $requestedMonth = date('F', strtotime($exam_leave));

          if ($day >= 26 && $day <= 31) {
            $requestedDateTime = new DateTime($exam_leave);
            $requestedDateTime->modify('first day of next month');
            $requestedMonth = $requestedDateTime->format('F');
          }


          $attendanceUpdateData = [];
          $attendances = DB::table('attendances')
            ->where('employee_name', auth()->user()->teammember_id)
            ->where('month', $requestedMonth)
            ->first();

          $attendanceData = [
            'employee_name' => auth()->user()->teammember_id,
            'month' => $requestedMonth,
            'created_at' => Carbon::now()
          ];

          if ($lstatus == 'EL/C') {
            $attendanceData['exam_leave'] = 1;
          } else {
            $attendanceData['lwp'] = 1;
          }

          if ($attendances == null) {
            DB::table('attendances')->insert($attendanceData);
          } else {
            if ($lstatus == 'EL/C') {
              DB::table('attendances')
                ->where('employee_name', auth()->user()->teammember_id)
                ->where('month', $requestedMonth)
                ->update(['exam_leave' => DB::raw('COALESCE(sick_leave, 0) + 1')]);
            } else {
              DB::table('attendances')
                ->where('employee_name', auth()->user()->teammember_id)
                ->where('month', $requestedMonth)
                ->update(['lwp' => DB::raw('COALESCE(lwp, 0) + 1')]);
            }
          }


          $column = $columnMappings[$day] ?? null;
          if ($column !== null) {
            $attendanceUpdateData[$column] = $lstatus;
          }

          //Update the attendance data for the current date
          DB::table('attendances')->where('employee_name', auth()->user()->teammember_id)
            ->where('month', $requestedMonth)->update($attendanceUpdateData);
        }
      }

      if ($request->hasFile('report')) {
        $file = $request->file('report');
        $destinationPath = 'backEnd/image/report';
        $name = $file->getClientOriginalName();
        $s = $file->move($destinationPath, $name);
        $data['salaryincomefile'] = $name;
        $data['report'] = $name;
      }
      $id = DB::table('applyleaves')->insertGetId([
        'leavetype'         =>     $request->leavetype,
        'approver'         =>     $request->approver,
        'from'         =>     $request->from,
        'type'         =>     $request->type,
        'examtype'         =>     $request->examtype,
        'otherexam'         =>     $request->otherexam,
        'to'         =>     $request->to,
        'report'         => $data['report'] ?? '',
        'status'         =>    0,
        'reasonleave'         =>     $request->reasonleave,
        'createdby'         =>     auth()->user()->teammember_id,
        'created_at'          =>    date('Y-m-d H:i:s'),
        'updated_at'              =>    date('Y-m-d H:i:s'),
      ]);
      if ($request->teammember_id != null) {
        foreach ($request->teammember_id as $teammember) {
          DB::table('leaveteams')->insert([
            'leave_id'         =>     $id,
            'teammember_id'         =>     $teammember,
            'created_at'          =>     date('Y-m-d H:i:s'),
            'updated_at'              =>     date('Y-m-d H:i:s'),
          ]);
        }
      }
      $teammemberemail = Teammember::where('id', $request->approver)->first();
      //  dd($teammemberemail);
      $teammembername = Teammember::where('id', auth()->user()->teammember_id)->first();

      $data = array(
        'id' => $id,
        'leavetype'         =>     $request->leavetype,
        'from'         =>     $request->from,
        'to'         =>     $request->to,
        'teammembername'         =>    $teammembername->team_member,
        'teammemberemail' => $teammemberemail->emailid ?? '',
        'id' => $id ?? ''

      );

      Mail::send('emails.applyleaveform', $data, function ($msg) use ($data) {
        $msg->to($data['teammemberemail']);
        $msg->cc('itsupport_delhi@vsa.co.in');
        $msg->subject('VSA Apply Leave Request');
      });


      $output = array('msg' => 'Create Successfully');
      return back()->with('success', $output);
    } catch (Exception $e) {
      DB::rollBack();
      Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
      report($e);
      $output = array('msg' => $e->getMessage());
      return back()->withErrors($output)->withInput();
    }
  }







222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php

  public function create()
  {
    $leavetype = DB::table('leavetypes')
      ->leftjoin('leaveroles', 'leaveroles.leavetype_id', 'leavetypes.id')
      ->where('leavetypes.year', '=', '2024')
      ->where('leaveroles.role', auth()->user()->role_id)
      ->whereIn('leavetypes.id', [9, 11])
      ->select('leavetypes.*')->get();
    //   dd($leavetype);
    if (auth()->user()->role_id == 13) {
      $teammember = Teammember::with('role:id,rolename')->whereNotNull('joining_date')->where('role_id', '13')->where('status', 1)->orwhere('role_id', '14')->orwhere('role_id', '20')->where('id', '!=', auth()->user()->teammember_id)->get();
      $approver = Teammember::with('role:id,rolename')
        ->whereNotIn('id', [447])
        ->where('role_id', '11')->where('status', 1)->get();
    } elseif (auth()->user()->role_id == 14) {
      $teammember = Teammember::with('role:id,rolename')->whereNotNull('joining_date')->where('role_id', '13')->where('status', 1)->orwhere('role_id', '14')->orwhere('role_id', '20')->where('id', '!=', auth()->user()->teammember_id)->get();

      $approver = Teammember::with('role:id,rolename')
        ->whereNotIn('id', [841, 836, 843, 447])
        ->where('role_id', '13')->where('status', 1)->get();
    } else {
      $teammember = Teammember::with('role:id,rolename')->whereNotNull('joining_date')->where('role_id', '13')->where('status', 1)->orwhere('role_id', '14')->where('id', '!=', auth()->user()->teammember_id)
        ->orwhere('role_id', '17')->orwhere('role_id', '18')->orwhere('role_id', '20')
        ->orwhere('role_id', '16')->get();

      $approver = Teammember::with('role:id,rolename')
        ->whereNotIn('id', [841, 836, 843, 447])
        ->where('role_id', '13')->where('status', 1)->get();
    }
    return view('backEnd.applyleave.create', compact('teammember', 'leavetype', 'approver'));
  }




222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php

  public function timesheet_mylist()
  {
    if (auth()->user()->role_id == 13) {
      // die;
      $client = Client::select('id', 'client_name')->get();
      $getauth =  DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', '0')
        ->orderby('id', 'desc')->first();

      $dropdownYears = DB::table('timesheets')
        ->where('created_by', auth()->user()->teammember_id)
        ->select(DB::raw('YEAR(date) as year'))
        ->distinct()->orderBy('year', 'DESC')->pluck('year');
      $dropdownYears = DB::table('timesheets')
        ->where('created_by', auth()->user()->teammember_id)
        ->select(DB::raw('YEAR(date) as year'))
        ->distinct()->orderBy('year', 'DESC')->pluck('year');


      $dropdownMonths = DB::table('timesheets')
        ->where('created_by', auth()->user()->teammember_id)
        ->distinct()
        ->pluck('month');

      $partner = Teammember::where('role_id', '=', 11)->whereNotIn('id', [447])->where('status', '=', 1)->where('team_member', '!=', 'Partner')->with('title')->get();


      $currentDate = now();


      $month = $currentDate->format('F');
      $year = $currentDate->format('Y');

      //	  $time =  DB::table('timesheets')->get();
      // foreach ($time as $value) {
      //dd(date('F', strtotime($value->date)));
      //      DB::table('timesheets')->where('id',$value->id)->update([	
      //          'month'         =>     date('F', strtotime($value->date)),
      //           ]);
      // }
      $teammember = DB::table('timesheets')
        ->leftjoin('timesheetusers', 'timesheetusers.timesheetid', 'timesheets.id')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheets.created_by')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('timesheetusers.partner', auth()->user()->teammember_id)
        ->select('teammembers.id', 'teammembers.team_member', 'roles.rolename')->distinct()->get();
      //  dd($teammember);
      $month = DB::table('timesheets')
        ->select('timesheets.month')->distinct()->get();

      $result = DB::table('timesheetusers')->select(DB::raw('YEAR(date) as year'))
        ->distinct()->orderBy('year', 'DESC')->limit(5)->get();
      $years = $result->pluck('year');

      $timesheetData = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->where('timesheetusers.createdby', auth()->user()->teammember_id)
        ->where('timesheetusers.status', 0)
        ->select('timesheetusers.*', 'teammembers.team_member', 'assignmentbudgetings.assignmentname')->orderBy('date', 'ASC')
        ->paginate(14);
      // dd($timesheetData);
      $getauthh =  DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->orderby('id', 'desc')->first();
      $timesheetrequest = DB::table('timesheetrequests')->where('createdby', auth()->user()->teammember_id)->orderBy('id', 'DESC')->first();

      if ($getauthh  == null) {
        return view('backEnd.timesheet.firstindex', compact('timesheetData', 'getauth', 'client', 'partner'));
      } else {
        return view('backEnd.timesheet.index', compact('timesheetrequest', 'partner', 'client', 'getauth', 'dropdownMonths', 'timesheetData', 'year', 'dropdownYears', 'month', 'teammember', 'month', 'years'));
      }
    } else {

      $dropdownYears = DB::table('timesheets')
        ->where('created_by', auth()->user()->teammember_id)
        ->select(DB::raw('YEAR(date) as year'))
        ->distinct()->orderBy('year', 'DESC')->pluck('year');

      $dropdownMonths = DB::table('timesheets')
        ->where('created_by', auth()->user()->teammember_id)
        ->distinct()
        ->pluck('month');

      $currentDate = now();


      $month = $currentDate->format('F');
      $year = $currentDate->format('Y');

      $getauths =  DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', '1')
        ->orderby('id', 'desc')->first();
      if ($getauths != null) {
        $currentDate = now();
        $currentDateformate = $currentDate->format('Y-m-d');
        $getauth =  DB::table('timesheetusers')
          ->where('createdby', auth()->user()->teammember_id)
          ->where('date', '<=', $currentDateformate)
          ->where('status', '0')
          ->orderby('id', 'desc')->first();
        // dd($getauth);
      } else {
        $getauth =  DB::table('timesheetusers')
          ->where('createdby', auth()->user()->teammember_id)
          ->where('status', '0')
          ->orderby('id', 'desc')->first();
        //dd($getauth);
      }
      $getauthh =  DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->orderby('id', 'desc')->first();

      $client = Client::select('id', 'client_name')->get();
      $timesheetData = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->where('timesheetusers.createdby', auth()->user()->teammember_id)
        ->where('timesheetusers.status', 0)
        //   ->where('timesheets.month', $month)
        //  ->whereRaw('YEAR(timesheetusers.date) = ?', [$year])
        ->select('timesheetusers.*', 'teammembers.team_member', 'assignmentbudgetings.assignmentname')->orderBy('date', 'ASC')
        ->paginate(14);

      $partner = Teammember::whereNotIn('id', [887, 663, 841, 836, 843, 447])->where('role_id', '=', 13)->where('status', '=', 1)->with('title')
        ->orderBy('team_member', 'asc')->get();

      $timesheetrequest = DB::table('timesheetrequests')->where('createdby', auth()->user()->teammember_id)->orderBy('id', 'DESC')->first();

      if ($getauthh  == null) {
        return view('backEnd.timesheet.firstindex', compact('timesheetData', 'getauth', 'client', 'partner'));
      } else {
        return view('backEnd.timesheet.index', compact(
          'timesheetData',
          'getauth',
          'client',
          'partner',
          'timesheetrequest',
          'dropdownYears',
          'dropdownMonths',
          'month',
          'year',
        ));
      }
    }
  }






222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheetrequest\index.blade.php

                            @foreach ($timesheetrequestsDatas as $timesheetrequestsData)
                                <tr>
                                    @php

                                        $permotioncheck = null;
                                        $datadate = Carbon\Carbon::createFromFormat(
                                            'Y-m-d H:i:s',
                                            $timesheetrequestsData->created_at,
                                        );
                                        $permotiondate = null;

                                        if (auth()->user()->role_id == 11 || auth()->user()->role_id == 13) {
                                            $permotioncheck = DB::table('teamrolehistory')
                                                ->where('teammember_id', $timesheetrequestsData->createdby)
                                                ->first();

                                            if ($permotioncheck) {
                                                $permotiondate = Carbon\Carbon::createFromFormat(
                                                    'Y-m-d H:i:s',
                                                    $permotioncheck->created_at,
                                                );
                                            }
                                        }

                                        $partnerpormotioncheck = DB::table('teamrolehistory')
                                            ->where('teammember_id', $timesheetrequestsData->partner)
                                            ->first();

                                        $partnerpormotiondateformate = $partnerpormotioncheck
                                            ? Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $partnerpormotioncheck->created_at,
                                            )
                                            : null;
                                    @endphp
                                    <td style="display: none;">{{ $timesheetrequestsData->id }}</td>
                                    <td>
                                        @if ($timesheetrequestsData->status == 0)
                                            <span class="badge badge-pill badge-warning">Created</span>
                                        @elseif($timesheetrequestsData->status == 1)
                                            <span class="badge badge-pill badge-success">Approved</span>
                                        @else
                                            <span class="badge badge-pill badge-danger">Rejected</span>
                                        @endif
                                    </td>
                                    <td>{{ date('d-m-Y', strtotime($timesheetrequestsData->created_at)) }}</td>
                                    <td>{{ date('h:m:s', strtotime($timesheetrequestsData->created_at)) }}</td>
                                    <td><a href="{{ url('timesheetrequest/view', $timesheetrequestsData->id) }}">
                                            {{ $timesheetrequestsData->createdbyauth }}</a></td>

                                    <td>
                                        @if (auth()->user()->role_id == 11 || auth()->user()->role_id == 13)
                                            @if ($permotioncheck && $datadate->greaterThan($permotiondate))
                                                {{ $permotioncheck->newstaff_code }}
                                            @else
                                                {{ $timesheetrequestsData->staffcodeid }}
                                            @endif
                                        @else
                                            {{ $timesheetrequestsData->newstaff_code ?? $timesheetrequestsData->staffcodeid }}
                                        @endif
                                    </td>
                                    <td>{{ $timesheetrequestsData->team_member }}
                                    </td>
                                    <td>
                                        @if ($partnerpormotioncheck && $datadate->greaterThan($partnerpormotiondateformate))
                                            {{ $partnerpormotioncheck->newstaff_code }}
                                        @else
                                            {{ $timesheetrequestsData->staffcode }}
                                        @endif
                                    </td>

                                    <td style="width: 900px; word-wrap: break-word; white-space: normal;">
                                        {{ $timesheetrequestsData->reason }}</td>
                                    <td>
                                        @if ($timesheetrequestsData && $timesheetrequestsData->attachment)
                                            <a
                                                href="{{ url('backEnd/image/confirmationfile/' . $timesheetrequestsData->attachment) }}">
                                                {{ $timesheetrequestsData->attachment ?? 'NA' }}
                                            </a>
                                        @else
                                            {{ 'NA' }}
                                        @endif
                                    </td>
                                    <td>{{ $timesheetrequestsData->remark ?? 'NA' }}</td>

                                </tr>
                            @endforeach
							




222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\BackEndController.php

  $userInfo = Teammember::leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
      ->leftJoin('rejoiningsamepost', 'rejoiningsamepost.teammember_id', '=', 'teammembers.id')
      ->where('teammembers.id', auth()->user()->teammember_id)
      ->select(
        'teammembers.*',
        'teamrolehistory.newstaff_code',
        'teamrolehistory.rejoiningdate',
        'rejoiningsamepost.rejoiningdate as samepostrejoiningdate'
      )
      ->first();






222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\userprofile.blade.php

                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label class="font-weight-600">Employee Code</label>

                                            <input type="text" readonly class="form-control" placeholder="Username"
                                                value="{{ $userInfo->newstaff_code ?? ($userInfo->staffcode ?? '') }}">

                                        </div>
                                    </div>







222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php


  public function store(Request $request)
  {

    try {

      $Newteammeber = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->first();

      // check promotion data
      $pormotionandrejoiningdata = DB::table('teammembers')
        ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
        ->leftJoin('rejoiningsamepost', 'rejoiningsamepost.teammember_id', '=', 'teammembers.id')
        ->where('teammembers.id', auth()->user()->teammember_id)
        ->select(
          'teammembers.team_member',
          'teammembers.staffcode',
          'teammembers.joining_date',
          'teamrolehistory.newstaff_code',
          'teamrolehistory.rejoiningdate',
          'rejoiningsamepost.rejoiningdate as samepostrejoiningdate'
        )
        ->first();




      $joining_date = $pormotionandrejoiningdata->joining_date ?
        Carbon::parse($pormotionandrejoiningdata->joining_date)->format('d-m-Y') : null;

      $rejoining_date = null;
      if ($pormotionandrejoiningdata->rejoiningdate || $pormotionandrejoiningdata->samepostrejoiningdate) {
        $rejoining_date = Carbon::parse($pormotionandrejoiningdata->rejoiningdate ?? $pormotionandrejoiningdata->samepostrejoiningdate)
          ->format('d-m-Y');
        $rejoiningDateformate = Carbon::parse($rejoining_date);
      }

      $requestDate = Carbon::parse($request->date);
      $joiningDate = Carbon::parse($joining_date);


      if ($Newteammeber == null || $rejoining_date != null) {

        if ($rejoining_date != null && $requestDate < $rejoiningDateformate) {
          $output = array('msg' => 'You can not fill timesheet before Rejoining date :' . $rejoining_date);
          dd($output);
          return redirect('timesheet/mylist')->with('statuss', $output);
        }

        if ($requestDate < $joiningDate) {
          $output = array('msg' => 'You can not fill timesheet before joining date :' . $joining_date);
          return redirect('timesheet/mylist')->with('statuss', $output);
        }

        if ($Newteammeber == null) {
          // Get previuse sunday from joining date
          $joining_timestamp = strtotime($joining_date);
          $day_of_week = date('w', $joining_timestamp);
          $days_to_subtract = $day_of_week;
          $previous_sunday_timestamp = strtotime("-$days_to_subtract days", $joining_timestamp);

          $previous_sunday_date = date('d-m-Y', $previous_sunday_timestamp);
          // Get all dates beetween two dates 
          $startDate = Carbon::parse($previous_sunday_date);
          $endDate = Carbon::parse($joining_date);
          $period = CarbonPeriod::create($startDate, $endDate);
        }
        //this code related rejoining teammember 
        else {
          $joining_timestamp = strtotime($rejoining_date);
          $day_of_week = date('w', $joining_timestamp);
          $days_to_subtract = $day_of_week;
          $previous_sunday_timestamp = strtotime("-$days_to_subtract days", $joining_timestamp);
          $previous_sunday_date = date('d-m-Y', $previous_sunday_timestamp);
          // Get all dates beetween two dates 
          $startDate = Carbon::parse($previous_sunday_date);
          $endDate = Carbon::parse($rejoining_date);
          $period = CarbonPeriod::create($startDate, $endDate);
        }

        // store all date in $result vairable
        $result = [];
        foreach ($period as $key => $date) {
          if ($key !== 0 && $key !== count($period) - 1) {
            $result[] = $date->toDateString();
          }
        }
        // return $result;
        // dd('yes', $result);
        foreach ($result as $date) {
          $prevcheck = DB::table('timesheets')->where('date', $date)
            ->where('created_by', auth()->user()->teammember_id)
            ->first();

          if (($Newteammeber == null && $prevcheck == null) || ($rejoining_date != null && $prevcheck == null)) {
            $id = DB::table('timesheets')->insertGetId(
              [
                'created_by' => auth()->user()->teammember_id,
                'month'     =>   date('F', strtotime($date)),
                'date'     =>    date('Y-m-d', strtotime($date)),
                'created_at'          =>     date('Y-m-d H:i:s'),
              ]
            );
            DB::table('timesheetusers')->insert([
              'date'     =>   date('Y-m-d', strtotime($date)),
              'client_id'     =>     29,
              'workitem'     =>     'NA',
              'location'     =>     'NA',
              //   'billable_status'     =>     $request->billable_status[$i],
              'timesheetid'     =>     $id,
              'date'     =>     date('Y-m-d', strtotime($date)),
              'hour'     =>     0,
              'totalhour' =>      0,
              'assignment_id'     =>     213,
              'partner'     =>     887,
              'createdby' => auth()->user()->teammember_id,
              'created_at'          =>     date('Y-m-d H:i:s'),
              'updated_at'              =>    date('Y-m-d H:i:s'),
            ]);
          }
        }
      }
      dd($pormotionandrejoiningdata);
      if ($requestDate >= $joiningDate) {

        if ($rejoining_date != null && $requestDate < $rejoiningDateformate) {
          // dd('hi', 1);
          $output = array('msg' => 'You can not fill timesheet before Rejoining date :' . $rejoining_date);
          return redirect('timesheet')->with('success', $output);
        }
        // dd('hi', 0);

        $data = $request->except(['_token', 'teammember_id', 'amount']);

        //	if ($request->date < '11-09-2023') {
        //dd('hi');
        // $output = array('msg' => 'Please fill timesheet from 11/09/2023, Monday onwards');
        //  return back()->with('success', $output);
        //   }

        //die;
        //? dd(date('w', strtotime($request->date))); // 4
        // check allready submited
        if (date('w', strtotime($request->date)) == 0) {
          $previousSaturday = date('Y-m-d', strtotime('-1 day', strtotime($request->date)));
          $previousSaturdayFilled = DB::table('timesheetusers')
            ->where('createdby', auth()->user()->teammember_id)
            ->where('date', $previousSaturday)
            ->where('status', 1)
            ->first();
          // dd('hi1', $previousSaturdayFilled);
          if ($previousSaturdayFilled != null) {
            $output = array('msg' => 'You already submitted for this week');
            return back()->with('success', $output);
          }
        }

        // check hour
        $hours = $request->input('totalhour');
        if (!is_numeric($hours) || $hours > 12) {
          $output = array('msg' => 'The total hours cannot be greater than 12');
          return back()->with('success', $output);
        }
        // dd(auth()->user()->teammember_id);
        //? dd(date('Y-m-d', strtotime($request->date))); "2023-11-30"
        $previouschck = DB::table('timesheetusers')
          ->where('createdby', auth()->user()->teammember_id)
          ->where('date', date('Y-m-d', strtotime($request->date)))
          ->where('status', 1)
          ->first();

        if ($previouschck != null) {
          //dd('hi');
          $output = array('msg' => 'You already submitted for this week');
          return back()->with('success', $output);
        }

        $previoussavechck = DB::table('timesheetusers')
          ->where('createdby', auth()->user()->teammember_id)
          ->where('date', date('Y-m-d', strtotime($request->date)))
          ->where('status', 0)
          ->first();

        if ($previoussavechck != null) {
          //dd('hi');
          $output = array('msg' => 'You already submitted for this date');
          return back()->with('success', $output);
        }



        $currentDate = Carbon::now()->format('d-m-Y');
        //dd($currentHour);
        if ($currentDate == $request->date && Carbon::now()->hour < 18) {
          //   //dd('hi');
          $output = array('msg' => 'You can only fill today timesheet after 6:00 pm');
          return back()->with('success', $output);
        }


        $leaves = DB::table('applyleaves')
          ->where('applyleaves.createdby', auth()->user()->teammember_id)
          ->where('status', '!=', 2)
          ->select('applyleaves.from', 'applyleaves.to')
          ->get();
        // dd('hi 1', $leaves);
        foreach ($leaves as $leave) {
          //Convert each data from table to Y-m-d format to compare
          $days = CarbonPeriod::create(
            date('Y-m-d', strtotime($leave->from)),
            date('Y-m-d', strtotime($leave->to))
          );

          foreach ($days as $day) {
            $leavess[] = $day->format('Y-m-d');
          }
        }
        // $currentday = date('Y-m-d', strtotime($request->date));// "2023-11-30"
        $currentday = date('Y-m-d', strtotime($request->date));
        // dd('hi 2', $currentday);
        // $ifcount=0;
        //  $elsecount=0;
        if (count($leaves) != 0) {

          //dd('if');
          foreach ($leavess as $leave) {
            // echo"<pre>";
            //  print_r($leave);

            if ($leave == $currentday) {
              //dd('if');
              // $ifcount=$ifcount+1;
              $output = array('msg' => 'You Have Leave for the Day (' . date('d-m-Y', strtotime($leave)) . ')');
              return redirect('timesheet')->with('statuss', $output);
            }
          }
        }

        // insert data in timesheet from request and get id 
        $id = DB::table('timesheets')->insertGetId(
          [
            'created_by' => auth()->user()->teammember_id,
            'month'     =>    date('F', strtotime($request->date)),
            'date'     =>    date('Y-m-d', strtotime($request->date)),
            'created_at'          =>     date('Y-m-d H:i:s'),
          ]
        );


        $count = count($request->assignment_id);

        // dd('hi 3', $count);
        for ($i = 0; $i < $count; $i++) {
          //dd($request->workitem[$i]);
          $assignment =  DB::table('assignmentmappings')->where('assignmentgenerate_id', $request->assignment_id[$i])->first();

          $a = DB::table('timesheetusers')->insert([
            'date'     =>     $request->date,
            'client_id'     =>     $request->client_id[$i],
            'assignmentgenerate_id'     =>     $request->assignment_id[$i],
            'workitem'     =>     $request->workitem[$i],
            'location'     =>     $request->location[$i],
            //   'billable_status'     =>     $request->billable_status[$i],
            'timesheetid'     =>     $id,
            'date'     =>     date('Y-m-d', strtotime($request->date)),
            'hour'     =>     $request->hour[$i],
            'totalhour' =>      $request->totalhour,
            'assignment_id'     =>     $assignment->assignment_id,
            'partner'     =>     $request->partner[$i],
            'createdby' => auth()->user()->teammember_id,
            'created_at'          =>     date('Y-m-d H:i:s'),
            'updated_at'              =>    date('Y-m-d H:i:s'),
          ]);

          if (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {
            // dd($request);
            $gettotalteamhour = DB::table('assignmentmappings')
              ->leftJoin(
                'assignmentteammappings',
                'assignmentteammappings.assignmentmapping_id',
                'assignmentmappings.id',
              )
              ->where(
                'assignmentmappings.assignmentgenerate_id',
                $request->assignment_id[$i]
              )
              ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
              ->first();

            if ($gettotalteamhour) {
              $gettotalteamhour = $gettotalteamhour->teamhour;
              // dd($gettotalteamhour);

              $finalresult =  $gettotalteamhour + $request->hour[$i];

              $totalteamhourupdate = DB::table('assignmentmappings')
                ->leftJoin(
                  'assignmentteammappings',
                  'assignmentteammappings.assignmentmapping_id',
                  'assignmentmappings.id',
                )
                ->where(
                  'assignmentmappings.assignmentgenerate_id',
                  $request->assignment_id[$i]
                )
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
                // ->get();
                ->update(['teamhour' =>  $finalresult]);
            }
          }

          if (auth()->user()->role_id == 13) {
            $assignmentdata = DB::table('assignmentmappings')
              ->where('assignmentgenerate_id', $request->assignment_id[$i])
              ->first();
            $finalresultleadpatner =  $assignmentdata->leadpartnerhour + $request->hour[$i];
            $finalresultotherpatner =  $assignmentdata->otherpartnerhour + $request->hour[$i];

            if ($assignmentdata->leadpartner == auth()->user()->teammember_id) {
              $update = DB::table('assignmentmappings')
                ->where('assignmentgenerate_id', $request->assignment_id[$i])
                ->where('leadpartner', auth()->user()->teammember_id)
                ->update(['leadpartnerhour' => $finalresultleadpatner]);
            }
            if ($assignmentdata->otherpartner == auth()->user()->teammember_id) {
              $update = DB::table('assignmentmappings')
                ->where('assignmentgenerate_id', $request->assignment_id[$i])
                ->where('otherpartner', auth()->user()->teammember_id)
                ->update(['otherpartnerhour' => $finalresultotherpatner]);
            }
          }
        }
      } else {
        // dd(auth()->user()->teammember_id);
        $output = array('msg' => 'You can not fill timesheet before Rejoining date :' . $joining_date);
        return redirect('timesheet')->with('success', $output);
      }

      //Attendance code

      $hdatess = date('Y-m-d', strtotime($request->date));
      $day =  DateTime::createFromFormat('Y-m-d', $hdatess)->format('d');      //
      $month =  DateTime::createFromFormat('Y-m-d', $hdatess)->format('F');   //
      $currentDate = new DateTime();
      $currentMonth = $currentDate->format('F');
      //dd($month);
      //   if ($currentDate->format('j') > 25) {
      //     $currentDate->modify('-1 month');
      //     $currentMonth = $currentDate->format('F');
      // }



      $dates = [
        '26' => 'twentysix',
        '27' => 'twentyseven',
        '28' => 'twentyeight',
        '29' => 'twentynine',
        '30' => 'thirty',
        '31' => 'thirtyone',
        '01' => 'one',
        '02' => 'two',
        '03' => 'three',
        '04' => 'four',
        '05' => 'five',
        '06' => 'six',
        '07' => 'seven',
        '08' => 'eight',
        '09' => 'nine',
        '10' => 'ten',
        '11' => 'eleven',
        '12' => 'twelve',
        '13' => 'thirteen',
        '14' => 'fourteen',
        '15' => 'fifteen',
        '16' => 'sixteen',
        '17' => 'seventeen',
        '18' => 'eighteen',
        '19' => 'ninghteen',
        '20' => 'twenty',
        '21' => 'twentyone',
        '22' => 'twentytwo',
        '23' => 'twentythree',
        '24' => 'twentyfour',
        '25' => 'twentyfive',
      ];



      if ($month != $currentMonth && $day > 25) {
        $dateTime = DateTime::createFromFormat('Y-m-d', $hdatess);
        $dateTime->modify('+1 month');
        $month = $dateTime->format('F');
      }
      if ($month != $currentMonth && $day < 25) {
        $dateTime = DateTime::createFromFormat('Y-m-d', $hdatess);
        $month = $dateTime->format('F');
      }
      if ($month == $currentMonth && $day > 25) {

        $dateTime = DateTime::createFromFormat('Y-m-d', $hdatess);
        $dateTime->modify('+1 month');
        $month = $dateTime->format('F');
      }

      //dd($month);


      $column = $dates[$day];

      $attendances = DB::table('attendances')->where('employee_name', auth()->user()->teammember_id)
        ->where('month', $month)->first();

      if ($attendances ==  null) {
        $teammember = DB::table('teammembers')->where('id', auth()->user()->teammember_id)->first();

        $a = DB::table('attendances')->insert([
          'employee_name'         =>     auth()->user()->teammember_id,
          'month'         =>    $month,
          'dateofjoining' =>   $teammember->joining_date,
          'created_at'          =>     date('Y-m-d H:i:s'),
          //   'exam_leave'      =>$value->date_total,
        ]);
        //dd($a);
      }


      //   dd($noofdaysaspertimesheet);

      $updatedtotalhour = $request->totalhour;
      if ($attendances != null && property_exists($attendances, $column)) {
        if ($attendances->$column != "LWP") {
          $updatedtotalhour = $request->totalhour + $attendances->$column;
        }
      }
      DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->where('month', $month)
        ->update([$column => $updatedtotalhour]);


      //end attendance


      $output = array('msg' => 'Create Successfully');
      if (auth()->user()->role_id == 14 || auth()->user()->role_id == 13 || auth()->user()->role_id == 15) {
        return redirect('timesheet/mylist')->with('success', $output);
      } else {
        return redirect('timesheet')->with('success', $output);
      }
    } catch (Exception $e) {
      DB::rollBack();
      Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
      report($e);
      $output = array('msg' => $e->getMessage());
      return back()->withErrors($output)->withInput();
    }
  }





222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\index.blade.php


                                @foreach ($timesheetData as $timesheetDatas)
                                    <tr>
                                        @php

                                            $timeid = DB::table('timesheetusers')
                                                ->where('timesheetusers.id', $timesheetDatas->id)
                                                ->first();

                                            // $client_id = DB::table('timesheetusers')
                                            //     ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
                                            //     ->leftjoin(
                                            //         'assignmentbudgetings',
                                            //         'assignmentbudgetings.assignment_id',
                                            //         'timesheetusers.assignment_id',
                                            //     )
                                            //     ->leftjoin(
                                            //         'assignments',
                                            //         'assignments.id',
                                            //         'timesheetusers.assignment_id',
                                            //     )
                                            //     ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.partner')
                                            //     ->leftJoin('teamrolehistory', function ($join) {
                                            //         $join
                                            //             ->on('teamrolehistory.teammember_id', '=', 'teammembers.id')
                                            //             ->on(
                                            //                 'teamrolehistory.created_at',
                                            //                 '<',
                                            //                 'timesheetusers.created_at',
                                            //             );
                                            //     })
                                            //     ->where('timesheetusers.id', $timesheetDatas->id)
                                            //     ->select(
                                            //         'clients.client_name',
                                            //         'clients.client_code',
                                            //         'timesheetusers.hour',
                                            //         'timesheetusers.location',
                                            //         'timesheetusers.status',
                                            //         'assignments.assignment_name',
                                            //         'billable_status',
                                            //         'workitem',
                                            //         'teammembers.team_member',
                                            //         'teammembers.staffcode',
                                            //         'teamrolehistory.newstaff_code',
                                            //         'assignmentbudgetings.assignmentname',
                                            //         'assignmentbudgetings.assignmentgenerate_id',
                                            //     )
                                            //     ->first();

                                            $client_id = DB::table('timesheetusers')
                                                ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
                                                ->leftjoin(
                                                    'assignmentbudgetings',
                                                    'assignmentbudgetings.assignment_id',
                                                    'timesheetusers.assignment_id',
                                                )
                                                ->leftjoin(
                                                    'assignments',
                                                    'assignments.id',
                                                    'timesheetusers.assignment_id',
                                                )
                                                ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.partner')
                                                ->where('timesheetusers.id', $timesheetDatas->id)
                                                ->select(
                                                    'clients.client_name',
                                                    'clients.client_code',
                                                    'timesheetusers.hour',
                                                    'timesheetusers.location',
                                                    'timesheetusers.status',
                                                    'assignments.assignment_name',
                                                    'billable_status',
                                                    'workitem',
                                                    'teammembers.team_member',
                                                    'teammembers.staffcode',
                                                    'assignmentbudgetings.assignmentname',
                                                )
                                                ->first();

                                            $permotioncheck = null;
                                            $datadate = $timesheetDatas->assignmentcreated
                                                ? Carbon\Carbon::createFromFormat(
                                                    'Y-m-d H:i:s',
                                                    $timesheetDatas->assignmentcreated,
                                                )
                                                : null;
                                            $permotiondate = null;

                                            if (
                                                auth()->user()->role_id == 13 ||
                                                auth()->user()->role_id == 11 ||
                                                auth()->user()->role_id == 14
                                            ) {
                                                $permotioncheck = DB::table('teamrolehistory')
                                                    ->where('teammember_id', auth()->user()->teammember_id)
                                                    ->first();

                                                if ($permotioncheck) {
                                                    $permotiondate = Carbon\Carbon::createFromFormat(
                                                        'Y-m-d H:i:s',
                                                        $permotioncheck->created_at,
                                                    );
                                                }
                                            }

                                            $total = DB::table('timesheetusers')

                                                ->where('timesheetusers.timesheetid', $timesheetDatas->timesheetid)
                                                ->sum('hour');
                                            //	dd($total);
                                            $dates = date('l', strtotime($timesheetDatas->date));

                                        @endphp
                                        <td style="display: none;">{{ $timesheetDatas->id }}</td>
                                        <td>
                                            @if ($client_id->status == 0)
                                                <span class="badge badge-pill badge-warning">saved</span>
                                            @else
                                                <span class="badge badge-pill badge-danger">submit</span>
                                            @endif
                                        </td>

                                        @php

                                            $date = $timesheetDatas->date;

                                            $leaves = DB::table('applyleaves')
                                                ->where('applyleaves.createdby', auth()->user()->teammember_id)
                                                ->where('status', '!=', 2)
                                                ->select('applyleaves.from', 'applyleaves.to')
                                                ->get();

                                            $leavesWithinRange = $leaves->filter(function ($leave) use ($date) {
                                                return $leave->from <= $date && $leave->to >= $date;
                                            });

                                            //dd($leavesWithinRange);

                                        @endphp

                                        <td> <span style="display: none;">
                                                {{ date('Y-m-d', strtotime($timesheetDatas->date)) }}</span>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                        </td>

                                        <td>
                                            @if ($timesheetDatas->date != null)
                                                {{ $dates ?? '' }}
                                            @endif
                                        </td>


                                        <td>
                                            {{ $client_id->client_name ?? '' }}
                                            @if (count((array) $client_id->client_name) > 1)
                                                ,
                                            @endif
                                        </td>
                                        <td>
                                            {{ $client_id->client_code ?? '' }}
                                            @if (count((array) $client_id->client_code) > 1)
                                                ,
                                            @endif
                                        </td>

                                        <td>
                                            {{ $client_id->assignment_name ?? '' }} (
                                            {{ $timesheetDatas->assignmentgenerate_id ?? '' }})
                                            @if ($timesheetDatas->assignmentname != null)
                                                ({{ $timesheetDatas->assignmentname ?? '' }})
                                            @endif
                                            @if (count((array) $client_id->assignment_name) > 1)
                                                ,
                                            @endif
                                        </td>
                                        <td>
                                            {{ $client_id->workitem ?? '' }}
                                            @if (count((array) $client_id->workitem) > 1)
                                                ,
                                            @endif
                                        </td>

                                        <td>
                                            {{ $client_id->location ?? '' }}
                                            @if (count((array) $client_id->location) > 1)
                                                ,
                                            @endif
                                        </td>

                                        {{-- <td>
                                            {{ $client_id->team_member ?? '' }} (
                                            {{ $client_id->newstaff_code ?? ($client_id->staffcode ?? '') }})
                                            @if (count((array) $client_id->team_member) > 1)
                                                ,
                                            @endif
                                        </td> --}}





                                        <td>
                                            {{ $client_id->team_member ?? '' }}
                                            @if ($permotioncheck && $datadate && $datadate->greaterThan($permotiondate))
                                                ({{ $permotioncheck->newstaff_code }})
                                            @else
                                                ({{ $client_id->staffcode ?? '' }})
                                            @endif
                                            @if (count((array) $client_id->team_member) > 1)
                                                ,
                                            @endif
                                        </td>



                                        <td>
                                            {{ $client_id->hour ?? '' }}
                                            @if (count((array) $client_id->hour) > 1)
                                                ,
                                            @endif
                                        </td>
                                        <td>{{ $total }}</td>
                                        <td>
                                            @if ($client_id->status == 0)
                                                @if ($leavesWithinRange->isEmpty())
                                                    <a href="{{ url('/timesheet/destroy/' . $timesheetDatas->timesheetid) }}"
                                                        onclick="return confirm('Are you sure you want to delete this item?');"
                                                        class="btn btn-danger-soft btn-sm"><i
                                                            class="far fa-trash-alt"></i></a>
                                                @endif
                                            @else
                                                delete blocked
                                            @endif
                                        </td>
                                    </tr>
                                @endforeach





222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php


  public function timesheet_mylist()
  {
    if (auth()->user()->role_id == 13) {
      // die;
      $client = Client::select('id', 'client_name')->get();
      $getauth =  DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', '0')
        ->orderby('id', 'desc')->first();

      $dropdownYears = DB::table('timesheets')
        ->where('created_by', auth()->user()->teammember_id)
        ->select(DB::raw('YEAR(date) as year'))
        ->distinct()->orderBy('year', 'DESC')->pluck('year');
      $dropdownYears = DB::table('timesheets')
        ->where('created_by', auth()->user()->teammember_id)
        ->select(DB::raw('YEAR(date) as year'))
        ->distinct()->orderBy('year', 'DESC')->pluck('year');


      $dropdownMonths = DB::table('timesheets')
        ->where('created_by', auth()->user()->teammember_id)
        ->distinct()
        ->pluck('month');

      $partner = Teammember::where('role_id', '=', 11)->whereNotIn('id', [447])->where('status', '=', 1)->where('team_member', '!=', 'Partner')->with('title')->get();


      $currentDate = now();


      $month = $currentDate->format('F');
      $year = $currentDate->format('Y');

      //	  $time =  DB::table('timesheets')->get();
      // foreach ($time as $value) {
      //dd(date('F', strtotime($value->date)));
      //      DB::table('timesheets')->where('id',$value->id)->update([	
      //          'month'         =>     date('F', strtotime($value->date)),
      //           ]);
      // }
      $teammember = DB::table('timesheets')
        ->leftjoin('timesheetusers', 'timesheetusers.timesheetid', 'timesheets.id')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheets.created_by')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->where('timesheetusers.partner', auth()->user()->teammember_id)
        ->select('teammembers.id', 'teammembers.team_member', 'roles.rolename')->distinct()->get();
      //  dd($teammember);
      $month = DB::table('timesheets')
        ->select('timesheets.month')->distinct()->get();

      $result = DB::table('timesheetusers')->select(DB::raw('YEAR(date) as year'))
        ->distinct()->orderBy('year', 'DESC')->limit(5)->get();
      $years = $result->pluck('year');

      $timesheetData = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->where('timesheetusers.createdby', auth()->user()->teammember_id)
        ->where('timesheetusers.status', 0)
        ->select('timesheetusers.*', 'teammembers.team_member', 'assignmentbudgetings.assignmentname', 'assignmentbudgetings.created_at as assignmentcreated')->orderBy('date', 'ASC')
        ->paginate(14);
      // dd($timesheetData);
      $getauthh =  DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->orderby('id', 'desc')->first();
      $timesheetrequest = DB::table('timesheetrequests')->where('createdby', auth()->user()->teammember_id)->orderBy('id', 'DESC')->first();

      if ($getauthh  == null) {
        return view('backEnd.timesheet.firstindex', compact('timesheetData', 'getauth', 'client', 'partner'));
      } else {
        return view('backEnd.timesheet.index', compact('timesheetrequest', 'partner', 'client', 'getauth', 'dropdownMonths', 'timesheetData', 'year', 'dropdownYears', 'month', 'teammember', 'month', 'years'));
      }
    } else {

      $dropdownYears = DB::table('timesheets')
        ->where('created_by', auth()->user()->teammember_id)
        ->select(DB::raw('YEAR(date) as year'))
        ->distinct()->orderBy('year', 'DESC')->pluck('year');

      $dropdownMonths = DB::table('timesheets')
        ->where('created_by', auth()->user()->teammember_id)
        ->distinct()
        ->pluck('month');

      $currentDate = now();


      $month = $currentDate->format('F');
      $year = $currentDate->format('Y');

      $getauths =  DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', '1')
        ->orderby('id', 'desc')->first();
      if ($getauths != null) {
        $currentDate = now();
        $currentDateformate = $currentDate->format('Y-m-d');
        $getauth =  DB::table('timesheetusers')
          ->where('createdby', auth()->user()->teammember_id)
          ->where('date', '<=', $currentDateformate)
          ->where('status', '0')
          ->orderby('id', 'desc')->first();
        // dd($getauth);
      } else {
        $getauth =  DB::table('timesheetusers')
          ->where('createdby', auth()->user()->teammember_id)
          ->where('status', '0')
          ->orderby('id', 'desc')->first();
        //dd($getauth);
      }
      $getauthh =  DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->orderby('id', 'desc')->first();

      $client = Client::select('id', 'client_name')->get();
      $timesheetData = DB::table('timesheetusers')
        ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.createdby')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'timesheetusers.assignmentgenerate_id')
        ->where('timesheetusers.createdby', auth()->user()->teammember_id)
        ->where('timesheetusers.status', 0)
        //   ->where('timesheets.month', $month)
        //  ->whereRaw('YEAR(timesheetusers.date) = ?', [$year])
        ->select('timesheetusers.*', 'teammembers.team_member', 'assignmentbudgetings.assignmentname', 'assignmentbudgetings.created_at as assignmentcreated')->orderBy('date', 'ASC')
        ->paginate(14);

      $partner = Teammember::whereNotIn('id', [887, 663, 841, 836, 843, 447])->where('role_id', '=', 13)->where('status', '=', 1)->with('title')
        ->orderBy('team_member', 'asc')->get();

      $timesheetrequest = DB::table('timesheetrequests')->where('createdby', auth()->user()->teammember_id)->orderBy('id', 'DESC')->first();

      if ($getauthh  == null) {
        return view('backEnd.timesheet.firstindex', compact('timesheetData', 'getauth', 'client', 'partner'));
      } else {
        return view('backEnd.timesheet.index', compact(
          'timesheetData',
          'getauth',
          'client',
          'partner',
          'timesheetrequest',
          'dropdownYears',
          'dropdownMonths',
          'month',
          'year',
        ));
      }
    }
  }






222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php



  public function store(Request $request)
  {

    try {

      $Newteammeber = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->first();

      // check promotion data
      $pormotionandrejoiningdata = DB::table('teammembers')
        ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
        ->leftJoin('rejoiningsamepost', 'rejoiningsamepost.teammember_id', '=', 'teammembers.id')
        ->where('teammembers.id', auth()->user()->teammember_id)
        ->select(
          'teammembers.team_member',
          'teammembers.staffcode',
          'teammembers.joining_date',
          'teamrolehistory.newstaff_code',
          'teamrolehistory.rejoiningdate',
          'rejoiningsamepost.rejoiningdate as samepostrejoiningdate'
        )
        ->first();




      $joining_date = $pormotionandrejoiningdata->joining_date ?
        Carbon::parse($pormotionandrejoiningdata->joining_date)->format('d-m-Y') : null;

      $rejoining_date = null;
      if ($pormotionandrejoiningdata->rejoiningdate || $pormotionandrejoiningdata->samepostrejoiningdate) {
        $rejoining_date = Carbon::parse($pormotionandrejoiningdata->rejoiningdate ?? $pormotionandrejoiningdata->samepostrejoiningdate)
          ->format('d-m-Y');
        $rejoiningDateformate = Carbon::parse($rejoining_date);
      }

      $requestDate = Carbon::parse($request->date);
      $joiningDate = Carbon::parse($joining_date);


      if ($Newteammeber == null || $rejoining_date != null) {

        if ($rejoining_date != null && $requestDate < $rejoiningDateformate) {
          $output = array('msg' => 'You can not fill timesheet before Rejoining date :' . $rejoining_date);
          // dd($output, 1);
          return redirect('timesheet/mylist')->with('statuss', $output);
        }

        if ($requestDate < $joiningDate) {
          $output = array('msg' => 'You can not fill timesheet before joining date :' . $joining_date);
          return redirect('timesheet/mylist')->with('statuss', $output);
        }

        if ($Newteammeber == null) {
          // Get previuse sunday from joining date
          $joining_timestamp = strtotime($joining_date);
          $day_of_week = date('w', $joining_timestamp);
          $days_to_subtract = $day_of_week;
          $previous_sunday_timestamp = strtotime("-$days_to_subtract days", $joining_timestamp);

          $previous_sunday_date = date('d-m-Y', $previous_sunday_timestamp);
          // Get all dates beetween two dates 
          $startDate = Carbon::parse($previous_sunday_date);
          $endDate = Carbon::parse($joining_date);
          $period = CarbonPeriod::create($startDate, $endDate);
        }
        //this code related rejoining teammember 
        else {
          $joining_timestamp = strtotime($rejoining_date);
          $day_of_week = date('w', $joining_timestamp);
          $days_to_subtract = $day_of_week;
          $previous_sunday_timestamp = strtotime("-$days_to_subtract days", $joining_timestamp);
          $previous_sunday_date = date('d-m-Y', $previous_sunday_timestamp);
          // Get all dates beetween two dates 
          $startDate = Carbon::parse($previous_sunday_date);
          $endDate = Carbon::parse($rejoining_date);
          $period = CarbonPeriod::create($startDate, $endDate);
        }

        // store all date in $result vairable
        $result = [];
        foreach ($period as $key => $date) {
          if ($key !== 0 && $key !== count($period) - 1) {
            $result[] = $date->toDateString();
          }
        }
        // return $result;
        // dd('yes', $result);
        foreach ($result as $date) {
          $prevcheck = DB::table('timesheets')->where('date', $date)
            ->where('created_by', auth()->user()->teammember_id)
            ->first();

          if (($Newteammeber == null && $prevcheck == null) || ($rejoining_date != null && $prevcheck == null)) {
            $id = DB::table('timesheets')->insertGetId(
              [
                'created_by' => auth()->user()->teammember_id,
                'month'     =>   date('F', strtotime($date)),
                'date'     =>    date('Y-m-d', strtotime($date)),
                'created_at'          =>     date('Y-m-d H:i:s'),
              ]
            );
            DB::table('timesheetusers')->insert([
              'date'     =>   date('Y-m-d', strtotime($date)),
              'client_id'     =>     29,
              'workitem'     =>     'NA',
              'location'     =>     'NA',
              //   'billable_status'     =>     $request->billable_status[$i],
              'timesheetid'     =>     $id,
              'date'     =>     date('Y-m-d', strtotime($date)),
              'hour'     =>     0,
              'totalhour' =>      0,
              'assignment_id'     =>     213,
              'partner'     =>     887,
              'createdby' => auth()->user()->teammember_id,
              'created_at'          =>     date('Y-m-d H:i:s'),
              'updated_at'              =>    date('Y-m-d H:i:s'),
            ]);
          }
        }
      }

      // dd($pormotionandrejoiningdata);
      if ($requestDate >= $joiningDate) {

        if ($rejoining_date != null && $requestDate < $rejoiningDateformate) {
          // dd('hi', 1);
          $output = array('msg' => 'You can not fill timesheet before Rejoining date :' . $rejoining_date);
          return redirect('timesheet')->with('success', $output);
        }
        // dd('hi', 0);

        $data = $request->except(['_token', 'teammember_id', 'amount']);

        //	if ($request->date < '11-09-2023') {
        //dd('hi');
        // $output = array('msg' => 'Please fill timesheet from 11/09/2023, Monday onwards');
        //  return back()->with('success', $output);
        //   }

        //die;
        //? dd(date('w', strtotime($request->date))); // 4
        // check allready submited
        if (date('w', strtotime($request->date)) == 0) {
          $previousSaturday = date('Y-m-d', strtotime('-1 day', strtotime($request->date)));
          $previousSaturdayFilled = DB::table('timesheetusers')
            ->where('createdby', auth()->user()->teammember_id)
            ->where('date', $previousSaturday)
            ->where('status', 1)
            ->first();
          // dd('hi1', $previousSaturdayFilled);
          if ($previousSaturdayFilled != null) {
            $output = array('msg' => 'You already submitted for this week');
            return back()->with('success', $output);
          }
        }

        // check hour
        $hours = $request->input('totalhour');
        if (!is_numeric($hours) || $hours > 12) {
          $output = array('msg' => 'The total hours cannot be greater than 12');
          return back()->with('success', $output);
        }
        // dd(auth()->user()->teammember_id);
        //? dd(date('Y-m-d', strtotime($request->date))); "2023-11-30"
        $previouschck = DB::table('timesheetusers')
          ->where('createdby', auth()->user()->teammember_id)
          ->where('date', date('Y-m-d', strtotime($request->date)))
          ->where('status', 1)
          ->first();

        if ($previouschck != null) {
          //dd('hi');
          $output = array('msg' => 'You already submitted for this week');
          return back()->with('success', $output);
        }

        $previoussavechck = DB::table('timesheetusers')
          ->where('createdby', auth()->user()->teammember_id)
          ->where('date', date('Y-m-d', strtotime($request->date)))
          ->where('status', 0)
          ->first();

        if ($previoussavechck != null) {
          //dd('hi');
          $output = array('msg' => 'You already submitted for this date');
          return back()->with('success', $output);
        }



        $currentDate = Carbon::now()->format('d-m-Y');
        //dd($currentHour);
        if ($currentDate == $request->date && Carbon::now()->hour < 18) {
          //   //dd('hi');
          $output = array('msg' => 'You can only fill today timesheet after 6:00 pm');
          return back()->with('success', $output);
        }


        $leaves = DB::table('applyleaves')
          ->where('applyleaves.createdby', auth()->user()->teammember_id)
          ->where('status', '!=', 2)
          ->select('applyleaves.from', 'applyleaves.to')
          ->get();
        // dd('hi 1', $leaves);
        foreach ($leaves as $leave) {
          //Convert each data from table to Y-m-d format to compare
          $days = CarbonPeriod::create(
            date('Y-m-d', strtotime($leave->from)),
            date('Y-m-d', strtotime($leave->to))
          );

          foreach ($days as $day) {
            $leavess[] = $day->format('Y-m-d');
          }
        }
        // $currentday = date('Y-m-d', strtotime($request->date));// "2023-11-30"
        $currentday = date('Y-m-d', strtotime($request->date));
        // dd('hi 2', $currentday);
        // $ifcount=0;
        //  $elsecount=0;
        if (count($leaves) != 0) {

          //dd('if');
          foreach ($leavess as $leave) {
            // echo"<pre>";
            //  print_r($leave);

            if ($leave == $currentday) {
              //dd('if');
              // $ifcount=$ifcount+1;
              $output = array('msg' => 'You Have Leave for the Day (' . date('d-m-Y', strtotime($leave)) . ')');
              return redirect('timesheet')->with('statuss', $output);
            }
          }
        }

        // insert data in timesheet from request and get id 
        $id = DB::table('timesheets')->insertGetId(
          [
            'created_by' => auth()->user()->teammember_id,
            'month'     =>    date('F', strtotime($request->date)),
            'date'     =>    date('Y-m-d', strtotime($request->date)),
            'created_at'          =>     date('Y-m-d H:i:s'),
          ]
        );


        $count = count($request->assignment_id);

        // dd('hi 3', $count);
        for ($i = 0; $i < $count; $i++) {
          //dd($request->workitem[$i]);
          $assignment =  DB::table('assignmentmappings')->where('assignmentgenerate_id', $request->assignment_id[$i])->first();

          $a = DB::table('timesheetusers')->insert([
            'date'     =>     $request->date,
            'client_id'     =>     $request->client_id[$i],
            'assignmentgenerate_id'     =>     $request->assignment_id[$i],
            'workitem'     =>     $request->workitem[$i],
            'location'     =>     $request->location[$i],
            //   'billable_status'     =>     $request->billable_status[$i],
            'timesheetid'     =>     $id,
            'date'     =>     date('Y-m-d', strtotime($request->date)),
            'hour'     =>     $request->hour[$i],
            'totalhour' =>      $request->totalhour,
            'assignment_id'     =>     $assignment->assignment_id,
            'partner'     =>     $request->partner[$i],
            'createdby' => auth()->user()->teammember_id,
            'created_at'          =>     date('Y-m-d H:i:s'),
            'updated_at'              =>    date('Y-m-d H:i:s'),
          ]);

          if (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {
            // dd($request);
            $gettotalteamhour = DB::table('assignmentmappings')
              ->leftJoin(
                'assignmentteammappings',
                'assignmentteammappings.assignmentmapping_id',
                'assignmentmappings.id',
              )
              ->where(
                'assignmentmappings.assignmentgenerate_id',
                $request->assignment_id[$i]
              )
              ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
              ->first();

            if ($gettotalteamhour) {
              $gettotalteamhour = $gettotalteamhour->teamhour;
              // dd($gettotalteamhour);

              $finalresult =  $gettotalteamhour + $request->hour[$i];

              $totalteamhourupdate = DB::table('assignmentmappings')
                ->leftJoin(
                  'assignmentteammappings',
                  'assignmentteammappings.assignmentmapping_id',
                  'assignmentmappings.id',
                )
                ->where(
                  'assignmentmappings.assignmentgenerate_id',
                  $request->assignment_id[$i]
                )
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
                // ->get();
                ->update(['teamhour' =>  $finalresult]);
            }
          }

          if (auth()->user()->role_id == 13) {
            $assignmentdata = DB::table('assignmentmappings')
              ->where('assignmentgenerate_id', $request->assignment_id[$i])
              ->first();
            $finalresultleadpatner =  $assignmentdata->leadpartnerhour + $request->hour[$i];
            $finalresultotherpatner =  $assignmentdata->otherpartnerhour + $request->hour[$i];

            if ($assignmentdata->leadpartner == auth()->user()->teammember_id) {
              $update = DB::table('assignmentmappings')
                ->where('assignmentgenerate_id', $request->assignment_id[$i])
                ->where('leadpartner', auth()->user()->teammember_id)
                ->update(['leadpartnerhour' => $finalresultleadpatner]);
            }
            if ($assignmentdata->otherpartner == auth()->user()->teammember_id) {
              $update = DB::table('assignmentmappings')
                ->where('assignmentgenerate_id', $request->assignment_id[$i])
                ->where('otherpartner', auth()->user()->teammember_id)
                ->update(['otherpartnerhour' => $finalresultotherpatner]);
            }
          }
        }
      } else {
        // dd(auth()->user()->teammember_id);
        $output = array('msg' => 'You can not fill timesheet before Rejoining date :' . $joining_date);
        return redirect('timesheet')->with('success', $output);
      }

      //Attendance code

      $hdatess = date('Y-m-d', strtotime($request->date));
      $day =  DateTime::createFromFormat('Y-m-d', $hdatess)->format('d');      //
      $month =  DateTime::createFromFormat('Y-m-d', $hdatess)->format('F');   //
      $currentDate = new DateTime();
      $currentMonth = $currentDate->format('F');
      //dd($month);
      //   if ($currentDate->format('j') > 25) {
      //     $currentDate->modify('-1 month');
      //     $currentMonth = $currentDate->format('F');
      // }



      $dates = [
        '26' => 'twentysix',
        '27' => 'twentyseven',
        '28' => 'twentyeight',
        '29' => 'twentynine',
        '30' => 'thirty',
        '31' => 'thirtyone',
        '01' => 'one',
        '02' => 'two',
        '03' => 'three',
        '04' => 'four',
        '05' => 'five',
        '06' => 'six',
        '07' => 'seven',
        '08' => 'eight',
        '09' => 'nine',
        '10' => 'ten',
        '11' => 'eleven',
        '12' => 'twelve',
        '13' => 'thirteen',
        '14' => 'fourteen',
        '15' => 'fifteen',
        '16' => 'sixteen',
        '17' => 'seventeen',
        '18' => 'eighteen',
        '19' => 'ninghteen',
        '20' => 'twenty',
        '21' => 'twentyone',
        '22' => 'twentytwo',
        '23' => 'twentythree',
        '24' => 'twentyfour',
        '25' => 'twentyfive',
      ];



      if ($month != $currentMonth && $day > 25) {
        $dateTime = DateTime::createFromFormat('Y-m-d', $hdatess);
        $dateTime->modify('+1 month');
        $month = $dateTime->format('F');
      }
      if ($month != $currentMonth && $day < 25) {
        $dateTime = DateTime::createFromFormat('Y-m-d', $hdatess);
        $month = $dateTime->format('F');
      }
      if ($month == $currentMonth && $day > 25) {

        $dateTime = DateTime::createFromFormat('Y-m-d', $hdatess);
        $dateTime->modify('+1 month');
        $month = $dateTime->format('F');
      }

      //dd($month);


      $column = $dates[$day];

      $attendances = DB::table('attendances')->where('employee_name', auth()->user()->teammember_id)
        ->where('month', $month)->first();

      if ($attendances ==  null) {
        $teammember = DB::table('teammembers')->where('id', auth()->user()->teammember_id)->first();

        $a = DB::table('attendances')->insert([
          'employee_name'         =>     auth()->user()->teammember_id,
          'month'         =>    $month,
          'dateofjoining' =>   $teammember->joining_date,
          'created_at'          =>     date('Y-m-d H:i:s'),
          //   'exam_leave'      =>$value->date_total,
        ]);
        //dd($a);
      }


      //   dd($noofdaysaspertimesheet);

      $updatedtotalhour = $request->totalhour;
      if ($attendances != null && property_exists($attendances, $column)) {
        if ($attendances->$column != "LWP") {
          $updatedtotalhour = $request->totalhour + $attendances->$column;
        }
      }
      DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->where('month', $month)
        ->update([$column => $updatedtotalhour]);


      //end attendance


      $output = array('msg' => 'Create Successfully');
      if (auth()->user()->role_id == 14 || auth()->user()->role_id == 13 || auth()->user()->role_id == 15) {
        return redirect('timesheet/mylist')->with('success', $output);
      } else {
        return redirect('timesheet')->with('success', $output);
      }
    } catch (Exception $e) {
      DB::rollBack();
      Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
      report($e);
      $output = array('msg' => $e->getMessage());
      return back()->withErrors($output)->withInput();
    }
  }





222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetrequestController.php



    public function timesheetsubmission(Request $request)
    {
        try {
            $checksavetimesheet = DB::table('timesheetusers')
                ->where('createdby', auth()->user()->teammember_id)
                ->where('status', 0)
                ->first();

            if ($checksavetimesheet == null) {
                $output = array('msg' => "You have not saved any timesheets. Please save your timesheet.");
                return back()->with('statuss', $output);
            }

            $latesttimesheetreport =  DB::table('timesheetreport')
                ->where('teamid', auth()->user()->teammember_id)
                ->orderBy('id', 'desc')
                ->first();


            // $latesttimesheetreport is not null 
            if ($latesttimesheetreport !== null) {

                $timesheetreportenddate = Carbon::parse($latesttimesheetreport->enddate);

                // find next sturday 
                $nextSaturday = $timesheetreportenddate->copy()->next(Carbon::SATURDAY);
                $formattedNextSaturday = $nextSaturday->format('Y-m-d');
                $formattedNextSaturday1 = $timesheetreportenddate->format('d-m-Y');

                // find next week timesheet filled or not 
                $nextweektimesheet = DB::table('timesheetusers')
                    ->where('createdby', auth()->user()->teammember_id)
                    ->whereIn('status', [0, 1])
                    ->where('date', $formattedNextSaturday)
                    ->first();

                // Fetch the rejoining data
                $rejoiningcheck = DB::table('teammembers')
                    ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
                    ->leftJoin('rejoiningsamepost', 'rejoiningsamepost.teammember_id', '=', 'teammembers.id')
                    ->where('teammembers.id', auth()->user()->teammember_id)
                    ->select(
                        'teammembers.team_member',
                        'teammembers.staffcode',
                        'teammembers.joining_date',
                        'teamrolehistory.newstaff_code',
                        'teamrolehistory.rejoiningdate',
                        'rejoiningsamepost.rejoiningdate as samepostrejoiningdate'
                    )
                    ->first();



                // Initialize the variable
                $rejoiningchecktimesheet = null;

                // Check if any rejoining date is set
                $rejoiningDate = $rejoiningcheck->rejoiningdate ?? $rejoiningcheck->samepostrejoiningdate;

                // Check if the rejoining date is set
                if ($rejoiningDate) {
                    $rejoining = Carbon::parse($rejoiningDate);
                    $nextweek = Carbon::parse($formattedNextSaturday);

                    // Check if the rejoining date is before next week's Saturday
                    if ($rejoining < $nextweek) {
                        $rejoiningchecktimesheet = DB::table('timesheetusers')
                            ->where('createdby', auth()->user()->teammember_id)
                            ->whereIn('status', [0, 1])
                            ->where('date', $formattedNextSaturday)
                            ->first();
                    }
                }

                // Determine the next week's timesheet status


                if ($nextweektimesheet == null && $rejoiningchecktimesheet == null && $rejoiningDate == null) {
                    $output = array('msg' => "Fill the Week timesheet After this week: $formattedNextSaturday1");
                    return back()->with('statuss', $output);
                } else {
                    $usertimesheetfirstdate =  DB::table('timesheets')
                        ->where('status', '0')
                        ->where('created_by', auth()->user()->teammember_id)->orderBy('date', 'ASC')->first();

                    $lastdate = Carbon::createFromFormat('Y-m-d', $usertimesheetfirstdate->date ?? '')->addDays(6);

                    if ($usertimesheetfirstdate) {

                        $firstDate = new DateTime($usertimesheetfirstdate->date);
                        $dayOfWeek = $firstDate->format('w');
                        $daysToAdd = 0;

                        if ($dayOfWeek !== '0') {
                            $daysToAdd = 7 - $dayOfWeek;
                        } else {
                            $output = array('msg' => 'Submit the timesheet from Monday to Sunday.');
                            return back()->with('success', $output);
                        }

                        if ($dayOfWeek > 0) {
                            $daysToSubtract = $dayOfWeek - 1;
                        } else {
                            $daysToSubtract = $dayOfWeek;
                        }

                        $upcomingSunday = (new DateTime($firstDate->format('Y-m-d')))->modify("+$daysToAdd days")->format('Y-m-d');

                        $presentWeekMonday = (new DateTime($firstDate->format('Y-m-d')))->modify("-$daysToSubtract days")->format('Y-m-d');
                    }




                    $get_six_Data = DB::table('timesheets')
                        ->where('status', '0')
                        ->where('created_by', auth()->user()->teammember_id)
                        ->whereBetween('date', [$firstDate->format('Y-m-d'), $upcomingSunday])
                        ->orderBy('date', 'ASC')
                        ->get();


                    $lastdate = $get_six_Data->max('date');


                    $retrievedDates = [];   //copy dates in retrievedDates array in datetime format

                    foreach ($get_six_Data as $entry) {
                        $date = new DateTime($entry->date);
                        $retrievedDates[] = $date->format('Y-m-d');
                    }

                    $expectedDates = [];   // will contain ALL the dates occurs b/w first day to upcoming sunday

                    $firstDate = new DateTime($presentWeekMonday);

                    $upcomingSundayDate = new DateTime($upcomingSunday);


                    // Clone $firstDate so that it is not modified
                    $currentDate = clone $firstDate;

                    while ($currentDate->format('Y-m-d') < $upcomingSundayDate->format('Y-m-d')) {  //excluding sunday
                        $expectedDates[] = $currentDate->format('Y-m-d');


                        $currentDate->modify("+1 day");
                    }

                    $missingDates = array_diff($expectedDates, $retrievedDates);

                    if (!empty($missingDates)) {
                        $missingDatesString = implode(', ', $missingDates);
                        // "2023-11-13, 2023-11-14"

                        $output = array('msg' => "Timesheet Submit Failed Missing dates: $missingDatesString");
                        return back()->with('success', $output);
                    } else {

                        foreach ($get_six_Data as $getsixdata) {
                            // dd('hi', $getsixdata);

                            // Convert the requested date to a Carbon instance
                            $requestedDate = Carbon::createFromFormat('Y-m-d', $getsixdata->date);


                            if (date('l', strtotime(date('d-m-Y', strtotime($getsixdata->date)))) == 'Monday') {

                                $previousMonday = $requestedDate->copy()->previous(Carbon::MONDAY);

                                // Find the nearest next Saturday to the requested date
                                $nextSaturday = $requestedDate->copy()->next(Carbon::SATURDAY);

                                // Format the dates in 'Y-m-d' format
                                $previousMondayFormatted = $getsixdata->date;
                                $nextSaturdayFormatted = $nextSaturday->format('Y-m-d');
                                $nextSaturdayFormatted = $lastdate;


                                $week =  date('d-m-Y', strtotime($previousMondayFormatted))  . ' to ' . date('d-m-Y', strtotime($nextSaturdayFormatted));

                                //------------------- Shahid's code start---------------------
                                $co = DB::table('timesheetusers')
                                    ->where('createdby', auth()->user()->teammember_id)
                                    ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                    ->select('partner', DB::raw('SUM(hour) as total_hours'), DB::raw('COUNT(DISTINCT timesheetid) as row_count'))
                                    ->groupBy('partner')
                                    ->get();


                                // dd($co);
                                foreach ($co as $codata) {
                                    DB::table('timesheetreport')->insert([
                                        'teamid'       =>     auth()->user()->teammember_id,
                                        'week'       =>     $week,
                                        'totaldays'       =>     $codata->row_count,
                                        'totaltime' =>  $codata->total_hours,
                                        'partnerid'  => $codata->partner,
                                        'startdate'  => $previousMondayFormatted,
                                        'enddate'  => $nextSaturdayFormatted,
                                        // 'created_at'                =>       date('y-m-d'),
                                        'created_at'                =>      date('y-m-d H:i:s'),
                                    ]);
                                }

                                $totaldays = DB::table('timesheetusers')
                                    ->where('createdby', auth()->user()->teammember_id)
                                    ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                    ->select('date')
                                    ->groupBy('date')
                                    ->get();

                                $totaldaysCount = $totaldays->count();
                                $latesttimesheetreport = DB::table('timesheetreport')
                                    ->where('teamid', auth()->user()->teammember_id)
                                    ->where('startdate', $previousMondayFormatted)
                                    ->first();

                                if ($latesttimesheetreport) {
                                    DB::table('timesheetreport')
                                        ->where('id', $latesttimesheetreport->id)
                                        ->update(['dayscount' => $totaldaysCount]);
                                }

                                // dd($co);
                            }



                            DB::table('timesheetusers')->where('timesheetid', $getsixdata->id)->update([
                                'status'         =>     1,
                                'updated_at'              =>    date('y-m-d'),
                            ]);
                            DB::table('timesheets')->where('id', $getsixdata->id)->update([
                                'status'         =>     1,
                                'updated_at'              =>    date('y-m-d'),
                            ]);
                        }
                    }


                    // $output = array('msg' => 'Timesheet Submit Successfully');
                    $output = array('msg' => "Timesheet Submit Successfully till " . Carbon::createFromFormat('Y-m-d', $previousMondayFormatted)->format('d-m-Y') . " to " . Carbon::createFromFormat('Y-m-d', $nextSaturdayFormatted)->format('d-m-Y'));

                    // $output = array('msg' => "Timesheet Submit Successfully till $previousMondayFormatted to $nextSaturdayFormatted ");
                    return back()->with('success', $output);
                }
            } else {

                // dd($latesttimesheetreport, 1);
                $usertimesheetfirstdate =  DB::table('timesheets')
                    ->where('status', '0')
                    ->where('created_by', auth()->user()->teammember_id)->orderBy('date', 'ASC')->first();
                $lastdate = Carbon::createFromFormat('Y-m-d', $usertimesheetfirstdate->date ?? '')->addDays(6);

                if ($usertimesheetfirstdate) {
                    $firstDate = new DateTime($usertimesheetfirstdate->date);
                    $dayOfWeek = $firstDate->format('w');
                    $daysToAdd = 0;

                    if ($dayOfWeek !== '0') {
                        $daysToAdd = 7 - $dayOfWeek;
                    } else {
                        $output = array('msg' => 'Submit the timesheet from Monday to Sunday.');
                        return back()->with('success', $output);
                    }

                    if ($dayOfWeek > 0) {
                        $daysToSubtract = $dayOfWeek - 1;
                    } else {
                        $daysToSubtract = $dayOfWeek;
                    }

                    $upcomingSunday = (new DateTime($firstDate->format('Y-m-d')))->modify("+$daysToAdd days")->format('Y-m-d');

                    $presentWeekMonday = (new DateTime($firstDate->format('Y-m-d')))->modify("-$daysToSubtract days")->format('Y-m-d');
                }



                $get_six_Data = DB::table('timesheets')
                    ->where('status', '0')
                    ->where('created_by', auth()->user()->teammember_id)
                    ->whereBetween('date', [$firstDate->format('Y-m-d'), $upcomingSunday])
                    ->orderBy('date', 'ASC')
                    ->get();

                $lastdate = $get_six_Data->max('date');


                $retrievedDates = [];   //copy dates in retrievedDates array in datetime format

                foreach ($get_six_Data as $entry) {
                    $date = new DateTime($entry->date);
                    $retrievedDates[] = $date->format('Y-m-d');
                }

                $expectedDates = [];   // will contain ALL the dates occurs b/w first day to upcoming sunday

                $firstDate = new DateTime($presentWeekMonday);

                $upcomingSundayDate = new DateTime($upcomingSunday);


                // Clone $firstDate so that it is not modified
                $currentDate = clone $firstDate;

                while ($currentDate->format('Y-m-d') < $upcomingSundayDate->format('Y-m-d')) {  //excluding sunday
                    $expectedDates[] = $currentDate->format('Y-m-d');


                    $currentDate->modify("+1 day");
                }

                $missingDates = array_diff($expectedDates, $retrievedDates);

                if (!empty($missingDates)) {
                    $missingDatesString = implode(', ', $missingDates);
                    // "2023-11-13, 2023-11-14"

                    $output = array('msg' => "Timesheet Submit Failed Missing dates: $missingDatesString");
                    return back()->with('success', $output);
                } else {

                    foreach ($get_six_Data as $getsixdata) {
                        // dd('hi', $getsixdata);

                        // Convert the requested date to a Carbon instance
                        $requestedDate = Carbon::createFromFormat('Y-m-d', $getsixdata->date);


                        if (date('l', strtotime(date('d-m-Y', strtotime($getsixdata->date)))) == 'Monday') {

                            $previousMonday = $requestedDate->copy()->previous(Carbon::MONDAY);

                            // Find the nearest next Saturday to the requested date
                            $nextSaturday = $requestedDate->copy()->next(Carbon::SATURDAY);

                            // Format the dates in 'Y-m-d' format
                            $previousMondayFormatted = $getsixdata->date;
                            $nextSaturdayFormatted = $nextSaturday->format('Y-m-d');
                            $nextSaturdayFormatted = $lastdate;


                            $week =  date('d-m-Y', strtotime($previousMondayFormatted))  . ' to ' . date('d-m-Y', strtotime($nextSaturdayFormatted));

                            $co = DB::table('timesheetusers')
                                ->where('createdby', auth()->user()->teammember_id)
                                ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                ->select('partner', DB::raw('SUM(hour) as total_hours'), DB::raw('COUNT(DISTINCT timesheetid) as row_count'))
                                ->groupBy('partner')
                                ->get();


                            // dd($co);
                            foreach ($co as $codata) {
                                DB::table('timesheetreport')->insert([
                                    'teamid'       =>     auth()->user()->teammember_id,
                                    'week'       =>     $week,
                                    'totaldays'       =>     $codata->row_count,
                                    'totaltime' =>  $codata->total_hours,
                                    'partnerid'  => $codata->partner,
                                    'startdate'  => $previousMondayFormatted,
                                    'enddate'  => $nextSaturdayFormatted,
                                    // 'created_at'                =>       date('y-m-d'),
                                    'created_at'                =>      date('y-m-d H:i:s'),
                                ]);
                            }

                            $totaldays = DB::table('timesheetusers')
                                ->where('createdby', auth()->user()->teammember_id)
                                ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                ->select('date')
                                ->groupBy('date')
                                ->get();

                            $totaldaysCount = $totaldays->count();
                            $latesttimesheetreport = DB::table('timesheetreport')
                                ->where('teamid', auth()->user()->teammember_id)
                                ->where('startdate', $previousMondayFormatted)
                                ->first();

                            if ($latesttimesheetreport) {
                                DB::table('timesheetreport')
                                    ->where('id', $latesttimesheetreport->id)
                                    ->update(['dayscount' => $totaldaysCount]);
                            }

                            // dd($co);
                        }



                        DB::table('timesheetusers')->where('timesheetid', $getsixdata->id)->update([
                            'status'         =>     1,
                            'updated_at'              =>    date('y-m-d'),
                        ]);
                        DB::table('timesheets')->where('id', $getsixdata->id)->update([
                            'status'         =>     1,
                            'updated_at'              =>    date('y-m-d'),
                        ]);
                    }
                }


                // $output = array('msg' => 'Timesheet Submit Successfully');
                $output = array('msg' => "Timesheet Submit Successfully till " . Carbon::createFromFormat('Y-m-d', $previousMondayFormatted)->format('d-m-Y') . " to " . Carbon::createFromFormat('Y-m-d', $nextSaturdayFormatted)->format('d-m-Y'));

                // $output = array('msg' => "Timesheet Submit Successfully till $previousMondayFormatted to $nextSaturdayFormatted ");
                return back()->with('success', $output);
            }
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }




222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php

  public function store(Request $request)
  {

    $request->validate([
      'leavetype' => "required",
      'to' => "required",
      'from' => "required",
    ]);

    $skipaftertrue = false;
    $from = Carbon::createFromFormat('Y-m-d', $request->from);
    // $from = Carbon::createFromFormat('Y-m-d', '2024-03-11');
    $to = Carbon::createFromFormat('Y-m-d', $request->to ?? '');
    // software created date 
    $softwarermaked = Carbon::createFromFormat('Y-m-d', '2023-09-11');

    // timesheetreport latest submitted date 
    $latesttimesheetsubmitted = DB::table('timesheetreport')
      ->where('teamid', auth()->user()->teammember_id)
      ->latest()
      ->first();

    $pormotionandrejoiningdata = DB::table('teammembers')
      ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
      ->leftJoin('rejoiningsamepost', 'rejoiningsamepost.teammember_id', '=', 'teammembers.id')
      ->where('teammembers.id', auth()->user()->teammember_id)
      ->select(
        'teammembers.team_member',
        'teammembers.staffcode',
        'teammembers.joining_date',
        'teamrolehistory.newstaff_code',
        'teamrolehistory.rejoiningdate',
        'rejoiningsamepost.rejoiningdate as samepostrejoiningdate'
      )
      ->first();

    // $joining_date = $pormotionandrejoiningdata->joining_date ? Carbon::parse($pormotionandrejoiningdata->joining_date) : null;
    $rejoining_date = null;
    if ($pormotionandrejoiningdata) {
      $rejoining_date = $pormotionandrejoiningdata->rejoiningdate ?? $pormotionandrejoiningdata->samepostrejoiningdate;
      $rejoiningDateformate = $rejoining_date ? Carbon::parse($rejoining_date) : null;
    }
    // dd($rejoiningDateformate);
    if ($rejoiningDateformate && $from->lessThan($rejoiningDateformate)) {
      $output = ['msg' => 'You cannot apply leave before the rejoining date: ' . $rejoiningDateformate->format('d-m-Y')];
      return back()->with('statuss', $output);
    }

    // if ($joining_date && $from->lessThan($joining_date)) {
    //   $output = ['msg' => 'You cannot fill timesheet before the joining date: ' . $joining_date->format('d-m-Y')];
    //   return redirect('timesheet/mylist')->with('statuss', $output);
    // }

    // $latesttimesheetsubmittedformate = Carbon::createFromFormat('Y-m-d', $latesttimesheetsubmitted->enddate);
    $latesttimesheetsubmittedformate = null;
    if ($latesttimesheetsubmitted) {
      $latesttimesheetsubmittedformate = $latesttimesheetsubmitted->enddate
        ? Carbon::createFromFormat('Y-m-d', $latesttimesheetsubmitted->enddate)
        : null;
    }

    // Check if the from date is in the past
    if ($latesttimesheetsubmittedformate && $latesttimesheetsubmittedformate->greaterThan($from)) {

      // Check if the from date is in the past
      if ($softwarermaked->greaterThan($from)) {
        $output = ['msg' => 'You cannot apply leave before 11-09-2023'];
        return back()->with('statuss', $output);
      }

      $rejectedtimesheet = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->where('status', 2)
        ->first();


      $rejectedtimesheetformate = null;
      if ($rejectedtimesheet) {
        $rejectedtimesheetformate = Carbon::createFromFormat('Y-m-d', $rejectedtimesheet->date);
      }

      if ($rejectedtimesheetformate && $rejectedtimesheetformate->isSameDay($from)) {

        // Update total hour
        $timesheetdelete = DB::table('timesheetusers')->where('timesheetid', $rejectedtimesheet->timesheetid)->first();
        if (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {

          $gettotalteamhour = DB::table('assignmentmappings')
            ->leftJoin(
              'assignmentteammappings',
              'assignmentteammappings.assignmentmapping_id',
              'assignmentmappings.id',
            )
            ->where(
              'assignmentmappings.assignmentgenerate_id',
              $timesheetdelete->assignmentgenerate_id
            )
            ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
            ->first();

          if ($gettotalteamhour) {
            // dd($gettotalteamhour);
            $gettotalteamhour = $gettotalteamhour->teamhour;
            $finalresult =  $gettotalteamhour - $timesheetdelete->hour;

            $totalteamhourupdate = DB::table('assignmentmappings')
              ->leftJoin(
                'assignmentteammappings',
                'assignmentteammappings.assignmentmapping_id',
                'assignmentmappings.id',
              )
              ->where(
                'assignmentmappings.assignmentgenerate_id',
                $timesheetdelete->assignmentgenerate_id
              )
              ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
              // ->get();
              ->update(['teamhour' =>  $finalresult]);
          }
        }

        if (auth()->user()->role_id == 13) {
          $assignmentdata = DB::table('assignmentmappings')
            ->where('assignmentgenerate_id', $timesheetdelete->assignmentgenerate_id)
            ->first();

          $finalresultleadpatner =  $assignmentdata->leadpartnerhour - $timesheetdelete->hour;
          $finalresultotherpatner =  $assignmentdata->otherpartnerhour - $timesheetdelete->hour;

          if ($assignmentdata->leadpartner == auth()->user()->teammember_id) {
            $update2 = DB::table('assignmentmappings')
              ->where('assignmentgenerate_id', $timesheetdelete->assignmentgenerate_id)
              ->where('leadpartner', auth()->user()->teammember_id)
              ->update(['leadpartnerhour' => $finalresultleadpatner]);
          }
          if ($assignmentdata->otherpartner == auth()->user()->teammember_id) {
            $update2 = DB::table('assignmentmappings')
              ->where('assignmentgenerate_id', $timesheetdelete->assignmentgenerate_id)
              ->where('otherpartner', auth()->user()->teammember_id)
              ->update(['otherpartnerhour' => $finalresultotherpatner]);
          }
        }
        // Update total hour end 

        DB::table('timesheets')->where('id', $rejectedtimesheet->timesheetid)->update([
          'status'   => 3,
        ]);

        if ($request->leavetype == 9) {
          DB::table('timesheetusers')->where('id', $rejectedtimesheet->id)->update([
            'status'   => 3,
            'client_id'     =>    134,
            'workitem'     =>     $request->reasonleave,
            'assignmentgenerate_id' => null,
            'location'     =>     '',
            'hour'     =>     0,
            'totalhour' =>      0,
            'assignment_id'     =>     215,
            'partner'     =>     887,
          ]);
        } else {
          DB::table('timesheetusers')->where('id', $rejectedtimesheet->id)->update([
            'status'   => 3,
            'client_id'     =>    134,
            'assignmentgenerate_id' => null,
            'workitem'     =>     $request->reasonleave,
            'location'     =>     '',
            'hour'     =>     0,
            'totalhour' =>      0,
            'assignment_id'     =>     214,
            'partner'     =>     887,
          ]);
        }

        $id = DB::table('applyleaves')->insertGetId([
          'leavetype'         =>     $request->leavetype,
          'type'         =>     $request->type,
          'examtype'         =>     $request->examtype,
          'otherexam'         =>     $request->otherexam,
          'from'         =>     $request->from,
          'to'         =>     $request->to,
          'reasonleave'         =>     $request->reasonleave,
          'approver'         =>     $request->approver,
          'status'         =>    1,
          'createdby'         =>     auth()->user()->teammember_id,
          'created_at'          =>    date('Y-m-d H:i:s'),
          'updated_at'              =>    date('Y-m-d H:i:s'),
        ]);

        $output = array('msg' => 'Create Successfully');
        return back()->with('success', $output);
      } else {
        $output = ['msg' => 'You cannot apply leave before Submitted timesheet date'];
        return back()->with('statuss', $output);
      }
    }

    if ($latesttimesheetsubmittedformate == null) {
      // Check if the from date is in the past
      if ($softwarermaked->greaterThan($from)) {
        $output = ['msg' => 'You cannot apply leave before 11-09-2023'];
        return back()->with('statuss', $output);
      }
    }

    if ($from->equalTo($to) && $from->dayOfWeek === Carbon::SUNDAY) {
      $output = ['msg' => 'You cannot apply leave for Sunday'];
      return back()->with('statuss', $output);
    }
    // timesheetcheck 
    $timesheetcheck = DB::table('timesheets')
      ->where('created_by', auth()->user()->teammember_id)
      ->select('date')
      ->get();
    if (count($timesheetcheck) != 0) {
      foreach ($timesheetcheck as $timesheetchecks) {
        $leaveDates = CarbonPeriod::create(
          date('Y-m-d', strtotime($request->from)),
          date('Y-m-d', strtotime($request->to))
        );

        foreach ($leaveDates as $leaveDate) {
          if ($leaveDate->format('Y-m-d') == $timesheetchecks->date) {
            $output = array('msg' => 'You Have already filled timesheet for the Day (' . date('d-m-Y', strtotime($leaveDate)) . ')');
            return back()->with('statuss', $output);
          }
        }
      }
    }
    //dd('hi');

    //duplicate leave check
    $leaves = DB::table('applyleaves')
      ->where('applyleaves.createdby', auth()->user()->teammember_id)
      ->where('status', '!=', 2)
      ->select('applyleaves.from', 'applyleaves.to')
      ->get();

    $leaveDates = [];
    foreach ($leaves as $leave) {
      $days = CarbonPeriod::create(
        date('Y-m-d', strtotime($leave->from)),
        date('Y-m-d', strtotime($leave->to))
      );

      foreach ($days as $day) {
        $leaveDates[] = $day->format('Y-m-d');
      }
    }

    $currentDay = date('Y-m-d', strtotime($request->from));
    $lastDay = date('Y-m-d', strtotime($request->to));

    if (count($leaves) != 0) {
      foreach ($leaveDates as $leaveDate) {
        if ($leaveDate >= $currentDay && $leaveDate <= $lastDay) {
          $output = array('msg' => 'You Have Leave for the Day (' . date('d-m-Y', strtotime($leaveDate)) . ')');
          return back()->with('statuss', $output);
        }
      }
    }

    $currentdate = date('Y-m-d');
    $currentYear = date('Y');
    $financialYearStart = $currentYear . '-04-01';
    $financialYearEnd = ($currentYear + 1) . '-03-31';

    $teammember = DB::table('teammembers')->where('id', auth()->user()->teammember_id)->first();


    try {

      $currentDate = Carbon::now();
      $day = $currentDate->day;
      $currentYear = $currentDate->year;



      //birthday-festival leave 
      if ($request->leavetype == 8) {
        $to = Carbon::createFromFormat('Y-m-d', $request->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $request->from);
        $diff_in_days = $to->diffInDays($from) + 1;


        $financialYearStart = $currentYear . '-04-01';
        $financialYearEnd = ($currentYear + 1) . '-03-31';

        $count = DB::table('applyleaves')
          ->where('status', '!=', '2')
          ->where('leavetype', $request->leavetype)
          ->where('createdby', auth()->user()->teammember_id)
          ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
          ->first();


        $teammember = DB::table('teammembers')
          ->where('id', auth()->user()->teammember_id)
          ->first();

        $requestedDate = date('F d', strtotime($request->to));
        $birthdayDate = date('F d', strtotime($teammember->dateofbirth));

        if ($request->type == 0) {
          if ($request->to != $request->from) {

            $output = ['msg' => 'You can take only one day birthday leave'];
            return back()->with('success', $output);
          }
          if ($requestedDate != $birthdayDate) {

            $output = ['msg' => 'Your request for the birthday date is wrong'];
            return back()->with('success', $output);
          }
          if ($diff_in_days < 2 && $count != null) {
            $output = ['msg' => 'You have already taken a birthday leave'];
            return back()->with('success', $output);
          }
        } elseif ($request->type == 1) {
          if ($diff_in_days < 2) {
            if ($count != null) {
              $output = ['msg' => 'You have already taken a festival leave'];
              return back()->with('success', $output);
            }
          } else {
            $output = ['msg' => 'You can take only one day festival leave'];
            return back()->with('success', $output);
          }
        }


        $columnMappings = [
          '26' => 'twentysix',
          '27' => 'twentyseven',
          '28' => 'twentyeight',
          '29' => 'twentynine',
          '30' => 'thirty',
          '31' => 'thirtyone',
          '01' => 'one',
          '02' => 'two',
          '03' => 'three',
          '04' => 'four',
          '05' => 'five',
          '06' => 'six',
          '07' => 'seven',
          '08' => 'eight',
          '09' => 'nine',
          '10' => 'ten',
          '11' => 'eleven',
          '12' => 'twelve',
          '13' => 'thirteen',
          '14' => 'fourteen',
          '15' => 'fifteen',
          '16' => 'sixteen',
          '17' => 'seventeen',
          '18' => 'eighteen',
          '19' => 'ninghteen',
          '20' => 'twenty',
          '21' => 'twentyone',
          '22' => 'twentytwo',
          '23' => 'twentythree',
          '24' => 'twentyfour',
          '25' => 'twentyfive',
        ];

        $requestedDay = date('d', strtotime($request->to));
        $requestedDay = date('d', strtotime($request->to));
        $requestedMonth = $from->format('F');
        if (isset($columnMappings[$requestedDay])) {
          $columnName = $columnMappings[$requestedDay];
          if (in_array($requestedDay, ['26', '27', '28', '29', '30', '31'])) {
            $requestedMonth = $from->copy()->addMonth()->format('F');
          }
          DB::table('attendances')
            ->updateOrInsert(
              [
                'employee_name' => auth()->user()->teammember_id,
                'month' => $requestedMonth
              ],
              [
                $columnName => 'BL/C',
                'birthday_religious' => DB::raw('COALESCE(birthday_religious, 0) + 1'),
                'created_at' => now(),
                'updated_at' => now()
              ],
              [
                'created_at' => now()
              ]
            );
        }
      } elseif ($request->leavetype == 9) {



        $to = Carbon::createFromFormat('Y-m-d', $request->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $request->from);
        $requestdays = $to->diffInDays($from) + 1;



        $period = CarbonPeriod::create($request->from, $request->to);
        $datess = [];
        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');

          //  dd($date->format('Y-m-d'));
          $id = DB::table('timesheets')->insertGetId(
            [
              'created_by' => auth()->user()->teammember_id,
              'month'     =>     date('F', strtotime($date->format('Y-m-d'))),
              'date'     =>    $date->format('Y-m-d'),
              'created_at'          =>     date('Y-m-d H:i:s'),
            ]
          );
          $a = DB::table('timesheetusers')->insert([
            'date'     =>    $date->format('Y-m-d'),
            'client_id'     =>    134,
            'workitem'     =>     $request->reasonleave,
            'location'     =>     '',
            //   'billable_status'     =>     $request->billable_status[$i],
            'timesheetid'     =>     $id,
            'date'     =>    $date->format('Y-m-d'),
            'hour'     =>     0,
            'totalhour' =>      0,
            'assignment_id'     =>     215,
            'partner'     =>     887,
            // adding approver in patner section 
            // 'partner'     =>     $request->approver,
            'createdby' => auth()->user()->teammember_id,
            'created_at'          =>     date('Y-m-d H:i:s'),
            'updated_at'              =>    date('Y-m-d H:i:s'),
          ]);
        }


        $getholidays = DB::table('holidays')->where('startdate', '>=', $request->from)
          ->where('enddate', '<=', $request->to)->select('startdate')->get();



        $hdatess = [];
        foreach ($getholidays as $date) {
          $hdatess[] = date('Y-m-d', strtotime($date->startdate));
        }


        $cl_leave = array_diff($datess, $hdatess);


        $cl_leave_total = count($cl_leave);

        $lstatus = "CL/C";

        if ($teammember->joining_date < $financialYearStart) {

          $startDate = \Carbon\Carbon::createFromFormat('Y-m-d', $financialYearStart);
        } else {

          $startDate = \Carbon\Carbon::createFromFormat('Y-m-d', $teammember->joining_date);
        }




        $diff_in_months = $startDate->diffInMonths($currentdate) + 1;


        $totalcountCasual = 1.5 * $diff_in_months;
        if (\Carbon\Carbon::parse($teammember->joining_date)->diffInDays($currentdate) <= 90) {
          $totalcountCasual = 0;
        }
        $teamdate = \Carbon\Carbon::createFromFormat('Y-m-d', $teammember->joining_date);
        $teammonthcount = $teamdate->diffInMonths($currentdate) + 1;


        $columnMappings = [
          '26' => 'twentysix',
          '27' => 'twentyseven',
          '28' => 'twentyeight',
          '29' => 'twentynine',
          '30' => 'thirty',
          '31' => 'thirtyone',
          '01' => 'one',
          '02' => 'two',
          '03' => 'three',
          '04' => 'four',
          '05' => 'five',
          '06' => 'six',
          '07' => 'seven',
          '08' => 'eight',
          '09' => 'nine',
          '10' => 'ten',
          '11' => 'eleven',
          '12' => 'twelve',
          '13' => 'thirteen',
          '14' => 'fourteen',
          '15' => 'fifteen',
          '16' => 'sixteen',
          '17' => 'seventeen',
          '18' => 'eighteen',
          '19' => 'ninghteen',
          '20' => 'twenty',
          '21' => 'twentyone',
          '22' => 'twentytwo',
          '23' => 'twentythree',
          '24' => 'twentyfour',
          '25' => 'twentyfive',
        ];

        foreach ($cl_leave as $requestedDate) {
          $day = date('d', strtotime($requestedDate));
          $requestedMonth = date('F', strtotime($requestedDate));


          if ($day >= 26 && $day <= 31) {
            $requestedDateTime = new DateTime($requestedDate);



            $requestedDateTime->modify('first day of next month');
            $requestedMonth = $requestedDateTime->format('F');
          }

          $appliedCasual = DB::table('applyleaves')
            ->where('status', '!=', '2')
            ->where('leavetype', $request->leavetype)
            ->where('createdby', auth()->user()->teammember_id)
            ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
            ->get();
          //dd($appliedCasual);


          $countCasual = 0;
          $casualDates = [];
          $holidaydates = [];
          foreach ($appliedCasual as $CasualLeave) {

            $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->from);
            $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $CasualLeave->to);
            $period = CarbonPeriod::create($fromDate, $toDate);



            foreach ($period as $date) {
              $casualDates[] = $date->format('Y-m-d');

              //dd($date->format('Y-m-d'));


            }

            $getholidays = DB::table('holidays')->get();


            foreach ($getholidays as $date) {
              $holidaydates[] = date('Y-m-d', strtotime($date->startdate));
            }
            $casualDates = array_unique($casualDates);
          }

          //    die;

          $attendanceRecord = DB::table('attendances')
            ->where('employee_name', auth()->user()->teammember_id)
            ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
            ->get();
          $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
          $clInAttendance = 0;
          foreach ($attendanceRecord as $item) {
            foreach ($columns as $column) {
              if ($item->$column === 'CL/C' || $item->$column === 'CL/A') {
                $clInAttendance++;
              }
            }
          }

          if ($clInAttendance >= $totalcountCasual || $totalcountCasual - $clInAttendance == 0.5) {

            $lstatus = 'LWP';
          }

          $attendanceUpdateData = [];
          $attendances = DB::table('attendances')->where('employee_name', auth()->user()->teammember_id)
            ->where('month', $requestedMonth)->first();

          if ($attendances == null) {
            if ($lstatus == 'CL/C') {
              $attendanceData = [
                'employee_name' => auth()->user()->teammember_id,
                'month' => $requestedMonth,
                'casual_leave' => 1,
                'created_at' => Carbon::now(),
              ];
            } else {
              $attendanceData = [
                'employee_name' => auth()->user()->teammember_id,
                'month' => $requestedMonth,
                'lwp' => 1,
                'created_at' => Carbon::now(),
              ];
            }


            DB::table('attendances')->insert($attendanceData);
          } else {
            if ($lstatus == 'CL/C') {
              DB::table('attendances')
                ->where('employee_name', auth()->user()->teammember_id)
                ->where('month', $requestedMonth)
                ->update(['casual_leave' => DB::raw('COALESCE(casual_leave, 0) + 1')]);
            } else {
              DB::table('attendances')
                ->where('employee_name', auth()->user()->teammember_id)
                ->where('month', $requestedMonth)
                ->update(['lwp' => DB::raw('COALESCE(lwp, 0) + 1')]);
            }
          }

          $column = $columnMappings[$day] ?? null;
          if ($column !== null) {
            $attendanceUpdateData[$column] = $lstatus;
          }


          //Update the attendance data for the current date
          DB::table('attendances')->where('employee_name', auth()->user()->teammember_id)
            ->where('month', $requestedMonth)->update($attendanceUpdateData);
        }
      }
      // Casual leave end

      elseif ($request->leavetype == 10) {

        $sick = DB::table('leavetypes')->where('name', 'Sick Leave')->where('year', $currentYear)->first();

        //      $availableleave = $sick->noofdays - $takeleavecount ;
        //  dd($availableleave);
        $to = Carbon::createFromFormat('Y-m-d', $request->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $request->from);
        $requestdays = $to->diffInDays($from) + 1;





        $period = CarbonPeriod::create($request->from, $request->to);
        $datess = [];
        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }
        // dd($datess);
        // Convert the period to an array of dates
        // $dates = $period->toArray();

        $getholidays = DB::table('holidays')->where('startdate', '>=', $request->from)
          ->where('enddate', '<=', $request->to)->select('startdate')->get();

        if (count($getholidays) != 0) {
          foreach ($getholidays as $date) {
            $hdatess[] = date('Y-m-d', strtotime($date->startdate));
          }
        } else {
          $hdatess[] = 0;
        }
        //dd($hdatess);

        $sl_leave = array_diff($datess, $hdatess);
        $sl_leave_total = count(array_diff($datess, $hdatess));

        $lstatus = "SL/C";


        $columnMappings = [
          '26' => 'twentysix',
          '27' => 'twentyseven',
          '28' => 'twentyeight',
          '29' => 'twentynine',
          '30' => 'thirty',
          '31' => 'thirtyone',
          '01' => 'one',
          '02' => 'two',
          '03' => 'three',
          '04' => 'four',
          '05' => 'five',
          '06' => 'six',
          '07' => 'seven',
          '08' => 'eight',
          '09' => 'nine',
          '10' => 'ten',
          '11' => 'eleven',
          '12' => 'twelve',
          '13' => 'thirteen',
          '14' => 'fourteen',
          '15' => 'fifteen',
          '16' => 'sixteen',
          '17' => 'seventeen',
          '18' => 'eighteen',
          '19' => 'ninghteen',
          '20' => 'twenty',
          '21' => 'twentyone',
          '22' => 'twentytwo',
          '23' => 'twentythree',
          '24' => 'twentyfour',
          '25' => 'twentyfive',
        ];
        foreach ($sl_leave as $requestedDate) {


          $day = date('d', strtotime($requestedDate));
          $requestedMonth = date('F', strtotime($requestedDate));

          if ($day >= 26 && $day <= 31) {
            $requestedDateTime = new DateTime($requestedDate);
            $requestedDateTime->modify('first day of next month');
            $requestedMonth = $requestedDateTime->format('F');
          }

          $appliedSick = DB::table('applyleaves')
            ->where('status', '!=', '2')
            ->where('leavetype', $request->leavetype)
            ->where('createdby', auth()->user()->teammember_id)
            ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
            ->get();

          $countSick = 0;
          $sickDates = [];
          $holidaydates = [];
          foreach ($appliedSick as $sickLeave) {

            $fromDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->from);
            $toDate = \Carbon\Carbon::createFromFormat('Y-m-d', $sickLeave->to);
            $period = CarbonPeriod::create($fromDate, $toDate);


            foreach ($period as $date) {
              $sickDates[] = $date->format('Y-m-d');
            }

            $getholidays = DB::table('holidays')->get();


            foreach ($getholidays as $date) {
              $holidaydates[] = date('Y-m-d', strtotime($date->startdate));
            }
            $sickDates = array_unique($sickDates);
          }


          $attendanceRecord = DB::table('attendances')
            ->where('employee_name', auth()->user()->teammember_id)
            ->whereBetween('created_at', [$financialYearStart, $financialYearEnd])
            ->get();
          $columns = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'ninghteen', 'twenty', 'twentyone', 'twentytwo', 'twentythree', 'twentyfour', 'twentyfive', 'twentysix', 'twentyseven', 'twentyeight', 'twentynine', 'thirty', 'thirtyone'];
          $slInAttendance = 0;
          foreach ($attendanceRecord as $item) {
            foreach ($columns as $column) {
              if ($item->$column === 'SL/C' || $item->$column === 'SL/A') {
                $slInAttendance++;
              }
            }
          }

          if ($slInAttendance >= $sick->noofdays) {

            $lstatus = 'LWP';
          }

          $attendanceUpdateData = [];
          $attendances = DB::table('attendances')
            ->where('employee_name', auth()->user()->teammember_id)
            ->where('month', $requestedMonth)
            ->first();

          $attendanceData = [
            'employee_name' => auth()->user()->teammember_id,
            'month' => $requestedMonth,
            'created_at' => Carbon::now()
          ];

          if ($lstatus == 'SL/C') {
            $attendanceData['sick_leave'] = 1;
          } else {
            $attendanceData['lwp'] = 1;
          }

          if ($attendances == null) {
            DB::table('attendances')->insert($attendanceData);
          } else {
            if ($lstatus == 'SL/C') {
              DB::table('attendances')
                ->where('employee_name', auth()->user()->teammember_id)
                ->where('month', $requestedMonth)
                ->update(['sick_leave' => DB::raw('COALESCE(sick_leave, 0) + 1')]);
            } else {
              DB::table('attendances')
                ->where('employee_name', auth()->user()->teammember_id)
                ->where('month', $requestedMonth)
                ->update(['lwp' => DB::raw('COALESCE(lwp, 0) + 1')]);
            }
          }


          $column = $columnMappings[$day] ?? null;
          if ($column !== null) {
            $attendanceUpdateData[$column] = $lstatus;
          }

          //Update the attendance data for the current date
          DB::table('attendances')->where('employee_name', auth()->user()->teammember_id)
            ->where('month', $requestedMonth)->update($attendanceUpdateData);
        }
      } elseif ($request->leavetype == 11) {
        $to = Carbon::createFromFormat('Y-m-d', $request->to ?? '');
        $from = Carbon::createFromFormat('Y-m-d', $request->from);
        $requestdays = $to->diffInDays($from) + 1;





        $period = CarbonPeriod::create($request->from, $request->to);
        $datess = [];
        foreach ($period as $date) {
          $datess[] = $date->format('Y-m-d');
        }
        // dd($datess);
        // Convert the period to an array of dates
        // $dates = $period->toArray();

        $getholidays = DB::table('holidays')->where('startdate', '>=', $request->from)
          ->where('enddate', '<=', $request->to)->select('startdate')->get();
        if (count($getholidays) != 0) {
          foreach ($getholidays as $date) {
            $hdatess[] = date('Y-m-d', strtotime($date->startdate));
          }
        } else {
          $hdatess[] = 0;
        }


        $exam_leave = array_diff($datess, $hdatess);
        $exam_leave_total = count(array_diff($datess, $hdatess));

        $lstatus = "EL/C";




        $columnMappings = [
          '26' => 'twentysix',
          '27' => 'twentyseven',
          '28' => 'twentyeight',
          '29' => 'twentynine',
          '30' => 'thirty',
          '31' => 'thirtyone',
          '01' => 'one',
          '02' => 'two',
          '03' => 'three',
          '04' => 'four',
          '05' => 'five',
          '06' => 'six',
          '07' => 'seven',
          '08' => 'eight',
          '09' => 'nine',
          '10' => 'ten',
          '11' => 'eleven',
          '12' => 'twelve',
          '13' => 'thirteen',
          '14' => 'fourteen',
          '15' => 'fifteen',
          '16' => 'sixteen',
          '17' => 'seventeen',
          '18' => 'eighteen',
          '19' => 'ninghteen',
          '20' => 'twenty',
          '21' => 'twentyone',
          '22' => 'twentytwo',
          '23' => 'twentythree',
          '24' => 'twentyfour',
          '25' => 'twentyfive',
        ];

        foreach ($exam_leave as $exam_leave) {

          $day = date('d', strtotime($exam_leave));
          $requestedMonth = date('F', strtotime($exam_leave));

          if ($day >= 26 && $day <= 31) {
            $requestedDateTime = new DateTime($exam_leave);
            $requestedDateTime->modify('first day of next month');
            $requestedMonth = $requestedDateTime->format('F');
          }


          $attendanceUpdateData = [];
          $attendances = DB::table('attendances')
            ->where('employee_name', auth()->user()->teammember_id)
            ->where('month', $requestedMonth)
            ->first();

          $attendanceData = [
            'employee_name' => auth()->user()->teammember_id,
            'month' => $requestedMonth,
            'created_at' => Carbon::now()
          ];

          if ($lstatus == 'EL/C') {
            $attendanceData['exam_leave'] = 1;
          } else {
            $attendanceData['lwp'] = 1;
          }

          if ($attendances == null) {
            DB::table('attendances')->insert($attendanceData);
          } else {
            if ($lstatus == 'EL/C') {
              DB::table('attendances')
                ->where('employee_name', auth()->user()->teammember_id)
                ->where('month', $requestedMonth)
                ->update(['exam_leave' => DB::raw('COALESCE(sick_leave, 0) + 1')]);
            } else {
              DB::table('attendances')
                ->where('employee_name', auth()->user()->teammember_id)
                ->where('month', $requestedMonth)
                ->update(['lwp' => DB::raw('COALESCE(lwp, 0) + 1')]);
            }
          }


          $column = $columnMappings[$day] ?? null;
          if ($column !== null) {
            $attendanceUpdateData[$column] = $lstatus;
          }

          //Update the attendance data for the current date
          DB::table('attendances')->where('employee_name', auth()->user()->teammember_id)
            ->where('month', $requestedMonth)->update($attendanceUpdateData);
        }
      }

      if ($request->hasFile('report')) {
        $file = $request->file('report');
        $destinationPath = 'backEnd/image/report';
        $name = $file->getClientOriginalName();
        $s = $file->move($destinationPath, $name);
        $data['salaryincomefile'] = $name;
        $data['report'] = $name;
      }
      $id = DB::table('applyleaves')->insertGetId([
        'leavetype'         =>     $request->leavetype,
        'approver'         =>     $request->approver,
        'from'         =>     $request->from,
        'type'         =>     $request->type,
        'examtype'         =>     $request->examtype,
        'otherexam'         =>     $request->otherexam,
        'to'         =>     $request->to,
        'report'         => $data['report'] ?? '',
        'status'         =>    0,
        'reasonleave'         =>     $request->reasonleave,
        'createdby'         =>     auth()->user()->teammember_id,
        'created_at'          =>    date('Y-m-d H:i:s'),
        'updated_at'              =>    date('Y-m-d H:i:s'),
      ]);
      if ($request->teammember_id != null) {
        foreach ($request->teammember_id as $teammember) {
          DB::table('leaveteams')->insert([
            'leave_id'         =>     $id,
            'teammember_id'         =>     $teammember,
            'created_at'          =>     date('Y-m-d H:i:s'),
            'updated_at'              =>     date('Y-m-d H:i:s'),
          ]);
        }
      }
      $teammemberemail = Teammember::where('id', $request->approver)->first();
      //  dd($teammemberemail);
      $teammembername = Teammember::where('id', auth()->user()->teammember_id)->first();

      $data = array(
        'id' => $id,
        'leavetype'         =>     $request->leavetype,
        'from'         =>     $request->from,
        'to'         =>     $request->to,
        'teammembername'         =>    $teammembername->team_member,
        'teammemberemail' => $teammemberemail->emailid ?? '',
        'id' => $id ?? ''

      );

      Mail::send('emails.applyleaveform', $data, function ($msg) use ($data) {
        $msg->to($data['teammemberemail']);
        $msg->cc('itsupport_delhi@vsa.co.in');
        $msg->subject('VSA Apply Leave Request');
      });


      $output = array('msg' => 'Create Successfully');
      return back()->with('success', $output);
    } catch (Exception $e) {
      DB::rollBack();
      Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
      report($e);
      $output = array('msg' => $e->getMessage());
      return back()->withErrors($output)->withInput();
    }
  }




222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php

  public function full_list()
  {

    $teammember = DB::table('teammembers')
      ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
      ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
      ->select('teammembers.id', 'teammembers.team_member', 'teammembers.emailid', 'roles.rolename', 'teammembers.staffcode', 'teamrolehistory.newstaff_code')
      ->where('teammembers.status', '1')->distinct()->get();

    $month = DB::table('timesheets')
      ->select('timesheets.month')->distinct()->get();
    $result = DB::table('timesheetusers')->select(DB::raw('YEAR(date) as year'))
      ->distinct()->orderBy('year', 'DESC')->limit(5)->get();
    $years = $result->pluck('year');

    //dd($month);
    $timesheetData = DB::table('timesheets')
      ->leftjoin('teammembers', 'teammembers.id', 'timesheets.created_by')
      ->select('timesheets.*', 'teammembers.team_member', 'teammembers.staffcode')->orderBy('id', 'DESC')->paginate(30);
    // dd($timesheetData);
    return view('backEnd.timesheet.hrindex', compact('timesheetData', 'teammember', 'month', 'years'));
  }
  



222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\hrindex.blade.php

                            @foreach ($timesheetData as $timesheetDatas)
                                <tr>
                                    @php
                                        $client_id = DB::table('timesheetusers')
                                            ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
                                            ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
                                            ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.partner')
                                            ->where('timesheetusers.timesheetid', $timesheetDatas->id)

                                            ->select(
                                                'clients.client_name',
                                                'clients.client_code',
                                                'timesheetusers.hour',
                                                'assignments.assignment_name',
                                                'billable_status',
                                                'workitem',
                                                'teammembers.id',
                                                'teammembers.team_member',
                                                'teammembers.staffcode',
                                            )
                                            ->get();

                                        //  dd($client_id);
                                        $total = DB::table('timesheetusers')

                                            ->where('timesheetusers.timesheetid', $timesheetDatas->id)
                                            ->sum('hour');

                                        $dates = date('l', strtotime($timesheetDatas->date));

                                        $permotioncheck = DB::table('teamrolehistory')
                                            ->where('teammember_id', $timesheetDatas->created_by)
                                            ->first();
                                        //shshid client
                                        $datadate = Carbon\Carbon::createFromFormat(
                                            'Y-m-d H:i:s',
                                            $timesheetDatas->created_at,
                                        );

                                        $permotiondate = null;
                                        if ($permotioncheck) {
                                            $permotiondate = Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $permotioncheck->created_at,
                                            );
                                        }
                                    @endphp
                                    <td style="display: none;">{{ $timesheetDatas->id }}</td>
                                    <td>{{ $timesheetDatas->team_member ?? '' }} </td>
                                    @if ($permotioncheck && $datadate->greaterThan($permotiondate))
                                        <td>{{ $permotioncheck->newstaff_code }}</td>
                                    @else
                                        <td>{{ $timesheetDatas->staffcode }}</td>
                                    @endif
                                    {{-- <td>{{ $timesheetDatas->staffcode ?? '' }} </td> --}}
                                    <!-- <td>{{ date('d-M-Y', strtotime($timesheetDatas->created_at)) ?? '' }} </td>-->
                                    <td>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                    </td>
                                    <td>
                                        @if ($timesheetDatas->date != null)
                                            {{ $dates ?? '' }}
                                        @endif
                                    </td>

                                    <span style="font-size: 13px;">

                                        <td>

                                            @foreach ($client_id as $item)
                                                {{ $item->client_name ?? '' }} ({{ $item->client_code ?? '' }})
                                                @if ($item->client_name != 0)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>
                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->assignment_name ?? '' }}@if ($item->assignment_name != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>

                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->workitem ?? '' }}@if ($item->workitem != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>
                                        <td>
                                            {{-- @foreach ($client_id as $item)
                                                {{ $item->team_member ?? '' }} ({{ $item->staffcode ?? '' }})
                                                @if ($item->team_member != null)
                                                    ,
                                                @endif
                                            @endforeach --}}
                                            @foreach ($client_id as $item)
                                                @php

                                                    $partnerpermotioncheck = DB::table('teamrolehistory')
                                                        ->where('teammember_id', $item->id)
                                                        ->first();
                                                    //shshid client
                                                    $partnerdatadate = Carbon\Carbon::createFromFormat(
                                                        'Y-m-d H:i:s',
                                                        $timesheetDatas->created_at,
                                                    );

                                                    $partnerpermotiondate = null;
                                                    if ($partnerpermotioncheck) {
                                                        $partnerpermotiondate = Carbon\Carbon::createFromFormat(
                                                            'Y-m-d H:i:s',
                                                            $partnerpermotioncheck->created_at,
                                                        );
                                                    }
                                                @endphp

                                                {{ $item->team_member ?? '' }}
                                                @if ($partnerpermotioncheck && $partnerdatadate && $partnerdatadate->greaterThan($partnerpermotiondate))
                                                    ({{ $partnerpermotioncheck->newstaff_code }})
                                                @else
                                                    ( {{ $item->staffcode }})
                                                @endif
                                                @if ($item->team_member != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>
                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->hour ?? '' }} @if ($item->hour != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>






                                        <td>{{ $total }}</td>
                                        <td>

                                            @if (auth()->user()->role_id == 18 || auth()->user()->role_id == 11)
                                                <a href="{{ url('/timesheet/destroy/' . $timesheetDatas->id) }}"
                                                    onclick="return confirm('Are you sure you want to delete this item?');"
                                                    class="btn btn-danger-soft btn-sm"><i class="far fa-trash-alt"></i></a>
                                            @else
                                                <!-- <td> <a href="{{ url('/timesheet/destroy/' . $timesheetDatas->id) }}"
                                                                                                                                                                                                                                                                                onclick="return confirm('Are you sure you want to delete this item?');"
                                                                                                                                                                                                                                                                                class="btn btn-danger-soft btn-sm"><i class="far fa-trash-alt"></i></a></td>
                                                                                                                                                                                                                                                                        -->
                                            @endif
                                        </td>



                                </tr>
                            @endforeach





222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php


  public function full_list()
  {

    $teammember = DB::table('teammembers')
      ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
      ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
      ->select('teammembers.id', 'teammembers.team_member', 'teammembers.emailid', 'roles.rolename', 'teammembers.staffcode', 'teamrolehistory.newstaff_code')
      ->where('teammembers.status', '1')->distinct()->get();

    $month = DB::table('timesheets')
      ->select('timesheets.month')->distinct()->get();
    $result = DB::table('timesheetusers')->select(DB::raw('YEAR(date) as year'))
      ->distinct()->orderBy('year', 'DESC')->limit(5)->get();
    $years = $result->pluck('year');

    //dd($month);
    $timesheetData = DB::table('timesheets')
      ->leftjoin('teammembers', 'teammembers.id', 'timesheets.created_by')
      ->select('timesheets.*', 'teammembers.team_member', 'teammembers.staffcode')->orderBy('id', 'DESC')->paginate(30);
    // dd($timesheetData);
    return view('backEnd.timesheet.hrindex', compact('timesheetData', 'teammember', 'month', 'years'));
  }





22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\weeklylist.blade.php ............

                            @foreach ($timesheetData as $timesheetDatas)
                                <tr>
                                    @php
                                        $permotioncheck = DB::table('teamrolehistory')
                                            ->where('teammember_id', $timesheetDatas->createdby)
                                            ->first();

                                        $datadate = $timesheetDatas->assignmentcreated
                                            ? Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $timesheetDatas->assignmentcreated,
                                            )
                                            : null;

                                        $permotiondate = null;
                                        if ($permotioncheck) {
                                            $permotiondate = Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $permotioncheck->created_at,
                                            );
                                        }

                                    @endphp
                                    {{-- @php

                                    $permotioncheck = DB::table('teamrolehistory')
                                        ->where('teammember_id', $timesheetDatas->createdby)
                                        ->first();

                                    $datadate = Carbon\Carbon::createFromFormat(
                                        'Y-m-d H:i:s',
                                        $timesheetDatas->created_at,
                                    );

                                    $permotiondate = null;
                                    if ($permotioncheck) {
                                        $permotiondate = Carbon\Carbon::createFromFormat(
                                            'Y-m-d H:i:s',
                                            $permotioncheck->created_at,
                                        );
                                    }

                                @endphp --}}
                                    <td style="display: none;">{{ $timesheetDatas->id }}</td>
                                    <td> {{ $timesheetDatas->team_member ?? '' }} </td>
                                    {{-- <td> {{ $timesheetDatas->staffcode ?? '' }} </td> --}}
                                    @if ($permotiondate && $datadate && $datadate->greaterThan($permotiondate))
                                        <td>{{ $permotioncheck->newstaff_code }}</td>
                                    @else
                                        <td>{{ $timesheetDatas->staffcode }}</td>
                                    @endif
                                    <td> <span style="display: none;">
                                            {{ date('Y-m-d', strtotime($timesheetDatas->date)) }}</span>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                    </td>
                                    <td>
                                        @if ($timesheetDatas->date != null)
                                            {{ date('l', strtotime($timesheetDatas->date)) }}
                                        @endif
                                    </td>
                                    <td>{{ $timesheetDatas->client_name ?? '' }} ({{ $timesheetDatas->client_code ?? '' }})
                                    </td>
                                    <td>
                                        {{ $timesheetDatas->assignment_name ?? '' }} (
                                        {{ $timesheetDatas->assignmentgenerate_id ?? '' }})
                                        @if ($timesheetDatas->assignmentname != null)
                                            ({{ $timesheetDatas->assignmentname ?? '' }})
                                        @endif
                                    </td>
                                    <td> {{ $timesheetDatas->workitem ?? '' }}</td>
                                    <td>{{ $timesheetDatas->location ?? '' }} </td>
                                    <td> {{ $timesheetDatas->patnername ?? '' }}
                                        {{-- ({{ $timesheetDatas->newstaff_code ?? ($timesheetDatas->patnerstaffcodee ?? '') }}) --}}
                                        @if ($permotiondate && $datadate && $datadate->greaterThan($permotiondate))
                                            ( {{ $timesheetDatas->newstaff_code }})
                                        @else
                                            ( {{ $timesheetDatas->patnerstaffcodee ?? '' }})
                                        @endif
                                    </td>
                                    {{-- <td> {{ $timesheetDatas->patnername ?? '' }}
                                    (
                                    {{ $timesheetDatas->newstaff_code ?? ($timesheetDatas->patnerstaffcodee ?? '') }})
                                </td> --}}
                                    <td>{{ $timesheetDatas->hour ?? '' }}</td>
                                    <td>
                                        @if ($timesheetDatas->status == 0)
                                            <span class="badge badge-pill badge-warning">Saved</span>
                                        @elseif ($timesheetDatas->status == 1 || $timesheetDatas->status == 3)
                                            <span class="badge badge-pill badge-danger">Submit</span>
                                        @else
                                            <span class="badge badge-pill badge-secondary">Rejected</span>
                                        @endif
                                    </td>
                                    @if (Auth::user()->role_id == 11 || Auth::user()->teammember_id != $timesheetDatas->createdby)
                                        <td>
                                            @if ($timesheetDatas->status == 2)
                                                <a href="  {{ url('/timesheet/reject/' . $timesheetDatas->id) }}"
                                                    onclick="return confirm('Are you sure you want to Reject this timesheet?');">
                                                    <button class="btn btn-danger" data-toggle="modal"
                                                        style="height: 16px; width: auto; border-radius: 7px; display: flex; align-items: center; justify-content: center;font-size: 11px;"
                                                        data-target="#requestModal" disabled>Reject</button>
                                                </a>
                                            @else
                                                <a href="  {{ url('/timesheet/reject/' . $timesheetDatas->id) }}"
                                                    onclick="return confirm('Are you sure you want to Reject this timesheet?');">
                                                    <button class="btn btn-danger" data-toggle="modal"
                                                        style="height: 16px; width: auto; border-radius: 7px; display: flex; align-items: center; justify-content: center;font-size: 11px;"
                                                        data-target="#requestModal">Reject</button>
                                                </a>
                                            @endif
                                        </td>
                                    @endif
                                </tr>
                            @endforeach





222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php  ...............


      // $updatedtotalhour = $request->totalhour;
      // if ($attendances != null && property_exists($attendances, $column)) {
      //   if ($attendances->$column != "LWP") {
      //     $updatedtotalhour = $request->totalhour + $attendances->$column;
      //   }
      // }
      // DB::table('attendances')
      //   ->where('employee_name', auth()->user()->teammember_id)
      //   ->where('month', $month)
      //   ->update([$column => $updatedtotalhour]);





05-08-24 bugs
222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetrequestController.php


    public function open_timesheet($id)
    {
        $permotioncheck = DB::table('teamrolehistory')
            ->where('teammember_id', auth()->user()->teammember_id)->first();

        if (auth()->user()->role_id == 11 || auth()->user()->role_id == 18) {
            $timesheetrequestsDatas = DB::table('timesheetrequests')
                ->leftjoin('clients', 'clients.id', 'timesheetrequests.client_id')
                ->leftjoin('assignments', 'assignments.id', 'timesheetrequests.assignment_id')
                ->leftjoin('teammembers', 'teammembers.id', 'timesheetrequests.partner')
                ->leftjoin('teammembers as createdby', 'createdby.id', 'timesheetrequests.createdby')
                ->where('timesheetrequests.status', 0)
                ->select(
                    'timesheetrequests.*',
                    'clients.client_name',
                    'assignments.assignment_name',
                    'teammembers.team_member',
                    'teammembers.staffcode',
                    'createdby.team_member as createdbyauth',
                    'createdby.staffcode as staffcodeid',
                )->get();
            // dd($timesheetrequestsDatas);
        } elseif ($permotioncheck && auth()->user()->role_id == 13) {
            // Define the common parts of the query
            $commonQuery = DB::table('timesheetrequests')
                ->leftJoin('clients', 'clients.id', '=', 'timesheetrequests.client_id')
                ->leftJoin('assignments', 'assignments.id', '=', 'timesheetrequests.assignment_id')
                ->leftJoin('teammembers', 'teammembers.id', '=', 'timesheetrequests.partner')
                ->leftJoin('teammembers as createdby', 'createdby.id', '=', 'timesheetrequests.createdby')
                ->where('timesheetrequests.status', 0)
                ->where(function ($query) {
                    $query->where('timesheetrequests.partner', auth()->user()->teammember_id)
                        ->orWhere('timesheetrequests.createdby', auth()->user()->teammember_id);
                })
                ->select(
                    'timesheetrequests.*',
                    'clients.client_name',
                    'assignments.assignment_name',
                    'teammembers.team_member',
                    'teammembers.staffcode',
                    'createdby.team_member as createdbyauth',
                    'createdby.staffcode as staffcodeid'
                );

            // Get the timesheet requests before and after the promotion date
            $timesheetrequestsDatas1 = (clone $commonQuery)
                ->whereDate('timesheetrequests.created_at', '<', $permotioncheck->created_at)
                ->addSelect('createdby.staffcode as staffcodeid')
                ->get();



            $timesheetrequestspermotion = (clone $commonQuery)
                ->leftJoin('teamrolehistory as createdby_history', 'createdby_history.teammember_id', '=', 'createdby.id')
                ->whereDate('timesheetrequests.created_at', '>', $permotioncheck->created_at)
                ->addSelect('createdby_history.newstaff_code')
                ->get();
            // dd($timesheetrequestspermotion);

            $timesheetrequestsDatas = $timesheetrequestsDatas1->merge($timesheetrequestspermotion);
        } else {
            $timesheetrequestsDatas = DB::table('timesheetrequests')
                ->leftjoin('clients', 'clients.id', 'timesheetrequests.client_id')
                ->leftjoin('assignments', 'assignments.id', 'timesheetrequests.assignment_id')
                ->leftjoin('teammembers', 'teammembers.id', 'timesheetrequests.partner')
                ->leftjoin('teammembers as createdby', 'createdby.id', 'timesheetrequests.createdby')
                ->where('timesheetrequests.status', 0)
                ->where(function ($query) {
                    $query->where('timesheetrequests.partner', auth()->user()->teammember_id)
                        ->orWhere('timesheetrequests.createdby', auth()->user()->teammember_id);
                })
                ->select(
                    'timesheetrequests.*',
                    'clients.client_name',
                    'assignments.assignment_name',
                    'teammembers.team_member',
                    'teammembers.staffcode',
                    'createdby.team_member as createdbyauth',
                    'createdby.staffcode as staffcodeid',
                )->get();
        }
        return view('backEnd.timesheetrequest.index', compact('timesheetrequestsDatas'));
    }


222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheetrequest\index.blade.php

                            @foreach ($timesheetrequestsDatas as $timesheetrequestsData)
                                <tr>
                                    @php

                                        $permotioncheck = null;
                                        // $datadate = Carbon\Carbon::createFromFormat(
                                        //     'Y-m-d H:i:s',
                                        //     $timesheetrequestsData->created_at,
                                        // );

                                        $datadate = $timesheetrequestsData->created_at
                                            ? Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $timesheetrequestsData->created_at,
                                            )
                                            : null;

                                        $permotiondate = null;

                                        if (auth()->user()->role_id == 11 || auth()->user()->role_id == 13) {
                                            $permotioncheck = DB::table('teamrolehistory')
                                                ->where('teammember_id', $timesheetrequestsData->createdby)
                                                ->first();

                                            if ($permotioncheck) {
                                                $permotiondate = Carbon\Carbon::createFromFormat(
                                                    'Y-m-d H:i:s',
                                                    $permotioncheck->created_at,
                                                );
                                            }
                                        }

                                        $partnerpormotioncheck = DB::table('teamrolehistory')
                                            ->where('teammember_id', $timesheetrequestsData->partner)
                                            ->first();

                                        $partnerpormotiondateformate = $partnerpormotioncheck
                                            ? Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $partnerpormotioncheck->created_at,
                                            )
                                            : null;
                                    @endphp
                                    <td style="display: none;">{{ $timesheetrequestsData->id }}</td>
                                    <td>
                                        @if ($timesheetrequestsData->status == 0)
                                            <span class="badge badge-pill badge-warning">Created</span>
                                        @elseif($timesheetrequestsData->status == 1)
                                            <span class="badge badge-pill badge-success">Approved</span>
                                        @else
                                            <span class="badge badge-pill badge-danger">Rejected</span>
                                        @endif
                                    </td>
                                    <td>{{ date('d-m-Y', strtotime($timesheetrequestsData->created_at)) }}</td>
                                    <td>{{ date('h:m:s', strtotime($timesheetrequestsData->created_at)) }}</td>
                                    <td><a href="{{ url('timesheetrequest/view', $timesheetrequestsData->id) }}">
                                            {{ $timesheetrequestsData->createdbyauth }}</a></td>

                                    <td>
                                        @if (auth()->user()->role_id == 11 || auth()->user()->role_id == 13)
                                            @if ($permotioncheck && $datadate && $datadate->greaterThan($permotiondate))
                                                {{ $permotioncheck->newstaff_code }}
                                            @else
                                                {{ $timesheetrequestsData->staffcodeid }}
                                            @endif
                                        @else
                                            {{ $timesheetrequestsData->newstaff_code ?? $timesheetrequestsData->staffcodeid }}
                                        @endif
                                    </td>
                                    <td>{{ $timesheetrequestsData->team_member }}
                                    </td>
                                    <td>
                                        @if ($partnerpormotioncheck && $datadate && $datadate->greaterThan($partnerpormotiondateformate))
                                            {{ $partnerpormotioncheck->newstaff_code }}
                                        @else
                                            {{ $timesheetrequestsData->staffcode }}
                                        @endif
                                    </td>

                                    <td style="width: 900px; word-wrap: break-word; white-space: normal;">
                                        {{ $timesheetrequestsData->reason }}</td>
                                    <td>
                                        @if ($timesheetrequestsData && $timesheetrequestsData->attachment)
                                            <a
                                                href="{{ url('backEnd/image/confirmationfile/' . $timesheetrequestsData->attachment) }}">
                                                {{ $timesheetrequestsData->attachment ?? 'NA' }}
                                            </a>
                                        @else
                                            {{ 'NA' }}
                                        @endif
                                    </td>
                                    <td>{{ $timesheetrequestsData->remark ?? 'NA' }}</td>

                                </tr>
                            @endforeach




222222222222222222222222222222222222222222222222222222222222222222222222222222

resources\views\backEnd\timesheet\rejectedlist.blade.php  ...................
find text   <table id="examplee" class="table display table-bordered table-striped table-hover"> 

replace table tag 

                                       <table id="examplee" class="table display table-bordered table-striped table-hover">
                        <thead>
                            <tr>
                                <th style="display: none;">id</th>

                                <th>Employee Name</th>
                                <th>Staff Code</th>
                                <th>Date</th>
                                <th>Day</th>
                                <th>Client Name</th>
                                <th>Assignment Name</th>

                                <th>Work Item</th>
                                <th>Location</th>
                                <th>Partner</th>
                                {{-- <th>Hour</th> --}}
                                <th>Total Hour</th>
                                <th>Status</th>

                                @if (Auth::user()->role_id == 13 || Auth::user()->role_id == 14 || Auth::user()->role_id == 15)
                                    <th>Action</th>
                                @endif


                            </tr>
                        </thead>
                        <tbody>
                            @foreach ($timesheetData as $timesheetDatas)
                                <tr>

                                    @php
                                        $timeid = DB::table('timesheetusers')
                                            ->where('timesheetusers.timesheetid', $timesheetDatas->timesheetid)
                                            ->first();

                                        $client_id = DB::table('timesheetusers')
                                            ->leftjoin('clients', 'clients.id', 'timesheetusers.client_id')
                                            ->leftjoin('assignments', 'assignments.id', 'timesheetusers.assignment_id')
                                            ->leftjoin('teammembers', 'teammembers.id', 'timesheetusers.partner')
                                            ->leftJoin(
                                                'teamrolehistory',
                                                'teamrolehistory.teammember_id',
                                                '=',
                                                'teammembers.id',
                                            )
                                            ->where('timesheetusers.timesheetid', $timesheetDatas->timesheetid)
                                            ->select(
                                                'clients.client_name',
                                                'clients.client_code',
                                                'timesheetusers.hour',
                                                'timesheetusers.location',
                                                'timesheetusers.*',
                                                'assignments.assignment_name',
                                                'billable_status',
                                                'workitem',
                                                'teammembers.team_member',
                                                'teammembers.staffcode',
                                                'timesheetusers.timesheetid',
                                                'teamrolehistory.newstaff_code',
                                            )
                                            ->get();
                                        // dd($client_id);
                                        $total = DB::table('timesheetusers')

                                            ->where('timesheetusers.timesheetid', $timesheetDatas->timesheetid)
                                            ->sum('hour');

                                        $dates = date('l', strtotime($timesheetDatas->date));

                                        $assignmentcheck = DB::table('assignmentbudgetings')
                                            ->where('assignmentgenerate_id', $timesheetDatas->assignmentgenerate_id)
                                            ->first();

                                        $permotioncheck = DB::table('teamrolehistory')
                                            ->where('teammember_id', $timesheetDatas->createdby)
                                            ->first();

                                        //shshid client
                                        // $datadate = Carbon\Carbon::createFromFormat('Y-m-d', $timesheetDatas->date);
                                        // $datadate = Carbon\Carbon::createFromFormat(
                                        //     'Y-m-d H:i:s',
                                        //     $assignmentcheck->created_at,
                                        // );

                                        $datadate = $assignmentcheck
                                            ? Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $assignmentcheck->created_at,
                                            )
                                            : null;

                                        $permotiondate = null;
                                        if ($permotioncheck) {
                                            $permotiondate = Carbon\Carbon::createFromFormat(
                                                'Y-m-d H:i:s',
                                                $permotioncheck->created_at,
                                            );
                                        }

                                    @endphp

                                    <td style="display: none;">{{ $timesheetDatas->id }}</td>

                                    <td>
                                        {{ $timesheetDatas->team_member ?? '' }} </td>
                                    @if ($permotioncheck && $datadate && $datadate->greaterThan($permotiondate))
                                        <td>{{ $permotioncheck->newstaff_code }}</td>
                                    @else
                                        <td>{{ $timesheetDatas->staffcode }}</td>
                                    @endif
                                    <td>{{ date('d-m-Y', strtotime($timesheetDatas->date)) }}
                                    </td>
                                    <td>
                                        @if ($timesheetDatas->date != null)
                                            {{ $dates ?? '' }}
                                        @endif
                                    </td>
                                    <span style="font-size: 13px;">
                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->client_name ?? '' }} ({{ $item->client_code ?? '' }})
                                                @if ($item->client_name != 0)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>
                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->assignment_name ?? '' }}
                                                ({{ $item->assignmentgenerate_id ?? '' }})
                                                @if ($item->assignment_name != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>

                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->workitem ?? '' }}@if ($item->workitem != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>

                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->location ?? '' }}@if ($item->location != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>
                                        <td>
                                            @foreach ($client_id as $item)
                                                {{ $item->team_member ?? '' }}
                                                @if ($permotioncheck && $datadate && $datadate->greaterThan($permotiondate))
                                                    ({{ $item->newstaff_code }})
                                                @else
                                                    ({{ $item->staffcode ?? '' }})
                                                @endif
                                                @if ($item->team_member != null)
                                                    ,
                                                @endif
                                            @endforeach
                                        </td>
                                        <td>{{ $total }}</td>
                                        <td>
                                            {{-- @php
                                            dd($client_id);
                                        @endphp --}}
                                            @foreach ($client_id as $item)
                                                @if ($item->status == 0)
                                                    <span class="badge badge-pill badge-warning">saved</span>
                                                @elseif ($item->status == 1)
                                                    <span class="badge badge-pill badge-danger">submit</span>
                                                @elseif ($item->status == 3)
                                                    <span class="badge badge-pill badge-info">Submitted</span>
                                                @else
                                                    <span class="badge badge-pill badge-secondary">Rejected</span>
                                                @endif
                                            @endforeach
                                        </td>

                                        @if (Auth::user()->role_id == 13 || Auth::user()->role_id == 14 || Auth::user()->role_id == 15)
                                            <td>
                                                @foreach ($client_id as $item)
                                                    @if ($item->status == 2)
                                                        <a href="{{ url('/timesheetreject/edit/' . $item->timesheetid) }}"
                                                            class="btn btn-info-soft btn-sm"><i class="far fa-edit"></i></a>
                                                    @endif
                                                @endforeach
                                            </td>
                                        @endif

                                </tr>
                                <div class="modal fade" id="exampleModal12" tabindex="-1" role="dialog"
                                    aria-labelledby="exampleModalLabel4" aria-hidden="true">
                                    <div class="modal-dialog" role="document">
                                        <div class="modal-content">
                                            <form id="detailsForm" method="post" action="{{ url('/timesheet/submit') }}"
                                                enctype="multipart/form-data" style="margin-bottom: 0px;">
                                                @csrf
                                                <div class="modal-header" style="background:#37A000;color:white; m-5">
                                                    <h5 class="modal-title font-weight-600" id="exampleModalLabel4">Update
                                                        Timesheet</h5>
                                                    <div>
                                                        <ul>
                                                            @foreach ($errors->all() as $e)
                                                                <li style="color:red;">{{ $e }}</li>
                                                            @endforeach
                                                        </ul>
                                                    </div>
                                                    <button style="color: white" type="button" class="close"
                                                        data-dismiss="modal" aria-label="Close">
                                                        <span aria-hidden="true">&times;</span>
                                                    </button>
                                                </div>
                                                <div class="modal-body">

                                                    <div class="row row-sm">
                                                        {{-- <label for="name" class="col-sm-3 col-form-label font-weight-600">Name :</label> --}}
                                                        <div class="col-sm-12">
                                                            <input type="text" readonly id="teamname"
                                                                class="form-control" placeholder="Enter Name">
                                                            <input hidden class="form-control" id="timesheetid"
                                                                name="timesheetid" type="text">
                                                        </div>
                                                    </div>

                                                    <br>
                                                    @php

                                                        $clientlist = DB::table('clients')
                                                            ->select('clients.client_name', 'clients.id')
                                                            ->get();
                                                        $partner = DB::table('teammembers')
                                                            ->select('teammembers.team_member', 'teammembers.id')
                                                            ->get();
                                                        // dd($partner);
                                                        $assignmentlist = DB::table('assignments')
                                                            ->select('assignments.assignment_name', 'assignments.id')
                                                            ->get();
                                                    @endphp
                                                    <br>

                                                    <div class="row row-sm">
                                                        {{-- <label for="name" class="col-sm-3 col-form-label font-weight-600">Name :</label> --}}
                                                        <div class="col-sm-6">
                                                            <label for="">Select Client</label>
                                                            <select class="form-control" name="client_id" id="client_id">
                                                                <option value="">Select Client</option>
                                                                @foreach ($clientlist as $city)
                                                                    <option value="{{ $city->id }}">
                                                                        {{ $city->client_name }}</option>
                                                                @endforeach
                                                            </select>
                                                        </div>
                                                        {{-- <label for="name" class="col-sm-3 col-form-label font-weight-600">Name :</label> --}}
                                                        <div class="col-sm-6">
                                                            <label for="">Select Assignment</label>
                                                            <select class="form-control" name="assignment_id"
                                                                id="assignment_id">
                                                                <option value="">Select Assignment</option>
                                                                @foreach ($assignmentlist as $assignmentlistData)
                                                                    <option value="{{ $assignmentlistData->id }}">
                                                                        {{ $assignmentlistData->assignment_name }}</option>
                                                                @endforeach
                                                            </select>
                                                        </div>
                                                    </div>

                                                    <br>
                                                    <div class="row row-sm">
                                                        {{-- <label for="name" class="col-sm-3 col-form-label font-weight-600">Name :</label> --}}
                                                        <div class="col-sm-6">
                                                            <label for="">Select Partner</label>
                                                            <select class="form-control" name="partner" id="partner">
                                                                <option value="">Select Partner</option>
                                                                @foreach ($partner as $partnerData)
                                                                    <option value="{{ $partnerData->id }}">
                                                                        {{ $partnerData->team_member }}</option>
                                                                @endforeach
                                                            </select>
                                                        </div>
                                                        <div class="col-sm-6">
                                                            <label for="">Employee Name</label>
                                                            <input required type="text" name="workitem" id="workitem"
                                                                class="form-control" placeholder="Enter Employee Name">
                                                        </div>
                                                    </div>
                                                    <br>
                                                    <div class="row row-sm">
                                                        <div class="col-sm-6">
                                                            <label for="">Location</label>
                                                            <input required type="text" name="location" id="location"
                                                                class="form-control" placeholder="Enter Location">
                                                        </div>
                                                        <div class="col-sm-6">
                                                            <label for="">Work Item</label>
                                                            <input required type="text" name="totalhour"
                                                                id="totalhour" class="form-control"
                                                                placeholder="Enter Name">
                                                        </div>
                                                    </div>
                                                    <br>
                                                    <div class="row row-sm">
                                                        <div class="col-sm-6">
                                                            <label for="">Total Hour</label>
                                                            <input required type="text" name="location" id="location"
                                                                class="form-control" placeholder="Enter Location">
                                                        </div>
                                                    </div>
                                                    <br>

                                                    <div class="modal-footer">
                                                        <button type="button" class="btn btn-danger"
                                                            data-dismiss="modal">Close</button>
                                                        <button type="submit" class="btn btn-success">Submit</button>
                                                    </div>
                                            </form>

                                        </div>
                                    </div>
                                </div>



                                {{-- 2222222222222222222 --}}
                            @endforeach
                        </tbody>
                    </table>


01-08-24
222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\index.blade.php
apply leave admin 
/opentimesheetrequest/0
https://vsa.capitall.io/applyleave
https://vsa.capitall.io/timesheet/allteamsubmitted
https://vsa.capitall.io/timesheetrequestlist





222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ClientController.php


222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\index.blade.php




222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ClientController.php


222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\index.blade.php




222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ClientController.php


222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\index.blade.php




222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ClientController.php



222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\index.blade.php




222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ClientController.php


222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\index.blade.php




222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ClientController.php



222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\index.blade.php




222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ClientController.php


222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\index.blade.php




222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ClientController.php



222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\index.blade.php




222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ClientController.php


222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\index.blade.php




222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ClientController.php


	
222222222222222222222222222222222222222222222222222222222222222222222222222222
Route::post('/rejoinstore',  [PromotionandrejoiningController::class, 'rejoinstore']);


################################################################################################################################
table rejoinsamepost
and teamrolehistory

remove allready rejoin user date from teammebers table and paste in teamrolehister ya rejoinsamepost 




vsademo table update every time 
222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ClientController.php

applyleaves
assignmentmappings
assignmentbudgetings
users
teammembers
timesheets
timesheetusers
timesheetreport
teamrolehistory

vsalive 
222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ClientController.php
teamrolehistory
rejoinsamepost

confirm user kaun sa rejoin huwa hai and remove rest data 
teammebers table se rejoin column ko null kare 