Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php

    public function permotionandrejoin()
    {
        if (auth()->user()->role_id == 11 or auth()->user()->role_id == 12) {
            // $teammemberlist = Teammember::where('status', '0')->get();
            $teammembers = DB::table('teammembers')
                ->leftJoin(
                    'teamrolehistory',
                    'teamrolehistory.teammember_id',
                    '=',
                    'teammembers.id',
                )
                ->where('teammembers.status', 1)
                ->whereIn('teammembers.role_id', [14, 15, 13, 11])
                ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
                ->orderBy('teammembers.team_member', 'ASC')
                ->get();

            $teamroles = DB::table('roles')
                ->whereNotIn('id', [16, 17, 18, 19, 20])
                ->select('id', 'rolename', 'created_at')
                ->latest()
                ->get();

            $inactiveteammembers = DB::table('teammembers')
                ->leftJoin(
                    'teamrolehistory',
                    'teamrolehistory.teammember_id',
                    '=',
                    'teammembers.id',
                )
                ->where('teammembers.status', 0)
                ->whereIn('teammembers.role_id', [14, 15, 13, 11])
                ->select('teammembers.team_member', 'teamrolehistory.newstaff_code', 'teammembers.id', 'teammembers.staffcode')
                ->orderBy('teammembers.team_member', 'ASC')
                ->get();

            return view('backEnd.applyleave.permotionandrejoin', compact('teammembers', 'teamroles', 'inactiveteammembers'));
        }
        abort(403, ' you have no permission to access this page ');
    }



Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\applyleave\permotionandrejoin.blade.php

                <div class="tab-content" id="pills-tabContent">
                    <div class="tab-pane fade show active" id="pills-home" role="tabpanel" aria-labelledby="pills-home-tab">
                        <form method="post" action="{{ url('permotionandrejoinstore') }}" enctype="multipart/form-data">
                            @csrf
                            <div class="row row-sm mt-3" style="margin: 14px;">
                                <div class="col-4">
                                    <div class="form-group">
                                        <label class="font-weight-600">Employee Name</label>
                                        <select required class="language form-control" name="employeeid">
                                            <option value="">Please Select One</option>
                                            @php
                                                $displayedValues = [];
                                            @endphp
                                            @foreach ($teammembers as $teammember)
                                                @if (!in_array($teammember->staffcode, $displayedValues))
                                                    {{-- <option value="{{ $teammember->id }}"> --}}
                                                    <option value="{{ $teammember->id }}"
                                                        {{ old('teammemberId') == $teammember->id ? 'selected' : '' }}>
                                                        {{ $teammember->team_member }} (
                                                        {{ $teammember->newstaff_code ?? ($teammember->staffcode ?? '') }})
                                                    </option>
                                                    @php
                                                        $displayedValues[] = $teammember->staffcode;
                                                    @endphp
                                                @endif
                                            @endforeach
                                        </select>
                                    </div>

                                </div>
                                <div class="col-4">
                                    <div class="form-group">
                                        <label class="font-weight-600">Promotion Date</label>
                                        <input required type="date" name="promotion_date" value=""
                                            class="form-control" placeholder="Enter Promotion Date">
                                        {{-- {{ $teammember->joining_date ?? '' }} --}}
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="form-group">
                                        <label class="font-weight-600">Designation</label>
                                        <select required class="language form-control" name="designationtype">
                                            <option value="">Please Select One</option>
                                            @foreach ($teamroles as $teamrole)
                                                <option value="{{ $teamrole->id }}">
                                                    {{ $teamrole->rolename }}
                                                </option>
                                            @endforeach
                                        </select>
                                    </div>

                                </div>
                            </div>
                            <div class="row row-sm mt-3" style="margin: 14px;">
                                <div class="col-12">
                                    <div class="form-group">
                                        <button type="submit" class="btn btn-success" style="float:right"> Submit</button>
                                        <a class="btn btn-secondary" href="{{ url('home') }}">
                                            Back</a>

                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="tab-pane fade" id="pills-user" role="tabpanel" aria-labelledby="pills-user-tab">
                        <div class="table-responsive">
                            <form method="post" action="{{ url('rejoinstore') }}" enctype="multipart/form-data">
                                @csrf
                                <div class="row row-sm" style="margin: 14px;">
                                    <div class="col-4">
                                        <div class="form-group">
                                            <label class="font-weight-600">Employee Name</label>
                                            <select required class="language form-control" name="employeeid">
                                                <option value="">Please Select One</option>
                                                @php
                                                    $displayedValues = [];
                                                @endphp
                                                @foreach ($inactiveteammembers as $teammember)
                                                    @if (!in_array($teammember->staffcode, $displayedValues))
                                                        <option value="{{ $teammember->id }}"
                                                            {{ old('teammemberId') == $teammember->id ? 'selected' : '' }}>
                                                            {{ $teammember->team_member }} (
                                                            {{ $teammember->newstaff_code ?? ($teammember->staffcode ?? '') }})
                                                        </option>
                                                        @php
                                                            $displayedValues[] = $teammember->staffcode;
                                                        @endphp
                                                    @endif
                                                @endforeach
                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-4">
                                        <div class="form-group">
                                            <label class="font-weight-600">Rejoining Date</label>
                                            <input required type="date" name="rejoining_date" value=""
                                                class="form-control" placeholder="Enter Rejoining Date">
                                        </div>
                                    </div>
                                    <div class="col-4">
                                        <div class="form-group">
                                            <label class="font-weight-600">Designation</label>
                                            <input type="checkbox" id="enableDesignation" style="margin-left: 10px;"
                                                title="You want to change designation then please click on check box">
                                            <select required class="language form-control" name="designationtype"
                                                id="designationSelect" disabled>
                                                <option value="">Please Select One</option>
                                                @foreach ($teamroles as $teamrole)
                                                    <option value="{{ $teamrole->id }}">
                                                        {{ $teamrole->rolename }}
                                                    </option>
                                                @endforeach
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div class="row row-sm mt-3" style="margin: 14px;">
                                    <div class="col-12">
                                        <div class="form-group">
                                            <button type="submit" class="btn btn-success"
                                                style="float:right">Submit</button>
                                            <a class="btn btn-secondary" href="{{ url('home') }}">Back</a>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>

                </div>




Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
add this code 
resources\views\backEnd\applyleave\permotionandrejoin.blade.php


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function() {
        $('#enableDesignation').on('change', function() {
            $('#designationSelect').prop('disabled', !this.checked);
        });
    });
</script>



Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php

    public function rejoinstore(Request $request)
    {
        $checkrole = DB::table('teammembers')
            ->where('id', $request->employeeid)
            ->select('id', 'role_id', 'staffcode', 'staffcodenumber')
            ->first();

        // if user designation change then
        if ($checkrole && $request->employeeid && $request->rejoining_date && $request->designationtype) {
            if ($checkrole->role_id != $request->designationtype) {
                $maxStaffcodeTeammembers = DB::table('teammembers')
                    ->where('role_id', $request->designationtype)
                    ->max('staffcodenumber');

                $maxStaffcodeTeamRoleHistory = DB::table('teamrolehistory')
                    ->where('roleid_new', $request->designationtype)
                    ->max('new_staffcodenumber');

                $getlateststaffcode = max($maxStaffcodeTeammembers, $maxStaffcodeTeamRoleHistory);


                if ($request->designationtype == 13) {
                    if ($getlateststaffcode == null) {
                        $newstaffcode = '10001';
                    } else {
                        $newstaffcode = $getlateststaffcode + 1;
                    }
                    $newstaffcoderesult = 'P' . $newstaffcode;
                    $staffcode = $newstaffcode;
                }
                if ($request->designationtype == 14) {
                    if ($getlateststaffcode == null) {
                        $newstaffcode = '20001';
                    } else {
                        $newstaffcode = $getlateststaffcode + 1;
                    }
                    $newstaffcoderesult = 'M' . $newstaffcode;
                    $staffcode = $newstaffcode;
                }

                DB::table('teammembers')
                    ->where('id', $request->employeeid)
                    ->update([
                        'role_id' => $request->designationtype,
                        'staffcodenumber' => $staffcode,
                        'status' => 1,
                    ]);

                DB::table('users')
                    ->where('teammember_id', $request->employeeid)
                    ->update([
                        'role_id' => $request->designationtype,
                        'status' => 1,
                    ]);

                DB::table('teamrolehistory')->insert([
                    'teammember_id' => $request->employeeid,
                    'roleid_old' => $checkrole->role_id,
                    'roleid_new' => $request->designationtype,
                    'oldstaff_code' =>  $checkrole->staffcode,
                    'newstaff_code' => $newstaffcoderesult,
                    'old_staffcodenumber' => $checkrole->staffcodenumber,
                    'new_staffcodenumber' => $staffcode,
                    'rejoiningdate' => date('Y-m-d', strtotime($request->rejoining_date)),
                    'rejointimesheetstatus' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ]);
            } else {
                $role = '';
                if ($checkrole->role_id == 11) {
                    $role = "super admin";
                } elseif ($checkrole->role_id == 12) {
                    $role = "admin";
                } elseif ($checkrole->role_id == 13) {
                    $role = "partner";
                } elseif ($checkrole->role_id == 14) {
                    $role = "manager";
                } elseif ($checkrole->role_id == 15) {
                    $role = "staff";
                }
                $output = array('msg' => 'The User allready on this post.You can not select "' . $role . '".');
                return back()->with('statuss', $output);
            }
        }
        // if user designation not chnge
        else {
            dd($checkrole, 1);
        }

        $output = array('msg' => 'Rejoining Successfully Done');
        return back()->with('success', $output);
    }






Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php


   public function store(Request $request)
  {

    try {
      $Newteammeber = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->first();


      // $Newteammeberjoining_date = DB::table('teammembers')
      //   ->where('id', auth()->user()->teammember_id)
      //   ->select('joining_date', 'rejoining_date')
      //   ->first();


      $Newteammeberjoining_date = DB::table('teammembers')
        ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
        ->where('teammembers.id', auth()->user()->teammember_id)
        ->select('teammembers.team_member', 'teammembers.staffcode', 'teammembers.joining_date', 'teamrolehistory.newstaff_code', 'teamrolehistory.rejoiningdate')
        ->first();

      $joining_date = date('d-m-Y', strtotime($Newteammeberjoining_date->joining_date));
      if ($Newteammeberjoining_date->rejoiningdate != null) {
        $rejoining_date = date('d-m-Y', strtotime($Newteammeberjoining_date->rejoiningdate));
        $rejoiningDateformate = Carbon::parse($rejoining_date);
      } else {
        $rejoining_date = $Newteammeberjoining_date->rejoiningdate;
      }

      $requestDate = Carbon::parse($request->date);
      $joiningDate = Carbon::parse($joining_date);


      if ($Newteammeber == null || $rejoining_date != null) {

        if ($rejoining_date != null && $requestDate < $rejoiningDateformate) {
          $output = array('msg' => 'You can not fill timesheet before Rejoining date :' . $rejoining_date);
          return redirect('timesheet')->with('success', $output);
        }

        if ($requestDate < $joiningDate) {
          $output = array('msg' => 'You can not fill timesheet before joining date :' . $joining_date);
          return redirect('timesheet')->with('success', $output);
        }

        if ($Newteammeber == null) {
          // Get previuse sunday from joining date
          $joining_timestamp = strtotime($joining_date);
          $day_of_week = date('w', $joining_timestamp);
          $days_to_subtract = $day_of_week;
          $previous_sunday_timestamp = strtotime("-$days_to_subtract days", $joining_timestamp);

          $previous_sunday_date = date('d-m-Y', $previous_sunday_timestamp);
          // Get all dates beetween two dates 
          $startDate = Carbon::parse($previous_sunday_date);
          $endDate = Carbon::parse($joining_date);
          $period = CarbonPeriod::create($startDate, $endDate);
        }
        //this code related rejoining teammember 
        else {
          $joining_timestamp = strtotime($rejoining_date);
          $day_of_week = date('w', $joining_timestamp);
          $days_to_subtract = $day_of_week;
          $previous_sunday_timestamp = strtotime("-$days_to_subtract days", $joining_timestamp);
          $previous_sunday_date = date('d-m-Y', $previous_sunday_timestamp);
          // Get all dates beetween two dates 
          $startDate = Carbon::parse($previous_sunday_date);
          $endDate = Carbon::parse($rejoining_date);
          $period = CarbonPeriod::create($startDate, $endDate);
        }

        // store all date in $result vairable
        $result = [];
        foreach ($period as $key => $date) {
          if ($key !== 0 && $key !== count($period) - 1) {
            $result[] = $date->toDateString();
          }
        }
        // return $result;
        // dd('yes', $result);
        foreach ($result as $date) {
          $prevcheck = DB::table('timesheets')->where('date', $date)
            ->where('created_by', auth()->user()->teammember_id)
            ->first();

          if (($Newteammeber == null && $prevcheck == null) || ($rejoining_date != null && $prevcheck == null)) {
            $id = DB::table('timesheets')->insertGetId(
              [
                'created_by' => auth()->user()->teammember_id,
                'month'     =>   date('F', strtotime($date)),
                'date'     =>    date('Y-m-d', strtotime($date)),
                'created_at'          =>     date('Y-m-d H:i:s'),
              ]
            );
            DB::table('timesheetusers')->insert([
              'date'     =>   date('Y-m-d', strtotime($date)),
              'client_id'     =>     29,
              'workitem'     =>     'NA',
              'location'     =>     'NA',
              //   'billable_status'     =>     $request->billable_status[$i],
              'timesheetid'     =>     $id,
              'date'     =>     date('Y-m-d', strtotime($date)),
              'hour'     =>     0,
              'totalhour' =>      0,
              'assignment_id'     =>     213,
              'partner'     =>     887,
              'createdby' => auth()->user()->teammember_id,
              'created_at'          =>     date('Y-m-d H:i:s'),
              'updated_at'              =>    date('Y-m-d H:i:s'),
            ]);
          }
        }
      }

      if ($requestDate >= $joiningDate) {

        if ($rejoining_date != null && $requestDate < $rejoiningDateformate) {
          // dd('hi', 1);
          $output = array('msg' => 'You can not fill timesheet before Rejoining date :' . $rejoining_date);
          return redirect('timesheet')->with('success', $output);
        }
        // dd('hi', 0);

        $data = $request->except(['_token', 'teammember_id', 'amount']);

        //	if ($request->date < '11-09-2023') {
        //dd('hi');
        // $output = array('msg' => 'Please fill timesheet from 11/09/2023, Monday onwards');
        //  return back()->with('success', $output);
        //   }

        //die;
        //? dd(date('w', strtotime($request->date))); // 4
        // check allready submited
        if (date('w', strtotime($request->date)) == 0) {
          $previousSaturday = date('Y-m-d', strtotime('-1 day', strtotime($request->date)));
          $previousSaturdayFilled = DB::table('timesheetusers')
            ->where('createdby', auth()->user()->teammember_id)
            ->where('date', $previousSaturday)
            ->where('status', 1)
            ->first();
          // dd('hi1', $previousSaturdayFilled);
          if ($previousSaturdayFilled != null) {
            $output = array('msg' => 'You already submitted for this week');
            return back()->with('success', $output);
          }
        }

        // check hour
        $hours = $request->input('totalhour');
        if (!is_numeric($hours) || $hours > 12) {
          $output = array('msg' => 'The total hours cannot be greater than 12');
          return back()->with('success', $output);
        }
        // dd(auth()->user()->teammember_id);
        //? dd(date('Y-m-d', strtotime($request->date))); "2023-11-30"
        $previouschck = DB::table('timesheetusers')
          ->where('createdby', auth()->user()->teammember_id)
          ->where('date', date('Y-m-d', strtotime($request->date)))
          ->where('status', 1)
          ->first();

        if ($previouschck != null) {
          //dd('hi');
          $output = array('msg' => 'You already submitted for this week');
          return back()->with('success', $output);
        }

        $previoussavechck = DB::table('timesheetusers')
          ->where('createdby', auth()->user()->teammember_id)
          ->where('date', date('Y-m-d', strtotime($request->date)))
          ->where('status', 0)
          ->first();

        if ($previoussavechck != null) {
          //dd('hi');
          $output = array('msg' => 'You already submitted for this date');
          return back()->with('success', $output);
        }



        $currentDate = Carbon::now()->format('d-m-Y');
        //dd($currentHour);
        if ($currentDate == $request->date && Carbon::now()->hour < 18) {
          //   //dd('hi');
          $output = array('msg' => 'You can only fill today timesheet after 6:00 pm');
          return back()->with('success', $output);
        }


        $leaves = DB::table('applyleaves')
          ->where('applyleaves.createdby', auth()->user()->teammember_id)
          ->where('status', '!=', 2)
          ->select('applyleaves.from', 'applyleaves.to')
          ->get();
        // dd('hi 1', $leaves);
        foreach ($leaves as $leave) {
          //Convert each data from table to Y-m-d format to compare
          $days = CarbonPeriod::create(
            date('Y-m-d', strtotime($leave->from)),
            date('Y-m-d', strtotime($leave->to))
          );

          foreach ($days as $day) {
            $leavess[] = $day->format('Y-m-d');
          }
        }
        // $currentday = date('Y-m-d', strtotime($request->date));// "2023-11-30"
        $currentday = date('Y-m-d', strtotime($request->date));
        // dd('hi 2', $currentday);
        // $ifcount=0;
        //  $elsecount=0;
        if (count($leaves) != 0) {

          //dd('if');
          foreach ($leavess as $leave) {
            // echo"<pre>";
            //  print_r($leave);

            if ($leave == $currentday) {
              //dd('if');
              // $ifcount=$ifcount+1;
              $output = array('msg' => 'You Have Leave for the Day (' . date('d-m-Y', strtotime($leave)) . ')');
              return redirect('timesheet')->with('statuss', $output);
            }
          }
        }

        // insert data in timesheet from request and get id 
        $id = DB::table('timesheets')->insertGetId(
          [
            'created_by' => auth()->user()->teammember_id,
            'month'     =>    date('F', strtotime($request->date)),
            'date'     =>    date('Y-m-d', strtotime($request->date)),
            'created_at'          =>     date('Y-m-d H:i:s'),
          ]
        );


        $count = count($request->assignment_id);

        // dd('hi 3', $count);
        for ($i = 0; $i < $count; $i++) {
          //dd($request->workitem[$i]);
          $assignment =  DB::table('assignmentmappings')->where('assignmentgenerate_id', $request->assignment_id[$i])->first();

          $a = DB::table('timesheetusers')->insert([
            'date'     =>     $request->date,
            'client_id'     =>     $request->client_id[$i],
            'assignmentgenerate_id'     =>     $request->assignment_id[$i],
            'workitem'     =>     $request->workitem[$i],
            'location'     =>     $request->location[$i],
            //   'billable_status'     =>     $request->billable_status[$i],
            'timesheetid'     =>     $id,
            'date'     =>     date('Y-m-d', strtotime($request->date)),
            'hour'     =>     $request->hour[$i],
            'totalhour' =>      $request->totalhour,
            'assignment_id'     =>     $assignment->assignment_id,
            'partner'     =>     $request->partner[$i],
            'createdby' => auth()->user()->teammember_id,
            'created_at'          =>     date('Y-m-d H:i:s'),
            'updated_at'              =>    date('Y-m-d H:i:s'),
          ]);

          if (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {
            // dd($request);
            $gettotalteamhour = DB::table('assignmentmappings')
              ->leftJoin(
                'assignmentteammappings',
                'assignmentteammappings.assignmentmapping_id',
                'assignmentmappings.id',
              )
              ->where(
                'assignmentmappings.assignmentgenerate_id',
                $request->assignment_id[$i]
              )
              ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
              ->first();

            if ($gettotalteamhour) {
              $gettotalteamhour = $gettotalteamhour->teamhour;
              // dd($gettotalteamhour);

              $finalresult =  $gettotalteamhour + $request->hour[$i];

              $totalteamhourupdate = DB::table('assignmentmappings')
                ->leftJoin(
                  'assignmentteammappings',
                  'assignmentteammappings.assignmentmapping_id',
                  'assignmentmappings.id',
                )
                ->where(
                  'assignmentmappings.assignmentgenerate_id',
                  $request->assignment_id[$i]
                )
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
                // ->get();
                ->update(['teamhour' =>  $finalresult]);
            }
          }

          if (auth()->user()->role_id == 13) {
            $assignmentdata = DB::table('assignmentmappings')
              ->where('assignmentgenerate_id', $request->assignment_id[$i])
              ->first();
            $finalresultleadpatner =  $assignmentdata->leadpartnerhour + $request->hour[$i];
            $finalresultotherpatner =  $assignmentdata->otherpartnerhour + $request->hour[$i];

            if ($assignmentdata->leadpartner == auth()->user()->teammember_id) {
              $update = DB::table('assignmentmappings')
                ->where('assignmentgenerate_id', $request->assignment_id[$i])
                ->where('leadpartner', auth()->user()->teammember_id)
                ->update(['leadpartnerhour' => $finalresultleadpatner]);
            }
            if ($assignmentdata->otherpartner == auth()->user()->teammember_id) {
              $update = DB::table('assignmentmappings')
                ->where('assignmentgenerate_id', $request->assignment_id[$i])
                ->where('otherpartner', auth()->user()->teammember_id)
                ->update(['otherpartnerhour' => $finalresultotherpatner]);
            }
          }
        }
      } else {
        // dd(auth()->user()->teammember_id);
        $output = array('msg' => 'You can not fill timesheet before Rejoining date :' . $joining_date);
        return redirect('timesheet')->with('success', $output);
      }

      //Attendance code

      $hdatess = date('Y-m-d', strtotime($request->date));
      $day =  DateTime::createFromFormat('Y-m-d', $hdatess)->format('d');      //
      $month =  DateTime::createFromFormat('Y-m-d', $hdatess)->format('F');   //
      $currentDate = new DateTime();
      $currentMonth = $currentDate->format('F');
      //dd($month);
      //   if ($currentDate->format('j') > 25) {
      //     $currentDate->modify('-1 month');
      //     $currentMonth = $currentDate->format('F');
      // }



      $dates = [
        '26' => 'twentysix',
        '27' => 'twentyseven',
        '28' => 'twentyeight',
        '29' => 'twentynine',
        '30' => 'thirty',
        '31' => 'thirtyone',
        '01' => 'one',
        '02' => 'two',
        '03' => 'three',
        '04' => 'four',
        '05' => 'five',
        '06' => 'six',
        '07' => 'seven',
        '08' => 'eight',
        '09' => 'nine',
        '10' => 'ten',
        '11' => 'eleven',
        '12' => 'twelve',
        '13' => 'thirteen',
        '14' => 'fourteen',
        '15' => 'fifteen',
        '16' => 'sixteen',
        '17' => 'seventeen',
        '18' => 'eighteen',
        '19' => 'ninghteen',
        '20' => 'twenty',
        '21' => 'twentyone',
        '22' => 'twentytwo',
        '23' => 'twentythree',
        '24' => 'twentyfour',
        '25' => 'twentyfive',
      ];



      if ($month != $currentMonth && $day > 25) {
        $dateTime = DateTime::createFromFormat('Y-m-d', $hdatess);
        $dateTime->modify('+1 month');
        $month = $dateTime->format('F');
      }
      if ($month != $currentMonth && $day < 25) {
        $dateTime = DateTime::createFromFormat('Y-m-d', $hdatess);
        $month = $dateTime->format('F');
      }
      if ($month == $currentMonth && $day > 25) {

        $dateTime = DateTime::createFromFormat('Y-m-d', $hdatess);
        $dateTime->modify('+1 month');
        $month = $dateTime->format('F');
      }

      //dd($month);


      $column = $dates[$day];

      $attendances = DB::table('attendances')->where('employee_name', auth()->user()->teammember_id)
        ->where('month', $month)->first();

      if ($attendances ==  null) {
        $teammember = DB::table('teammembers')->where('id', auth()->user()->teammember_id)->first();

        $a = DB::table('attendances')->insert([
          'employee_name'         =>     auth()->user()->teammember_id,
          'month'         =>    $month,
          'dateofjoining' =>   $teammember->joining_date,
          'created_at'          =>     date('Y-m-d H:i:s'),
          //   'exam_leave'      =>$value->date_total,
        ]);
        //dd($a);
      }


      //   dd($noofdaysaspertimesheet);

      $updatedtotalhour = $request->totalhour;
      if ($attendances != null && property_exists($attendances, $column)) {
        if ($attendances->$column != "LWP") {
          $updatedtotalhour = $request->totalhour + $attendances->$column;
        }
      }
      DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->where('month', $month)
        ->update([$column => $updatedtotalhour]);


      //end attendance


      $output = array('msg' => 'Create Successfully');
      if (auth()->user()->role_id == 14 || auth()->user()->role_id == 13 || auth()->user()->role_id == 15) {
        return redirect('timesheet/mylist')->with('success', $output);
      } else {
        return redirect('timesheet')->with('success', $output);
      }
    } catch (Exception $e) {
      DB::rollBack();
      Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
      report($e);
      $output = array('msg' => $e->getMessage());
      return back()->withErrors($output)->withInput();
    }
  }


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetrequestController.php

     public function timesheetsubmission(Request $request)
    {
        try {

            $checksavetimesheet = DB::table('timesheetusers')
                ->where('createdby', auth()->user()->teammember_id)
                ->where('status', 0)
                ->first();

            if ($checksavetimesheet == null) {
                $output = array('msg' => "You have not saved any timesheets. Please save your timesheet.");
                return back()->with('statuss', $output);
            }

            $latesttimesheetreport =  DB::table('timesheetreport')
                ->where('teamid', auth()->user()->teammember_id)
                ->orderBy('id', 'desc')
                ->first();


            // $latesttimesheetreport is not null 
            if ($latesttimesheetreport !== null) {

                $timesheetreportenddate = Carbon::parse($latesttimesheetreport->enddate);

                // find next sturday 
                $nextSaturday = $timesheetreportenddate->copy()->next(Carbon::SATURDAY);
                $formattedNextSaturday = $nextSaturday->format('Y-m-d');
                $formattedNextSaturday1 = $timesheetreportenddate->format('d-m-Y');

                // find next week timesheet filled or not 
                $nextweektimesheet = DB::table('timesheetusers')
                    ->where('createdby', auth()->user()->teammember_id)
                    ->whereIn('status', [0, 1])
                    ->where('date', $formattedNextSaturday)
                    ->first();




                // Fetch the rejoining details for the current team member
                // $rejoiningcheck = DB::table('teammembers')
                //     ->where('id', auth()->user()->teammember_id)
                //     ->first();

                $rejoiningcheck = DB::table('teammembers')
                    ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
                    ->where('teammembers.id', auth()->user()->teammember_id)
                    ->select('teammembers.team_member', 'teammembers.staffcode', 'teammembers.joining_date', 'teamrolehistory.newstaff_code', 'teamrolehistory.rejoiningdate')
                    ->first();

                // Check if the rejoining date is set

                if ($rejoiningcheck->rejoiningdate != null) {
                    $rejoining = Carbon::parse($rejoiningcheck->rejoiningdate);
                    $nextweek = Carbon::parse($formattedNextSaturday);

                    // Check if the rejoining date is before next week's Saturday
                    if ($rejoining < $nextweek) {
                        $rejoiningchecktimesheet = DB::table('timesheetusers')
                            ->where('createdby', auth()->user()->teammember_id)
                            ->whereIn('status', [0, 1])
                            ->where('date', $formattedNextSaturday)
                            ->first();
                    } else {
                        $rejoiningchecktimesheet = 'filterd';
                    }
                } else {
                    $rejoiningchecktimesheet = 'filterd';
                }

                // Check if the next week's timesheet is not filled
                if (($nextweektimesheet == null && $rejoiningcheck->rejoiningdate == null) || ($rejoiningchecktimesheet == null && $rejoiningcheck->rejoiningdate != null)) {
                    $output = array('msg' => "Fill the Week timesheet After this week : $formattedNextSaturday1");
                    return back()->with('statuss', $output);
                } else {
                    $usertimesheetfirstdate =  DB::table('timesheets')
                        ->where('status', '0')
                        ->where('created_by', auth()->user()->teammember_id)->orderBy('date', 'ASC')->first();

                    $lastdate = Carbon::createFromFormat('Y-m-d', $usertimesheetfirstdate->date ?? '')->addDays(6);

                    if ($usertimesheetfirstdate) {

                        $firstDate = new DateTime($usertimesheetfirstdate->date);
                        $dayOfWeek = $firstDate->format('w');
                        $daysToAdd = 0;

                        if ($dayOfWeek !== '0') {
                            $daysToAdd = 7 - $dayOfWeek;
                        } else {
                            $output = array('msg' => 'Submit the timesheet from Monday to Sunday.');
                            return back()->with('success', $output);
                        }

                        if ($dayOfWeek > 0) {
                            $daysToSubtract = $dayOfWeek - 1;
                        } else {
                            $daysToSubtract = $dayOfWeek;
                        }

                        $upcomingSunday = (new DateTime($firstDate->format('Y-m-d')))->modify("+$daysToAdd days")->format('Y-m-d');

                        $presentWeekMonday = (new DateTime($firstDate->format('Y-m-d')))->modify("-$daysToSubtract days")->format('Y-m-d');
                    }




                    $get_six_Data = DB::table('timesheets')
                        ->where('status', '0')
                        ->where('created_by', auth()->user()->teammember_id)
                        ->whereBetween('date', [$firstDate->format('Y-m-d'), $upcomingSunday])
                        ->orderBy('date', 'ASC')
                        ->get();


                    $lastdate = $get_six_Data->max('date');


                    $retrievedDates = [];   //copy dates in retrievedDates array in datetime format

                    foreach ($get_six_Data as $entry) {
                        $date = new DateTime($entry->date);
                        $retrievedDates[] = $date->format('Y-m-d');
                    }

                    $expectedDates = [];   // will contain ALL the dates occurs b/w first day to upcoming sunday

                    $firstDate = new DateTime($presentWeekMonday);

                    $upcomingSundayDate = new DateTime($upcomingSunday);


                    // Clone $firstDate so that it is not modified
                    $currentDate = clone $firstDate;

                    while ($currentDate->format('Y-m-d') < $upcomingSundayDate->format('Y-m-d')) {  //excluding sunday
                        $expectedDates[] = $currentDate->format('Y-m-d');


                        $currentDate->modify("+1 day");
                    }

                    $missingDates = array_diff($expectedDates, $retrievedDates);

                    if (!empty($missingDates)) {
                        $missingDatesString = implode(', ', $missingDates);
                        // "2023-11-13, 2023-11-14"

                        $output = array('msg' => "Timesheet Submit Failed Missing dates: $missingDatesString");
                        return back()->with('success', $output);
                    } else {

                        foreach ($get_six_Data as $getsixdata) {
                            // dd('hi', $getsixdata);

                            // Convert the requested date to a Carbon instance
                            $requestedDate = Carbon::createFromFormat('Y-m-d', $getsixdata->date);


                            if (date('l', strtotime(date('d-m-Y', strtotime($getsixdata->date)))) == 'Monday') {

                                $previousMonday = $requestedDate->copy()->previous(Carbon::MONDAY);

                                // Find the nearest next Saturday to the requested date
                                $nextSaturday = $requestedDate->copy()->next(Carbon::SATURDAY);

                                // Format the dates in 'Y-m-d' format
                                $previousMondayFormatted = $getsixdata->date;
                                $nextSaturdayFormatted = $nextSaturday->format('Y-m-d');
                                $nextSaturdayFormatted = $lastdate;


                                $week =  date('d-m-Y', strtotime($previousMondayFormatted))  . ' to ' . date('d-m-Y', strtotime($nextSaturdayFormatted));

                                //------------------- Shahid's code start---------------------
                                $co = DB::table('timesheetusers')
                                    ->where('createdby', auth()->user()->teammember_id)
                                    ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                    ->select('partner', DB::raw('SUM(hour) as total_hours'), DB::raw('COUNT(DISTINCT timesheetid) as row_count'))
                                    ->groupBy('partner')
                                    ->get();


                                // dd($co);
                                foreach ($co as $codata) {
                                    DB::table('timesheetreport')->insert([
                                        'teamid'       =>     auth()->user()->teammember_id,
                                        'week'       =>     $week,
                                        'totaldays'       =>     $codata->row_count,
                                        'totaltime' =>  $codata->total_hours,
                                        'partnerid'  => $codata->partner,
                                        'startdate'  => $previousMondayFormatted,
                                        'enddate'  => $nextSaturdayFormatted,
                                        // 'created_at'                =>       date('y-m-d'),
                                        'created_at'                =>      date('y-m-d H:i:s'),
                                    ]);
                                }

                                $totaldays = DB::table('timesheetusers')
                                    ->where('createdby', auth()->user()->teammember_id)
                                    ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                    ->select('date')
                                    ->groupBy('date')
                                    ->get();

                                $totaldaysCount = $totaldays->count();
                                $latesttimesheetreport = DB::table('timesheetreport')
                                    ->where('teamid', auth()->user()->teammember_id)
                                    ->where('startdate', $previousMondayFormatted)
                                    ->first();

                                if ($latesttimesheetreport) {
                                    DB::table('timesheetreport')
                                        ->where('id', $latesttimesheetreport->id)
                                        ->update(['dayscount' => $totaldaysCount]);
                                }

                                // dd($co);
                            }



                            DB::table('timesheetusers')->where('timesheetid', $getsixdata->id)->update([
                                'status'         =>     1,
                                'updated_at'              =>    date('y-m-d'),
                            ]);
                            DB::table('timesheets')->where('id', $getsixdata->id)->update([
                                'status'         =>     1,
                                'updated_at'              =>    date('y-m-d'),
                            ]);
                        }
                    }


                    // $output = array('msg' => 'Timesheet Submit Successfully');
                    $output = array('msg' => "Timesheet Submit Successfully till " . Carbon::createFromFormat('Y-m-d', $previousMondayFormatted)->format('d-m-Y') . " to " . Carbon::createFromFormat('Y-m-d', $nextSaturdayFormatted)->format('d-m-Y'));

                    // $output = array('msg' => "Timesheet Submit Successfully till $previousMondayFormatted to $nextSaturdayFormatted ");
                    return back()->with('success', $output);
                }
            } else {

                // dd($latesttimesheetreport, 1);
                $usertimesheetfirstdate =  DB::table('timesheets')
                    ->where('status', '0')
                    ->where('created_by', auth()->user()->teammember_id)->orderBy('date', 'ASC')->first();
                $lastdate = Carbon::createFromFormat('Y-m-d', $usertimesheetfirstdate->date ?? '')->addDays(6);

                if ($usertimesheetfirstdate) {
                    $firstDate = new DateTime($usertimesheetfirstdate->date);
                    $dayOfWeek = $firstDate->format('w');
                    $daysToAdd = 0;

                    if ($dayOfWeek !== '0') {
                        $daysToAdd = 7 - $dayOfWeek;
                    } else {
                        $output = array('msg' => 'Submit the timesheet from Monday to Sunday.');
                        return back()->with('success', $output);
                    }

                    if ($dayOfWeek > 0) {
                        $daysToSubtract = $dayOfWeek - 1;
                    } else {
                        $daysToSubtract = $dayOfWeek;
                    }

                    $upcomingSunday = (new DateTime($firstDate->format('Y-m-d')))->modify("+$daysToAdd days")->format('Y-m-d');

                    $presentWeekMonday = (new DateTime($firstDate->format('Y-m-d')))->modify("-$daysToSubtract days")->format('Y-m-d');
                }



                $get_six_Data = DB::table('timesheets')
                    ->where('status', '0')
                    ->where('created_by', auth()->user()->teammember_id)
                    ->whereBetween('date', [$firstDate->format('Y-m-d'), $upcomingSunday])
                    ->orderBy('date', 'ASC')
                    ->get();

                $lastdate = $get_six_Data->max('date');


                $retrievedDates = [];   //copy dates in retrievedDates array in datetime format

                foreach ($get_six_Data as $entry) {
                    $date = new DateTime($entry->date);
                    $retrievedDates[] = $date->format('Y-m-d');
                }

                $expectedDates = [];   // will contain ALL the dates occurs b/w first day to upcoming sunday

                $firstDate = new DateTime($presentWeekMonday);

                $upcomingSundayDate = new DateTime($upcomingSunday);


                // Clone $firstDate so that it is not modified
                $currentDate = clone $firstDate;

                while ($currentDate->format('Y-m-d') < $upcomingSundayDate->format('Y-m-d')) {  //excluding sunday
                    $expectedDates[] = $currentDate->format('Y-m-d');


                    $currentDate->modify("+1 day");
                }

                $missingDates = array_diff($expectedDates, $retrievedDates);

                if (!empty($missingDates)) {
                    $missingDatesString = implode(', ', $missingDates);
                    // "2023-11-13, 2023-11-14"

                    $output = array('msg' => "Timesheet Submit Failed Missing dates: $missingDatesString");
                    return back()->with('success', $output);
                } else {

                    foreach ($get_six_Data as $getsixdata) {
                        // dd('hi', $getsixdata);

                        // Convert the requested date to a Carbon instance
                        $requestedDate = Carbon::createFromFormat('Y-m-d', $getsixdata->date);


                        if (date('l', strtotime(date('d-m-Y', strtotime($getsixdata->date)))) == 'Monday') {

                            $previousMonday = $requestedDate->copy()->previous(Carbon::MONDAY);

                            // Find the nearest next Saturday to the requested date
                            $nextSaturday = $requestedDate->copy()->next(Carbon::SATURDAY);

                            // Format the dates in 'Y-m-d' format
                            $previousMondayFormatted = $getsixdata->date;
                            $nextSaturdayFormatted = $nextSaturday->format('Y-m-d');
                            $nextSaturdayFormatted = $lastdate;


                            $week =  date('d-m-Y', strtotime($previousMondayFormatted))  . ' to ' . date('d-m-Y', strtotime($nextSaturdayFormatted));

                            $co = DB::table('timesheetusers')
                                ->where('createdby', auth()->user()->teammember_id)
                                ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                ->select('partner', DB::raw('SUM(hour) as total_hours'), DB::raw('COUNT(DISTINCT timesheetid) as row_count'))
                                ->groupBy('partner')
                                ->get();


                            // dd($co);
                            foreach ($co as $codata) {
                                DB::table('timesheetreport')->insert([
                                    'teamid'       =>     auth()->user()->teammember_id,
                                    'week'       =>     $week,
                                    'totaldays'       =>     $codata->row_count,
                                    'totaltime' =>  $codata->total_hours,
                                    'partnerid'  => $codata->partner,
                                    'startdate'  => $previousMondayFormatted,
                                    'enddate'  => $nextSaturdayFormatted,
                                    // 'created_at'                =>       date('y-m-d'),
                                    'created_at'                =>      date('y-m-d H:i:s'),
                                ]);
                            }

                            $totaldays = DB::table('timesheetusers')
                                ->where('createdby', auth()->user()->teammember_id)
                                ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                ->select('date')
                                ->groupBy('date')
                                ->get();

                            $totaldaysCount = $totaldays->count();
                            $latesttimesheetreport = DB::table('timesheetreport')
                                ->where('teamid', auth()->user()->teammember_id)
                                ->where('startdate', $previousMondayFormatted)
                                ->first();

                            if ($latesttimesheetreport) {
                                DB::table('timesheetreport')
                                    ->where('id', $latesttimesheetreport->id)
                                    ->update(['dayscount' => $totaldaysCount]);
                            }

                            // dd($co);
                        }



                        DB::table('timesheetusers')->where('timesheetid', $getsixdata->id)->update([
                            'status'         =>     1,
                            'updated_at'              =>    date('y-m-d'),
                        ]);
                        DB::table('timesheets')->where('id', $getsixdata->id)->update([
                            'status'         =>     1,
                            'updated_at'              =>    date('y-m-d'),
                        ]);
                    }
                }


                // $output = array('msg' => 'Timesheet Submit Successfully');
                $output = array('msg' => "Timesheet Submit Successfully till " . Carbon::createFromFormat('Y-m-d', $previousMondayFormatted)->format('d-m-Y') . " to " . Carbon::createFromFormat('Y-m-d', $nextSaturdayFormatted)->format('d-m-Y'));

                // $output = array('msg' => "Timesheet Submit Successfully till $previousMondayFormatted to $nextSaturdayFormatted ");
                return back()->with('success', $output);
            }
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php
    public function rejoinstore(Request $request)
    {

        $checkrole = DB::table('teammembers')
            ->where('id', $request->employeeid)
            ->select('id', 'role_id', 'staffcode', 'staffcodenumber')
            ->first();

        // if user designation change then
        if ($checkrole && $request->employeeid && $request->rejoining_date && $request->designationtype) {
            if ($checkrole->role_id < $request->designationtype) {
                $role = '';
                if ($request->designationtype == 11) {
                    $role = "super admin";
                } elseif ($request->designationtype == 12) {
                    $role = "admin";
                } elseif ($request->designationtype == 13) {
                    $role = "partner";
                } elseif ($request->designationtype == 14) {
                    $role = "manager";
                } elseif ($request->designationtype == 15) {
                    $role = "staff";
                }
                $output = array('msg' => 'You can not rejoin on this post "' . $role . '".');
                return back()->with('statuss', $output);
            }

            if ($checkrole->role_id != $request->designationtype) {
                $maxStaffcodeTeammembers = DB::table('teammembers')
                    ->where('role_id', $request->designationtype)
                    ->max('staffcodenumber');

                $maxStaffcodeTeamRoleHistory = DB::table('teamrolehistory')
                    ->where('roleid_new', $request->designationtype)
                    ->max('new_staffcodenumber');

                $getlateststaffcode = max($maxStaffcodeTeammembers, $maxStaffcodeTeamRoleHistory);


                if ($request->designationtype == 13) {
                    if ($getlateststaffcode == null) {
                        $newstaffcode = '10001';
                    } else {
                        $newstaffcode = $getlateststaffcode + 1;
                    }
                    $newstaffcoderesult = 'P' . $newstaffcode;
                    $staffcode = $newstaffcode;
                }
                if ($request->designationtype == 14) {
                    if ($getlateststaffcode == null) {
                        $newstaffcode = '20001';
                    } else {
                        $newstaffcode = $getlateststaffcode + 1;
                    }
                    $newstaffcoderesult = 'M' . $newstaffcode;
                    $staffcode = $newstaffcode;
                }

                DB::table('teammembers')
                    ->where('id', $request->employeeid)
                    ->update([
                        'role_id' => $request->designationtype,
                        'staffcodenumber' => $staffcode,
                        'status' => 1,
                    ]);

                DB::table('users')
                    ->where('teammember_id', $request->employeeid)
                    ->update([
                        'role_id' => $request->designationtype,
                        'status' => 1,
                    ]);

                DB::table('teamrolehistory')->insert([
                    'teammember_id' => $request->employeeid,
                    'roleid_old' => $checkrole->role_id,
                    'roleid_new' => $request->designationtype,
                    'oldstaff_code' =>  $checkrole->staffcode,
                    'newstaff_code' => $newstaffcoderesult,
                    'old_staffcodenumber' => $checkrole->staffcodenumber,
                    'new_staffcodenumber' => $staffcode,
                    'rejoiningdate' => date('Y-m-d', strtotime($request->rejoining_date)),
                    //hare goes to created date 
                    'rejoiningcreated' => now(),
                    'rejointimesheetstatus' => 1,
                    //hare goes to rejoining date from form becouse all condition apply on create column it is common column for pormotion and rejoining
                    'created_at' => Carbon::createFromFormat('Y-m-d', $request->rejoining_date)->toDateTimeString(),
                    'updated_at' => now(),
                ]);
            } else {
                $role = '';
                if ($checkrole->role_id == 11) {
                    $role = "super admin";
                } elseif ($checkrole->role_id == 12) {
                    $role = "admin";
                } elseif ($checkrole->role_id == 13) {
                    $role = "partner";
                } elseif ($checkrole->role_id == 14) {
                    $role = "manager";
                } elseif ($checkrole->role_id == 15) {
                    $role = "staff";
                }
                $output = array('msg' => 'The User allready on this post.You can not select "' . $role . '".');
                return back()->with('statuss', $output);
            }
        }
        // if user designation not chnge
        else {

            DB::table('teammembers')
                ->where('id', $request->employeeid)
                ->update([
                    'status' => 1,
                ]);

            DB::table('users')
                ->where('teammember_id', $request->employeeid)
                ->update([
                    'status' => 1,
                ]);

            DB::table('rejoiningsamepost')->insert([
                'teammember_id' => $request->employeeid,
                'rejoiningdate' => date('Y-m-d', strtotime($request->rejoining_date)),
                'created_at' => now(),
                'updated_at' => now(),
            ]);
        }

        $output = array('msg' => 'Rejoining Successfully Done');
        return back()->with('success', $output);
    }



Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetrequestController.php



    public function timesheetsubmission(Request $request)
    {
        try {



            $checksavetimesheet = DB::table('timesheetusers')
                ->where('createdby', auth()->user()->teammember_id)
                ->where('status', 0)
                ->first();

            if ($checksavetimesheet == null) {
                $output = array('msg' => "You have not saved any timesheets. Please save your timesheet.");
                return back()->with('statuss', $output);
            }

            $latesttimesheetreport =  DB::table('timesheetreport')
                ->where('teamid', auth()->user()->teammember_id)
                ->orderBy('id', 'desc')
                ->first();


            // $latesttimesheetreport is not null 
            if ($latesttimesheetreport !== null) {

                $timesheetreportenddate = Carbon::parse($latesttimesheetreport->enddate);

                // find next sturday 
                $nextSaturday = $timesheetreportenddate->copy()->next(Carbon::SATURDAY);
                $formattedNextSaturday = $nextSaturday->format('Y-m-d');
                $formattedNextSaturday1 = $timesheetreportenddate->format('d-m-Y');

                // find next week timesheet filled or not 
                $nextweektimesheet = DB::table('timesheetusers')
                    ->where('createdby', auth()->user()->teammember_id)
                    ->whereIn('status', [0, 1])
                    ->where('date', $formattedNextSaturday)
                    ->first();





                // Fetch the rejoining data
                $rejoiningcheck = DB::table('teammembers')
                    ->leftJoin('teamrolehistory', 'teamrolehistory.teammember_id', '=', 'teammembers.id')
                    ->leftJoin('rejoiningsamepost', 'rejoiningsamepost.teammember_id', '=', 'teammembers.id')
                    ->where('teammembers.id', auth()->user()->teammember_id)
                    ->select(
                        'teammembers.team_member',
                        'teammembers.staffcode',
                        'teammembers.joining_date',
                        'teamrolehistory.newstaff_code',
                        'teamrolehistory.rejoiningdate',
                        'rejoiningsamepost.rejoiningdate as samepostrejoiningdate'
                    )
                    ->first();



                // Initialize the variable
                $rejoiningchecktimesheet = null;

                // Check if any rejoining date is set
                $rejoiningDate = $rejoiningcheck->rejoiningdate ?? $rejoiningcheck->samepostrejoiningdate;

                // Check if the rejoining date is set
                if ($rejoiningDate) {
                    $rejoining = Carbon::parse($rejoiningDate);
                    $nextweek = Carbon::parse($formattedNextSaturday);

                    // Check if the rejoining date is before next week's Saturday
                    if ($rejoining < $nextweek) {
                        $rejoiningchecktimesheet = DB::table('timesheetusers')
                            ->where('createdby', auth()->user()->teammember_id)
                            ->whereIn('status', [0, 1])
                            ->where('date', $formattedNextSaturday)
                            ->first();
                    }
                }

                // Determine the next week's timesheet status


                if ($nextweektimesheet == null && $rejoiningchecktimesheet == null && $rejoiningDate == null) {
                    $output = array('msg' => "Fill the Week timesheet After this week: $formattedNextSaturday1");
                    return back()->with('statuss', $output);
                } else {
                    $usertimesheetfirstdate =  DB::table('timesheets')
                        ->where('status', '0')
                        ->where('created_by', auth()->user()->teammember_id)->orderBy('date', 'ASC')->first();

                    $lastdate = Carbon::createFromFormat('Y-m-d', $usertimesheetfirstdate->date ?? '')->addDays(6);

                    if ($usertimesheetfirstdate) {

                        $firstDate = new DateTime($usertimesheetfirstdate->date);
                        $dayOfWeek = $firstDate->format('w');
                        $daysToAdd = 0;

                        if ($dayOfWeek !== '0') {
                            $daysToAdd = 7 - $dayOfWeek;
                        } else {
                            $output = array('msg' => 'Submit the timesheet from Monday to Sunday.');
                            return back()->with('success', $output);
                        }

                        if ($dayOfWeek > 0) {
                            $daysToSubtract = $dayOfWeek - 1;
                        } else {
                            $daysToSubtract = $dayOfWeek;
                        }

                        $upcomingSunday = (new DateTime($firstDate->format('Y-m-d')))->modify("+$daysToAdd days")->format('Y-m-d');

                        $presentWeekMonday = (new DateTime($firstDate->format('Y-m-d')))->modify("-$daysToSubtract days")->format('Y-m-d');
                    }




                    $get_six_Data = DB::table('timesheets')
                        ->where('status', '0')
                        ->where('created_by', auth()->user()->teammember_id)
                        ->whereBetween('date', [$firstDate->format('Y-m-d'), $upcomingSunday])
                        ->orderBy('date', 'ASC')
                        ->get();


                    $lastdate = $get_six_Data->max('date');


                    $retrievedDates = [];   //copy dates in retrievedDates array in datetime format

                    foreach ($get_six_Data as $entry) {
                        $date = new DateTime($entry->date);
                        $retrievedDates[] = $date->format('Y-m-d');
                    }

                    $expectedDates = [];   // will contain ALL the dates occurs b/w first day to upcoming sunday

                    $firstDate = new DateTime($presentWeekMonday);

                    $upcomingSundayDate = new DateTime($upcomingSunday);


                    // Clone $firstDate so that it is not modified
                    $currentDate = clone $firstDate;

                    while ($currentDate->format('Y-m-d') < $upcomingSundayDate->format('Y-m-d')) {  //excluding sunday
                        $expectedDates[] = $currentDate->format('Y-m-d');


                        $currentDate->modify("+1 day");
                    }

                    $missingDates = array_diff($expectedDates, $retrievedDates);

                    if (!empty($missingDates)) {
                        $missingDatesString = implode(', ', $missingDates);
                        // "2023-11-13, 2023-11-14"

                        $output = array('msg' => "Timesheet Submit Failed Missing dates: $missingDatesString");
                        return back()->with('success', $output);
                    } else {

                        foreach ($get_six_Data as $getsixdata) {
                            // dd('hi', $getsixdata);

                            // Convert the requested date to a Carbon instance
                            $requestedDate = Carbon::createFromFormat('Y-m-d', $getsixdata->date);


                            if (date('l', strtotime(date('d-m-Y', strtotime($getsixdata->date)))) == 'Monday') {

                                $previousMonday = $requestedDate->copy()->previous(Carbon::MONDAY);

                                // Find the nearest next Saturday to the requested date
                                $nextSaturday = $requestedDate->copy()->next(Carbon::SATURDAY);

                                // Format the dates in 'Y-m-d' format
                                $previousMondayFormatted = $getsixdata->date;
                                $nextSaturdayFormatted = $nextSaturday->format('Y-m-d');
                                $nextSaturdayFormatted = $lastdate;


                                $week =  date('d-m-Y', strtotime($previousMondayFormatted))  . ' to ' . date('d-m-Y', strtotime($nextSaturdayFormatted));

                                //------------------- Shahid's code start---------------------
                                $co = DB::table('timesheetusers')
                                    ->where('createdby', auth()->user()->teammember_id)
                                    ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                    ->select('partner', DB::raw('SUM(hour) as total_hours'), DB::raw('COUNT(DISTINCT timesheetid) as row_count'))
                                    ->groupBy('partner')
                                    ->get();


                                // dd($co);
                                foreach ($co as $codata) {
                                    DB::table('timesheetreport')->insert([
                                        'teamid'       =>     auth()->user()->teammember_id,
                                        'week'       =>     $week,
                                        'totaldays'       =>     $codata->row_count,
                                        'totaltime' =>  $codata->total_hours,
                                        'partnerid'  => $codata->partner,
                                        'startdate'  => $previousMondayFormatted,
                                        'enddate'  => $nextSaturdayFormatted,
                                        // 'created_at'                =>       date('y-m-d'),
                                        'created_at'                =>      date('y-m-d H:i:s'),
                                    ]);
                                }

                                $totaldays = DB::table('timesheetusers')
                                    ->where('createdby', auth()->user()->teammember_id)
                                    ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                    ->select('date')
                                    ->groupBy('date')
                                    ->get();

                                $totaldaysCount = $totaldays->count();
                                $latesttimesheetreport = DB::table('timesheetreport')
                                    ->where('teamid', auth()->user()->teammember_id)
                                    ->where('startdate', $previousMondayFormatted)
                                    ->first();

                                if ($latesttimesheetreport) {
                                    DB::table('timesheetreport')
                                        ->where('id', $latesttimesheetreport->id)
                                        ->update(['dayscount' => $totaldaysCount]);
                                }

                                // dd($co);
                            }



                            DB::table('timesheetusers')->where('timesheetid', $getsixdata->id)->update([
                                'status'         =>     1,
                                'updated_at'              =>    date('y-m-d'),
                            ]);
                            DB::table('timesheets')->where('id', $getsixdata->id)->update([
                                'status'         =>     1,
                                'updated_at'              =>    date('y-m-d'),
                            ]);
                        }
                    }


                    // $output = array('msg' => 'Timesheet Submit Successfully');
                    $output = array('msg' => "Timesheet Submit Successfully till " . Carbon::createFromFormat('Y-m-d', $previousMondayFormatted)->format('d-m-Y') . " to " . Carbon::createFromFormat('Y-m-d', $nextSaturdayFormatted)->format('d-m-Y'));

                    // $output = array('msg' => "Timesheet Submit Successfully till $previousMondayFormatted to $nextSaturdayFormatted ");
                    return back()->with('success', $output);
                }
            } else {

                // dd($latesttimesheetreport, 1);
                $usertimesheetfirstdate =  DB::table('timesheets')
                    ->where('status', '0')
                    ->where('created_by', auth()->user()->teammember_id)->orderBy('date', 'ASC')->first();
                $lastdate = Carbon::createFromFormat('Y-m-d', $usertimesheetfirstdate->date ?? '')->addDays(6);

                if ($usertimesheetfirstdate) {
                    $firstDate = new DateTime($usertimesheetfirstdate->date);
                    $dayOfWeek = $firstDate->format('w');
                    $daysToAdd = 0;

                    if ($dayOfWeek !== '0') {
                        $daysToAdd = 7 - $dayOfWeek;
                    } else {
                        $output = array('msg' => 'Submit the timesheet from Monday to Sunday.');
                        return back()->with('success', $output);
                    }

                    if ($dayOfWeek > 0) {
                        $daysToSubtract = $dayOfWeek - 1;
                    } else {
                        $daysToSubtract = $dayOfWeek;
                    }

                    $upcomingSunday = (new DateTime($firstDate->format('Y-m-d')))->modify("+$daysToAdd days")->format('Y-m-d');

                    $presentWeekMonday = (new DateTime($firstDate->format('Y-m-d')))->modify("-$daysToSubtract days")->format('Y-m-d');
                }



                $get_six_Data = DB::table('timesheets')
                    ->where('status', '0')
                    ->where('created_by', auth()->user()->teammember_id)
                    ->whereBetween('date', [$firstDate->format('Y-m-d'), $upcomingSunday])
                    ->orderBy('date', 'ASC')
                    ->get();

                $lastdate = $get_six_Data->max('date');


                $retrievedDates = [];   //copy dates in retrievedDates array in datetime format

                foreach ($get_six_Data as $entry) {
                    $date = new DateTime($entry->date);
                    $retrievedDates[] = $date->format('Y-m-d');
                }

                $expectedDates = [];   // will contain ALL the dates occurs b/w first day to upcoming sunday

                $firstDate = new DateTime($presentWeekMonday);

                $upcomingSundayDate = new DateTime($upcomingSunday);


                // Clone $firstDate so that it is not modified
                $currentDate = clone $firstDate;

                while ($currentDate->format('Y-m-d') < $upcomingSundayDate->format('Y-m-d')) {  //excluding sunday
                    $expectedDates[] = $currentDate->format('Y-m-d');


                    $currentDate->modify("+1 day");
                }

                $missingDates = array_diff($expectedDates, $retrievedDates);

                if (!empty($missingDates)) {
                    $missingDatesString = implode(', ', $missingDates);
                    // "2023-11-13, 2023-11-14"

                    $output = array('msg' => "Timesheet Submit Failed Missing dates: $missingDatesString");
                    return back()->with('success', $output);
                } else {

                    foreach ($get_six_Data as $getsixdata) {
                        // dd('hi', $getsixdata);

                        // Convert the requested date to a Carbon instance
                        $requestedDate = Carbon::createFromFormat('Y-m-d', $getsixdata->date);


                        if (date('l', strtotime(date('d-m-Y', strtotime($getsixdata->date)))) == 'Monday') {

                            $previousMonday = $requestedDate->copy()->previous(Carbon::MONDAY);

                            // Find the nearest next Saturday to the requested date
                            $nextSaturday = $requestedDate->copy()->next(Carbon::SATURDAY);

                            // Format the dates in 'Y-m-d' format
                            $previousMondayFormatted = $getsixdata->date;
                            $nextSaturdayFormatted = $nextSaturday->format('Y-m-d');
                            $nextSaturdayFormatted = $lastdate;


                            $week =  date('d-m-Y', strtotime($previousMondayFormatted))  . ' to ' . date('d-m-Y', strtotime($nextSaturdayFormatted));

                            $co = DB::table('timesheetusers')
                                ->where('createdby', auth()->user()->teammember_id)
                                ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                ->select('partner', DB::raw('SUM(hour) as total_hours'), DB::raw('COUNT(DISTINCT timesheetid) as row_count'))
                                ->groupBy('partner')
                                ->get();


                            // dd($co);
                            foreach ($co as $codata) {
                                DB::table('timesheetreport')->insert([
                                    'teamid'       =>     auth()->user()->teammember_id,
                                    'week'       =>     $week,
                                    'totaldays'       =>     $codata->row_count,
                                    'totaltime' =>  $codata->total_hours,
                                    'partnerid'  => $codata->partner,
                                    'startdate'  => $previousMondayFormatted,
                                    'enddate'  => $nextSaturdayFormatted,
                                    // 'created_at'                =>       date('y-m-d'),
                                    'created_at'                =>      date('y-m-d H:i:s'),
                                ]);
                            }

                            $totaldays = DB::table('timesheetusers')
                                ->where('createdby', auth()->user()->teammember_id)
                                ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                ->select('date')
                                ->groupBy('date')
                                ->get();

                            $totaldaysCount = $totaldays->count();
                            $latesttimesheetreport = DB::table('timesheetreport')
                                ->where('teamid', auth()->user()->teammember_id)
                                ->where('startdate', $previousMondayFormatted)
                                ->first();

                            if ($latesttimesheetreport) {
                                DB::table('timesheetreport')
                                    ->where('id', $latesttimesheetreport->id)
                                    ->update(['dayscount' => $totaldaysCount]);
                            }

                            // dd($co);
                        }



                        DB::table('timesheetusers')->where('timesheetid', $getsixdata->id)->update([
                            'status'         =>     1,
                            'updated_at'              =>    date('y-m-d'),
                        ]);
                        DB::table('timesheets')->where('id', $getsixdata->id)->update([
                            'status'         =>     1,
                            'updated_at'              =>    date('y-m-d'),
                        ]);
                    }
                }


                // $output = array('msg' => 'Timesheet Submit Successfully');
                $output = array('msg' => "Timesheet Submit Successfully till " . Carbon::createFromFormat('Y-m-d', $previousMondayFormatted)->format('d-m-Y') . " to " . Carbon::createFromFormat('Y-m-d', $nextSaturdayFormatted)->format('d-m-Y'));

                // $output = array('msg' => "Timesheet Submit Successfully till $previousMondayFormatted to $nextSaturdayFormatted ");
                return back()->with('success', $output);
            }
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php

Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php

Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php



Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php

Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php

Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\PromotionandrejoiningController.php




################################################################################################################################
Route 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222

