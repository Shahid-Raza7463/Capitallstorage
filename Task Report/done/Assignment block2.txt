task name Assignment block
testing on supreet shingh, sunny gupta and bhasker kumar

Controller2222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\StepController.php
replace this function assignmentreject()


 // Assignment Active and inactive functionality.  assrejected
    public function  assignmentreject($id, $status, $teamid)
    {
        // dd($id);
        try {
            if ($status == 0) {
                DB::table('assignmentteammappings')->where('id', $id)->update([
                    'status'   => 0,
                ]);
            } else {
                //   Assignment inactive
                DB::table('assignmentteammappings')->where('id', $id)->update([
                    'status'   => 1,
                ]);

                //   Assignment inactive mail to user
                $assignmentmappingId = DB::table('assignmentteammappings')->where('id', $id)->select('assignmentmapping_id')->first();
                $assignmentgenerateId = DB::table('assignmentmappings')->where('id', $assignmentmappingId->assignmentmapping_id)->select('assignmentgenerate_id')->first();
                $assignmentname = DB::table('assignmentbudgetings')->where('assignmentgenerate_id', $assignmentgenerateId->assignmentgenerate_id)->select('assignmentname', 'client_id')->first();
                $clientname = DB::table('clients')->where('id', $assignmentname->client_id)->select('client_name')->first();
                $teammname = DB::table('teammembers')
                    ->where('teammembers.id', $teamid)
                    ->first();
                $data = array(
                    'assignmentgenerateId' =>  $assignmentgenerateId->assignmentgenerate_id,
                    'clientname' =>  $clientname->client_name,
                    'assignmentname' =>  $assignmentname->assignmentname,
                    'emailid' =>  $teammname->emailid,
                    'teammember_name' => $teammname->team_member,
                );

                Mail::send('emails.assignmentrejected', $data, function ($msg) use ($data) {
                    $msg->to([$data['emailid']]);
                    $msg->subject('Your Assignment rejected || ' . $data['assignmentname'] . ' / ' . $data['assignmentgenerateId']);
                });
                //   Assignment inactive mail to user end hare 
            }
            $output = array('msg' => 'Rejected Successfully');
            return back()->with('statuss', $output);
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }

##########################################################################################
app\Http\Controllers\StepController.php
replace this $teammemberDatas in viewAssignment() function 


        // assignmentteammappingsStatus select hare so that i can do active or inactive assignment. assrejected
        
$teammemberDatas = DB::table('assignmentmappings')
            ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
            ->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')
            ->leftjoin('titles', 'titles.id', 'teammembers.title_id')
            ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
            ->where('assignmentmappings.assignmentgenerate_id', $id)
            ->select('teammembers.*', 'roles.rolename', 'assignmentteammappings.type', 'titles.title', 'assignmentteammappings.id As assignmentteammappingsId', 'assignmentteammappings.status as assignmentteammappingsStatus')->get();





##########################################################################################
app\Http\Controllers\BackEndController.php
replace  $assignment in index function serach auth()->user()->role_id == 13


 $assignment = DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        ->where(function ($query) {
          $query->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
            ->orWhere('assignmentmappings.otherpartner', auth()->user()->teammember_id);
        })

        ->select(
          'assignmentmappings.*',
          'clients.client_name',
          'assignmentbudgetings.assignmentname',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentgenerate_id'
        )
        // Filter open assignment hare status 1 means open assignment 
        ->where('assignmentbudgetings.status', 1)
        // Filter active assignment hare status 0 means active assignment on dashboard. assrejected
        ->where('assignmentteammappings.status', 0)
        ->get();

      $assignmentcount = count($assignment);


##########################################################################################
app\Http\Controllers\BackEndController.php
replace  $assignment in index function serach auth()->user()->role_id == 14 || auth()->user()->role_id == 15


$assignment =  DB::table('assignmentmappings')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
        ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
        // get assignment name only
        ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
        ->select(
          'assignmentbudgetings.client_id',
          'clients.client_name',
          'assignmentbudgetings.assignmentgenerate_id',
          'assignments.assignment_name',
          'assignmentbudgetings.assignmentname'
        )
        // ->where('clients.status', 0)
        // Filter open assignment hare status 1 means open assignment 
        ->where('assignmentbudgetings.status', 1)
        // Filter active assignment hare status 0 means active assignment.  assrejected
        ->where('assignmentteammappings.status', 0)
        ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)->distinct()->get();
      // dd($assignment);
      $assignmentcount = count($assignment);



##########################################################################################
app\Http\Controllers\AssignmentmappingController.php
replace this function yearWise()

 public function yearWise(Request $request)
    {
        // DB::table('assignmentteammappings')
        //     ->update(['status' => 0]);

        if (auth()->user()->role_id == 11) {
            $clientid = $request->clientid;
            $assignmentmappingData =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->where('clients.id', $request->clientid)
                ->where('assignmentmappings.year', $request->year)
                ->select(
                    'assignmentmappings.*',
                    'assignmentbudgetings.duedate',
                    'assignmentbudgetings.assignmentname',
                    'assignments.assignment_name',
                    'clients.client_name'
                )->distinct()->get();
            return view('backEnd.assignmentmapping.yearwise', compact('assignmentmappingData', 'clientid'));
        } elseif (auth()->user()->role_id == 13) {
            $clientid = $request->clientid;
            $assigned =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->where('clients.id', $request->clientid)
                ->where('assignmentmappings.year', $request->year)
                ->where('assignmentmappings.leadpartner', auth()->user()->teammember_id)
                ->select(
                    'assignmentmappings.*',
                    'assignmentbudgetings.duedate',
                    'assignments.assignment_name',
                    'clients.client_name',
                    'assignmentbudgetings.assignmentname'
                )->distinct()->get();

            $otherassigned =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->where('clients.id', $request->clientid)
                ->where('assignmentmappings.year', $request->year)
                ->where('assignmentmappings.otherpartner', auth()->user()->teammember_id)
                ->select(
                    'assignmentmappings.*',
                    'assignmentbudgetings.duedate',
                    'assignments.assignment_name',
                    'clients.client_name',
                    'assignmentbudgetings.assignmentname'
                )->distinct()->get();
            return view('backEnd.assignmentmapping.yearwisepartnerlist', compact('assigned', 'otherassigned', 'clientid'));
        } else {

            $clientid = $request->clientid;
            $assignmentmappingData =  DB::table('assignmentmappings')
                ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
                ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('assignments', 'assignments.id', 'assignmentmappings.assignment_id')
                ->where('clients.id', $request->clientid)
                ->where('assignmentmappings.year', $request->year)
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
                // status 0 is active  so that i can active or inactive assignment assrejected
                ->where('assignmentteammappings.status', 0)
                ->select(
                    'assignmentmappings.*',
                    'assignmentbudgetings.duedate',
                    'assignmentbudgetings.assignmentname',
                    'assignments.assignment_name',
                    'clients.client_name'
                )->distinct()->get();
            // assrejected
            return view('backEnd.assignmentmapping.yearwise', compact('assignmentmappingData', 'clientid'));
        }
    }

##########################################################################################
app\Http\Controllers\AssignmentmappingController.php
replace this code in store() function 
find $i = 0; $i < $count; $i++



for ($i = 0; $i < $count; $i++) {
                    DB::table('assignmentteammappings')->insert([
                        'assignmentmapping_id'       =>     $id,
                        'type'       =>     $request->type[$i],
                        'teammember_id'       =>     $request->teammember_id[$i],
                        // default status 0 so that i can active or inactive assignment assrejected
                        'status'       =>  0,
                        'created_at'                =>       date('y-m-d'),
                        'updated_at'              =>    date('y-m-d'),
                    ]);


                }

blade22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\viewassignment.blade.php
find Teammember List then replace table tag 



<table class="table display table-bordered table-striped table-hover ">
                                        <thead>
                                            <tr>
                                                <th>Name</th>
                                                <th>Role</th>
                                                <th>Mobile No</th>
                                                @if (auth()->user()->role_id == 13 || auth()->user()->role_id == 11)
                                                    <th>Status</th>
                                                @endif
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach ($teammemberDatas as $teammemberData)
                                                <tr>
                                                    <td>{{ $teammemberData->title }} {{ $teammemberData->team_member }}
                                                    </td>
                                                    <td>
                                                        @if ($teammemberData->type == 0)
                                                            <span>Team Leader</span>
                                                        @else
                                                            <span>Staff</span>
                                                        @endif
                                                    </td>
                                                    <td><a
                                                            href="tel:={{ $teammemberData->mobile_no }}">{{ $teammemberData->mobile_no }}</a>
                                                    </td>
                                                    {{-- Assignment inactive and active functionality assreject--}}
                                                    @if (auth()->user()->role_id == 13 || auth()->user()->role_id == 11)
                                                        <td>
                                                            @if ($teammemberData->assignmentteammappingsStatus == 0)
                                                                <a href="{{ url('/assignment/reject/' . $teammemberData->assignmentteammappingsId . '/1/' . $teammemberData->id) }}"
                                                                    onclick="return confirm('Are you sure you want to Inactive this teammember?');">
                                                                    <button class="btn btn-primary" data-toggle="modal"
                                                                        style="height: 16px; width: auto; border-radius: 7px; display: flex; align-items: center; justify-content: center;font-size: 11px;"
                                                                        data-target="#requestModal">Active</button>
                                                                </a>
                                                            @else
                                                                <a href="{{ url('/assignment/reject/' . $teammemberData->assignmentteammappingsId . '/0/' . $teammemberData->id) }}"
                                                                    onclick="return confirm('Are you sure you want to Active this teammember?');">
                                                                    <button class="btn btn-danger" data-toggle="modal"
                                                                        style="height: 16px; width: auto; border-radius: 7px; display: flex; align-items: center; justify-content: center;font-size: 11px;"
                                                                        data-target="#requestModal">Inactive</button>
                                                                </a>
                                                            @endif
                                                        </td>
                                                    @endif
                                                </tr>
                                            @endforeach
                                        </tbody>
                                    </table>


##########################################################################################
resources\views\emails\assignmentrejected.blade.php
replace this code 


<b>Dear {{ $teammember_name ?? '' }}</b>
<br><br>
<p>Your Assignment rejected.</p>
<p>Client Name : {{ $clientname ?? '' }}</p>
<p>Assignment Name : {{ $assignmentname ?? '' }}</p>
<br>
<p>Thanks and Regards<br>Admin<br>V Sankar Aiyar & Co.</p>






22222222222222222222222222222222222222222222
insert 0 value in status column in assignmentteammappings table 


DB::table('assignmentteammappings')
->update(['status' => 0]);






