task name Newteammember joining
replace store function in 
app\Http\Controllers\TimesheetController.php

testing on Vishal Agerwal
Controller222222222222222222222222222222222222222222222222222222222222222222222

 public function store(Request $request)
  {
    try {
      $Newteammeber = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->first();

      $Newteammeberjoining_date = DB::table('teammembers')
        ->where('id', auth()->user()->teammember_id)
        ->select('joining_date')
        ->first();
      $joining_date = date('d-m-Y', strtotime($Newteammeberjoining_date->joining_date));

      // if user not created any timesheet in that case ,it means new teammeber 
      if ($Newteammeber == null) {
        // Get previuse sunday from joining date
        $joining_timestamp = strtotime($joining_date);
        $day_of_week = date('w', $joining_timestamp);
        $days_to_subtract = $day_of_week;
        $previous_sunday_timestamp = strtotime("-$days_to_subtract days", $joining_timestamp);

        $previous_sunday_date = date('d-m-Y', $previous_sunday_timestamp);
        // Get all dates beetween two dates 
        $startDate = Carbon::parse($previous_sunday_date);
        $endDate = Carbon::parse($joining_date);
        $period = CarbonPeriod::create($startDate, $endDate);
        // store all date in $result vairable
        $result = [];
        foreach ($period as $key => $date) {
          if ($key !== 0 && $key !== count($period) - 1) {
            $result[] = $date->toDateString();
          }
        }
        // return $result;
        // dd('yes', $result);
        foreach ($result as $date) {
          $a = DB::table('timesheetusers')->insert([
            'date'        => date('Y-m-d', strtotime($date)),
            'createdby'   => auth()->user()->teammember_id,
            'created_at'  => date('Y-m-d H:i:s'),
            'updated_at'  => date('Y-m-d H:i:s'),
          ]);
        }
      }


      $requestDate = Carbon::parse($request->date);
      $joiningDate = Carbon::parse($joining_date);

      if ($requestDate >= $joiningDate) {
        $data = $request->except(['_token', 'teammember_id', 'amount']);
        //	if ($request->date < '11-09-2023') {
        //dd('hi');
        // $output = array('msg' => 'Please fill timesheet from 11/09/2023, Monday onwards');
        //  return back()->with('success', $output);
        //   }

        //die;
        //? dd(date('w', strtotime($request->date))); // 4
        if (date('w', strtotime($request->date)) == 0) {
          $previousSaturday = date('Y-m-d', strtotime('-1 day', strtotime($request->date)));
          $previousSaturdayFilled = DB::table('timesheetusers')
            ->where('createdby', auth()->user()->teammember_id)
            ->where('date', $previousSaturday)
            ->where('status', 1)
            ->first();
          // dd('hi1', $previousSaturdayFilled);
          if ($previousSaturdayFilled != null) {
            $output = array('msg' => 'You already submitted for this week');
            return back()->with('success', $output);
          }
        }

        // check hour
        $hours = $request->input('totalhour');
        if (!is_numeric($hours) || $hours > 12) {
          $output = array('msg' => 'The total hours cannot be greater than 12');
          return back()->with('success', $output);
        }
        // dd(auth()->user()->teammember_id);
        //? dd(date('Y-m-d', strtotime($request->date))); "2023-11-30"
        $previouschck = DB::table('timesheetusers')
          ->where('createdby', auth()->user()->teammember_id)
          ->where('date', date('Y-m-d', strtotime($request->date)))
          ->where('status', 1)
          ->first();

        if ($previouschck != null) {
          //dd('hi');
          $output = array('msg' => 'You already submitted for this week');
          return back()->with('success', $output);
        }

        $previoussavechck = DB::table('timesheetusers')
          ->where('createdby', auth()->user()->teammember_id)
          ->where('date', date('Y-m-d', strtotime($request->date)))
          ->where('status', 0)
          ->first();

        if ($previoussavechck != null) {
          //dd('hi');
          $output = array('msg' => 'You already submitted for this date');
          return back()->with('success', $output);
        }



        $currentDate = Carbon::now()->format('d-m-Y');
        //dd($currentHour);

        // if ($currentDate == $request->date && Carbon::now()->hour < 18) {
        //   //dd('hi');
        //   $output = array('msg' => 'You can only fill today timesheet after 6:00 pm');
        //   return back()->with('success', $output);
        // }

        $leaves = DB::table('applyleaves')
          ->where('applyleaves.createdby', auth()->user()->teammember_id)
          ->where('status', '!=', 2)
          ->select('applyleaves.from', 'applyleaves.to')
          ->get();
        // dd('hi 1', $leaves);
        foreach ($leaves as $leave) {
          //Convert each data from table to Y-m-d format to compare
          $days = CarbonPeriod::create(
            date('Y-m-d', strtotime($leave->from)),
            date('Y-m-d', strtotime($leave->to))
          );

          foreach ($days as $day) {
            $leavess[] = $day->format('Y-m-d');
          }
        }
        // $currentday = date('Y-m-d', strtotime($request->date));// "2023-11-30"
        $currentday = date('Y-m-d', strtotime($request->date));
        // dd('hi 2', $currentday);
        // $ifcount=0;
        //  $elsecount=0;

        if (count($leaves) != 0) {
          //dd('if');
          foreach ($leavess as $leave) {
            // echo"<pre>";
            //  print_r($leave);

            if ($leave == $currentday) {
              //dd('if');
              // $ifcount=$ifcount+1;
              $output = array('msg' => 'You Have Leave for the Day (' . date('d-m-Y', strtotime($leave)) . ')');
              return redirect('timesheet')->with('statuss', $output);
            }
          }
        }
        // insert data in timesheet from request and get id 
        $id = DB::table('timesheets')->insertGetId(
          [
            'created_by' => auth()->user()->teammember_id,
            'month'     =>    date('F', strtotime($request->date)),
            'date'     =>    date('Y-m-d', strtotime($request->date)),
            'created_at'          =>     date('Y-m-d H:i:s'),
          ]
        );

        $count = count($request->assignment_id);
        // dd('hi 3', $count);
        for ($i = 0; $i < $count; $i++) {
          //dd($request->workitem[$i]);
          $assignment =  DB::table('assignmentmappings')->where('assignmentgenerate_id', $request->assignment_id[$i])->first();

          $a = DB::table('timesheetusers')->insert([
            'date'     =>     $request->date,
            'client_id'     =>     $request->client_id[$i],
            'workitem'     =>     $request->workitem[$i],
            'location'     =>     $request->location[$i],
            //   'billable_status'     =>     $request->billable_status[$i],
            'timesheetid'     =>     $id,
            'date'     =>     date('Y-m-d', strtotime($request->date)),
            'hour'     =>     $request->hour[$i],
            'totalhour' =>      $request->totalhour,
            'assignment_id'     =>     $assignment->assignment_id,
            'partner'     =>     $request->partner[$i],
            'createdby' => auth()->user()->teammember_id,
            'created_at'          =>     date('Y-m-d H:i:s'),
            'updated_at'              =>    date('Y-m-d H:i:s'),
          ]);
        }
      } else {
        // dd(auth()->user()->teammember_id);
        $output = array('msg' => 'You can not fill timesheet before :' . $joining_date);
        return redirect('timesheet')->with('success', $output);
      }







      //Attendance code

      $hdatess = date('Y-m-d', strtotime($request->date));
      $day =  DateTime::createFromFormat('Y-m-d', $hdatess)->format('d');      //
      $month =  DateTime::createFromFormat('Y-m-d', $hdatess)->format('F');   //
      $currentDate = new DateTime();
      $currentMonth = $currentDate->format('F');
      //dd($month);
      //   if ($currentDate->format('j') > 25) {
      //     $currentDate->modify('-1 month');
      //     $currentMonth = $currentDate->format('F');
      // }



      $dates = [
        '26' => 'twentysix',
        '27' => 'twentyseven',
        '28' => 'twentyeight',
        '29' => 'twentynine',
        '30' => 'thirty',
        '31' => 'thirtyone',
        '01' => 'one',
        '02' => 'two',
        '03' => 'three',
        '04' => 'four',
        '05' => 'five',
        '06' => 'six',
        '07' => 'seven',
        '08' => 'eight',
        '09' => 'nine',
        '10' => 'ten',
        '11' => 'eleven',
        '12' => 'twelve',
        '13' => 'thirteen',
        '14' => 'fourteen',
        '15' => 'fifteen',
        '16' => 'sixteen',
        '17' => 'seventeen',
        '18' => 'eighteen',
        '19' => 'ninghteen',
        '20' => 'twenty',
        '21' => 'twentyone',
        '22' => 'twentytwo',
        '23' => 'twentythree',
        '24' => 'twentyfour',
        '25' => 'twentyfive',
      ];



      if ($month != $currentMonth && $day > 25) {
        $dateTime = DateTime::createFromFormat('Y-m-d', $hdatess);
        $dateTime->modify('+1 month');
        $month = $dateTime->format('F');
      }
      if ($month != $currentMonth && $day < 25) {
        $dateTime = DateTime::createFromFormat('Y-m-d', $hdatess);
        $month = $dateTime->format('F');
      }
      if ($month == $currentMonth && $day > 25) {

        $dateTime = DateTime::createFromFormat('Y-m-d', $hdatess);
        $dateTime->modify('+1 month');
        $month = $dateTime->format('F');
      }

      //dd($month);


      $column = $dates[$day];

      $attendances = DB::table('attendances')->where('employee_name', auth()->user()->teammember_id)
        ->where('month', $month)->first();

      if ($attendances ==  null) {
        $teammember = DB::table('teammembers')->where('id', auth()->user()->teammember_id)->first();

        $a = DB::table('attendances')->insert([
          'employee_name'         =>     auth()->user()->teammember_id,
          'month'         =>    $month,
          'dateofjoining' =>   $teammember->joining_date,
          'created_at'          =>     date('Y-m-d H:i:s'),
          //   'exam_leave'      =>$value->date_total,
        ]);
        //dd($a);
      }


      //   dd($noofdaysaspertimesheet);

      $updatedtotalhour = $request->totalhour;
      if ($attendances != null && property_exists($attendances, $column)) {
        if ($attendances->$column != "LWP") {
          $updatedtotalhour = $request->totalhour + $attendances->$column;
        }
      }
      DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->where('month', $month)
        ->update([$column => $updatedtotalhour]);


      //end attendance


      $output = array('msg' => 'Create Successfully');
      return redirect('timesheet')->with('success', $output);
    } catch (Exception $e) {
      DB::rollBack();
      Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
      report($e);
      $output = array('msg' => $e->getMessage());
      return back()->withErrors($output)->withInput();
    }
  }