Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentfolderfileController.php
add assignmentfoldercreate() function after zipfile() function 

    public function assignmentfoldercreate(Request $request, $assignmentgenerateid)
    {
        // dd('rrr');
        return view('backEnd.assignmentfolder.zipcreatedwaiting', compact('assignmentgenerateid'));
    }


Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentfolderfileController.php
add createdzipdownload() function after assignmentfoldercreate() function 

 public function createdzipdownload(Request $request, $assignmentgenerateid)
    {
        // zip file is stored
        $zipFilePath = storage_path('app/public/image/task/') . $assignmentgenerateid . '.zip';

        // Check if the zip file exists
        if (file_exists($zipFilePath)) {
            // Set the appropriate headers for a downloadable file
            $headers = [
                'Content-Type' => 'application/zip',
                'Content-Disposition' => 'attachment; filename="' . $assignmentgenerateid . '.zip"',
            ];

            // Return the response for download and delete the file after sending
            return response()->download($zipFilePath, $assignmentgenerateid . '.zip', $headers)->deleteFileAfterSend(true);
        } else {
            // If the zip file does not exist, return a response indicating the file is not found
            // return response()->json(['error' => 'File not found'], 404);
            $message = 'You have already downloaded zip file';
            return view('backEnd.assignmentfolder.zipcreatedwaiting', compact('message', 'assignmentgenerateid'));
        }
    }






Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentfolderfileController.php
remove zipfolderdownload function and add this below function after createdzipdownload()


    public function createzipfolder(Request $request)
    {
        // Get All folder data and folder name 
        $assignmentfoldername = DB::table('assignmentfolders')
            ->leftJoin('assignmentfolderfiles', 'assignmentfolderfiles.assignmentfolder_id', 'assignmentfolders.id')
            ->where('assignmentfolders.assignmentgenerateid', $request->assignmentgenerateid)
            ->select('assignmentfolders.*', 'assignmentfolderfiles.filesname')
            ->get();

        // Set Downloaded folder name 
        $parentZipFileName = $request->assignmentgenerateid . '.zip';
        // replace here s3 path for store zip file
        $parentZipFilePath = storage_path('app/public/image/task/') . $parentZipFileName;
        $parentZip = new ZipArchive;

        // Open parent zip
        if ($parentZip->open($parentZipFilePath, ZipArchive::CREATE) === TRUE) {
            foreach ($assignmentfoldername as $foldername) {
                if ($foldername->filesname != null) {
                    // Replace server path here 
                    $filePath = storage_path('app/public/image/task/' . $foldername->filesname);

                    if (file_exists($filePath)) {
                        // Add file to the parent zip
                        $parentZip->addFile($filePath, $foldername->assignmentfoldersname . '/' . $foldername->filesname);
                    } else {
                        // Handle the case when the file does not exist
                        // You can log an error or take appropriate action
                    }
                } else {
                    // If there are no files, add an empty folder to maintain root structure structure
                    $parentZip->addEmptyDir($foldername->assignmentfoldersname);
                }
            }

            $parentZip->close();
        }

        return response()->json($parentZipFileName);
    }




Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\assignmentfolder\index.blade.php
find text  @if ($assignmentfolder->isNotEmpty())

replace this code 

                @if ($assignmentfolder->isNotEmpty())
                    <li style="margin-left: 13px;">
                        <a href="{{ route('nextpage', ['assignmentgenerateid' => $assignmentfolderpermission->assignmentgenerate_id]) }}"
                            class="btn btn-secondary"
                            onclick="return confirm('Are you sure you want to download all folders, Total Size is {{ $totalFileSizeMB > 1024 ? round($totalFileSizeMB / 1024, 2) . ' GB' : $totalFileSizeMB . ' MB' }}?');"
                            style="color:white;" id="downloadButton">Download All Folder</a>
                    </li>
                @endif






################################################################################################################################
add file 
resources\views\backEnd\assignmentfolder\zipcreatedwaiting.blade.php

################################################################################################################################
some mandatery modification in 
C:\xampp\php\php file
find text one by one 

max_execution_time=360
max_input_time=360
default_socket_timeout=360
memory_limit = 1024M





Route 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222

Route::get('/assignmentfoldercreate/{assignmentgenerateid}', [AssignmentfolderfileController::class, 'assignmentfoldercreate'])->name('nextpage');
Route::get('/createzipfolder', [AssignmentfolderfileController::class, 'createzipfolder']);
Route::get('/createdzipdownload/{assignmentgenerateid}', [AssignmentfolderfileController::class, 'createdzipdownload'])->name('createdzipdownload');








