Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentmappingController.php
replace store() function 


      public function store(Request $request)
    {
        // dd($request);
        $request->validate([
            'client_id' => "required",
            'assignment_id' => "required",
            'teammember_id.*' => "required",
            'assignmentname' => "required",
            'type.*' => "required"
        ]);

        // Assignment budgeting start 
        $client_id = $request->input('client_id', null);
        $assignment_id = $request->input('assignment_id', null);
        $assignmentname = $request->input('assignmentname', null);
        $duedate = $request->input('duedate', null);

        if ($client_id != null && $assignment_id != null  && $assignmentname != null) {


            $data = $request->except(['_token', 'periodstart', 'periodend', 'roleassignment', 'esthours', 'stdcost', 'estcost', 'fees', 'leadpartner', 'otherpartner', 'teammember_id', 'type']);

            $data['created_by'] = auth()->user()->id;
            $clientcode = DB::table('clients')->where('id', $request->client_id)->first();
            $assignmentgenerateid = strtoupper(substr($clientcode->client_name, 0, 3));


            $assign = Assignmentbudgeting::latest()->get();
            if ($assign->isEmpty()) {
                $assignmentnumbers = '100001';
            } else {
                $assignmentnumb = Assignmentbudgeting::latest()->first()->assignmentnumber;

                if ($assignmentnumb ==  null) {
                    $assignmentnumbers = '100001';
                } else {
                    $assignmentnumbers = $assignmentnumb + 1;
                }
            }
            $assignmentgenerate = $assignmentgenerateid . $assignmentnumbers;
            $data['assignmentgenerate_id'] = $assignmentgenerate;
            $data['assignmentnumber'] = $assignmentnumbers;

            // dd($data);
            // Assignmentbudgeting::Create($data);
            DB::table('assignmentbudgetings')->insert([
                'client_id' => $data['client_id'],
                'assignment_id' => $data['assignment_id'],
                'assignmentname' => $data['assignmentname'],
                'duedate' => $data['duedate'],
                'created_by' => $data['created_by'],
                'assignmentgenerate_id' => $data['assignmentgenerate_id'],
                'assignmentnumber' => $data['assignmentnumber'],
                'created_at' => date('y-m-d'),
                'updated_at' => date('y-m-d')
            ]);

            $assignmentname = Assignment::where('id', $request->assignment_id2)->select('assignment_name')->pluck('assignment_name')->first();


            $actionName = class_basename($request->route()->getActionname());

            $pagename = substr($actionName, 0, strpos($actionName, "Controller"));
            $id = auth()->user()->teammember_id;
            // DB::table('activitylogs')->insert([
            //     'user_id' => $id,
            //     'ip_address' => $request->ip(),
            //     'activitytitle' => $pagename,
            //     'description' => 'New Assignment Budgeting Added' . ' ' . '( ' . $assignmentname . ' )',
            //     'created_at' => date('y-m-d'),
            //     'updated_at' => date('y-m-d')
            // ]);
        }
        // Assignment budgeting end

        // Assignment assignmentmappings start
        $previousassignmentbudgetings = DB::table('assignmentbudgetings')
            ->where('assignmentgenerate_id', $assignmentgenerate)
            ->first()->assignmentgenerate_id;


        $previouschck = DB::table('assignmentmappings')
            ->where('assignmentgenerate_id', $previousassignmentbudgetings)
            ->first();


        // dd($previouschck);
        if ($previouschck != null) {
            //dd('hi');
            $output = array('msg' => 'You already created assignment for this.');
            return back()->with('success', $output);
        }

        $assignment_id = Assignmentbudgeting::where('assignmentgenerate_id', $previousassignmentbudgetings)->select('assignment_id')->pluck('assignment_id')->first();


        $assignment_name = DB::table('assignments')->where('id', $assignment_id)
            ->select('assignment_name')->pluck('assignment_name')->first();


        // Storage::disk('s3')->makeDirectory($request->assignment_id);
        $request->except(['_token']);

        //  dd($data); die();
        $id = DB::table('assignmentmappings')->insertGetId([
            'assignmentgenerate_id'         =>     $previousassignmentbudgetings,
            'periodstart'         =>     $request->periodstart,
            'periodend'         =>     $request->periodend,
            'year'         =>     Carbon::parse($request->periodend)->year,
            'roleassignment'                =>      $request->roleassignment,
            'assignment_id'         =>     $assignment_id,
            'esthours'            =>       $request->esthours,
            'leadpartner'            =>       $request->leadpartner,
            'otherpartner'            =>       $request->otherpartner,
            'stdcost'            =>       $request->stdcost,
            'estcost'            =>       $request->estcost,
            'filecreationdate'                =>       date('y-m-d'),
            'modifieddate'              =>    date('y-m-d'),
            'auditcompletiondate'                =>       date('y-m-d'),
            'documentationdate'              =>    date('y-m-d'),
            'created_at'                =>       date('y-m-d'),
            'updated_at'              =>    date('y-m-d'),
        ]);

        // dd($id);
        if ($request->teammember_id != '0') {
            $count = count($request->teammember_id);

            // dd($count); die;
            for ($i = 0; $i < $count; $i++) {
                DB::table('assignmentteammappings')->insert([
                    'assignmentmapping_id'       =>     $id,
                    'type'       =>     $request->type[$i],
                    'teammember_id'       =>     $request->teammember_id[$i],
                    'created_at'                =>       date('y-m-d'),
                    'updated_at'              =>    date('y-m-d'),
                ]);

                //	   $team=Teammember::where('id', $request->teammember_id[$i])->first();

                //auto add in assignment evaluation form

                //    $a= DB::table('assignmentevaluations')->insert([
                //        'date_of_joining'=> $team->joining_date,
                //        'clients_name'  =>$request->client_id,
                //        'nature_of_assignment'=>$assignment_id,
                //        'assignmentgenerate_id'=>$request->assignment_id, 
                //       'assignment_partner'    =>  $request->leadpartner,
                //       'start_date_of_assignment'=> $request->periodstart,
                //       'end_date_of_assignment'    =>$request->periodend, 
                //'status'                    =>3,
                //       'createdby'                 =>$request->teammember_id[$i],
                //      'created_at'                => date('Y-m-d H:i:s'),
                //      'updated_at'                => date('Y-m-d H:i:s'),
                //   ]);

            }
            // dd($request->assignment_id);
            $clientname = DB::table('clients')->where('id', $request->client_id)->select('client_name')->first();
            $assignmentnames = DB::table('assignmentbudgetings')->where('assignmentgenerate_id', $previousassignmentbudgetings)->select('assignmentname')->first();
            $assignmentpartner = DB::table('teammembers')->where('id', $request->leadpartner)->select('team_member')->first();

            $teamleader =    DB::table('assignmentmappings')
                ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
                ->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')
                ->where('assignmentmappings.assignmentgenerate_id', $previousassignmentbudgetings)
                ->where('assignmentteammappings.type', '0')
                ->select('teammembers.team_member')
                ->get();

            $teamemail = DB::table('teammembers')->wherein('id', $request->teammember_id)->select('emailid')->get();

            foreach ($teamemail as $teammember) {
                $data = array(
                    'assignmentid' =>  $previousassignmentbudgetings,
                    'clientname' =>  $clientname->client_name,
                    'assignmentname' =>  $assignmentnames->assignmentname,
                    'assignment_name' =>  $assignment_name,
                    'emailid' =>  $teammember->emailid,
                    'assignmentpartner' =>  $assignmentpartner->team_member,
                    'teamleader' =>  $teamleader,

                );

                Mail::send('emails.assignmentassign', $data, function ($msg) use ($data) {
                    $msg->to($data['emailid']);
                    $msg->subject('VSA New Assignment Assigned || ' . $data['assignmentname'] . ' / ' . $data['assignmentid']);
                });
            }

            $teamemailpartner = DB::table('teammembers')->where('id', $request->leadpartner)->select('emailid')->first();
            if ($request->leadpartner !=  null) {
                $data = array(
                    'assignmentid' =>  $previousassignmentbudgetings,
                    'clientname' =>  $clientname->client_name,
                    'assignmentname' =>  $assignmentnames->assignmentname,
                    'assignment_name' =>  $assignment_name,
                    'emailid' =>  $teamemailpartner->emailid,
                    'assignmentpartner' =>  $assignmentpartner->team_member,
                    'teamleader' =>  $teamleader,

                );

                Mail::send('emails.assignmentassign', $data, function ($msg) use ($data) {
                    $msg->to($data['emailid']);
                    $msg->subject('VSA New Assignment Assigned || ' . $data['assignmentname'] . ' / ' . $data['assignmentid']);
                });
            }
            $teamemailotherpartner = DB::table('teammembers')->where('id', $request->otherpartner)->select('emailid')->first();
            if ($request->otherpartner !=  null) {
                $data = array(
                    'assignmentid' =>  $previousassignmentbudgetings,
                    'clientname' =>  $clientname->client_name,
                    'assignmentname' =>  $assignmentnames->assignmentname,
                    'assignment_name' =>  $assignment_name,
                    'emailid' =>  $teamemailotherpartner->emailid,
                    'assignmentpartner' =>  $assignmentpartner->team_member,
                    'teamleader' =>  $teamleader,

                );

                Mail::send('emails.assignmentassign', $data, function ($msg) use ($data) {
                    $msg->to($data['emailid']);
                    $msg->subject('VSA New Assignment Assigned || ' . $data['assignmentname'] . ' / ' . $data['assignmentid']);
                });
            }
        }
        // please match hare in old code me null aa raha hai kiya 
        $assignmentname = Assignment::where('id', $request->assignment_id2)->select('assignment_name')->pluck('assignment_name')->first();
        $actionName = class_basename($request->route()->getActionname());
        $pagename = substr($actionName, 0, strpos($actionName, "Controller"));
        $id = auth()->user()->teammember_id;
        DB::table('activitylogs')->insert([
            'user_id' => $id,
            'ip_address' => $request->ip(),
            'activitytitle' => $pagename,
            'description' => 'New Assignment Mapping Added' . ' ' . '( ' . $assignmentname . ' )',
            'created_at' => date('y-m-d'),
            'updated_at' => date('y-m-d')
        ]);
        // Assignment assignmentmappings end
        $output = array('msg' => "Created Successfully Client Name: $clientname->client_name Assignment:  $assignment_name Assignment Name $assignmentnames->assignmentname Assignment Id: $previousassignmentbudgetings ");
        return redirect('assignmentbudgeting')->with('success', $output);
    }






Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
replace blade file 
resources\views\backEnd\assignmentmapping\form.blade.php





Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentmappingController.php
replace create function in


    public function create(Request $request)
    {


        $partner = Teammember::where('role_id', '=', 13)->where('status', '=', 1)->with('title')
            ->orderBy('team_member', 'asc')->get();
        $teammember = Teammember::where('status', '1')->whereIn('role_id', [14, 15])->with('title', 'role')
            ->orderBy('team_member', 'asc')->get();
        //dd($teammember);
        if ($request->ajax()) {


            if (isset($request->category_id)) {
                echo "<option>Please Select One</option>";

                $assignments = Assignment::leftJoin('assignmentbudgetings', function ($join) {
                    $join->on('assignments.id', '=', 'assignmentbudgetings.assignment_id');
                })->leftJoin('assignmentmappings', function ($join) {
                    $join->on('assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id');
                })
                    ->where('assignmentbudgetings.client_id', $request->category_id)
                    // get data only that is not matches assignmentmappings.assignmentgenerate_id from assignmentbudgetings table
                    ->whereNull('assignmentmappings.assignmentgenerate_id')
                    ->select('assignments.*', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentbudgetings.duedate', 'assignmentbudgetings.assignmentname')
                    ->get();

                foreach ($assignments as $sub) {
                    echo "<option value='" . $sub->assignmentgenerate_id . "'>" . $sub->assignment_name  . '( ' . $sub->assignmentgenerate_id . ' )' . '( ' . $sub->assignmentname . ' )' . "</option>";
                }
            }
        } else {
            if (auth()->user()->role_id == 11 || auth()->user()->role_id == 12) {
                $client = Client::where('status', 1)->latest()->get();

                $assignment = Assignment::where('status', '1')
                    ->whereNotIn('id',  [214, 215])->orderBy('assignment_name')->get();

                $clientss = Client::activeClient()->orderBy('client_name')->orWhere('clients.leadpartner', auth()->user()->teammember_id)->orWhere('clients.createdbyadmin_id', auth()->user()->id)->orWhere('clients.updatedbyadmin_id', auth()->user()->id)->select('clients.*')->get();

                return view('backEnd.assignmentmapping.create', compact('client', 'teammember', 'partner', 'assignment', 'clientss'));
            } else {
                $client = DB::table('assignmentbudgetings')
                    ->leftjoin('clients', 'clients.id', 'assignmentbudgetings.client_id')
                    ->Where('assignmentbudgetings.created_by', auth()->user()->id)
                    ->select('clients.client_name', 'clients.id')
                    ->distinct()->get();


                $assignment = Assignment::where('status', '1')
                    ->whereNotIn('id',  [214, 215])->orderBy('assignment_name')->get();

                $clientss = Client::activeClient()->orderBy('client_name')->orWhere('clients.leadpartner', auth()->user()->teammember_id)->orWhere('clients.createdbyadmin_id', auth()->user()->id)->orWhere('clients.updatedbyadmin_id', auth()->user()->id)->select('clients.*')->get();

                //	DB::table('clients')->
                //  orWhere('clients.leadpartner',auth()->user()->teammember_id)->
                //  orWhere('clients.createdbyadmin_id',auth()->user()->id)->
                //	 orWhere('clients.updatedbyadmin_id',auth()->user()->id)->
                //   select('clients.client_name','clients.id')->get();

                return view('backEnd.assignmentmapping.create', compact('client', 'teammember', 'partner', 'assignment', 'clientss'));
            }
        }
    }





Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\assignmentbudgeting\index.blade.php
find text   <nav aria-label="breadcrumb" class="col-sm-4 order-sm-last mb-3 mb-sm-0 p-0 ">
replace it 


        <nav aria-label="breadcrumb" class="col-sm-4 order-sm-last mb-3 mb-sm-0 p-0 ">
            {{-- <ol class="breadcrumb d-inline-flex font-weight-600 fs-13 bg-white mb-0 float-sm-right">
            <li class="breadcrumb-item"><a href="{{url('assignmentbudgeting/create')}}">Add Assignment Budgeting </a></li>
            <li class="breadcrumb-item active">+</li>
        </ol> --}}
        </nav>





