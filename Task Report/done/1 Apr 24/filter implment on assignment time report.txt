Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php
replace assignmentHourShow() function 


 public function assignmentHourShow()
  {
    $teammemberDatass = DB::table('assignmentteammappings')
      ->leftjoin('assignmentmappings', 'assignmentmappings.id', 'assignmentteammappings.assignmentmapping_id')
      ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
      ->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')
      ->leftjoin('titles', 'titles.id', 'teammembers.title_id')
      ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
      // ->where('assignmentbudgetings.status', 1)
      ->whereNotIn('teammembers.team_member', ['NA', 'null', 'test staff'])
      ->select('assignmentmappings.id', 'teammembers.id as teamid', 'teammembers.team_member', 'teammembers.role_id', 'teammembers.staffcode', 'titles.title', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentname', 'assignmentteammappings.teamhour')
      // ->take(10)
      ->get();

    // dd($teammemberDatas);

    $patnerdata = DB::table('assignmentmappings')
      ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
      ->leftjoin('teammembers', function ($join) {
        $join->on('teammembers.id', 'assignmentmappings.otherpartner')
          ->orOn('teammembers.id', 'assignmentmappings.leadpartner');
      })
      ->leftjoin('titles', 'titles.id', 'teammembers.title_id')
      ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
      // ->where('assignmentbudgetings.status', 1)
      ->whereNotIn('teammembers.team_member', ['NA', 'test staff'])
      ->select(
        'assignmentmappings.id',
        'teammembers.id as teamid',
        'teammembers.team_member',
        'teammembers.staffcode',
        'teammembers.role_id',
        'titles.title',
        'assignmentmappings.assignmentgenerate_id',
        'assignmentbudgetings.assignmentname',
        'assignmentmappings.otherpartner',
        'assignmentmappings.leadpartner',
        'assignmentmappings.leadpartnerhour',
        'assignmentmappings.otherpartnerhour',
      )
      // ->take(10)
      ->get();
    $teammemberDatas = $teammemberDatass->merge($patnerdata);
    // dd($teammemberDatas);
    return view('backEnd.timesheet.assignmentlistwithhour', compact('teammemberDatas'));
    // return view('backEnd.timesheet.assignmentlistwithhour', compact('teammemberDatas', 'patnerdata'));
  }



Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php
add assignmentHourShowfilter() function 

  public function assignmentHourShowfilter(Request $request)
  {

    $employee = $request->input('employee');
    $assignmentgenerateid = $request->input('assignmentgenerateid');
    if ($employee != null) {
      $employeValues = explode('/', $employee);
      $teamname = $employeValues[0];
      $role_id = $employeValues[1];
    }

    if ($employee == null) {
      $query = DB::table('assignmentteammappings')
        ->leftjoin('assignmentmappings', 'assignmentmappings.id', 'assignmentteammappings.assignmentmapping_id')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')
        ->leftjoin('titles', 'titles.id', 'teammembers.title_id')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->whereNotIn('teammembers.team_member', ['NA', 'null', 'test staff'])
        ->select('assignmentmappings.id', 'teammembers.id as teamid', 'teammembers.team_member', 'teammembers.role_id', 'teammembers.staffcode', 'titles.title', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentname', 'assignmentteammappings.teamhour');

      if ($assignmentgenerateid) {
        $query->where('assignmentmappings.assignmentgenerate_id', $assignmentgenerateid);
      }
      $teammemberall = $query->get();

      $query = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('teammembers', function ($join) {
          $join->on('teammembers.id', '=', 'assignmentmappings.otherpartner')
            ->orOn('teammembers.id', '=', 'assignmentmappings.leadpartner');
        })
        ->leftJoin('titles', 'titles.id', '=', 'teammembers.title_id')
        ->leftJoin('roles', 'roles.id', '=', 'teammembers.role_id')
        ->whereNotIn('teammembers.team_member', ['NA', 'test staff'])
        ->select(
          'assignmentmappings.id',
          'teammembers.id as teamid',
          'teammembers.team_member',
          'teammembers.staffcode',
          'teammembers.role_id',
          'titles.title',
          'assignmentmappings.assignmentgenerate_id',
          'assignmentbudgetings.assignmentname',
          'assignmentmappings.otherpartner',
          'assignmentmappings.leadpartner',
          'assignmentmappings.leadpartnerhour',
          'assignmentmappings.otherpartnerhour'
        );

      if ($assignmentgenerateid) {
        $query->where('assignmentmappings.assignmentgenerate_id', $assignmentgenerateid);
      }
      $partnerall = $query->get();
      $teammemberDatas = $teammemberall->merge($partnerall);
      $request->flash();
      return view('backEnd.timesheet.assignmentlistwithhour', compact('teammemberDatas'));
    }
    if ($role_id != 13) {

      $query = DB::table('assignmentteammappings')
        ->leftjoin('assignmentmappings', 'assignmentmappings.id', 'assignmentteammappings.assignmentmapping_id')
        ->leftjoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', 'assignmentmappings.assignmentgenerate_id')
        ->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')
        ->leftjoin('titles', 'titles.id', 'teammembers.title_id')
        ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
        ->whereNotIn('teammembers.team_member', ['NA', 'null', 'test staff'])
        ->select('assignmentmappings.id', 'teammembers.id as teamid', 'teammembers.team_member', 'teammembers.role_id', 'teammembers.staffcode', 'titles.title', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentname', 'assignmentteammappings.teamhour');

      if ($teamname) {
        $query->where('assignmentteammappings.teammember_id', $teamname);
      }
      if ($assignmentgenerateid) {
        $query->where('assignmentmappings.assignmentgenerate_id', $assignmentgenerateid);
      }
      $teammemberDatas = $query->get();
      $request->flash();
      return view('backEnd.timesheet.assignmentlistwithhour', compact('teammemberDatas'));
    }

    if ($role_id == 13) {
      $query = DB::table('assignmentmappings')
        ->leftJoin('assignmentbudgetings', 'assignmentbudgetings.assignmentgenerate_id', '=', 'assignmentmappings.assignmentgenerate_id')
        ->leftJoin('teammembers', function ($join) {
          $join->on('teammembers.id', '=', 'assignmentmappings.otherpartner')
            ->orOn('teammembers.id', '=', 'assignmentmappings.leadpartner');
        })
        ->leftJoin('titles', 'titles.id', '=', 'teammembers.title_id')
        ->leftJoin('roles', 'roles.id', '=', 'teammembers.role_id')
        ->whereNotIn('teammembers.team_member', ['NA', 'test staff'])
        ->select(
          'assignmentmappings.id',
          'teammembers.id as teamid',
          'teammembers.team_member',
          'teammembers.staffcode',
          'teammembers.role_id',
          'titles.title',
          'assignmentmappings.assignmentgenerate_id',
          'assignmentbudgetings.assignmentname',
          'assignmentmappings.otherpartner',
          'assignmentmappings.leadpartner',
          'assignmentmappings.leadpartnerhour',
          'assignmentmappings.otherpartnerhour'
        );

      if ($teamname) {
        $query->where(function ($query) use ($teamname) {
          $query->where('assignmentmappings.leadpartner', $teamname)
            ->orWhere('assignmentmappings.otherpartner', $teamname)
            ->where('teammembers.id', $teamname);
        });
      }

      if ($assignmentgenerateid) {
        $teammemberDatas = $query->get()->filter(function ($item) use ($assignmentgenerateid, $teamname) {
          return $item->assignmentgenerate_id == $assignmentgenerateid && $item->teamid == $teamname;
        });
      } else {
        $teammemberDatas = $query->get()->filter(function ($item) use ($teamname) {
          return $item->teamid == $teamname;
        });
      }

      $request->flash();
      return view('backEnd.timesheet.assignmentlistwithhour', compact('teammemberDatas'));
    }
  }


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\timesheet\assignmentlistwithhour.blade.php
replace this blade file 




################################################################################################################################
Route 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
add this route 
Route::get('/totaltimeshow/filter', [TimesheetController::class, 'assignmentHourShowfilter']);
