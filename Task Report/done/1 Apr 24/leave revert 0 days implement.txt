Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\ApplyleaveController.php
replace examleaverequest() function 

  public function examleaverequest(Request $request, $id)
  {
    try {
      // start exam leave 
      if ($request->status == 1) {

        $team = DB::table('leaverequest')
          ->leftjoin('applyleaves', 'applyleaves.id', 'leaverequest.applyleaveid')
          ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
          ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
          ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
          ->where('leaverequest.id', $id)
          ->select('applyleaves.*', 'teammembers.emailid', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name', 'leavetypes.holiday', 'leaverequest.id as examrequestId', 'leaverequest.date')
          ->first();

        if ($team->name == 'Exam Leave') {

          $from = Carbon::createFromFormat('Y-m-d', $team->from);
          $to = Carbon::createFromFormat('Y-m-d', $team->to ?? '');
          // came during exam leave
          $camefromexam = Carbon::createFromFormat('Y-m-d', $team->date);

          $removedays = $to->diffInDays($camefromexam) + 1;

          $nowtotalleave = $from->diffInDays($camefromexam);
          // it si only serching data from dtabase 
          $finddatafromleaverequest = $to->diffInDays($from) + 1;

          // Update date in to  column in applyleaves table 
          $updatedcamedate = $camefromexam->copy()->subDay()->format('Y-m-d');

          // dd($updatedcamedate);
          if ($nowtotalleave == 0) {
            DB::table('applyleaves')
              ->where('from', $team->from)
              ->where('to', $team->to)
              ->where('createdby', $team->createdby)
              ->delete();

            DB::table('leaverequest')
              ->where('id', $team->examrequestId)
              ->delete();

            DB::table('leaveapprove')
              ->where('teammemberid', $team->createdby)
              ->where('totaldays', $finddatafromleaverequest)
              ->latest()
              ->delete();
          } else {
            DB::table('applyleaves')
              ->where('from', $team->from)
              ->where('to', $team->to)
              ->where('createdby', $team->createdby)
              ->update([
                'to' => $updatedcamedate,
              ]);

            // for approved
            DB::table('leaverequest')
              ->where('id', $team->examrequestId)
              ->update([
                'status' => 1,
              ]);

            // update total leave after came during exam
            DB::table('leaveapprove')
              ->where('teammemberid', $team->createdby)
              ->where('totaldays', $finddatafromleaverequest)
              ->latest()
              ->update([
                'totaldays' => $nowtotalleave,
                'updated_at' => now(),
              ]);
          }
          // get date
          $period = CarbonPeriod::create($team->date, $team->to);

          $datess = [];
          foreach ($period as $date) {
            $datess[] = $date->format('Y-m-d');

            $deletedIds = DB::table('timesheets')
              ->where('created_by', $team->createdby)
              ->whereIn('date', $datess)
              ->pluck('id');

            DB::table('timesheets')
              ->where('created_by', $team->createdby)
              ->whereIn('date', $datess)
              ->delete();

            $a = DB::table('timesheetusers')
              ->whereIn('timesheetid', $deletedIds)
              ->delete();
          }

          // dd($hdatess);
          $el_leave = $datess;
          $lstatus = null;

          foreach ($el_leave as $cl_leave) {
            $cl_leave_day = date('d', strtotime($cl_leave));
            $cl_leave_month = date('F', strtotime($cl_leave));

            if ($cl_leave_day >= 26 && $cl_leave_day <= 31) {
              $cl_leave_month = date('F', strtotime($cl_leave . ' +1 month'));
            }

            $attendances = DB::table('attendances')->where('employee_name', $team->createdby)
              ->where('month', $cl_leave_month)->first();

            $column = '';
            switch ($cl_leave_day) {
              case '26':
                $column = 'twentysix';
                break;
              case '27':
                $column = 'twentyseven';
                break;
              case '28':
                $column = 'twentyeight';
                break;
              case '29':
                $column = 'twentynine';
                break;
              case '30':
                $column = 'thirty';
                break;
              case '31':
                $column = 'thirtyone';
                break;
              case '01':
                $column = 'one';
                break;
              case '02':
                $column = 'two';
                break;
              case '03':
                $column = 'three';
                break;
              case '04':
                $column = 'four';
                break;
              case '05':
                $column = 'five';
                break;
              case '06':
                $column = 'six';
                break;
              case '07':
                $column = 'seven';
                break;
              case '08':
                $column = 'eight';
                break;
              case '09':
                $column = 'nine';
                break;
              case '10':
                $column = 'ten';
                break;
              case '11':
                $column = 'eleven';
                break;
              case '12':
                $column = 'twelve';
                break;
              case '13':
                $column = 'thirteen';
                break;
              case '14':
                $column = 'fourteen';
                break;
              case '15':
                $column = 'fifteen';
                break;
              case '16':
                $column = 'sixteen';
                break;
              case '17':
                $column = 'seventeen';
                break;
              case '18':
                $column = 'eighteen';
                break;
              case '19':
                $column = 'ninghteen';
                break;
              case '20':
                $column = 'twenty';
                break;
              case '21':
                $column = 'twentyone';
                break;
              case '22':
                $column = 'twentytwo';
                break;
              case '23':
                $column = 'twentythree';
                break;
              case '24':
                $column = 'twentyfour';
                break;
              case '25':
                $column = 'twentyfive';
                break;
            }

            if (!empty($column)) {
              // store EL/A sexteen to 25 tak 
              if ($nowtotalleave == 0) {
                DB::table('attendances')
                  ->where('employee_name', $team->createdby)
                  ->where('month', $cl_leave_month)
                  ->whereRaw("NOT ({$column} REGEXP '^-?[0-9]+$')")
                  ->whereRaw("{$column} != 'LWP'")
                  ->delete();
              } else {
                DB::table('attendances')
                  ->where('employee_name', $team->createdby)
                  ->where('month', $cl_leave_month)
                  ->whereRaw("NOT ({$column} REGEXP '^-?[0-9]+$')")
                  ->whereRaw("{$column} != 'LWP'")
                  ->update([
                    $column => $lstatus,
                  ]);
              }
            }
          }
        }
        if ($team->name == 'Casual Leave') {
          $from = Carbon::createFromFormat('Y-m-d', $team->from);
          $to = Carbon::createFromFormat('Y-m-d', $team->to ?? '');
          // came during exam leave
          $camefromexam = Carbon::createFromFormat('Y-m-d', $team->date);

          $removedays = $to->diffInDays($camefromexam) + 1;

          $nowtotalleave = $from->diffInDays($camefromexam);
          // it si only serching data from dtabase 
          $finddatafromleaverequest = $to->diffInDays($from) + 1;

          // Update date in to  column in applyleaves table 
          $updatedcamedate = $camefromexam->copy()->subDay()->format('Y-m-d');
          // $updatedcamedate = $camefromexam->copy()->format('Y-m-d');
          if ($nowtotalleave == 0) {
            DB::table('applyleaves')
              ->where('from', $team->from)
              ->where('to', $team->to)
              ->where('createdby', $team->createdby)
              ->delete();

            DB::table('leaverequest')
              ->where('id', $team->examrequestId)
              ->delete();

            DB::table('leaveapprove')
              ->where('teammemberid', $team->createdby)
              ->where('totaldays', $finddatafromleaverequest)
              ->latest()
              ->delete();
          } else {
            DB::table('applyleaves')
              ->where('from', $team->from)
              ->where('to', $team->to)
              ->where('createdby', $team->createdby)
              ->update([
                'to' => $updatedcamedate,
              ]);

            // DB::table('applyleaves')
            // ->where('id', $team->id)
            // ->update([
            //   'to' => $team->date,
            // ]);


            // for approved
            DB::table('leaverequest')
              ->where('id', $team->examrequestId)
              ->update([
                'status' => 1,
              ]);

            // update total leave after came during exam
            DB::table('leaveapprove')
              ->where('teammemberid', $team->createdby)
              ->where('totaldays', $finddatafromleaverequest)
              ->latest()
              ->update([
                'totaldays' => $nowtotalleave,
                'updated_at' => now(),
              ]);
          }
          // get date
          $period = CarbonPeriod::create($team->date, $team->to);

          $datess = [];
          foreach ($period as $date) {
            $datess[] = $date->format('Y-m-d');

            $deletedIds = DB::table('timesheets')
              ->where('created_by', $team->createdby)
              ->whereIn('date', $datess)
              ->pluck('id');

            DB::table('timesheets')
              ->where('created_by', $team->createdby)
              ->whereIn('date', $datess)
              ->delete();

            $a = DB::table('timesheetusers')
              ->whereIn('timesheetid', $deletedIds)
              ->delete();
          }

          $el_leave = $datess;
          $lstatus = null;

          foreach ($el_leave as $cl_leave) {
            $cl_leave_day = date('d', strtotime($cl_leave));
            $cl_leave_month = date('F', strtotime($cl_leave));

            if ($cl_leave_day >= 26 && $cl_leave_day <= 31) {
              $cl_leave_month = date('F', strtotime($cl_leave . ' +1 month'));
            }

            $attendances = DB::table('attendances')->where('employee_name', $team->createdby)
              ->where('month', $cl_leave_month)->first();
            // dd($attendances);
            $column = '';
            switch ($cl_leave_day) {
              case '26':
                $column = 'twentysix';
                break;
              case '27':
                $column = 'twentyseven';
                break;
              case '28':
                $column = 'twentyeight';
                break;
              case '29':
                $column = 'twentynine';
                break;
              case '30':
                $column = 'thirty';
                break;
              case '31':
                $column = 'thirtyone';
                break;
              case '01':
                $column = 'one';
                break;
              case '02':
                $column = 'two';
                break;
              case '03':
                $column = 'three';
                break;
              case '04':
                $column = 'four';
                break;
              case '05':
                $column = 'five';
                break;
              case '06':
                $column = 'six';
                break;
              case '07':
                $column = 'seven';
                break;
              case '08':
                $column = 'eight';
                break;
              case '09':
                $column = 'nine';
                break;
              case '10':
                $column = 'ten';
                break;
              case '11':
                $column = 'eleven';
                break;
              case '12':
                $column = 'twelve';
                break;
              case '13':
                $column = 'thirteen';
                break;
              case '14':
                $column = 'fourteen';
                break;
              case '15':
                $column = 'fifteen';
                break;
              case '16':
                $column = 'sixteen';
                break;
              case '17':
                $column = 'seventeen';
                break;
              case '18':
                $column = 'eighteen';
                break;
              case '19':
                $column = 'ninghteen';
                break;
              case '20':
                $column = 'twenty';
                break;
              case '21':
                $column = 'twentyone';
                break;
              case '22':
                $column = 'twentytwo';
                break;
              case '23':
                $column = 'twentythree';
                break;
              case '24':
                $column = 'twentyfour';
                break;
              case '25':
                $column = 'twentyfive';
                break;
            }

            if (!empty($column)) {
              // store EL/A sexteen to 25 tak 
              if ($nowtotalleave == 0) {
                DB::table('attendances')
                  ->where('employee_name', $team->createdby)
                  ->where('month', $cl_leave_month)
                  ->whereRaw("NOT ({$column} REGEXP '^-?[0-9]+$')")
                  ->whereRaw("{$column} != 'LWP'")
                  ->delete();
              } else {
                DB::table('attendances')
                  ->where('employee_name', $team->createdby)
                  ->where('month', $cl_leave_month)
                  ->whereRaw("NOT ({$column} REGEXP '^-?[0-9]+$')")
                  ->whereRaw("{$column} != 'LWP'")
                  ->update([
                    $column => $lstatus,
                  ]);
              }
            }
          }
        }

        // For approving mail
        $applyleaveteam = DB::table('leaverequest')
          ->leftjoin('applyleaves', 'applyleaves.id', 'leaverequest.applyleaveid')
          ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
          ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
          ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
          ->where('leaverequest.id', $id)
          ->select('applyleaves.*', 'teammembers.emailid', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name', 'leavetypes.holiday', 'leaverequest.id as examrequestId', 'leaverequest.date')
          ->get();

        if ($applyleaveteam != null) {
          foreach ($applyleaveteam as $applyleaveteammail) {
            $data = array(
              'emailid' =>  $applyleaveteammail->emailid,
              'team_member' =>  $team->team_member,
              'from' =>  $team->from,
              'to' =>  $team->to,
            );

            Mail::send('emails.applyleaveteam', $data, function ($msg) use ($data) {
              $msg->to($data['emailid']);
              $msg->subject('VSA Leave Approved');
            });
          }
        }
        $data = array(
          'emailid' =>  $team->emailid,
          'id' =>  $id,
          'from' =>  $team->from,
          'to' =>  $team->to,
        );
        // Exam Leave mail
        if ($team->name == 'Exam Leave') {
          Mail::send('emails.duringexamleavestatus', $data, function ($msg) use ($data) {
            $msg->to($data['emailid']);
            $msg->subject('VSA Exam Leave request Approved');
          });
        }
        // Casual leave mail
        else {
          Mail::send('emails.duringexamleavestatus', $data, function ($msg) use ($data) {
            $msg->to($data['emailid']);
            $msg->subject('VSA Casual leave request Approved');
          });
        }
      }
      if ($request->status == 2) {
        $team = DB::table('leaverequest')
          ->leftjoin('applyleaves', 'applyleaves.id', 'leaverequest.applyleaveid')
          ->leftjoin('leavetypes', 'leavetypes.id', 'applyleaves.leavetype')
          ->leftjoin('teammembers', 'teammembers.id', 'applyleaves.createdby')
          ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
          ->where('leaverequest.id', $id)
          ->select('applyleaves.*', 'teammembers.emailid', 'teammembers.team_member', 'roles.rolename', 'leavetypes.name', 'leavetypes.holiday', 'leaverequest.id as examrequestId', 'leaverequest.date')
          ->first();

        DB::table('leaverequest')
          ->where('id', $team->examrequestId)
          ->update([
            'status' => 2,
          ]);

        $data = array(
          'emailid' =>  $team->emailid,
          'id' =>  $id,
          'from' =>  $team->from,
          'to' =>  $team->to,
        );

        // Exam Leave mail
        if ($team->name == 'Exam Leave') {
          Mail::send('emails.duringexamleavereject', $data, function ($msg) use ($data) {
            $msg->to($data['emailid']);
            // $msg->cc('priyankasharma@kgsomani.com');
            $msg->subject('VSA Exam Leave Request Reject');
          });
        }
        // Casual leave mail
        else {
          Mail::send('emails.duringexamleavereject', $data, function ($msg) use ($data) {
            $msg->to($data['emailid']);
            // $msg->cc('priyankasharma@kgsomani.com');
            $msg->subject('VSA Casual leave Request Reject');
          });
        }
      }

      $output = array('msg' => 'Updated Successfully');
      return redirect('examleaverequestlist')->with('success', $output);
    } catch (Exception $e) {
      DB::rollBack();
      Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
      report($e);
      $output = array('msg' => $e->getMessage());
      return back()->withErrors($output)->withInput();
    }
  }
  
  
222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222