
Controller2222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php
replace timesheetrequestStore() function 



public function timesheetrequestStore(Request $request)
  {
    try {
      $data = $request->except(['_token']);
      // dd($data);

        $latestrequest = DB::table('timesheetrequests')
        ->where('createdby', auth()->user()->teammember_id)
        ->latest()
        ->select('created_at')
        ->first();

      $latestrequesthour = Carbon::parse($latestrequest->created_at);
      $currentDateTime = Carbon::now();
      // Check if the difference is more than 24 hours
      if ($latestrequesthour->diffInHours($currentDateTime) > 24) {
        $id = DB::table('timesheetrequests')->insertGetId([
          'partner'     =>     $request->partner,
          'reason'     =>     $request->reason,
          'status'     =>     0,
          'createdby' => auth()->user()->teammember_id,
          'created_at'          =>     date('Y-m-d H:i:s'),
          'updated_at'              =>    date('Y-m-d H:i:s'),
        ]);

        // timesheet request mail to admin
        $teammembermail = Teammember::where('id', $request->partner)->pluck('emailid')->first();
        $name = Teammember::where('id', auth()->user()->teammember_id)->pluck('team_member')->first();

        $data = array(
          'teammember' => $name ?? '',
          'email' => $teammembermail ?? '',
          'id' => $id ?? '',
        );
        Mail::send('emails.timesheetrequestform', $data, function ($msg) use ($data) {
          $msg->to($data['email']);
          $msg->subject('Timesheet Submission Request');
        });
        // timesheet request mail to admin
        $output = array('msg' => 'Request Successfully');
        return back()->with('success', $output);
      } else {
        $output = array('msg' => 'You can submit new timesheet request after 24 hour');
        return back()->with('statuss', $output);
      }
    } catch (Exception $e) {
      DB::rollBack();
      Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
      report($e);
      $output = array('msg' => $e->getMessage());
      return back()->withErrors($output)->withInput();
    }
  }

######################################################################################################################
app\Http\Controllers\TimesheetrequestController.php
replace update() function 


  public function update(Request $request, $id)
    {
        // dd($request);
        try {
            $data = $request->except(['_token']);
            if ($request->status == 1) {
                $currentdate = date('Y-m-d');
                $date = Carbon::createFromFormat('Y-m-d', $currentdate ?? '')->addDays(4);
                $holidaydate = $date->format('Y-m-d');
                $data['validate'] = $holidaydate;
            }

            if ($request->status == 1) {
                // Current Data that is click by admin
                $timesheetrequestdata = DB::table('timesheetrequests')
                    ->where('id', $id)
                    ->first();
                // Find latest timesheet Request
                $latestrequest = DB::table('timesheetrequests')
                    ->where('createdby', $timesheetrequestdata->createdby)
                    ->latest()->first();
                // check latest timesheet Request == Current Data that is click by admin
                if ($latestrequest->id == $timesheetrequestdata->id) {
                    // approve timesheet request
                    if ($latestrequest) {
                        DB::table('timesheetrequests')
                            ->where('id', $latestrequest->id)
                            ->update(['status' => 1]);
                    }
                } else {
                    $output = array('msg' => 'Please Approve Latest Timesheet Request');
                    return redirect('timesheetrequestlist')->with('statuss', $output);
                }
                // Find all rest data after approving
                $allrestrequest =  DB::table('timesheetrequests')->where('createdby', $timesheetrequestdata->createdby)->where('status', 0)->get();
                // reject all reset timesheet request
                foreach ($allrestrequest as $allrestrequestdata) {
                    DB::table('timesheetrequests')->where('createdby', $allrestrequestdata->createdby)->where('status', 0)->update([
                        'status'  => 2,
                        'remark'  => 'Duplicate Request',
                    ]);
                }
            } else {
                // Current Data that is click by admin
                $timesheetrequestdata = DB::table('timesheetrequests')
                    ->where('id', $id)
                    ->first();
                // Find latest timesheet Request
                $latestrequest = DB::table('timesheetrequests')
                    ->where('createdby', $timesheetrequestdata->createdby)
                    ->latest()->first();
                // check latest timesheet Request == Current Data that is click by admin
                if ($latestrequest->id == $timesheetrequestdata->id) {
                    // approve timesheet request
                    if ($latestrequest) {
                        DB::table('timesheetrequests')
                            ->where('id', $latestrequest->id)
                            ->update(['status' => 2]);
                    }
                } else {
                    $output = array('msg' => 'Please Reject Latest Timesheet Request');
                    return redirect('timesheetrequestlist')->with('statuss', $output);
                }
                // Find all rest data after approving
                $allrestrequest =  DB::table('timesheetrequests')->where('createdby', $timesheetrequestdata->createdby)->where('status', 0)->get();
                // reject all reset timesheet request
                foreach ($allrestrequest as $allrestrequestdata) {
                    DB::table('timesheetrequests')->where('createdby', $allrestrequestdata->createdby)->where('status', 0)->update([
                        'status'  => 2,
                        'remark'  => 'Duplicate Request',
                    ]);
                }
            }

            // timesheet request list rejected end 
            $created = DB::table('timesheetrequests')->where('id', $id)->first();
            $teammembermail = Teammember::where('id', $created->createdby)->first();
            $data = array(
                'email' => $teammembermail->emailid ?? '',
                'status' => $created->status ?? '',
                'date' => $created->validate ?? '',
                'id' => $id ?? ''
            );
            Mail::send('emails.timesheetrequestapprovelform', $data, function ($msg) use ($data) {
                $msg->to($data['email']);
                $msg->subject('VSA Timesheet Approval');
            });
            $output = array('msg' => 'Update Successfully');
            return redirect('timesheetrequestlist')->with('success', $output);
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }