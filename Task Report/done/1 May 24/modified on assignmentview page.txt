Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\StepController.php
replace viewAssignment($id) function 


    public function viewAssignment($id)
    {
        // dd($id);
        //$id = str_replace('e6Qui4C3e4e2e2fEDq', '', $id);
        //  dd($string);
        $teammemberall = Teammember::where('role_id', '=', 15)->orwhere('role_id', '=', 14)->with('title', 'role')->get();
        $assignmentid = Assignmentmapping::where('assignmentgenerate_id', $id)->select('assignment_id')->pluck('assignment_id')->first();
        // dd($assignmentgenerateid); 
        $assignmentcheck =
            DB::table('financialstatementclassifications')
            ->where('assignmentgenerate_id', $id)
            ->get();

        if ($assignmentcheck->isEmpty()) {
            $assignmentcheckDatas =
                DB::table('financialstatementclassifications')
                ->where('assignment_id', $assignmentid)
                ->where('assignmentgenerate_id', null)
                ->get();
            //dd($assignmentcheckDatas);
        } else {
            $assignmentcheckDatas =
                DB::table('financialstatementclassifications')
                ->where('assignment_id', $assignmentid)
                ->where('assignmentgenerate_id', null)
                ->orwhere('assignmentgenerate_id',  $id)
                ->get();
        }

        //  dd($assignmentcheckDatas);

        $assignmentbudgetingDatas = DB::table('assignmentbudgetings')
            ->join('clients', 'clients.id', 'assignmentbudgetings.client_id')
            ->join('assignments', 'assignments.id', 'assignmentbudgetings.assignment_id')
            ->join('assignmentmappings', 'assignmentmappings.assignmentgenerate_id', 'assignmentbudgetings.assignmentgenerate_id')
            ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
            ->where('assignmentbudgetings.assignmentgenerate_id', $id)
            ->select(
                'assignmentbudgetings.*',
                'assignmentmappings.*',
                'clients.client_name',
                'assignmentteammappings.type',
                'assignments.assignment_name'
            )->first();
        // dd($assignmentbudgetingDatas);
        $teammemberDatas = DB::table('assignmentmappings')
            ->leftjoin('assignmentteammappings', 'assignmentteammappings.assignmentmapping_id', 'assignmentmappings.id')
            ->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')
            ->leftjoin('titles', 'titles.id', 'teammembers.title_id')
            ->leftjoin('roles', 'roles.id', 'teammembers.role_id')
            ->where('assignmentmappings.assignmentgenerate_id', $id)
            ->select('teammembers.*', 'roles.rolename', 'assignmentteammappings.type', 'titles.title', 'assignmentteammappings.id As assignmentteammappingsId', 'assignmentteammappings.status as assignmentteammappingsStatus', 'assignmentmappings.assignmentgenerate_id as assignmentgenerateid')
            ->orderBy('assignmentteammappingsId', 'desc')
            ->get();
        // dd($teammemberDatas);
        $contactDatas = DB::table('assignmentbudgetings')
            ->join('clients', 'clients.id', 'assignmentbudgetings.client_id')
            ->join('clientcontacts', 'clientcontacts.client_id', 'clients.id')
            ->where('assignmentbudgetings.assignmentgenerate_id', $id)
            ->select(
                'clientcontacts.*'
            )->get();
        $udinDatas = DB::table('assignmentbudgetingudins')
            ->join('teammembers', 'teammembers.id', 'assignmentbudgetingudins.created_by')
            ->join('roles', 'roles.id', 'teammembers.role_id')
            ->where('assignmentbudgetingudins.assignment_generate_id', $id)
            ->select('teammembers.*', 'assignmentbudgetingudins.udin', 'assignmentbudgetingudins.id as assignmentbudgetingudinsid', 'roles.rolename', 'assignmentbudgetingudins.partner', 'assignmentbudgetingudins.created_at as created')->get();
        // dd($contactDatas);

        $leadpartner = DB::table('assignmentmappings')
            ->join('teammembers as team', 'team.id', 'assignmentmappings.leadpartner')
            ->leftJoin('titles', 'titles.id', '=', 'team.title_id')
            ->where('assignmentmappings.assignmentgenerate_id', $id)
            ->select('team.id', 'team.team_member', 'team.mobile_no', 'team.role_id', 'assignmentmappings.leadpartnerhour', 'titles.title')
            ->get();


        $otherpartner = DB::table('assignmentmappings')
            ->join('teammembers as team', 'team.id', 'assignmentmappings.otherpartner')
            ->leftJoin('titles', 'titles.id', '=', 'team.title_id')
            ->where('assignmentmappings.assignmentgenerate_id', $id)
            ->select('team.id', 'team.team_member', 'team.mobile_no', 'team.role_id', 'assignmentmappings.otherpartnerhour', 'titles.title',)
            ->get();

        $partner = $leadpartner->merge($otherpartner);

        return view('backEnd.viewassignment', compact('partner', 'udinDatas', 'contactDatas', 'teammemberDatas', 'assignmentcheckDatas', 'assignmentbudgetingDatas', 'teammemberall'));
    }


Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\teammember\form.blade.php
find text   $teammember->emailid
replace <div class="form-group"> tag 



        <div class="form-group">
            @php
                $timesheetdata = DB::table('timesheetusers')
                    ->where('createdby', $teammember->id)
                    ->first();
                $disabled = $timesheetdata ? 'disabled' : '';
            @endphp
            <label class="font-weight-600">Email Id <span class="tx-danger">*</span></label>
            <input type="email" name="emailid" value="{{ $teammember->emailid ?? '' }}" class="form-control"
                placeholder="Enter Email" {{ $disabled }}>
        </div>






Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TeammemberController.php
replace update(Request $request, $id) function 


    public function update(Request $request, $id)
    {
        $request->validate([
            //     'mobile_no' => "required|numeric",
            //     'pancardno' => "required|numeric",
            'team_member' => "required"
        ]);
        try {
            if ($request->leavingdate != null) {
                $timesheetsave = DB::table('timesheetusers')
                    ->where('createdby', $id)
                    ->where('status', 0)
                    ->orderBy('date', 'ASC')
                    ->get();

                // Chunk the $timesheetsave data for one week
                $weeksData = $timesheetsave->chunk(6);

                foreach ($weeksData as $weekData) {
                    foreach ($weekData as $timesheet) {
                        $startdate = Carbon::parse($timesheet->date);
                        $nextSaturday = $startdate->copy()->next(Carbon::SATURDAY);

                        $startdateformat = $startdate->format('Y-m-d');
                        $nextSaturdayformat = $nextSaturday->format('Y-m-d');

                        // $week = date('d-m-Y', strtotime($startdateformat)) . ' to ' . date('d-m-Y', strtotime($nextSaturdayformat));
                        DB::table('timesheetusers')
                            ->where('timesheetid', $timesheet->timesheetid)
                            ->update([
                                'status' => 1,
                                'updated_at' => now(),
                            ]);

                        DB::table('timesheets')
                            ->where('id', $timesheet->timesheetid)
                            ->update([
                                'status' => 1,
                                'updated_at' => now(),
                            ]);
                    }

                    // Insert data into the timesheetreport table for the current week
                    $startdate = Carbon::parse($weekData->first()->date);
                    $nextSaturday = $startdate->copy()->next(Carbon::SATURDAY);

                    $startdateformat = $startdate->format('Y-m-d');
                    $nextSaturdayformat = $nextSaturday->format('Y-m-d');

                    $week = date('d-m-Y', strtotime($startdateformat)) . ' to ' . date('d-m-Y', strtotime($nextSaturdayformat));

                    $co = DB::table('timesheetusers')
                        ->where('createdby', $id)
                        ->whereBetween('date', [$startdateformat, $nextSaturdayformat])
                        ->select('partner', DB::raw('SUM(hour) as total_hours'), DB::raw('COUNT(DISTINCT timesheetid) as row_count'))
                        ->groupBy('partner')
                        ->get();
                    // dd($co);

                    foreach ($co as $codata) {
                        DB::table('timesheetreport')->insert([
                            'teamid'       =>     $id,
                            'week'       =>     $week,
                            'totaldays'       =>     $codata->row_count,
                            'totaltime' =>  $codata->total_hours,
                            'partnerid'  => $codata->partner,
                            'startdate'  => $startdateformat,
                            'enddate'  => $nextSaturdayformat,
                            'created_at'                =>      date('y-m-d H:i:s'),
                        ]);
                    }
                }
            }

            $data = $request->except(['_token', 'qualification', 'document_file']);
            if ($request->hasFile('cancelcheque')) {
                $file = $request->file('cancelcheque');
                $destinationPath = 'backEnd/image/teammember/cancelcheque';
                $name = time() . $file->getClientOriginalName();
                $s = $file->move($destinationPath, $name);
                //  dd($s); die;
                $data['cancelcheque'] = $name;
            }
            if ($request->hasFile('profilepic')) {
                $avatar = $request->file('profilepic');
                $filename = time() . rand(1, 100) . '.' . $avatar->getClientOriginalExtension();
                Image::make($avatar)->resize(800, 600)->save('backEnd/image/teammember/profilepic/' . $filename);
                $data['profilepic'] = $filename;
            }
            if ($request->hasFile('appointment_letter')) {
                $file = $request->file('appointment_letter');
                $extension = $file->getClientOriginalExtension();
                $filename = time() . '.' . $extension;
                $file->move('backEnd/image/teammember/appointmentletter/', $filename);
                $data['appointment_letter'] = $filename;
            }
            if ($request->hasFile('nda')) {
                $file = $request->file('nda');
                $extension = $file->getClientOriginalExtension();
                $filename = time() . '.' . $extension;
                $file->move('backEnd/image/teammember/nda/', $filename);
                $data['nda'] = $filename;
            }
            if ($request->hasFile('panupload')) {
                $file = $request->file('panupload');
                $destinationPath = 'backEnd/image/teammember/panupload';
                $name = time() . $file->getClientOriginalName();
                $s = $file->move($destinationPath, $name);
                //  dd($s); die;
                $data['panupload'] = $name;
            }
            if ($request->hasFile('addressupload')) {
                $file = $request->file('addressupload');
                $destinationPath = 'backEnd/image/teammember/addressupload';
                $name = time() . $file->getClientOriginalName();
                $s = $file->move($destinationPath, $name);
                //  dd($s); die;
                $data['addressupload'] = $name;
            }
            if ($request->hasFile('aadharupload')) {
                $file = $request->file('aadharupload');
                $destinationPath = 'backEnd/image/teammember/aadharupload';
                $name = time() . $file->getClientOriginalName();
                $s = $file->move($destinationPath, $name);
                //  dd($s); die;
                $data['aadharupload'] = $name;
            }
            // Teammember::find($id)->update($data);

            if ($request->leavingdate != null && $request->status == 1) {
                $oldstatusvalue = Teammember::find($id);
                if ($oldstatusvalue->status == 1) {
                    // dd($oldstatusvalue->status);
                    $data = $request->except(['_token', 'qualification', 'document_file', 'status']);
                    $data['status'] = '0';
                    Teammember::find($id)->update($data);
                } else {
                    Teammember::find($id)->update($data);
                }
            } else {
                Teammember::find($id)->update($data);
            }

            if ($request->document_file != null) {
                $qualifications = $request->qualification;
                $documentFiles = $request->document_file;

                for ($i = 0; $i < count($qualifications); $i++) {
                    // Process each qualification and document file entry
                    $documentFile = $documentFiles[$i];
                    if ($documentFile) {
                        $documentFileName = time() . $documentFile->getClientOriginalName();
                        $documentFilePath = 'backEnd/image/teammember/document_file';
                        $documentFile->move($documentFilePath, $documentFileName);

                        DB::table('teammember_document_files')->insert([
                            'teamember_id' => $id,
                            'qualification' => $qualifications[$i],
                            'document_file' => $documentFileName,
                            'created_at' => now(),
                            'updated_at' => now(),
                        ]);
                    }
                }
            }

            DB::table('users')->where('teammember_id', $id)->update([
                'role_id'         =>  $request->role_id,
                'email'         =>  $request->emailid,
            ]);
            $actionName = class_basename($request->route()->getActionname());
            $pagename = substr($actionName, 0, strpos($actionName, "Controller"));
            $id = auth()->user()->teammember_id;
            DB::table('activitylogs')->insert([
                'user_id' => $id,
                'ip_address' => $request->ip(),
                'activitytitle' => $pagename,
                'description' => ' Team Member Data Edit' . ' ' . '( ' . $request->team_member . ' )',
                'created_at' => date('y-m-d'),
                'updated_at' => date('y-m-d')
            ]);
            $output = array('msg' => 'Updated Successfully');
            return redirect('teammember')->with('success', $output);
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }





