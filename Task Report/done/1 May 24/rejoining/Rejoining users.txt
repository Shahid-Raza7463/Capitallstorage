222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
Add column in teammebers table 
rejoining_date column 



Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TeammemberController.php
replace update() function 

    public function update(Request $request, $id)
    {
        $request->validate([
            'team_member' => "required"
        ]);

        try {

            if ($request->leavingdate != null) {
                if ($request->rejoining_date == null) {
                    $timesheetsave = DB::table('timesheetusers')
                        ->where('createdby', $id)
                        ->where('status', 0)
                        ->orderBy('date', 'ASC')
                        ->get();

                    // Chunk the $timesheetsave data for one week
                    $weeksData = $timesheetsave->chunk(6);

                    foreach ($weeksData as $weekData) {
                        foreach ($weekData as $timesheet) {
                            $startdate = Carbon::parse($timesheet->date);
                            $nextSaturday = $startdate->copy()->next(Carbon::SATURDAY);

                            $startdateformat = $startdate->format('Y-m-d');
                            $nextSaturdayformat = $nextSaturday->format('Y-m-d');

                            DB::table('timesheetusers')
                                ->where('timesheetid', $timesheet->timesheetid)
                                ->update([
                                    'status' => 1,
                                    'updated_at' => now(),
                                ]);

                            DB::table('timesheets')
                                ->where('id', $timesheet->timesheetid)
                                ->update([
                                    'status' => 1,
                                    'updated_at' => now(),
                                ]);
                        }

                        // Insert data into the timesheetreport table for the current week
                        $startdate = Carbon::parse($weekData->first()->date);
                        $nextSaturday = $startdate->copy()->next(Carbon::SATURDAY);

                        $startdateformat = $startdate->format('Y-m-d');
                        $nextSaturdayformat = $nextSaturday->format('Y-m-d');

                        $week = date('d-m-Y', strtotime($startdateformat)) . ' to ' . date('d-m-Y', strtotime($nextSaturdayformat));

                        $co = DB::table('timesheetusers')
                            ->where('createdby', $id)
                            ->whereBetween('date', [$startdateformat, $nextSaturdayformat])
                            ->select('partner', DB::raw('SUM(hour) as total_hours'), DB::raw('COUNT(DISTINCT timesheetid) as row_count'))
                            ->groupBy('partner')
                            ->get();
                        // dd($co);

                        foreach ($co as $codata) {
                            DB::table('timesheetreport')->insert([
                                'teamid'       =>     $id,
                                'week'       =>     $week,
                                'totaldays'       =>     $codata->row_count,
                                'totaltime' =>  $codata->total_hours,
                                'partnerid'  => $codata->partner,
                                'startdate'  => $startdateformat,
                                'enddate'  => $nextSaturdayformat,
                                'created_at'                =>      date('y-m-d H:i:s'),
                            ]);
                        }
                    }
                }
            }
            $data = $request->except(['_token', 'qualification', 'document_file']);
            if ($request->hasFile('cancelcheque')) {
                $file = $request->file('cancelcheque');
                $destinationPath = 'backEnd/image/teammember/cancelcheque';
                $name = time() . $file->getClientOriginalName();
                $s = $file->move($destinationPath, $name);
                //  dd($s); die;
                $data['cancelcheque'] = $name;
            }
            if ($request->hasFile('profilepic')) {
                $avatar = $request->file('profilepic');
                $filename = time() . rand(1, 100) . '.' . $avatar->getClientOriginalExtension();
                Image::make($avatar)->resize(800, 600)->save('backEnd/image/teammember/profilepic/' . $filename);
                $data['profilepic'] = $filename;
            }
            if ($request->hasFile('appointment_letter')) {
                $file = $request->file('appointment_letter');
                $extension = $file->getClientOriginalExtension();
                $filename = time() . '.' . $extension;
                $file->move('backEnd/image/teammember/appointmentletter/', $filename);
                $data['appointment_letter'] = $filename;
            }
            if ($request->hasFile('nda')) {
                $file = $request->file('nda');
                $extension = $file->getClientOriginalExtension();
                $filename = time() . '.' . $extension;
                $file->move('backEnd/image/teammember/nda/', $filename);
                $data['nda'] = $filename;
            }
            if ($request->hasFile('panupload')) {
                $file = $request->file('panupload');
                $destinationPath = 'backEnd/image/teammember/panupload';
                $name = time() . $file->getClientOriginalName();
                $s = $file->move($destinationPath, $name);
                //  dd($s); die;
                $data['panupload'] = $name;
            }
            if ($request->hasFile('addressupload')) {
                $file = $request->file('addressupload');
                $destinationPath = 'backEnd/image/teammember/addressupload';
                $name = time() . $file->getClientOriginalName();
                $s = $file->move($destinationPath, $name);
                //  dd($s); die;
                $data['addressupload'] = $name;
            }
            if ($request->hasFile('aadharupload')) {
                $file = $request->file('aadharupload');
                $destinationPath = 'backEnd/image/teammember/aadharupload';
                $name = time() . $file->getClientOriginalName();
                $s = $file->move($destinationPath, $name);
                //  dd($s); die;
                $data['aadharupload'] = $name;
            }

            // Teammember::find($id)->update($data);
            if ($request->leavingdate != null && $request->status == 1) {
                $oldstatusvalue = Teammember::find($id);
                if ($oldstatusvalue->status == 1 && $oldstatusvalue->rejoining_date == null) {
                    $data = $request->except(['_token', 'qualification', 'document_file', 'status']);
                    $emilid = $data['emailid'];
                    $data['status'] = '0';
                    Teammember::find($id)->update($data);
                    DB::table('users')->where('email', $emilid)->update([
                        'status'         =>  0,
                    ]);
                } else {
                    $data = $request->except(['_token', 'qualification', 'document_file']);
                    $emilid = $data['emailid'];
                    Teammember::find($id)->update($data);
                    $oldstatususer = User::where('email', $emilid)->first();
                    if ($oldstatususer->status == 0) {
                        DB::table('users')->where('email', $emilid)->update([
                            'status'         =>  1,
                        ]);
                    }
                }
            } else {
                Teammember::find($id)->update($data);
            }

            if ($request->document_file != null) {
                $qualifications = $request->qualification;
                $documentFiles = $request->document_file;

                for ($i = 0; $i < count($qualifications); $i++) {
                    // Process each qualification and document file entry
                    $documentFile = $documentFiles[$i];
                    if ($documentFile) {
                        $documentFileName = time() . $documentFile->getClientOriginalName();
                        $documentFilePath = 'backEnd/image/teammember/document_file';
                        $documentFile->move($documentFilePath, $documentFileName);

                        DB::table('teammember_document_files')->insert([
                            'teamember_id' => $id,
                            'qualification' => $qualifications[$i],
                            'document_file' => $documentFileName,
                            'created_at' => now(),
                            'updated_at' => now(),
                        ]);
                    }
                }
            }

            DB::table('users')->where('teammember_id', $id)->update([
                'role_id'         =>  $request->role_id,
                'email'         =>  $request->emailid,
            ]);
            $actionName = class_basename($request->route()->getActionname());
            $pagename = substr($actionName, 0, strpos($actionName, "Controller"));
            $id = auth()->user()->teammember_id;
            DB::table('activitylogs')->insert([
                'user_id' => $id,
                'ip_address' => $request->ip(),
                'activitytitle' => $pagename,
                'description' => ' Team Member Data Edit' . ' ' . '( ' . $request->team_member . ' )',
                'created_at' => date('y-m-d'),
                'updated_at' => date('y-m-d')
            ]);
            $output = array('msg' => 'Updated Successfully');
            return redirect('teammember')->with('success', $output);
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }



Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetController.php
replace store() function 

  public function store(Request $request)
  {
    try {
      $Newteammeber = DB::table('timesheetusers')
        ->where('createdby', auth()->user()->teammember_id)
        ->first();


      $Newteammeberjoining_date = DB::table('teammembers')
        ->where('id', auth()->user()->teammember_id)
        ->select('joining_date', 'rejoining_date')
        ->first();

      $joining_date = date('d-m-Y', strtotime($Newteammeberjoining_date->joining_date));
      if ($Newteammeberjoining_date->rejoining_date != null) {
        $rejoining_date = date('d-m-Y', strtotime($Newteammeberjoining_date->rejoining_date));
        $rejoiningDate = Carbon::parse($rejoining_date);
      } else {
        $rejoining_date = $Newteammeberjoining_date->rejoining_date;
      }
 
      $requestDate = Carbon::parse($request->date);
      $joiningDate = Carbon::parse($joining_date);


      if ($Newteammeber == null || $rejoining_date != null) {

        if ($rejoining_date != null && $requestDate < $rejoiningDate) {
          // dd('hi', 1);
          $output = array('msg' => 'You can not fill timesheet before :' . $rejoining_date);
          return redirect('timesheet')->with('success', $output);
        }

        if ($requestDate < $joiningDate) {
          $output = array('msg' => 'You can not fill timesheet before :' . $joining_date);
          return redirect('timesheet')->with('success', $output);
        }

        if ($Newteammeber == null) {
          // Get previuse sunday from joining date
          $joining_timestamp = strtotime($joining_date);
          $day_of_week = date('w', $joining_timestamp);
          $days_to_subtract = $day_of_week;
          $previous_sunday_timestamp = strtotime("-$days_to_subtract days", $joining_timestamp);

          $previous_sunday_date = date('d-m-Y', $previous_sunday_timestamp);
          // Get all dates beetween two dates 
          $startDate = Carbon::parse($previous_sunday_date);
          $endDate = Carbon::parse($joining_date);
          $period = CarbonPeriod::create($startDate, $endDate);
        }
        //this code related rejoining teammember 
        else {
          $joining_timestamp = strtotime($rejoining_date);
          $day_of_week = date('w', $joining_timestamp);
          $days_to_subtract = $day_of_week;
          $previous_sunday_timestamp = strtotime("-$days_to_subtract days", $joining_timestamp);
          $previous_sunday_date = date('d-m-Y', $previous_sunday_timestamp);
          // Get all dates beetween two dates 
          $startDate = Carbon::parse($previous_sunday_date);
          $endDate = Carbon::parse($rejoining_date);
          $period = CarbonPeriod::create($startDate, $endDate);
        }

        // store all date in $result vairable
        $result = [];
        foreach ($period as $key => $date) {
          if ($key !== 0 && $key !== count($period) - 1) {
            $result[] = $date->toDateString();
          }
        }

        foreach ($result as $date) {
          $prevcheck = DB::table('timesheets')->where('date', $date)
            ->where('created_by', auth()->user()->teammember_id)
            ->first();

          if (($Newteammeber == null && $prevcheck == null) || ($rejoining_date != null && $prevcheck == null)) {
            $id = DB::table('timesheets')->insertGetId(
              [
                'created_by' => auth()->user()->teammember_id,
                'month'     =>   date('F', strtotime($date)),
                'date'     =>    date('Y-m-d', strtotime($date)),
                'created_at'          =>     date('Y-m-d H:i:s'),
              ]
            );
            DB::table('timesheetusers')->insert([
              'date'     =>   date('Y-m-d', strtotime($date)),
              'client_id'     =>     29,
              'workitem'     =>     'NA',
              'location'     =>     'NA',
              //   'billable_status'     =>     $request->billable_status[$i],
              'timesheetid'     =>     $id,
              'date'     =>     date('Y-m-d', strtotime($date)),
              'hour'     =>     0,
              'totalhour' =>      0,
              'assignment_id'     =>     213,
              'partner'     =>     887,
              'createdby' => auth()->user()->teammember_id,
              'created_at'          =>     date('Y-m-d H:i:s'),
              'updated_at'              =>    date('Y-m-d H:i:s'),
            ]);
          }
        }
      }

      if ($requestDate >= $joiningDate) {

        //* x

        if ($rejoining_date != null && $requestDate < $rejoiningDate) {
          $output = array('msg' => 'You can not fill timesheet before :' . $rejoining_date);
          return redirect('timesheet')->with('success', $output);
        }

        $data = $request->except(['_token', 'teammember_id', 'amount']);

        // check allready submited
        if (date('w', strtotime($request->date)) == 0) {
          $previousSaturday = date('Y-m-d', strtotime('-1 day', strtotime($request->date)));
          $previousSaturdayFilled = DB::table('timesheetusers')
            ->where('createdby', auth()->user()->teammember_id)
            ->where('date', $previousSaturday)
            ->where('status', 1)
            ->first();
          // dd('hi1', $previousSaturdayFilled);
          if ($previousSaturdayFilled != null) {
            $output = array('msg' => 'You already submitted for this week');
            return back()->with('success', $output);
          }
        }

        // check hour
        $hours = $request->input('totalhour');
        if (!is_numeric($hours) || $hours > 12) {
          $output = array('msg' => 'The total hours cannot be greater than 12');
          return back()->with('success', $output);
        }

        $previouschck = DB::table('timesheetusers')
          ->where('createdby', auth()->user()->teammember_id)
          ->where('date', date('Y-m-d', strtotime($request->date)))
          ->where('status', 1)
          ->first();

        if ($previouschck != null) {
          //dd('hi');
          $output = array('msg' => 'You already submitted for this week');
          return back()->with('success', $output);
        }

        $previoussavechck = DB::table('timesheetusers')
          ->where('createdby', auth()->user()->teammember_id)
          ->where('date', date('Y-m-d', strtotime($request->date)))
          ->where('status', 0)
          ->first();

        if ($previoussavechck != null) {
          //dd('hi');
          $output = array('msg' => 'You already submitted for this date');
          return back()->with('success', $output);
        }



        $currentDate = Carbon::now()->format('d-m-Y');
        //dd($currentHour);
        if ($currentDate == $request->date && Carbon::now()->hour < 18) {
          $output = array('msg' => 'You can only fill today timesheet after 6:00 pm');
          return back()->with('success', $output);
        }


        $leaves = DB::table('applyleaves')
          ->where('applyleaves.createdby', auth()->user()->teammember_id)
          ->where('status', '!=', 2)
          ->select('applyleaves.from', 'applyleaves.to')
          ->get();
        // dd('hi 1', $leaves);
        foreach ($leaves as $leave) {
          //Convert each data from table to Y-m-d format to compare
          $days = CarbonPeriod::create(
            date('Y-m-d', strtotime($leave->from)),
            date('Y-m-d', strtotime($leave->to))
          );

          foreach ($days as $day) {
            $leavess[] = $day->format('Y-m-d');
          }
        }

        $currentday = date('Y-m-d', strtotime($request->date));
        if (count($leaves) != 0) {

          //dd('if');
          foreach ($leavess as $leave) {
        
            if ($leave == $currentday) {

              $output = array('msg' => 'You Have Leave for the Day (' . date('d-m-Y', strtotime($leave)) . ')');
              return redirect('timesheet')->with('statuss', $output);
            }
          }
        }

        // insert data in timesheet from request and get id 
        $id = DB::table('timesheets')->insertGetId(
          [
            'created_by' => auth()->user()->teammember_id,
            'month'     =>    date('F', strtotime($request->date)),
            'date'     =>    date('Y-m-d', strtotime($request->date)),
            'created_at'          =>     date('Y-m-d H:i:s'),
          ]
        );


        $count = count($request->assignment_id);

        // dd('hi 3', $count);
        for ($i = 0; $i < $count; $i++) {
          //dd($request->workitem[$i]);
          $assignment =  DB::table('assignmentmappings')->where('assignmentgenerate_id', $request->assignment_id[$i])->first();

          $a = DB::table('timesheetusers')->insert([
            'date'     =>     $request->date,
            'client_id'     =>     $request->client_id[$i],
            'assignmentgenerate_id'     =>     $request->assignment_id[$i],
            'workitem'     =>     $request->workitem[$i],
            'location'     =>     $request->location[$i],
            //   'billable_status'     =>     $request->billable_status[$i],
            'timesheetid'     =>     $id,
            'date'     =>     date('Y-m-d', strtotime($request->date)),
            'hour'     =>     $request->hour[$i],
            'totalhour' =>      $request->totalhour,
            'assignment_id'     =>     $assignment->assignment_id,
            'partner'     =>     $request->partner[$i],
            'createdby' => auth()->user()->teammember_id,
            'created_at'          =>     date('Y-m-d H:i:s'),
            'updated_at'              =>    date('Y-m-d H:i:s'),
          ]);

          if (auth()->user()->role_id == 14 || auth()->user()->role_id == 15) {
            // dd($request);
            $gettotalteamhour = DB::table('assignmentmappings')
              ->leftJoin(
                'assignmentteammappings',
                'assignmentteammappings.assignmentmapping_id',
                'assignmentmappings.id',
              )
              ->where(
                'assignmentmappings.assignmentgenerate_id',
                $request->assignment_id[$i]
              )
              ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
              ->first();

            if ($gettotalteamhour) {
              $gettotalteamhour = $gettotalteamhour->teamhour;
              // dd($gettotalteamhour);

              $finalresult =  $gettotalteamhour + $request->hour[$i];

              $totalteamhourupdate = DB::table('assignmentmappings')
                ->leftJoin(
                  'assignmentteammappings',
                  'assignmentteammappings.assignmentmapping_id',
                  'assignmentmappings.id',
                )
                ->where(
                  'assignmentmappings.assignmentgenerate_id',
                  $request->assignment_id[$i]
                )
                ->where('assignmentteammappings.teammember_id', auth()->user()->teammember_id)
                // ->get();
                ->update(['teamhour' =>  $finalresult]);
            }
          }

          if (auth()->user()->role_id == 13) {
            $assignmentdata = DB::table('assignmentmappings')
              ->where('assignmentgenerate_id', $request->assignment_id[$i])
              ->first();
            $finalresultleadpatner =  $assignmentdata->leadpartnerhour + $request->hour[$i];
            $finalresultotherpatner =  $assignmentdata->otherpartnerhour + $request->hour[$i];

            if ($assignmentdata->leadpartner == auth()->user()->teammember_id) {
              $update = DB::table('assignmentmappings')
                ->where('assignmentgenerate_id', $request->assignment_id[$i])
                ->where('leadpartner', auth()->user()->teammember_id)
                ->update(['leadpartnerhour' => $finalresultleadpatner]);
            }
            if ($assignmentdata->otherpartner == auth()->user()->teammember_id) {
              $update = DB::table('assignmentmappings')
                ->where('assignmentgenerate_id', $request->assignment_id[$i])
                ->where('otherpartner', auth()->user()->teammember_id)
                ->update(['otherpartnerhour' => $finalresultotherpatner]);
            }
          }
        }
      } else {
        // dd(auth()->user()->teammember_id);
        $output = array('msg' => 'You can not fill timesheet before :' . $joining_date);
        return redirect('timesheet')->with('success', $output);
      }

      //Attendance code

      $hdatess = date('Y-m-d', strtotime($request->date));
      $day =  DateTime::createFromFormat('Y-m-d', $hdatess)->format('d');      //
      $month =  DateTime::createFromFormat('Y-m-d', $hdatess)->format('F');   //
      $currentDate = new DateTime();
      $currentMonth = $currentDate->format('F');

      $dates = [
        '26' => 'twentysix',
        '27' => 'twentyseven',
        '28' => 'twentyeight',
        '29' => 'twentynine',
        '30' => 'thirty',
        '31' => 'thirtyone',
        '01' => 'one',
        '02' => 'two',
        '03' => 'three',
        '04' => 'four',
        '05' => 'five',
        '06' => 'six',
        '07' => 'seven',
        '08' => 'eight',
        '09' => 'nine',
        '10' => 'ten',
        '11' => 'eleven',
        '12' => 'twelve',
        '13' => 'thirteen',
        '14' => 'fourteen',
        '15' => 'fifteen',
        '16' => 'sixteen',
        '17' => 'seventeen',
        '18' => 'eighteen',
        '19' => 'ninghteen',
        '20' => 'twenty',
        '21' => 'twentyone',
        '22' => 'twentytwo',
        '23' => 'twentythree',
        '24' => 'twentyfour',
        '25' => 'twentyfive',
      ];



      if ($month != $currentMonth && $day > 25) {
        $dateTime = DateTime::createFromFormat('Y-m-d', $hdatess);
        $dateTime->modify('+1 month');
        $month = $dateTime->format('F');
      }
      if ($month != $currentMonth && $day < 25) {
        $dateTime = DateTime::createFromFormat('Y-m-d', $hdatess);
        $month = $dateTime->format('F');
      }
      if ($month == $currentMonth && $day > 25) {

        $dateTime = DateTime::createFromFormat('Y-m-d', $hdatess);
        $dateTime->modify('+1 month');
        $month = $dateTime->format('F');
      }

      //dd($month);


      $column = $dates[$day];

      $attendances = DB::table('attendances')->where('employee_name', auth()->user()->teammember_id)
        ->where('month', $month)->first();

      if ($attendances ==  null) {
        $teammember = DB::table('teammembers')->where('id', auth()->user()->teammember_id)->first();

        $a = DB::table('attendances')->insert([
          'employee_name'         =>     auth()->user()->teammember_id,
          'month'         =>    $month,
          'dateofjoining' =>   $teammember->joining_date,
          'created_at'          =>     date('Y-m-d H:i:s'),
        ]);
      }

      $updatedtotalhour = $request->totalhour;
      if ($attendances != null && property_exists($attendances, $column)) {
        if ($attendances->$column != "LWP") {
          $updatedtotalhour = $request->totalhour + $attendances->$column;
        }
      }
      DB::table('attendances')
        ->where('employee_name', auth()->user()->teammember_id)
        ->where('month', $month)
        ->update([$column => $updatedtotalhour]);

      $output = array('msg' => 'Create Successfully');
      if (auth()->user()->role_id == 14 || auth()->user()->role_id == 13 || auth()->user()->role_id == 15) {
        return redirect('timesheet/mylist')->with('success', $output);
      } else {
        return redirect('timesheet')->with('success', $output);
      }
    } catch (Exception $e) {
      DB::rollBack();
      Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
      report($e);
      $output = array('msg' => $e->getMessage());
      return back()->withErrors($output)->withInput();
    }
  }


Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\TimesheetrequestController.php

add filterDataAdmin() function 
replace timesheetsubmission() function 


    public function timesheetsubmission(Request $request)
    {
        try {

            $latesttimesheetreport =  DB::table('timesheetreport')
                ->where('teamid', auth()->user()->teammember_id)
                ->orderBy('id', 'desc')
                ->first();

            // $latesttimesheetreport is not null 
            if ($latesttimesheetreport !== null) {
                $timesheetreportenddate = Carbon::parse($latesttimesheetreport->enddate);

                // find next sturday 
                $nextSaturday = $timesheetreportenddate->copy()->next(Carbon::SATURDAY);
                $formattedNextSaturday = $nextSaturday->format('Y-m-d');
                $formattedNextSaturday1 = $timesheetreportenddate->format('d-m-Y');

                // find next week timesheet filled or not 
                $nextweektimesheet = DB::table('timesheetusers')
                    ->where('createdby', auth()->user()->teammember_id)
                    ->whereIn('status', [0, 1])
                    ->where('date', $formattedNextSaturday)
                    ->first();


                // Fetch the rejoining details for the current team member
                $rejoiningcheck = DB::table('teammembers')
                    ->where('id', auth()->user()->teammember_id)
                    ->first();

                // Check if the rejoining date is set

                if ($rejoiningcheck->rejoining_date != null) {
                    $rejoining = Carbon::parse($rejoiningcheck->rejoining_date);
                    $nextweek = Carbon::parse($formattedNextSaturday);

                    // Check if the rejoining date is before next week's Saturday
                    if ($rejoining < $nextweek) {
                        $rejoiningchecktimesheet = DB::table('timesheetusers')
                            ->where('createdby', auth()->user()->teammember_id)
                            ->whereIn('status', [0, 1])
                            ->where('date', $formattedNextSaturday)
                            ->first();
                    } else {
                        $rejoiningchecktimesheet = 'filterd';
                    }
                } else {
                    $rejoiningchecktimesheet = 'filterd';
                }

                // Check if the next week's timesheet is not filled
                if (($nextweektimesheet == null && $rejoiningcheck->rejoining_date == null) || ($rejoiningchecktimesheet == null && $rejoiningcheck->rejoining_date != null)) {
                    $output = array('msg' => "Fill the Week timesheet After this week : $formattedNextSaturday1");
                    return back()->with('statuss', $output);
                }

                // if (($nextweektimesheet == null && $rejoiningcheck->rejoining_date == null) || (!isset($rejoiningchecktimesheet) && $rejoiningcheck->rejoining_date != null)) {
                //     $output = array('msg' => "Fill the Week timesheet After this week : $formattedNextSaturday1");
                //     return back()->with('statuss', $output);
                // }

                else {
                    $usertimesheetfirstdate =  DB::table('timesheets')
                        ->where('status', '0')
                        ->where('created_by', auth()->user()->teammember_id)->orderBy('date', 'ASC')->first();

                    $lastdate = Carbon::createFromFormat('Y-m-d', $usertimesheetfirstdate->date ?? '')->addDays(6);

                    if ($usertimesheetfirstdate) {

                        $firstDate = new DateTime($usertimesheetfirstdate->date);
                        $dayOfWeek = $firstDate->format('w');
                        $daysToAdd = 0;

                        if ($dayOfWeek !== '0') {
                            $daysToAdd = 7 - $dayOfWeek;
                        } else {
                            $output = array('msg' => 'Submit the timesheet from Monday to Sunday.');
                            return back()->with('success', $output);
                        }

                        if ($dayOfWeek > 0) {
                            $daysToSubtract = $dayOfWeek - 1;
                        } else {
                            $daysToSubtract = $dayOfWeek;
                        }

                        $upcomingSunday = (new DateTime($firstDate->format('Y-m-d')))->modify("+$daysToAdd days")->format('Y-m-d');

                        $presentWeekMonday = (new DateTime($firstDate->format('Y-m-d')))->modify("-$daysToSubtract days")->format('Y-m-d');
                    }




                    $get_six_Data = DB::table('timesheets')
                        ->where('status', '0')
                        ->where('created_by', auth()->user()->teammember_id)
                        ->whereBetween('date', [$firstDate->format('Y-m-d'), $upcomingSunday])
                        ->orderBy('date', 'ASC')
                        ->get();


                    $lastdate = $get_six_Data->max('date');


                    $retrievedDates = [];   //copy dates in retrievedDates array in datetime format

                    foreach ($get_six_Data as $entry) {
                        $date = new DateTime($entry->date);
                        $retrievedDates[] = $date->format('Y-m-d');
                    }

                    $expectedDates = [];   // will contain ALL the dates occurs b/w first day to upcoming sunday

                    $firstDate = new DateTime($presentWeekMonday);

                    $upcomingSundayDate = new DateTime($upcomingSunday);


                    // Clone $firstDate so that it is not modified
                    $currentDate = clone $firstDate;

                    while ($currentDate->format('Y-m-d') < $upcomingSundayDate->format('Y-m-d')) {  //excluding sunday
                        $expectedDates[] = $currentDate->format('Y-m-d');


                        $currentDate->modify("+1 day");
                    }

                    $missingDates = array_diff($expectedDates, $retrievedDates);

                    if (!empty($missingDates)) {
                        $missingDatesString = implode(', ', $missingDates);
                        // "2023-11-13, 2023-11-14"

                        $output = array('msg' => "Timesheet Submit Failed Missing dates: $missingDatesString");
                        return back()->with('success', $output);
                    } else {

                        foreach ($get_six_Data as $getsixdata) {
                            // dd('hi', $getsixdata);

                            // Convert the requested date to a Carbon instance
                            $requestedDate = Carbon::createFromFormat('Y-m-d', $getsixdata->date);


                            if (date('l', strtotime(date('d-m-Y', strtotime($getsixdata->date)))) == 'Monday') {

                                $previousMonday = $requestedDate->copy()->previous(Carbon::MONDAY);

                                // Find the nearest next Saturday to the requested date
                                $nextSaturday = $requestedDate->copy()->next(Carbon::SATURDAY);

                                // Format the dates in 'Y-m-d' format
                                $previousMondayFormatted = $getsixdata->date;
                                $nextSaturdayFormatted = $nextSaturday->format('Y-m-d');
                                $nextSaturdayFormatted = $lastdate;


                                $week =  date('d-m-Y', strtotime($previousMondayFormatted))  . ' to ' . date('d-m-Y', strtotime($nextSaturdayFormatted));

                                //------------------- Shahid's code start---------------------
                                $co = DB::table('timesheetusers')
                                    ->where('createdby', auth()->user()->teammember_id)
                                    ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                    ->select('partner', DB::raw('SUM(hour) as total_hours'), DB::raw('COUNT(DISTINCT timesheetid) as row_count'))
                                    ->groupBy('partner')
                                    ->get();


                                // dd($co);
                                foreach ($co as $codata) {
                                    DB::table('timesheetreport')->insert([
                                        'teamid'       =>     auth()->user()->teammember_id,
                                        'week'       =>     $week,
                                        'totaldays'       =>     $codata->row_count,
                                        'totaltime' =>  $codata->total_hours,
                                        'partnerid'  => $codata->partner,
                                        'startdate'  => $previousMondayFormatted,
                                        'enddate'  => $nextSaturdayFormatted,
                                        // 'created_at'                =>       date('y-m-d'),
                                        'created_at'                =>      date('y-m-d H:i:s'),
                                    ]);
                                }

                                $totaldays = DB::table('timesheetusers')
                                    ->where('createdby', auth()->user()->teammember_id)
                                    ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                    ->select('date')
                                    ->groupBy('date')
                                    ->get();

                                $totaldaysCount = $totaldays->count();
                                $latesttimesheetreport = DB::table('timesheetreport')
                                    ->where('teamid', auth()->user()->teammember_id)
                                    ->where('startdate', $previousMondayFormatted)
                                    ->first();

                                if ($latesttimesheetreport) {
                                    DB::table('timesheetreport')
                                        ->where('id', $latesttimesheetreport->id)
                                        ->update(['dayscount' => $totaldaysCount]);
                                }

                                // dd($co);
                            }



                            DB::table('timesheetusers')->where('timesheetid', $getsixdata->id)->update([
                                'status'         =>     1,
                                'updated_at'              =>    date('y-m-d'),
                            ]);
                            DB::table('timesheets')->where('id', $getsixdata->id)->update([
                                'status'         =>     1,
                                'updated_at'              =>    date('y-m-d'),
                            ]);
                        }
                    }


                    // $output = array('msg' => 'Timesheet Submit Successfully');
                    $output = array('msg' => "Timesheet Submit Successfully till " . Carbon::createFromFormat('Y-m-d', $previousMondayFormatted)->format('d-m-Y') . " to " . Carbon::createFromFormat('Y-m-d', $nextSaturdayFormatted)->format('d-m-Y'));

                    // $output = array('msg' => "Timesheet Submit Successfully till $previousMondayFormatted to $nextSaturdayFormatted ");
                    return back()->with('success', $output);
                }
            }
            else {
                // dd($latesttimesheetreport, 1);
                $usertimesheetfirstdate =  DB::table('timesheets')
                    ->where('status', '0')
                    ->where('created_by', auth()->user()->teammember_id)->orderBy('date', 'ASC')->first();
                $lastdate = Carbon::createFromFormat('Y-m-d', $usertimesheetfirstdate->date ?? '')->addDays(6);

                if ($usertimesheetfirstdate) {
                    $firstDate = new DateTime($usertimesheetfirstdate->date);
                    $dayOfWeek = $firstDate->format('w');
                    $daysToAdd = 0;

                    if ($dayOfWeek !== '0') {
                        $daysToAdd = 7 - $dayOfWeek;
                    } else {
                        $output = array('msg' => 'Submit the timesheet from Monday to Sunday.');
                        return back()->with('success', $output);
                    }

                    if ($dayOfWeek > 0) {
                        $daysToSubtract = $dayOfWeek - 1;
                    } else {
                        $daysToSubtract = $dayOfWeek;
                    }

                    $upcomingSunday = (new DateTime($firstDate->format('Y-m-d')))->modify("+$daysToAdd days")->format('Y-m-d');

                    $presentWeekMonday = (new DateTime($firstDate->format('Y-m-d')))->modify("-$daysToSubtract days")->format('Y-m-d');
                }



                $get_six_Data = DB::table('timesheets')
                    ->where('status', '0')
                    ->where('created_by', auth()->user()->teammember_id)
                    ->whereBetween('date', [$firstDate->format('Y-m-d'), $upcomingSunday])
                    ->orderBy('date', 'ASC')
                    ->get();

                $lastdate = $get_six_Data->max('date');


                $retrievedDates = [];   //copy dates in retrievedDates array in datetime format

                foreach ($get_six_Data as $entry) {
                    $date = new DateTime($entry->date);
                    $retrievedDates[] = $date->format('Y-m-d');
                }

                $expectedDates = [];   // will contain ALL the dates occurs b/w first day to upcoming sunday

                $firstDate = new DateTime($presentWeekMonday);

                $upcomingSundayDate = new DateTime($upcomingSunday);


                // Clone $firstDate so that it is not modified
                $currentDate = clone $firstDate;

                while ($currentDate->format('Y-m-d') < $upcomingSundayDate->format('Y-m-d')) {  //excluding sunday
                    $expectedDates[] = $currentDate->format('Y-m-d');


                    $currentDate->modify("+1 day");
                }

                $missingDates = array_diff($expectedDates, $retrievedDates);

                if (!empty($missingDates)) {
                    $missingDatesString = implode(', ', $missingDates);
                    // "2023-11-13, 2023-11-14"

                    $output = array('msg' => "Timesheet Submit Failed Missing dates: $missingDatesString");
                    return back()->with('success', $output);
                } else {

                    foreach ($get_six_Data as $getsixdata) {
                        // dd('hi', $getsixdata);

                        // Convert the requested date to a Carbon instance
                        $requestedDate = Carbon::createFromFormat('Y-m-d', $getsixdata->date);


                        if (date('l', strtotime(date('d-m-Y', strtotime($getsixdata->date)))) == 'Monday') {

                            $previousMonday = $requestedDate->copy()->previous(Carbon::MONDAY);

                            // Find the nearest next Saturday to the requested date
                            $nextSaturday = $requestedDate->copy()->next(Carbon::SATURDAY);

                            // Format the dates in 'Y-m-d' format
                            $previousMondayFormatted = $getsixdata->date;
                            $nextSaturdayFormatted = $nextSaturday->format('Y-m-d');
                            $nextSaturdayFormatted = $lastdate;


                            $week =  date('d-m-Y', strtotime($previousMondayFormatted))  . ' to ' . date('d-m-Y', strtotime($nextSaturdayFormatted));

                            $co = DB::table('timesheetusers')
                                ->where('createdby', auth()->user()->teammember_id)
                                ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                ->select('partner', DB::raw('SUM(hour) as total_hours'), DB::raw('COUNT(DISTINCT timesheetid) as row_count'))
                                ->groupBy('partner')
                                ->get();


                            // dd($co);
                            foreach ($co as $codata) {
                                DB::table('timesheetreport')->insert([
                                    'teamid'       =>     auth()->user()->teammember_id,
                                    'week'       =>     $week,
                                    'totaldays'       =>     $codata->row_count,
                                    'totaltime' =>  $codata->total_hours,
                                    'partnerid'  => $codata->partner,
                                    'startdate'  => $previousMondayFormatted,
                                    'enddate'  => $nextSaturdayFormatted,
                                    // 'created_at'                =>       date('y-m-d'),
                                    'created_at'                =>      date('y-m-d H:i:s'),
                                ]);
                            }

                            $totaldays = DB::table('timesheetusers')
                                ->where('createdby', auth()->user()->teammember_id)
                                ->whereBetween('date', [$previousMondayFormatted, $nextSaturdayFormatted])
                                ->select('date')
                                ->groupBy('date')
                                ->get();

                            $totaldaysCount = $totaldays->count();
                            $latesttimesheetreport = DB::table('timesheetreport')
                                ->where('teamid', auth()->user()->teammember_id)
                                ->where('startdate', $previousMondayFormatted)
                                ->first();

                            if ($latesttimesheetreport) {
                                DB::table('timesheetreport')
                                    ->where('id', $latesttimesheetreport->id)
                                    ->update(['dayscount' => $totaldaysCount]);
                            }

                            // dd($co);
                        }



                        DB::table('timesheetusers')->where('timesheetid', $getsixdata->id)->update([
                            'status'         =>     1,
                            'updated_at'              =>    date('y-m-d'),
                        ]);
                        DB::table('timesheets')->where('id', $getsixdata->id)->update([
                            'status'         =>     1,
                            'updated_at'              =>    date('y-m-d'),
                        ]);
                    }
                }


                // $output = array('msg' => 'Timesheet Submit Successfully');
                $output = array('msg' => "Timesheet Submit Successfully till " . Carbon::createFromFormat('Y-m-d', $previousMondayFormatted)->format('d-m-Y') . " to " . Carbon::createFromFormat('Y-m-d', $nextSaturdayFormatted)->format('d-m-Y'));

                // $output = array('msg' => "Timesheet Submit Successfully till $previousMondayFormatted to $nextSaturdayFormatted ");
                return back()->with('success', $output);
            }
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }

Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\backEnd\teammember\form.blade.php

find text    <label class="font-weight-600">Joining Date</label>
add this input box after joining date input box

    @if (Request::is('teammember/*/edit'))
        <div class="col-4">
            <div class="form-group">
                <label class="font-weight-600">Rejoining Date</label>
                <input type="date" id="example-date-input" name="rejoining_date"
                    value="{{ $teammember->rejoining_date ?? '' }}" class="form-control leaveDate"
                    placeholder="Enter joining_date">
            </div>
        </div>
    @endif













