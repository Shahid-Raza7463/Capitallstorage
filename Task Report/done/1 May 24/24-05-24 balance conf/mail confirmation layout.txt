Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentconfirmationController.php
replace mail() function 


    public function mail(Request $request)
    {
        $request->validate([
            'description' => "required",
        ]);
        try {

            $data = $request->except(['_token']);

            $confirmationIds = $request->input('confirmationid', []);

            // Filter out all null values from the array
            $nonNullConfirmationIds = array_filter($confirmationIds, function ($value) {
                return !is_null($value);
            });

            // Check if the filtered array is empty
            if (empty($nonNullConfirmationIds)) {
                $output = array('msg' => 'Select at least one check box to proceed.');
                return back()->with('statuss', $output);
            }
            //die;
            $debtor = DB::table('debtors')
                ->where('assignmentgenerate_id', $request->assignmentgenerate_id)->where('type', $request->type)
                ->where('mailstatus', 0)
                ->whereIn('id', explode(", ", $request->confirmationid[0]))->get();

            // dd($debtor);
            //    die;
            if ($debtor->isEmpty()) {
                $output = array('msg' => 'Prior to proceeding, it is necessary to first upload the Excel data');
                return back()->with('statuss', $output);
            }



            $draftcheck = DB::table('templates')->where('id', $request->templateid)->first()->draftstatus;
            // dd($draftcheck == 0);
            if ($draftcheck == 0) {
                $output = array('msg' => 'Mail draft is pending please save your draft');
                return back()->with('statuss', $output);
            }

            foreach ($debtor as $debtors) {
                // dd($debtors);
                if ($request->teammember_id) {
                    // cc mail
                    $teammembermail = Teammember::wherein('id', $request->teammember_id)->pluck('emailid')->toArray();
                }
                $des = $request->description;
                $healthy = ["[name]", "[amount]", "[year]", "[date]", "[address]", "[entityname]"];
                $yummy   = ["$debtors->name", "$debtors->amount", "$debtors->year", "$debtors->date", "$debtors->address", "$debtors->entityname"];
                $description = str_replace($healthy, $yummy, $des);

                $data = array(
                    'subject' => $request->subject,
                    'name' =>  $debtors->name,
                    'email' =>  $debtors->email,
                    'secondaryemail' =>  $debtors->secondaryemail ?? '',
                    'year' =>  $debtors->year,
                    'date' =>  $debtors->date,
                    'amount' =>  $debtors->amount,
                    'entityname' =>  $debtors->entityname,
                    'clientid' => $debtors->assignmentgenerate_id,
                    'debtorid' => $debtors->id,
                    'amounthidestatus' => $debtors->amounthidestatus,
                    'type' => $debtors->type,
                    'description' => $description,
                    'teammembermail' => $teammembermail ?? '',
                    'yes' => 1,
                    'no' => 0
                );

                try {
                    $mailarray = array_filter([$data['email'], $data['secondaryemail']]);
                    foreach ($mailarray as $email) {
                        Mail::send('emails.assignmentdebtorform', $data, function ($msg) use ($data, $request, $email) {
                            $msg->to($email);
                            $msg->subject($data['subject']);
                            if ($request->teammember_id) {
                                $msg->cc($data['teammembermail']);
                            }
                            // Add CC for additional emails from the input field
                            if ($request->ccmail) {
                                $assignEmails = explode(',', $request->ccmail);
                                foreach ($assignEmails as $email) {
                                    $msg->cc(trim($email));
                                }
                            }
                        });
                    }
                    // dd('hi');

                    DB::table('debtors')
                        ->where('assignmentgenerate_id', $debtors->assignmentgenerate_id)
                        ->where('id', $debtors->id)
                        ->update([
                            'mailstatus' => 1,
                            'status' => 3,
                            'autoreminddate' => now(),
                            'updated_at' => now()
                        ]);
                } catch (Exception $e) {
                    // Log the error or handle it as needed
                    // For example, you can log the exception to laravel.log
                    // or you can notify the administrator about the failure
                    \Log::error('Mail sending failed: ' . $e->getMessage());

                    // Update mailstatus to 0 in the database
                    DB::table('debtors')
                        ->where('assignmentgenerate_id', $debtors->assignmentgenerate_id)
                        ->where('id', $debtors->id)
                        ->update([
                            'mailstatus' => 0,
                            'updated_at' => now()
                        ]);
                }
            }
            $output = array('msg' => 'Email Sent Successfully');
            return back()->with('statusss', $output);
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }



Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentconfirmationController.php
replace otpskipconfirmation() function 


    public function otpskipconfirmation(Request $request)
    {
        try {
            // dd($request);
            if ($request->status == 1) {
                $users = DB::table('debtors')->where('id', $request->debitid)->first();
                if ($request->status == $users->status || $users->status == 0) {
                    return response()->json(['error' => 'You have already submitted'], 400);
                }

                DB::table('debtors')
                    ->where('assignmentgenerate_id', $request->assignmentgenerate_id)->where('id', $request->debitid)->update([
                        'status'         => $request->status,
                        'updated_at'         =>   date("Y-m-d")
                    ]);
                return response()->json(['success' => true]);
            } else {

                $users = DB::table('debtors')->where('id', $request->debitid1)->first();

                if ($request->status1 == $users->status || $users->status == 1) {
                    return back()->withErrors(['error' => 'You have allready Submitted'])->withInput();
                }

                $debtorconfirm = DB::table('debtorconfirmations')
                    ->where('assignmentgenerate_id', $request->assignmentgenerate_id1)->where('debtor_id', $request->debitid1)->first();

                $clientid = $request->assignmentgenerate_id1;
                $debtorid = $request->debitid1;
                $status = $request->status1;

                return view('backEnd.assignmentteamreject', compact('status', 'clientid', 'debtorid', 'debtorconfirm'));
            }
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }

Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentconfirmationController.php
replace confirmationConfirm() function 


    public function confirmationConfirm(Request $request)
    {
        // dd($request);
        $request->validate([
            'amount' => "required",
            // 'remark' => "required|string"
        ]);

        try {
            $debtorconfirm = DB::table('debtors')
                ->where('assignmentgenerate_id', $request->clientid)->where('id', $request->debtorid)->first();
            //     dd($debtorconfirm);
            if ($request->hasFile('file')) {

                $file = $request->file('file');
                $destinationPath = 'backEnd/image/confirmationfile';
                $name = $file->getClientOriginalName();
                $s = $file->move($destinationPath, $name);
                $data['file'] = $name;
            }
            DB::table('debtorconfirmations')->insert([
                'debtor_id'         => $request->debtorid,
                'assignmentgenerate_id' => $request->clientid,
                'remark'         => $request->remark,
                'amount'         => $request->amount,
                'file'         =>  $data['file'] ?? '',
                'name'         =>  $debtorconfirm->name,
                'created_at'         =>   date("Y-m-d"),
                'updated_at'         =>   date("Y-m-d")
            ]);

            $assignmentDatas = DB::table('debtors')
                ->where('assignmentgenerate_id', $request->clientid)->where('id', $request->debtorid)->update([
                    'status'         => $request->status,
                    'updated_at'         =>   date("Y-m-d")
                ]);
            // $output = array('msg' => 'Submit Successfully');
            // return back()->with('success', $output);
            // return view('backEnd.teamconfirm');
            return response()->json(['success' => true]);
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }

Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
add blade file 
resources\views\backEnd\assignmentconfirmationaccept.blade.php
resources\views\backEnd\assignmentconfirmationamounthide.blade.php
resources\views\backEnd\assignmentteamreject.blade.php

222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
add column in debtors table 
column name will be autoreminddate














