Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentmappingController.php
replace store() function 


    public function store(Request $request)
    {
        $request->validate([
            'client_id' => "required",
            'assignment_id' => "required",
            'teammember_id.*' => "required",
            'assignmentname' => "required",
            'type.*' => "required"
        ]);
        // Assignment budgeting start 
        $client_id = $request->input('client_id', null);
        $assignment_id = $request->input('assignment_id', null);
        $assignmentname = $request->input('assignmentname', null);

        if ($client_id != null && $assignment_id != null  && $assignmentname != null) {

            $data = $request->except(['_token', 'periodstart', 'periodend', 'roleassignment', 'esthours', 'stdcost', 'estcost', 'fees', 'leadpartner', 'otherpartner', 'teammember_id', 'type']);
            $data['created_by'] = auth()->user()->id;
            $clientcode = DB::table('clients')->where('id', $request->client_id)->first();
            $assignmentgenerateid = strtoupper(substr($clientcode->client_name, 0, 3));


            $assign = Assignmentbudgeting::latest()->get();

            if ($assign->isEmpty()) {
                $assignmentnumbers = '100001';
            } else {
                $assignmentgenerateall = DB::table('assignmentmappings')->pluck('assignmentgenerate_id')->toArray();

                function extractDigits($string)
                {
                    preg_match_all('/\d+/', $string, $matches);
                    return implode('', $matches[0]);
                }
                $assignmentNumbersDigits = array_map(function ($assignmentgenerate_id) {
                    return extractDigits($assignmentgenerate_id);
                }, $assignmentgenerateall);

                $minAssignmentNumber = 100001;
                $maxAssignmentNumber = 100512;

                $allPossibleAssignmentNumbers = range($minAssignmentNumber, $maxAssignmentNumber);
                $missingAssignmentNumbers = array_diff($allPossibleAssignmentNumbers, $assignmentNumbersDigits);
                unset($missingAssignmentNumbers[260]);


                // if (!empty($missingAssignmentNumbers)) {
                if (!empty($missingAssignmentNumbers)) {
                    $keys = array_keys($missingAssignmentNumbers);
                    $assignmentnumbers = $missingAssignmentNumbers[$keys[0]];
                } else {
                    // $assignmentnumb = Assignmentbudgeting::latest()->first()->assignmentnumber;
                    // dd($assignmentnumb);

                    $assignmentnumb = Assignmentbudgeting::max('assignmentnumber');

                    if ($assignmentnumb ==  null) {
                        $assignmentnumbers = '100001';
                    } else {
                        $assignmentnumbers = $assignmentnumb + 1;

                        $previouschck = DB::table('assignmentbudgetings')
                            ->where('assignmentnumber', $assignmentnumbers)
                            ->first();

                        if ($previouschck != null) {
                            $output = array('msg' => 'You already created assignment.');
                            return back()->with('success', $output);
                        }
                    }
                }
            }
            // dd($assignmentnumbers);
            $assignmentgenerate = $assignmentgenerateid . $assignmentnumbers;

            if (!empty($missingAssignmentNumbers)) {
                $previouschck = DB::table('assignmentmappings')
                    ->where('assignmentgenerate_id', $assignmentgenerate)
                    ->first();

                if ($previouschck != null) {
                    $output = array('msg' => 'You have already created assignment.');
                    return back()->with('success', $output);
                }
            }

            // Storage::disk('s3')->makeDirectory($assignmentgenerate);
            $data['assignmentgenerate_id'] = $assignmentgenerate;
            $data['assignmentnumber'] = $assignmentnumbers;



            DB::table('assignmentbudgetings')->insert([
                'client_id' => $data['client_id'],
                'assignment_id' => $data['assignment_id'],
                'assignmentname' => $data['assignmentname'],
                'duedate' => $data['duedate'],
                'created_by' => $data['created_by'],
                'assignmentgenerate_id' => $data['assignmentgenerate_id'],
                'assignmentnumber' => $data['assignmentnumber'],
                'created_at' => date('Y-m-d H:i:s'),
                'updated_at' => date('Y-m-d H:i:s')
            ]);
        }
        // Assignment budgeting end


        $assignment_name = Assignment::where('id', $request->assignment_id)->select('assignment_name')->pluck('assignment_name')->first();

        $request->except(['_token']);

        $id = DB::table('assignmentmappings')->insertGetId([
            'assignmentgenerate_id'         =>     $assignmentgenerate,
            'periodstart'         =>     $request->periodstart,
            'periodend'         =>     $request->periodend,
            'year'         =>     Carbon::parse($request->periodend)->year,
            'roleassignment'                =>      $request->roleassignment,
            'assignment_id'         =>     $request->assignment_id,
            'esthours'            =>       $request->esthours,
            'leadpartner'            =>       $request->leadpartner,
            'otherpartner'            =>       $request->otherpartner,
            'stdcost'            =>       $request->stdcost,
            'estcost'            =>       $request->estcost,
            'filecreationdate'                =>       date('y-m-d'),
            'modifieddate'              =>    date('y-m-d'),
            'auditcompletiondate'                =>       date('y-m-d'),
            'documentationdate'              =>    date('y-m-d'),
            'created_at'                =>       date('y-m-d'),
            'updated_at'              =>    date('y-m-d'),
        ]);

        if ($request->teammember_id != '0') {
            $count = count($request->teammember_id);

            // dd($count); die;
            for ($i = 0; $i < $count; $i++) {
                DB::table('assignmentteammappings')->insert([
                    'assignmentmapping_id'       =>     $id,
                    'type'       =>     $request->type[$i],
                    'teammember_id'       =>     $request->teammember_id[$i],
                    'created_at'                =>       date('y-m-d'),
                    'updated_at'              =>    date('y-m-d'),
                ]);
            }

            $clientname = Client::where('id', $request->client_id)->select('client_name', 'client_code')->first();
            $teamemailpartner = DB::table('teammembers')->where('id', $request->leadpartner)->select('emailid', 'team_member', 'staffcode')->first();
            $teamemailotherpartner = DB::table('teammembers')->where('id', $request->otherpartner)->select('emailid', 'team_member', 'staffcode')->first();

            $teamleader =    DB::table('assignmentteammappings')
                ->where('assignmentmapping_id', $id)
                ->leftjoin('teammembers', 'teammembers.id', 'assignmentteammappings.teammember_id')
                ->select('teammembers.team_member', 'teammembers.staffcode')
                ->get();

            $teamemail = DB::table('teammembers')->wherein('id', $request->teammember_id)->select('emailid')->get();
            // Mail for employee
            foreach ($teamemail as $teammember) {
                $data = array(
                    'assignmentid' =>  $assignmentgenerate,
                    'clientname' =>  $clientname->client_name,
                    'clientcode' =>  $clientname->client_code,
                    'assignmentname' =>  $request->assignmentname,
                    'assignment_name' =>  $assignment_name,
                    'emailid' =>  $teammember->emailid,
                    'otherpatner' =>  $teamemailotherpartner,
                    'assignmentpartner' =>  $teamemailpartner,
                    'teamleader' =>  $teamleader,

                );

                $this->sendAssignmentEmail($data);
            }

            // Mail for leadpartner
            if ($request->leadpartner !=  null) {
                $data = array(
                    'assignmentid' =>  $assignmentgenerate,
                    'clientname' =>  $clientname->client_name,
                    'clientcode' =>  $clientname->client_code,
                    'assignmentname' =>  $request->assignmentname,
                    'assignment_name' =>  $assignment_name,
                    'emailid' =>  $teamemailpartner->emailid,
                    'otherpatner' =>  $teamemailotherpartner,
                    'assignmentpartner' =>  $teamemailpartner,
                    'teamleader' =>  $teamleader,

                );

                $this->sendAssignmentEmail($data);
            }

            // Mail for otherpartner
            if ($request->otherpartner !=  null) {
                $data = array(
                    'assignmentid' =>  $assignmentgenerate,
                    'clientname' =>  $clientname->client_name,
                    'clientcode' =>  $clientname->client_code,
                    'assignmentname' =>  $request->assignmentname,
                    'assignment_name' =>  $assignment_name,
                    'emailid' =>  $teamemailotherpartner->emailid,
                    'otherpatner' =>  $teamemailotherpartner,
                    'assignmentpartner' =>  $teamemailpartner,
                    'teamleader' =>  $teamleader,

                );

                $this->sendAssignmentEmail($data);
            }
        }
        // please match hare in old code me null aa raha hai kiya 
        $actionName = class_basename($request->route()->getActionname());
        $pagename = substr($actionName, 0, strpos($actionName, "Controller"));
        $id = auth()->user()->teammember_id;
        DB::table('activitylogs')->insert([
            'user_id' => $id,
            'ip_address' => $request->ip(),
            'activitytitle' => $pagename,
            'description' => 'New Assignment Mapping Added' . ' ' . '( ' . $assignment_name . ' )',
            'created_at' => date('y-m-d'),
            'updated_at' => date('y-m-d')
        ]);
        // Assignment assignmentmappings end
        $output = array('msg' => "Created Successfully <strong>Client Name:</strong> $clientname->client_name <strong>Assignment:</strong> $assignment_name <strong>Assignment Name:</strong> $request->assignmentname <strong>Assignment Id:</strong> $assignmentgenerate ");
        return redirect('assignmentbudgeting')->with('success', $output);
    }



#########################################################################
assign latest assignmentnumber
 $maxAssignmentNumber = 100512;










