Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentconfirmationController.php
replace indexview() function 

    public function indexview($assignmentgenerate_id)
    {
        $teammember = Teammember::where('status', '1')->whereIn('role_id', [15, 14, 13])->with('title', 'role')->get();
        $clientList =  Assignmentbudgeting::where('assignmentgenerate_id', $assignmentgenerate_id)->first();

        $clientdebit =  Debtor::with('debtorconfirm', 'debtorcreatedby')->where('assignmentgenerate_id', $assignmentgenerate_id)->where('type', 1)->get();
        //dd($clientdebit);
        $clientcredit  =  Debtor::with('debtorconfirm', 'debtorcreatedby')->where('assignmentgenerate_id', $assignmentgenerate_id)->where('type', 2)->get();
        $clientbank =  Debtor::with('debtorconfirm', 'debtorcreatedby')->where('assignmentgenerate_id', $assignmentgenerate_id)->where('type', 3)->get();
        $templateData = Template::where('assignmentgenerate_id', null)
            ->orwhere('assignmentgenerate_id', $assignmentgenerate_id)->get();
        $grouped = $templateData->groupBy('type');
        $template = $grouped->map(function ($items, $key) {
            // Check if there are multiple items of the same type
            if ($items->count() > 1) {
                // Prefer items with a non-null 'assignmentgenerate_id' or take the most recently updated one
                $filteredItems = $items->filter(function ($item) {
                    return !is_null($item->assignmentgenerate_id);
                });

                // If no items with 'assignmentgenerate_id', revert to the latest by 'updated_at'
                return $filteredItems->count() > 0 ? $filteredItems : $items->sortByDesc('updated_at')->take(1);
            } else {
                return $items;
            }
        })->collapse();

        return view('backEnd.assignmentconfirmation.index', compact('template', 'clientdebit', 'teammember', 'clientcredit', 'clientbank', 'clientList', 'assignmentgenerate_id'));
    }



Controller 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentconfirmationController.php
add confirmationstatus() function 


    public function confirmationstatus(Request $request)
    {
        try {
            DB::table('assignmentbudgetings')
                ->where('assignmentgenerate_id', $request->assignmentid)->update([
                    'balanceconfirmationstatus' =>  $request->status,
                ]);
            $output = array('msg' => 'Updated Successfull');
            return back()->with('statusss', $output);
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }




222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentconfirmationController.php
replace mail() function 



    public function mail(Request $request)
    {
        $request->validate([
            'description' => "required",
        ]);
        try {

            $data = $request->except(['_token']);

            $confirmationIds = $request->input('confirmationid', []);

            // Filter out all null values from the array
            $nonNullConfirmationIds = array_filter($confirmationIds, function ($value) {
                return !is_null($value);
            });

            // Check if the filtered array is empty
            if (empty($nonNullConfirmationIds)) {
                $output = array('msg' => 'Select at least one check box to proceed.');
                return back()->with('statuss', $output);
            }
            //die;
            $debtor = DB::table('debtors')
                ->where('assignmentgenerate_id', $request->assignmentgenerate_id)->where('type', $request->type)
                ->where('mailstatus', 0)
                ->whereIn('id', explode(", ", $request->confirmationid[0]))->get();

            // dd($debtor);
            //    die;
            if ($debtor->isEmpty()) {
                $output = array('msg' => 'Prior to proceeding, it is necessary to first upload the Excel data');
                return back()->with('statuss', $output);
            }



            $draftcheck = DB::table('templates')->where('id', $request->templateid)->first()->draftstatus;
            // dd($draftcheck == 0);
            if ($draftcheck == 0) {
                $output = array('msg' => 'Mail draft is pending please save your draft');
                return back()->with('statuss', $output);
            }

            foreach ($debtor as $debtors) {
                // dd($debtors);
                if ($request->teammember_id) {
                    // cc mail
                    $teammembermail = Teammember::wherein('id', $request->teammember_id)->pluck('emailid')->toArray();
                }
                $des = $request->description;
                $healthy = ["[name]", "[amount]", "[year]", "[date]", "[address]", "[entityname]"];
                $yummy   = ["$debtors->name", "$debtors->amount", "$debtors->year", "$debtors->date", "$debtors->address", "$debtors->entityname"];
                $description = str_replace($healthy, $yummy, $des);

                $data = array(
                    'subject' => $request->subject,
                    'name' =>  $debtors->name,
                    'email' =>  $debtors->email,
                    'secondaryemail' =>  $debtors->secondaryemail ?? '',
                    'year' =>  $debtors->year,
                    'date' =>  $debtors->date,
                    'amount' =>  $debtors->amount,
                    'entityname' =>  $debtors->entityname,
                    'clientid' => $debtors->assignmentgenerate_id,
                    'debtorid' => $debtors->id,
                    'amounthidestatus' => $debtors->amounthidestatus,
                    'type' => $debtors->type,
                    'description' => $description,
                    'teammembermail' => $teammembermail ?? '',
                    'yes' => 1,
                    'no' => 0
                );

                try {
                    $mailarray = array_filter([$data['email'], $data['secondaryemail']]);
                    foreach ($mailarray as $email) {
                        Mail::send('emails.assignmentdebtorform', $data, function ($msg) use ($data, $request, $email) {
                            $msg->to($email);
                            $msg->subject($data['subject']);
                            if ($request->teammember_id) {
                                $msg->cc($data['teammembermail']);
                            }
                            // Add CC for additional emails from the input field
                            if ($request->ccmail) {
                                $assignEmails = explode(',', $request->ccmail);
                                foreach ($assignEmails as $email) {
                                    $msg->cc(trim($email));
                                }
                            }
                        });
                    }
                    // dd('hi');

                    DB::table('debtors')
                        ->where('assignmentgenerate_id', $debtors->assignmentgenerate_id)
                        ->where('id', $debtors->id)
                        ->update([
                            'mailstatus' => 1,
                            'status' => 3,
                            'updated_at' => now()
                        ]);
                } catch (Exception $e) {
                    // Log the error or handle it as needed
                    // For example, you can log the exception to laravel.log
                    // or you can notify the administrator about the failure
                    \Log::error('Mail sending failed: ' . $e->getMessage());

                    // Update mailstatus to 0 in the database
                    DB::table('debtors')
                        ->where('assignmentgenerate_id', $debtors->assignmentgenerate_id)
                        ->where('id', $debtors->id)
                        ->update([
                            'mailstatus' => 0,
                            'updated_at' => now()
                        ]);
                }
            }
            $output = array('msg' => 'Email Sent Successfully');
            return back()->with('statusss', $output);
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }


222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentconfirmationController.php
replace debtorExcel() function 


    public function debtorExcel(Request $request)
    {
        // Validate the uploaded file
        $request->validate([
            'file' => ['required', 'file', new ExcelColumnHeading(['unique', 'name', 'amount', 'primary email', 'secondary email', 'date', 'year', 'address', 'entity name', 'show or hide'])],
        ]);

        try {


            $file = $request->file('file');
            $data = Excel::toArray(new DebtorImport, $file);

            $skippedBecauseEmpty = false;
            $skippedBecauseInvalidEmail = false;
            $skippedBecauseDuplicate = false;
            $rowsInserted = 0; // Track the number of inserted rows

            foreach ($data[0] as $value) {
                // Check for empty required fields and skip the row if any are empty
                if (empty($value['name']) || empty($value['amount']) || empty($value['primary_email']) || empty($value['date']) || empty($value['year']) || empty($value['address'])) {
                    $skippedBecauseEmpty = true;
                    continue;
                }

                // Check for valid email format
                if (!filter_var($value['primary_email'], FILTER_VALIDATE_EMAIL)) {
                    $skippedBecauseInvalidEmail = true;
                    continue;
                }

                // Convert Excel serial date to Unix timestamp
                $unixTimestamp = ($value['date'] - 25569) * 86400;

                // Check database for existing debtor with the same email, name, amount, assignmentgenerate_id, and type
                $exists = Debtor::where('email', $value['primary_email'])
                    ->where('name', $value['name'])
                    ->where('amount', $value['amount'])
                    ->where('assignmentgenerate_id', $request->assignmentgenerate_id)
                    ->where('type', $request->type)
                    ->exists();
                if ($exists) {
                    $skippedBecauseDuplicate = true;
                    continue; // Skip this row as it's a duplicate
                }

                if (trim($value['show_or_hide']) == 'hide' || trim($value['show_or_hide']) == 'Hide') {
                    $status = 0;
                } else {
                    $status = 1;
                }

                // Prepare the database entry array
                $db = [
                    'unique' => $value['unique'],
                    'name' => $value['name'],
                    'amount' => $value['amount'],
                    'date' => date('d/m/Y', $unixTimestamp),
                    'year' => $value['year'],
                    'address' => $value['address'],
                    'email' => $value['primary_email'],
                    'entityname' => $value['entity_name'],
                    'secondaryemail' => $value['secondary_email'],
                    // 'showorhide' => $status,
                    'amounthidestatus' => $status,
                    'assignmentgenerate_id' => $request->assignmentgenerate_id,
                    'type' => $request->type,
                    'created_by' => auth()->user()->teammember_id,
                ];

                // Create the debtor record in the database
                Debtor::create($db);
                $rowsInserted++; // Increment the counter for successful inserts
            }

            // Construct success message based on skipped and inserted rows
            $message = $rowsInserted > 0 ? 'Excel file uploaded successfully! ' : '';
            if ($skippedBecauseEmpty || $skippedBecauseInvalidEmail || $skippedBecauseDuplicate) {
                $message .= 'Invalid or duplicate entries will not be uploaded.';
            }

            $output = ['msg' => $message];
            return back()->with('statusss', $output);
        } catch (Exception $e) {
            // Log and handle exceptions
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = ['msg' => $e->getMessage()];
            return back()->withErrors($output)->withInput();
        }
    }

222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentconfirmationController.php
replace destroy() function 


    public function destroy($id)
    {
        try {
            DB::table('debtors')->where('id', $id)->delete();
            $output = array('msg' => 'Deleted Successfully');
            return back()->with('statuss', $output);
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }

222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentconfirmationController.php
add entriesedit() function 


    public function entriesedit($id)
    {
        $entrieseditdata = DB::table('debtors')
            ->where('id', $id)
            ->first();
        return view('backEnd.assignmentconfirmation.editentries', compact('id', 'entrieseditdata'));
    }

222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentconfirmationController.php
add entriesupdated() function 

    public function entriesupdated(Request $request)
    {
        // dd($request);
        $request->validate([
            'name' => "required",
            'amount' => "required",
            'year' => "required",
            'address' => "required",
            'email' => "required|email",
            'date' => "required"
        ]);
        try {
            DB::table('debtors')
                ->where('id', $request->id)->update([
                    'unique' =>  $request->unique,
                    'name' =>  $request->name,
                    'entityname' =>  $request->entityname,
                    'amount' =>  $request->amount,
                    'amounthidestatus' =>  $request->showorhide,
                    'email' =>  $request->email,
                    'secondaryemail' =>  $request->secondaryemail,
                    'year' =>  $request->year,
                    'date' =>  $request->date,
                    'address' =>  $request->address,
                    'updated_at' => date('Y-m-d H:i:s')
                ]);
            $output = array('msg' => 'Updated Successfull');
            // return back()->with('success', $output);
            return redirect('/assignmentconfirmation/' . $request->assignmentgenerate_id)->with('statusss', $output);
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }


222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentconfirmationController.php
replace confirmationAccept() function 


    public function confirmationAccept(Request $request)
    {
        $clientid = $request->clientid;
        $debtorid = $request->debtorid;
        $yes = $request->yes;
        $no = $request->no;
        $templatetype = $request->type;
        $template = DB::table('templates')->where('type', $templatetype)->first();

        $debtors = DB::table('debtors')
            ->where('id', $debtorid)->where('type', $request->type)
            ->first();

        $des = $template->description;
        $healthy = ["[name]", "[amount]", "[year]", "[date]", "[address]", "[entityname]"];
        $yummy   = ["$debtors->name", "$debtors->amount", "$debtors->year", "$debtors->date", "$debtors->address", "$debtors->entityname"];
        $description = str_replace($healthy, $yummy, $des);

        $confirmation = DB::table('debtors')->where('id', $debtorid)->first();
        if ($confirmation->amounthidestatus == 1) {
            return view('backEnd.assignmentconfirmationaccept', compact('clientid', 'debtorid', 'yes', 'no', 'debtors', 'description'));
        } else {
            return view('backEnd.assignmentconfirmationamounthide', compact('clientid', 'debtorid', 'yes', 'no', 'debtors', 'description'));
        }
    }


222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentconfirmationController.php
add otpskipconfirmation() function 


    public function otpskipconfirmation(Request $request)
    {
        try {
            if ($request->status == 1) {
                $users = DB::table('debtors')->where('id', $request->debitid)->first();
                if ($request->status == $users->status || $users->status == 0) {
                    return back()->withErrors(['error' => 'You have allready Submitted'])->withInput();
                }

                DB::table('debtors')
                    ->where('assignmentgenerate_id', $request->assignmentgenerate_id)->where('id', $request->debitid)->update([
                        'status'         => $request->status,
                        'updated_at'         =>   date("Y-m-d")
                    ]);
                return view('backEnd.teamconfirm');
            } else {

                $users = DB::table('debtors')->where('id', $request->debitid1)->first();

                if ($request->status1 == $users->status || $users->status == 1) {
                    return back()->withErrors(['error' => 'You have allready Submitted'])->withInput();
                }

                $debtorconfirm = DB::table('debtorconfirmations')
                    ->where('assignmentgenerate_id', $request->assignmentgenerate_id1)->where('debtor_id', $request->debitid1)->first();

                $clientid = $request->assignmentgenerate_id1;
                $debtorid = $request->debitid1;
                $status = $request->status1;
                return view('backEnd.assignmentteamreject', compact('status', 'clientid', 'debtorid', 'debtorconfirm'));
            }
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }


222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentController.php
replace assignmentotpstore() function 



  public function assignmentotpstore(Request $request)
  {
    $request->validate([
      'otp' => 'required'
    ]);

    try {
      $data = $request->except(['_token']);

      $otp = DB::table('assignmentbudgetings')
        ->where('otp', $request->otp)
        ->where('assignmentgenerate_id', $request->assignmentgenerateid)->first();
      // dd($otp);
      if ($otp) {
        if ($otp->balanceconfirmationstatus == 1) {
          $output = array('msg' => 'Balance confirmation is currently open, so you cannot close the assignment');
          return back()->with('statuss', $output);
        }

        DB::table('assignmentbudgetings')
          ->where('assignmentgenerate_id', $request->assignmentgenerateid)->update([
            'status' => '0',
            'closedby'  => auth()->user()->teammember_id,
            'otpverifydate' => date('Y-m-d H:i:s')
          ]);
        $output = array('msg' => 'assignment closed successfully');
        return back()->with('success', $output);
      } else {
        $output = array('msg' => 'otp did not match! Please enter valid otp');
        return back()->with('success', $output);
      }
    } catch (Exception $e) {
      DB::rollBack();
      Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
      report($e);
      $output = array('msg' => $e->getMessage());
      return back()->withErrors($output)->withInput();
    }
  }




222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
app\Http\Controllers\AssignmentController.php
replace otpapstore() function 

    public function otpapstore(Request $request)
    {
        // dd($request);
        try {
            if ($request->status == 1) {
                $otp1 = $request->otp1;
                $otp2 = $request->otp2;
                $otp3 = $request->otp3;
                $otp4 = $request->otp4;
                $otp5 = $request->otp5;
                $otp6 = $request->otp6;

                // Concatenate the OTPs into a single variable
                $otp = $otp1 . $otp2 . $otp3 . $otp4 . $otp5 . $otp6;

                //   $otp = $request->otp;
                $users = DB::table('debtors')->where('id', $request->debitid)->first();

                if ($request->status == $users->status || $users->status == 0) {
                    return back()->withErrors(['error' => 'You have allready Submitted'])->withInput();
                }

                if ($otp == $users->otp) {
                    DB::table('debtors')
                        ->where('assignmentgenerate_id', $request->assignmentgenerate_id)->where('id', $request->debitid)->update([
                            'status'         => $request->status,
                            'otpverifydate' => date('Y-m-d H:i:s'),
                            'updated_at'         =>   date("Y-m-d")
                        ]);

                    return view('backEnd.teamconfirm');
                } else {

                    return redirect()->back()->with('success_message', 'OTP did not match!.');
                }
            } else {
                $otp1 = $request->otp11;
                $otp2 = $request->otp12;
                $otp3 = $request->otp13;
                $otp4 = $request->otp14;
                $otp5 = $request->otp15;
                $otp6 = $request->otp16;


                // Concatenate the OTPs into a single variable
                $otp = $otp1 . $otp2 . $otp3 . $otp4 . $otp5 . $otp6;

                //$otp = $request->otp1;
                $users = DB::table('debtors')->where('id', $request->debitid1)->first();

                if ($request->status1 == $users->status || $users->status == 1) {
                    return back()->withErrors(['error' => 'You have allready Submitted'])->withInput();
                }

                if ($otp == $users->otp) {

                    $debtorconfirm = DB::table('debtorconfirmations')
                        ->where('assignmentgenerate_id', $request->assignmentgenerate_id1)->where('debtor_id', $request->debitid1)->first();

                    $clientid = $request->assignmentgenerate_id1;
                    $debtorid = $request->debitid1;
                    $status = $request->status1;

                    return view('backEnd.assignmentteamreject', compact('status', 'clientid', 'debtorid', 'debtorconfirm'));
                } else {

                    return redirect()->back()->with('success_message', 'OTP did not match!.');
                }
            }
        } catch (Exception $e) {
            DB::rollBack();
            Log::emergency("File:" . $e->getFile() . "Line:" . $e->getLine() . "Message:" . $e->getMessage());
            report($e);
            $output = array('msg' => $e->getMessage());
            return back()->withErrors($output)->withInput();
        }
    }


222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
resources\views\emails\assignmentdebtorform.blade.php
find text /confirmationAccept?
replace only ancor tag

 <a
        href="{{ url('/confirmationAccept?' . 'clientid=' . $clientid . '&&' . 'debtorid=' . $debtorid . '&&' . 'yes=' . $yes . '&&' . 'no=' . $no . '&&' . 'type=' . $type) }}"
        style=" background-color: #00ff6a;">here</a>





Blade 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
Add this blade file
resources\views\backEnd\assignmentconfirmation\index.blade.php
resources\views\backEnd\assignmentconfirmation\editentries.blade.php
resources\views\backEnd\assignmentconfirmationaccept.blade.php
resources\views\backEnd\assignmentconfirmationamounthide.blade.php

################################################################################################################################
Route 222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
Route::get('/confirmationstatus', [AssignmentconfirmationController::class, 'confirmationstatus']);
Route::get('/entries/destroy/{id}', [AssignmentconfirmationController::class, 'destroy']);
Route::get('/entriesedit/{id}',  [AssignmentconfirmationController::class, 'entriesedit']);
Route::post('/entriesupdated',   [AssignmentconfirmationController::class, 'entriesupdated']);
Route::get('/otpskipconfirmation', [AssignmentconfirmationController::class, 'otpskipconfirmation']);



222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222
table modify

1
assignmentbudgetings table 
balanceconfirmationstatus column 

2
templates table me 
find title bank confirmation then click edit and description me 
replace [test] to [name]
















